//==================================================================================================
// 
// Generated Map Script
// 
// Name:   For Aiur!
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_PROTOSS_S01 = 2;
const int gv_pLAYER_03_ZERG_BOTTOM = 3;
const int gv_pLAYER_04_PROTOSS_RESCUE = 4;
const int gv_pLAYER_05_ZERG_TOP = 5;
const int gv_pLAYER_06_PROTOSS_ALLY = 6;
const int gv_pLAYER_07_ZERG_CINE = 7;
const int gv_pLAYER_08_ZERG_AMBIENCE = 8;
const int gv_objectiveActivateWarpConduitsMax = 3;
const int gv_objectiveDestroyZergHiveMax = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyPlayerGroup;
playergroup gv_alliedPlayerGroup;
string gv_mapMusicTrack;
bool gv_performancePausingDisabled;
bool gv_playerUnitsOrdered;
bool gv_playerUnitsSelected;
unit gv_conduit01;
unit gv_conduit02;
unit gv_conduit03;
int gv_conduit01_Ping;
int gv_conduit02_Ping;
int gv_conduit03_Ping;
unitgroup gv_mothershipSurvivorGroup;
unitgroup gv_mothershipZergGroup;
unit gv_nydusWorm01;
unit gv_nydusWorm02;
unit gv_nydusWorm03;
int gv_hybridKilled;
unitgroup gv_smartZerglings;
unitgroup gv_smartHydras;
unitgroup gv_smartMutas;
unitgroup gv_nydusZerg;
int gv_hive01_Ping;
int gv_hive02_Ping;
int gv_hive03_Ping;
int gv_hive04_Ping;
unitgroup gv_conflictGroupProtossWest;
unitgroup gv_conflictGroupZergWest;
unitgroup gv_conflictGroupProtossEast;
unitgroup gv_conflictGroupZergEast;
int gv_zergUnitsKilled;
int gv_colossusKillCount;
bool gv_colossusKillAchievement;
fixed gv_startingCreepCoverage;
int gv_objectiveActivateWarpConduits;
int gv_objectiveActivateWarpConduitsCount;
int gv_objectiveKillHybrid;
int gv_objectiveDestroyZergHives;
int gv_objectiveDestroyZergHiveCount;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_introMothership;
unitgroup gv_introProtossInitialUnits;
unitgroup gv_introProtossGoldenArmada;
unitgroup gv_introProtossMainArmy;
bool gv_introMusicCompleted;

void InitGlobals () {
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_alliedPlayerGroup = PlayerGroupEmpty();
    gv_conduit01_Ping = c_invalidPingId;
    gv_conduit02_Ping = c_invalidPingId;
    gv_conduit03_Ping = c_invalidPingId;
    gv_mothershipSurvivorGroup = UnitGroupEmpty();
    gv_mothershipZergGroup = UnitGroupEmpty();
    gv_smartZerglings = UnitGroupEmpty();
    gv_smartHydras = UnitGroupEmpty();
    gv_smartMutas = UnitGroupEmpty();
    gv_nydusZerg = UnitGroupEmpty();
    gv_hive01_Ping = c_invalidPingId;
    gv_hive02_Ping = c_invalidPingId;
    gv_hive03_Ping = c_invalidPingId;
    gv_hive04_Ping = c_invalidPingId;
    gv_conflictGroupProtossWest = UnitGroupEmpty();
    gv_conflictGroupZergWest = UnitGroupEmpty();
    gv_conflictGroupProtossEast = UnitGroupEmpty();
    gv_conflictGroupZergEast = UnitGroupEmpty();
    gv_objectiveActivateWarpConduits = c_invalidObjectiveId;
    gv_objectiveKillHybrid = c_invalidObjectiveId;
    gv_objectiveDestroyZergHives = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introProtossInitialUnits = UnitGroupEmpty();
    gv_introProtossGoldenArmada = UnitGroupEmpty();
    gv_introProtossMainArmy = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_cHOSEN_UNIT);
void gf_WarpInProtossReinforcements (point lp_point, int lp_count, string lp_unitType);
bool gf_UnitIsArmyUnit (unit lp_unit);
void gf_ClassicQueenAI (unit lp_queen);
void gf_SpawnNydusUnitsandAttackPlayer (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay);
void gf_WarpInHybridReaver (point lp_point);
void gf_SetUpUnitFlyBy (int lp_count, string lp_unitType, int lp_player, fixed lp_speed, point lp_sourcePoint, point lp_targetPoint);
int gf_CreepAreaOnMap (fixed lp_stepSize);
fixed gf_CreepPercent ();
void gf_VictorySetUpUnitWarpInFlyBy (int lp_count, string lp_unitType, int lp_player, fixed lp_speed, point lp_sourcePoint, point lp_targetPoint);
void gf_VictorySpeedUpCarrier (unit lp_carrierUnit, fixed lp_maxSpeed);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_UIPulseAudio;
trigger gt_PlayerUnitCreated;
trigger gt_PlayerRescuesUnit;
trigger gt_PerformancePauseAllAreas;
trigger gt_PerformanceUnpauseArea1;
trigger gt_PerformanceUnpauseArea2;
trigger gt_PerformanceUnpauseArea3;
trigger gt_PerformanceUnpauseArea4;
trigger gt_PerformanceUnpauseArea5;
trigger gt_PerformanceUnpauseArea6;
trigger gt_PerformanceUnpauseAllCheats;
trigger gt_PerformanceUnpauseSideBattles;
trigger gt_PerformancePauseSideBattleWest;
trigger gt_PerformancePauseSideBattleEast;
trigger gt_StartGameQ;
trigger gt_StartAI;
trigger gt_PlayerIdleAtStart;
trigger gt_PlayerSelectsUnits;
trigger gt_PlayerUsesUnits;
trigger gt_UnshareVisionWithMothershipForces;
trigger gt_ColossusIntro;
trigger gt_ColossusIntroTransmissionQ;
trigger gt_TipReadyQ;
trigger gt_ProtossReinforcementsRescue;
trigger gt_ProtossReinforcementsF2Helper;
trigger gt_Conduit01ConstrictionTakesDamage;
trigger gt_ActivateWarpConduit01Q;
trigger gt_Conduit01Reinforcements;
trigger gt_Conduit02ConstrictionTakesDamage;
trigger gt_ActivateWarpConduit02Q;
trigger gt_Conduit02Reinforcements;
trigger gt_ApproachWarpConduit03Q;
trigger gt_ReachWarpConduit03;
trigger gt_RevealMothershipSurvivorsProximity;
trigger gt_SurvivorsRescuedQ;
trigger gt_InitZerg1;
trigger gt_InitZerg2;
trigger gt_UnitEntersZergRush1;
trigger gt_UnitEntersZergRush2Brutal;
trigger gt_NydusWormWave01;
trigger gt_SpawnNydusWorm01;
trigger gt_ZergAreTooSmartQ;
trigger gt_ActivateSecondWorms;
trigger gt_NydusWormWave02;
trigger gt_NydusWormWave03;
trigger gt_SpawnNydusWorm02;
trigger gt_SpawnNydusWorm03;
trigger gt_NydusZergUnitsAI;
trigger gt_WarpInHybrid1Q;
trigger gt_HybridShockwave1;
trigger gt_WarpInHybrid2Q;
trigger gt_HybridShockwave2;
trigger gt_HybridKilled;
trigger gt_IntroHive01Q;
trigger gt_Hive01Attacked;
trigger gt_Hive01Dies;
trigger gt_Hive01PlayerReinforcements;
trigger gt_BonusObjectiveIntroQ;
trigger gt_Hive02LocatedQ;
trigger gt_Hive02Attacked;
trigger gt_Hive02Dies;
trigger gt_Hive02PlayerReinforcements;
trigger gt_Hive03ChargeQ;
trigger gt_Hive03Attacked;
trigger gt_Hive03Dies;
trigger gt_Hive03Reinforcements;
trigger gt_Hive04Attacked;
trigger gt_Hive04Dies;
trigger gt_Hive04Reinforcements;
trigger gt_HiveDestroyedQ;
trigger gt_ActivateFlyOver01;
trigger gt_ActivateFlyOver02;
trigger gt_ActivateFlyOver03;
trigger gt_ActivateFlyOver04;
trigger gt_CeremonialBattleWest;
trigger gt_CeremonialBattleEast;
trigger gt_ProtossP06WarpIn;
trigger gt_NydusTwitch;
trigger gt_MothershipFlyby;
trigger gt_BroodLordCrash1;
trigger gt_BroodLordCrash2;
trigger gt_DefeatAllUnitsDead;
trigger gt_VictoryMainObjectivesCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementColossusKills;
trigger gt_AchievementOblivionAwaits;
trigger gt_ObjectiveActivateWarpConduitsCreate;
trigger gt_ObjectiveActivateWarpConduitsComplete;
trigger gt_ObjectiveActivateWarpConduitsUpdate;
trigger gt_ObjectiveKillHybridCreate;
trigger gt_ObjectiveKillHybridComplete;
trigger gt_ObjectiveDestroyZergHiveCreate;
trigger gt_ObjectiveDestroyZergHiveComplete;
trigger gt_ObjectiveDestroyZergHiveUpdate;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroProtoss1;
trigger gt_IntroProtoss2;
trigger gt_IntroWarpIn;
trigger gt_IntroMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryWarpIns;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_cHOSEN_UNIT) {
    string auto407C2FCA_val;

    // Implementation
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        return ;
    }
    else {
    }
    auto407C2FCA_val = UnitGetType(lp_cHOSEN_UNIT);
    if (auto407C2FCA_val == "Zealot") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto407C2FCA_val == "Stalker") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto407C2FCA_val == "Dragoon") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto407C2FCA_val == "Immortal") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto407C2FCA_val == "Colossus") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto407C2FCA_val == "Mothership") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto407C2FCA_val == "PhotonCannon") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else if (auto407C2FCA_val == "WarpPrismPhasing") {
        UnitSetInfoTip(lp_cHOSEN_UNIT, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

trigger auto_gf_WarpInProtossReinforcements_Trigger = null;
point auto_gf_WarpInProtossReinforcements_lp_point;
int auto_gf_WarpInProtossReinforcements_lp_count;
string auto_gf_WarpInProtossReinforcements_lp_unitType;

void gf_WarpInProtossReinforcements (point lp_point, int lp_count, string lp_unitType) {
    auto_gf_WarpInProtossReinforcements_lp_point = lp_point;
    auto_gf_WarpInProtossReinforcements_lp_count = lp_count;
    auto_gf_WarpInProtossReinforcements_lp_unitType = lp_unitType;

    if (auto_gf_WarpInProtossReinforcements_Trigger == null) {
        auto_gf_WarpInProtossReinforcements_Trigger = TriggerCreate("auto_gf_WarpInProtossReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInProtossReinforcements_Trigger, false, false);
}

bool auto_gf_WarpInProtossReinforcements_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_WarpInProtossReinforcements_lp_point;
    int lp_count = auto_gf_WarpInProtossReinforcements_lp_count;
    string lp_unitType = auto_gf_WarpInProtossReinforcements_lp_unitType;

    string auto29F5A14A_val;
    int auto884C719A_n;
    int auto884C719A_i;

    // Variable Declarations
    abilcmd lv_warpInCommand;
    unit lv_invisiblePylon;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_02_PROTOSS_S01, lp_point);
    lv_invisiblePylon = UnitLastCreated();
    auto29F5A14A_val = lp_unitType;
    if (auto29F5A14A_val == "Zealot") {
        lv_warpInCommand = AbilityCommand("SuperWarpGateTrain", 0);
    }
    else if (auto29F5A14A_val == "Stalker") {
        lv_warpInCommand = AbilityCommand("SuperWarpGateTrain", 1);
    }
    else if (auto29F5A14A_val == "Immortal") {
        lv_warpInCommand = AbilityCommand("SuperWarpGateTrain", 2);
    }
    else if (auto29F5A14A_val == "HighTemplar") {
        lv_warpInCommand = AbilityCommand("SuperWarpGateTrain", 3);
    }
    else if (auto29F5A14A_val == "Colossus") {
        lv_warpInCommand = AbilityCommand("SuperWarpGateTrain", 15);
    }
    else {
        lv_warpInCommand = AbilityCommand("SuperWarpGateTrain", 0);
    }
    auto884C719A_n = lp_count;
    for (auto884C719A_i = 1; auto884C719A_i <= auto884C719A_n; auto884C719A_i += 1) {
        UnitIssueOrder(UnitFromId(252), OrderTargetingPoint(lv_warpInCommand, lp_point), c_orderQueueAddToEnd);
        Wait(0.0625, c_timeGame);
    }
    Wait(5.1, c_timeGame);
    UnitRemove(lv_invisiblePylon);
    return true;
}

bool gf_UnitIsArmyUnit (unit lp_unit) {
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), (("FlagArray[" + "ArmySelect" + "]")), c_playerAny) == "1")) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_ClassicQueenAI_Trigger = null;
unit auto_gf_ClassicQueenAI_lp_queen;

void gf_ClassicQueenAI (unit lp_queen) {
    auto_gf_ClassicQueenAI_lp_queen = lp_queen;

    if (auto_gf_ClassicQueenAI_Trigger == null) {
        auto_gf_ClassicQueenAI_Trigger = TriggerCreate("auto_gf_ClassicQueenAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClassicQueenAI_Trigger, false, false);
}

bool auto_gf_ClassicQueenAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_queen = auto_gf_ClassicQueenAI_lp_queen;

    // Variable Declarations
    unitgroup lv_validEnemies;
    timer lv_cooldown;

    // Variable Initialization
    lv_validEnemies = UnitGroupEmpty();
    lv_cooldown = TimerCreate();

    // Implementation
    AISetUnitScriptControlled(lp_queen, true);
    UnitIssueOrder(lp_queen, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPropertyFixed(lp_queen, c_unitPropEnergyPercent, 100.0);
    while (true) {
        if ((UnitIsAlive(lp_queen) == false)) {
            break;
        }
        else {
        }
        lv_validEnemies = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_queen), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_validEnemies, c_unitCountAlive) >= 1) && (TimerGetRemaining(lv_cooldown) == 0.0)) {
            UnitIssueOrder(lp_queen, OrderTargetingPoint(AbilityCommand("QueenMPEnsnare", 0), UnitGetPosition(UnitGroupRandomUnit(lv_validEnemies, c_unitCountAlive))), c_orderQueueReplace);
            TimerStart(lv_cooldown, 14.0, false, c_timeAI);
        }
        else {
        }
        Wait(1.0, c_timeAI);
        UnitIssueOrder(lp_queen, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        lv_validEnemies = UnitGroupEmpty();
    }
    return true;
}

void gf_SpawnNydusUnitsandAttackPlayer (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay) {
    // Implementation
    if ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_nydus) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydus), c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_nydus, 0.0, 100.0, 0.0);
        UnitCreate(lp_qty, lp_unitType, 0, lp_player, UnitGetPosition(lp_nydus), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_nydusZerg, UnitLastCreatedGroup());
        Wait(lp_delay, c_timeAI);
    }
    else {
    }
}

trigger auto_gf_WarpInHybridReaver_Trigger = null;
point auto_gf_WarpInHybridReaver_lp_point;

void gf_WarpInHybridReaver (point lp_point) {
    auto_gf_WarpInHybridReaver_lp_point = lp_point;

    if (auto_gf_WarpInHybridReaver_Trigger == null) {
        auto_gf_WarpInHybridReaver_Trigger = TriggerCreate("auto_gf_WarpInHybridReaver_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInHybridReaver_Trigger, false, false);
}

bool auto_gf_WarpInHybridReaver_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_WarpInHybridReaver_lp_point;

    // Variable Declarations
    unit lv_hybrid;
    point lv_hybridPoint;
    actor lv_warpEffect;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", 0, gv_pLAYER_05_ZERG_TOP, lp_point);
    lv_hybrid = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_hybrid, false);
    libNtve_gf_PauseUnit(lv_hybrid, true);
    Wait(0.0625, c_timeGame);
    lv_hybridPoint = UnitGetPosition(lv_hybrid);
    PointSetFacing(lv_hybridPoint, UnitGetFacing(lv_hybrid));
    Wait(0.0625, c_timeGame);
    libNtve_gf_CreateModelWithPointFacing("Aiur_City_HybridWarp", lv_hybridPoint);
    lv_warpEffect = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(lv_warpEffect, c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayAtPointForPlayer(SoundLink("Hybrid_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), lv_hybridPoint, 0.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_hybrid, true);
    libNtve_gf_PauseUnit(lv_hybrid, false);
    UnitSetInfoText(lv_hybrid, StringExternal("Param/Value/5FD05402"), StringExternal("Param/Value/8C90AFB4"), StringToText(""));
    SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), lv_hybridPoint, 0.0, 100.0, 0.0);
    Wait(4.667, c_timeGame);
    libNtve_gf_KillModel(lv_warpEffect);
    return true;
}

trigger auto_gf_SetUpUnitFlyBy_Trigger = null;
int auto_gf_SetUpUnitFlyBy_lp_count;
string auto_gf_SetUpUnitFlyBy_lp_unitType;
int auto_gf_SetUpUnitFlyBy_lp_player;
fixed auto_gf_SetUpUnitFlyBy_lp_speed;
point auto_gf_SetUpUnitFlyBy_lp_sourcePoint;
point auto_gf_SetUpUnitFlyBy_lp_targetPoint;

void gf_SetUpUnitFlyBy (int lp_count, string lp_unitType, int lp_player, fixed lp_speed, point lp_sourcePoint, point lp_targetPoint) {
    auto_gf_SetUpUnitFlyBy_lp_count = lp_count;
    auto_gf_SetUpUnitFlyBy_lp_unitType = lp_unitType;
    auto_gf_SetUpUnitFlyBy_lp_player = lp_player;
    auto_gf_SetUpUnitFlyBy_lp_speed = lp_speed;
    auto_gf_SetUpUnitFlyBy_lp_sourcePoint = lp_sourcePoint;
    auto_gf_SetUpUnitFlyBy_lp_targetPoint = lp_targetPoint;

    if (auto_gf_SetUpUnitFlyBy_Trigger == null) {
        auto_gf_SetUpUnitFlyBy_Trigger = TriggerCreate("auto_gf_SetUpUnitFlyBy_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetUpUnitFlyBy_Trigger, false, false);
}

bool auto_gf_SetUpUnitFlyBy_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_SetUpUnitFlyBy_lp_count;
    string lp_unitType = auto_gf_SetUpUnitFlyBy_lp_unitType;
    int lp_player = auto_gf_SetUpUnitFlyBy_lp_player;
    fixed lp_speed = auto_gf_SetUpUnitFlyBy_lp_speed;
    point lp_sourcePoint = auto_gf_SetUpUnitFlyBy_lp_sourcePoint;
    point lp_targetPoint = auto_gf_SetUpUnitFlyBy_lp_targetPoint;

    // Variable Declarations
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    UnitCreate(lp_count, lp_unitType, 0, lp_player, lp_sourcePoint, AngleBetweenPoints(lp_sourcePoint, lp_targetPoint));
    UnitGroupAddUnitGroup(lv_unitGroup, UnitLastCreatedGroup());
    UnitGroupLoopBegin(lv_unitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, lp_speed);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateCursorable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
    }
    UnitGroupLoopEnd();
    while ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(lv_unitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lp_targetPoint) <= 3.0)) {
                UnitGroupRemove(lv_unitGroup, UnitGroupLoopCurrent());
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UnitGroupIssueOrder(lv_unitGroup, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
    }
    return true;
}

int gf_CreepAreaOnMap (fixed lp_stepSize) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_endx;
    fixed lv_endy;
    int lv_acres;

    // Variable Initialization
    lv_x = PointGetX(RegionGetBoundsMin(RegionPlayableMap()));
    lv_y = PointGetY(RegionGetBoundsMin(RegionPlayableMap()));
    lv_endx = PointGetX(RegionGetBoundsMax(RegionPlayableMap()));
    lv_endy = PointGetY(RegionGetBoundsMax(RegionPlayableMap()));

    // Implementation
    while ((lv_x <= lv_endx)) {
        lv_y = PointGetY(RegionGetBoundsMin(RegionPlayableMap()));
        while ((lv_y <= lv_endy)) {
            if ((CreepIsPresent(Point(lv_x, lv_y)) == true) && (RegionContainsPoint(RegionFromId(59), Point(lv_x, lv_y)) == false) && (RegionContainsPoint(RegionFromId(60), Point(lv_x, lv_y)) == false)) {
                lv_acres += 1;
            }
            else {
            }
            lv_y += lp_stepSize;
        }
        lv_x += lp_stepSize;
    }
    return lv_acres;
}

fixed gf_CreepPercent () {
    // Variable Declarations
    fixed lv_mapArea;
    int lv_creepArea;

    // Variable Initialization

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        CreepModify(RegionGetCenter(RegionEntireMap()), 255.0, false, false);
        UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, true, false);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 12.0, true, false);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    lv_creepArea = gf_CreepAreaOnMap(1.0);
    lv_mapArea = (libNtve_gf_WidthOfRegion(RegionPlayableMap()) * libNtve_gf_HeightOfRegion(RegionPlayableMap()));
    return ((lv_creepArea / lv_mapArea) * 100);
}

trigger auto_gf_VictorySetUpUnitWarpInFlyBy_Trigger = null;
int auto_gf_VictorySetUpUnitWarpInFlyBy_lp_count;
string auto_gf_VictorySetUpUnitWarpInFlyBy_lp_unitType;
int auto_gf_VictorySetUpUnitWarpInFlyBy_lp_player;
fixed auto_gf_VictorySetUpUnitWarpInFlyBy_lp_speed;
point auto_gf_VictorySetUpUnitWarpInFlyBy_lp_sourcePoint;
point auto_gf_VictorySetUpUnitWarpInFlyBy_lp_targetPoint;

void gf_VictorySetUpUnitWarpInFlyBy (int lp_count, string lp_unitType, int lp_player, fixed lp_speed, point lp_sourcePoint, point lp_targetPoint) {
    auto_gf_VictorySetUpUnitWarpInFlyBy_lp_count = lp_count;
    auto_gf_VictorySetUpUnitWarpInFlyBy_lp_unitType = lp_unitType;
    auto_gf_VictorySetUpUnitWarpInFlyBy_lp_player = lp_player;
    auto_gf_VictorySetUpUnitWarpInFlyBy_lp_speed = lp_speed;
    auto_gf_VictorySetUpUnitWarpInFlyBy_lp_sourcePoint = lp_sourcePoint;
    auto_gf_VictorySetUpUnitWarpInFlyBy_lp_targetPoint = lp_targetPoint;

    if (auto_gf_VictorySetUpUnitWarpInFlyBy_Trigger == null) {
        auto_gf_VictorySetUpUnitWarpInFlyBy_Trigger = TriggerCreate("auto_gf_VictorySetUpUnitWarpInFlyBy_TriggerFunc");
    }

    TriggerExecute(auto_gf_VictorySetUpUnitWarpInFlyBy_Trigger, false, false);
}

bool auto_gf_VictorySetUpUnitWarpInFlyBy_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_VictorySetUpUnitWarpInFlyBy_lp_count;
    string lp_unitType = auto_gf_VictorySetUpUnitWarpInFlyBy_lp_unitType;
    int lp_player = auto_gf_VictorySetUpUnitWarpInFlyBy_lp_player;
    fixed lp_speed = auto_gf_VictorySetUpUnitWarpInFlyBy_lp_speed;
    point lp_sourcePoint = auto_gf_VictorySetUpUnitWarpInFlyBy_lp_sourcePoint;
    point lp_targetPoint = auto_gf_VictorySetUpUnitWarpInFlyBy_lp_targetPoint;

    // Variable Declarations
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    UnitCreate(lp_count, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lp_sourcePoint, AngleBetweenPoints(lp_sourcePoint, lp_targetPoint));
    UnitGroupAddUnitGroup(lv_unitGroup, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupLoopBegin(lv_unitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lp_unitType == "CarrierAiur")) {
            gf_VictorySpeedUpCarrier(UnitGroupLoopCurrent(), lp_speed);
        }
        else {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, lp_speed);
        }
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateCursorable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
    }
    UnitGroupLoopEnd();
    while ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(lv_unitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lp_targetPoint) <= 7.0)) {
                UnitGroupRemove(lv_unitGroup, UnitGroupLoopCurrent());
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "PortalDeath", UnitGroupLoopCurrent(), 1);
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UnitGroupIssueOrder(lv_unitGroup, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_VictorySpeedUpCarrier_Trigger = null;
unit auto_gf_VictorySpeedUpCarrier_lp_carrierUnit;
fixed auto_gf_VictorySpeedUpCarrier_lp_maxSpeed;

void gf_VictorySpeedUpCarrier (unit lp_carrierUnit, fixed lp_maxSpeed) {
    auto_gf_VictorySpeedUpCarrier_lp_carrierUnit = lp_carrierUnit;
    auto_gf_VictorySpeedUpCarrier_lp_maxSpeed = lp_maxSpeed;

    if (auto_gf_VictorySpeedUpCarrier_Trigger == null) {
        auto_gf_VictorySpeedUpCarrier_Trigger = TriggerCreate("auto_gf_VictorySpeedUpCarrier_TriggerFunc");
    }

    TriggerExecute(auto_gf_VictorySpeedUpCarrier_Trigger, false, false);
}

bool auto_gf_VictorySpeedUpCarrier_TriggerFunc (bool testConds, bool runActions) {
    unit lp_carrierUnit = auto_gf_VictorySpeedUpCarrier_lp_carrierUnit;
    fixed lp_maxSpeed = auto_gf_VictorySpeedUpCarrier_lp_maxSpeed;

    // Implementation
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("CarrierRepairDrone", c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    while ((UnitIsAlive(lp_carrierUnit) == true) && (UnitGetPropertyFixed(lp_carrierUnit, c_unitPropMovementSpeed, c_unitPropCurrent) <= lp_maxSpeed)) {
        UnitSetPropertyFixed(lp_carrierUnit, c_unitPropMovementSpeed, (UnitGetPropertyFixed(lp_carrierUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 2.0));
        if ((UnitGetPropertyFixed(lp_carrierUnit, c_unitPropMovementSpeed, c_unitPropCurrent) > lp_maxSpeed)) {
            UnitSetPropertyFixed(lp_carrierUnit, c_unitPropMovementSpeed, lp_maxSpeed);
        }
        else {
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PAiur01");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("Blink", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ImmortalOverload", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "ExtendedThermalLance", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_PROTOSS_S01, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_PROTOSS_RESCUE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_S01, gv_pLAYER_04_PROTOSS_RESCUE, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_S01, gv_pLAYER_06_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_03_ZERG_BOTTOM, gv_pLAYER_05_ZERG_TOP, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_03_ZERG_BOTTOM, gv_pLAYER_07_ZERG_CINE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_PROTOSS_RESCUE, gv_pLAYER_06_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_05_ZERG_TOP, gv_pLAYER_07_ZERG_CINE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_08_ZERG_AMBIENCE, gv_pLAYER_03_ZERG_BOTTOM, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_08_ZERG_AMBIENCE, gv_pLAYER_05_ZERG_TOP, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_08_ZERG_AMBIENCE, gv_pLAYER_07_ZERG_CINE, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(gv_alliedPlayerGroup, gv_pLAYER_02_PROTOSS_S01);
    PlayerGroupAdd(gv_alliedPlayerGroup, gv_pLAYER_04_PROTOSS_RESCUE);
    PlayerGroupAdd(gv_alliedPlayerGroup, gv_pLAYER_06_PROTOSS_ALLY);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_03_ZERG_BOTTOM);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_05_ZERG_TOP);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_08_ZERG_AMBIENCE);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_PROTOSS_S01, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_PROTOSS_RESCUE, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_PROTOSS_ALLY, "HeroicShieldCleanUp", 1);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    libVCMI_gf_EnableDisableNeedPylonInfo(false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER_02_PROTOSS_S01, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_PROTOSS_S01, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_PROTOSS_S01, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerGroupLoopBegin(gv_alliedPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 5, true);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_enemyPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 1, true);
    }
    PlayerGroupLoopEnd();
    PlayerSetColorIndex(gv_pLAYER_07_ZERG_CINE, 1, true);
    PlayerModifyPropertyInt(gv_pLAYER_06_PROTOSS_ALLY, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_pLAYER_07_ZERG_CINE, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 50);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_02_PROTOSS_S01, c_playerStateFidgetingEnabled, false);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_CreateInfoText(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gv_conduit01 = UnitFromId(1028);
    gv_conduit02 = UnitFromId(1427);
    gv_conduit03 = UnitFromId(460);
    UnitGroupLoopBegin(UnitGroup("ExpeditionJumpGate", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
    }
    UnitGroupLoopEnd();
    UnitSetState(gv_conduit03, c_unitStateSelectable, true);
    libNtve_gf_SendActorMessageToUnit(gv_conduit03, "Signal On");
    UnitBehaviorRemove(UnitFromId(251), "PurifierPlanetCrackerCharge", 1);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Overlord", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestorBurrowed", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_InitZerg1, true, false);
    TriggerExecute(gt_InitZerg2, true, false);
    UnitGroupLoopBegin(UnitGroup("CreepPodsUnit", gv_pLAYER_08_ZERG_AMBIENCE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Harmless", gv_pLAYER_08_ZERG_AMBIENCE, 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS_S01, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_PROTOSS_RESCUE, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_mothershipSurvivorGroup, UnitGroupLoopCurrent());
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Zergling", gv_pLAYER_05_ZERG_TOP, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_mothershipZergGroup, UnitGroupLoopCurrent());
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Roach", gv_pLAYER_05_ZERG_TOP, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_mothershipZergGroup, UnitGroupLoopCurrent());
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_ZERG_TOP, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_smartZerglings, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    AISetGroupScriptControlled(gv_smartZerglings, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_ZERG_TOP, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_smartHydras, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    AISetGroupScriptControlled(gv_smartHydras, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_ZERG_TOP, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_smartMutas, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    AISetGroupScriptControlled(gv_smartMutas, true);
    UnitGroupLoopBegin(UnitGroup("AiurLightBridgeNE10Out", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("AiurLightBridgeNE8Out", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("AiurLightBridgeNW8Out", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(268), Order(AbilityCommand("AiurLightBridgeNE10", 0)), c_orderQueueReplace);
    TriggerExecute(gt_PerformancePauseAllAreas, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PAiur01_Music_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(12), RegionFromId(12), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(2), RegionFromId(2), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(8), RegionFromId(8), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(7), RegionFromId(7), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(25), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(26), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(33), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(23), RegionFromId(23), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(27), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(57), RegionFromId(57), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(58), RegionFromId(58), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(34), RegionFromId(34), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(52), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(53), RegionFromId(53), gv_pLAYER_01_USER);
    TriggerExecute(gt_BroodLordCrash1, true, false);
    TriggerExecute(gt_BroodLordCrash2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_enemyPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        }
        else {
        }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "zerglingattackspeed", 1);
            TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("FungalGrowth", 0), true);
            TriggerEnable(gt_UnitEntersZergRush2Brutal, true);
        }
        else {
            TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("FungalGrowth", 0), false);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("F2");
    libVCMI_gf_AddMissionTipCampaign("AttackMove");
    libVCMI_gf_AddMissionTipCampaign("Reinforcements");
    libVCMI_gf_AddMissionTipCampaign("Zealot");
    libVCMI_gf_AddMissionTipCampaign("Stalker");
    libVCMI_gf_AddMissionTipCampaign("Immortal");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("WarpPrismPhasing", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mothership", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scourge", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("QueenClassic", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_pLAYER_01_USER);
    }
    else {
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_01_USER);
    }
    else {
    }
    libVCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_StartGameQ, false);
    TriggerEnable(gt_ProtossP06WarpIn, false);
    TriggerEnable(gt_ColossusIntro, false);
    TriggerEnable(gt_Conduit01Reinforcements, false);
    TriggerStop(gt_StartGameQ);
    TriggerQueueClear(c_triggerQueueKill);
    UnitKill(UnitFromId(486));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI Pulse Audio
//--------------------------------------------------------------------------------------------------
bool gt_UIPulseAudio_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        SoundPlay(SoundLink("UI_Lab01_Training_Glow", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.75, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UIPulseAudio_Init () {
    gt_UIPulseAudio = TriggerCreate("gt_UIPulseAudio_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Unit Created
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitCreated_Init () {
    gt_PlayerUnitCreated = TriggerCreate("gt_PlayerUnitCreated_Func");
    TriggerAddEventUnitConstructProgress(gt_PlayerUnitCreated, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(gt_PlayerUnitCreated, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Rescues Unit
//--------------------------------------------------------------------------------------------------
bool gt_PlayerRescuesUnit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerRescuesUnit_Init () {
    gt_PlayerRescuesUnit = TriggerCreate("gt_PlayerRescuesUnit_Func");
    TriggerAddEventUnitChangeOwner(gt_PlayerRescuesUnit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Pause All Areas
//--------------------------------------------------------------------------------------------------
bool gt_PerformancePauseAllAreas_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupFromId(1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(2));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(3));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(4));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(5));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(6));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformancePauseAllAreas_Init () {
    gt_PerformancePauseAllAreas = TriggerCreate("gt_PerformancePauseAllAreas_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause Area 1
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseArea1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseArea1_Init () {
    gt_PerformanceUnpauseArea1 = TriggerCreate("gt_PerformanceUnpauseArea1_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseArea1, null, RegionFromId(64), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause Area 2
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseArea2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(2));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseArea2_Init () {
    gt_PerformanceUnpauseArea2 = TriggerCreate("gt_PerformanceUnpauseArea2_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseArea2, null, RegionFromId(65), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause Area 3
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseArea3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(3));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseArea3_Init () {
    gt_PerformanceUnpauseArea3 = TriggerCreate("gt_PerformanceUnpauseArea3_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseArea3, null, RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause Area 4
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseArea4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(4));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseArea4_Init () {
    gt_PerformanceUnpauseArea4 = TriggerCreate("gt_PerformanceUnpauseArea4_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseArea4, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause Area 5
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseArea5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(5));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseArea5_Init () {
    gt_PerformanceUnpauseArea5 = TriggerCreate("gt_PerformanceUnpauseArea5_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseArea5, null, RegionFromId(68), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause Area 6
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseArea6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(6));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseArea6_Init () {
    gt_PerformanceUnpauseArea6 = TriggerCreate("gt_PerformanceUnpauseArea6_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseArea6, null, RegionFromId(69), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause All (Cheats)
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseAllCheats_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_performancePausingDisabled = true;
    TriggerExecute(gt_PerformanceUnpauseArea1, false, false);
    TriggerExecute(gt_PerformanceUnpauseArea2, false, false);
    TriggerExecute(gt_PerformanceUnpauseArea3, false, false);
    TriggerExecute(gt_PerformanceUnpauseArea4, false, false);
    TriggerExecute(gt_PerformanceUnpauseArea5, false, false);
    TriggerExecute(gt_PerformanceUnpauseArea6, false, false);
    TriggerExecute(gt_PerformanceUnpauseSideBattles, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseAllCheats_Init () {
    gt_PerformanceUnpauseAllCheats = TriggerCreate("gt_PerformanceUnpauseAllCheats_Func");
    TriggerAddEventCheatUsed(gt_PerformanceUnpauseAllCheats, c_playerAny, c_gameCheatShowmap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Unpause Side Battles
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseSideBattles_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_conflictGroupProtossEast);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_conflictGroupProtossWest);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_conflictGroupZergEast);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_conflictGroupZergWest);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseSideBattles_Init () {
    gt_PerformanceUnpauseSideBattles = TriggerCreate("gt_PerformanceUnpauseSideBattles_Func");
    TriggerEnable(gt_PerformanceUnpauseSideBattles, false);
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseSideBattles, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Pause Side Battle West
//--------------------------------------------------------------------------------------------------
bool gt_PerformancePauseSideBattleWest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_performancePausingDisabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PerformanceUnpauseSideBattles, true);
    UnitGroupLoopBegin(gv_conflictGroupProtossWest);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_conflictGroupZergWest);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformancePauseSideBattleWest_Init () {
    gt_PerformancePauseSideBattleWest = TriggerCreate("gt_PerformancePauseSideBattleWest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Pause Side Battle East
//--------------------------------------------------------------------------------------------------
bool gt_PerformancePauseSideBattleEast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_performancePausingDisabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PerformanceUnpauseSideBattles, true);
    UnitGroupLoopBegin(gv_conflictGroupProtossEast);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_conflictGroupZergEast);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformancePauseSideBattleEast_Init () {
    gt_PerformancePauseSideBattleEast = TriggerCreate("gt_PerformancePauseSideBattleEast_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    unitgroup autoB821843B_g;
    int autoB821843B_u;

    // Variable Declarations
    unit lv_unitIter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_startingCreepCoverage = gf_CreepPercent();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_PlayerIdleAtStart, true, true);
    }
    else {
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerEnable(gt_AchievementOblivionAwaits, true);
    }
    else {
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A943C427"), null, PointFromId(506));
    autoB821843B_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB821843B_u = 1;
    for ( ; autoB821843B_u <= UnitGroupCount(autoB821843B_g, c_unitCountAll) ; autoB821843B_u += BoolToInt(lv_unitIter == UnitGroupUnit(autoB821843B_g, autoB821843B_u)) ) {
        lv_unitIter = UnitGroupUnit(autoB821843B_g, autoB821843B_u);
        UnitFlashSelection(lv_unitIter, 1.5);
    }
    TriggerEnable(gt_DefeatAllUnitsDead, true);
    TriggerExecute(gt_CeremonialBattleWest, true, false);
    TriggerExecute(gt_CeremonialBattleEast, true, false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        if ((UnitIsAlive(UnitFromId(2807)) == true)) {
            libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/901EE696"), UnitGetPosition(UnitFromId(2807)));
            TextTagSetPosition(TextTagLastCreated(), UnitGetPosition(UnitFromId(2807)), 0.0);
            libHots_gf_StoreActorForUnit(UnitFromId(2807), 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(UnitFromId(2807), 1, TextTagLastCreated());
        }
        else {
        }
        if ((UnitIsAlive(UnitFromId(2808)) == true)) {
            libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/28AB902F"), UnitGetPosition(UnitFromId(2808)));
            TextTagSetPosition(TextTagLastCreated(), UnitGetPosition(UnitFromId(2808)), 0.0);
            libHots_gf_StoreActorForUnit(UnitFromId(2808), 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(UnitFromId(2808), 1, TextTagLastCreated());
        }
        else {
        }
    }
    else {
    }
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveActivateWarpConduitsCreate, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_conduit01), 4.0), 2.0, false);
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_conduit01), StringExternal("Param/Value/C2FD3233"));
    gv_conduit01_Ping = PingLastCreated();
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00206", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(gt_TipReadyQ, true, true);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_PlayerIdleAtStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    AIToggleBulliesInRegion(gv_pLAYER_03_ZERG_BOTTOM, RegionPlayableMap(), false);
    AIToggleBulliesInRegion(gv_pLAYER_05_ZERG_TOP, RegionPlayableMap(), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_ZERG_CINE, RegionPlayableMap(), false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        UnitGroupLoopBegin(UnitGroup("QueenClassic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClassicQueenAI(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Idle At Start
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIdleAtStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selectArmyDialog;
    int lv_textTagDialogAnchor;
    int lv_textTagDialogAnchorPoint;
    int lv_textTagDialog;
    unit lv_attackBeacon;

    // Variable Initialization
    lv_selectArmyDialog = c_invalidDialogId;
    lv_textTagDialogAnchor = c_invalidDialogId;
    lv_textTagDialogAnchorPoint = c_invalidDialogControlId;
    lv_textTagDialog = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_playerUnitsSelected == false)) {
        libVCUI_gf_ToggleArmyButtonFlashing(true);
        libVCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/B197DE66"));
        while (!((gv_playerUnitsSelected == true))) {
            Wait(1.0, c_timeGame);
        }
        libVCUI_gf_HideCampaignDirective();
        libVCUI_gf_ToggleArmyButtonFlashing(false);
        Wait(0.5, c_timeAI);
    }
    else {
    }
    CameraLockInput(gv_pLAYER_01_USER, false);
    libVoiC_gf_PauseMissionTimeCampaign(false);
    if ((gv_playerUnitsOrdered == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", c_unitCreateIgnorePlacement, 0, PointFromId(1518));
        lv_attackBeacon = UnitLastCreated();
        DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
        lv_textTagDialogAnchor = DialogLastCreated();
        DialogSetImageVisible(lv_textTagDialogAnchor, false);
        DialogSetPositionRelativeToUnitWithAnchor(lv_textTagDialogAnchor, lv_attackBeacon, "Ref_Origin", c_anchorCenter, 0, 80);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        lv_textTagDialogAnchorPoint = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialAttackMoveTextTag");
        lv_textTagDialog = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_textTagDialogAnchorPoint, c_anchorCenter, 0, 0);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds", PlayerGroupAll());
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TutorialTextProtoss", PlayerGroupAll());
        TriggerExecute(gt_UIPulseAudio, true, false);
        CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1082)), 2.0, -1, 10.0, false);
        while (!((gv_playerUnitsOrdered == true))) {
            Wait(0.25, c_timeAI);
        }
        TriggerStop(gt_UIPulseAudio);
        UnitRemove(lv_attackBeacon);
        DialogControlDestroy(lv_textTagDialog);
        DialogDestroy(lv_textTagDialogAnchor);
        DialogControlDestroy(lv_textTagDialogAnchorPoint);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIdleAtStart_Init () {
    gt_PlayerIdleAtStart = TriggerCreate("gt_PlayerIdleAtStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Selects Units
//--------------------------------------------------------------------------------------------------
bool gt_PlayerSelectsUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
        UnitSelect(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
    }
    UnitGroupLoopEnd();
    gv_playerUnitsSelected = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerSelectsUnits_Init () {
    gt_PlayerSelectsUnits = TriggerCreate("gt_PlayerSelectsUnits_Func");
    libVCUI_gf_SelectArmyButtonUsed(gt_PlayerSelectsUnits);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Uses Units
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUsesUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerUnitsOrdered = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUsesUnits_Init () {
    gt_PlayerUsesUnits = TriggerCreate("gt_PlayerUsesUnits_Func");
    TriggerAddEventUnitOrder(gt_PlayerUsesUnits, null, AbilityCommand("attack", 0));
    TriggerAddEventUnitRegion(gt_PlayerUsesUnits, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unshare Vision With Mothership Forces
//--------------------------------------------------------------------------------------------------
bool gt_UnshareVisionWithMothershipForces_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS_S01, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_06_PROTOSS_ALLY, false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnshareVisionWithMothershipForces_Init () {
    gt_UnshareVisionWithMothershipForces = TriggerCreate("gt_UnshareVisionWithMothershipForces_Func");
    TriggerAddEventTimePeriodic(gt_UnshareVisionWithMothershipForces, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colossus Intro
//--------------------------------------------------------------------------------------------------
bool gt_ColossusIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_colossusGroup;

    // Variable Initialization
    lv_colossusGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_AddMissionTipCampaign("Colossus");
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(4), 8.0, false);
    UnitGroupLoopBegin(UnitGroup("DestructibleKorhalTree", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Colossus", gv_pLAYER_02_PROTOSS_S01, RegionFromId(4), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(lv_colossusGroup, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(39), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(740)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(40), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(967)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(5), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(968)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(969)), c_orderQueueReplace);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 0.25);
    SoundPlayOnUnitForPlayer(SoundLink("PAiur01_ColossusEnterVox01", -1), c_maxPlayers, PlayerGroupAll(), UnitFromId(40), 10.0, 100.0, 0.0);
    Wait(1.0, c_timeAI);
    SoundPlayOnUnitForPlayer(SoundLink("PAiur01_ColossusEnterVox012", -1), c_maxPlayers, PlayerGroupAll(), UnitFromId(39), 10.0, 100.0, 0.0);
    Wait(1.0, c_timeAI);
    SoundPlayOnUnitForPlayer(SoundLink("PAiur01_ColossusEnterVox0122", -1), c_maxPlayers, PlayerGroupAll(), UnitFromId(5), 10.0, 100.0, 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(4)), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BF4CCC36"), null, PointFromId(968));
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(356)), 2.0, -1, 10.0, true);
    UnitGroupLoopBegin(lv_colossusGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_ProtossReinforcementsF2Helper, true);
    TriggerExecute(gt_ProtossReinforcementsF2Helper, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_ColossusIntroTransmissionQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusIntro_Init () {
    gt_ColossusIntro = TriggerCreate("gt_ColossusIntro_Func");
    TriggerAddEventTimePeriodic(gt_ColossusIntro, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colossus Intro Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ColossusIntroTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00084", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusIntroTransmissionQ_Init () {
    gt_ColossusIntroTransmissionQ = TriggerCreate("gt_ColossusIntroTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Reinforcements Rescue
//--------------------------------------------------------------------------------------------------
bool gt_ProtossReinforcementsRescue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reinforcementUnitGroup;

    // Variable Initialization
    lv_reinforcementUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_PROTOSS_S01))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Zealot") || (UnitGetType(EventUnitProgressUnit()) == "Stalker") || (UnitGetType(EventUnitProgressUnit()) == "Immortal") || (UnitGetType(EventUnitProgressUnit()) == "HighTemplar") || (UnitGetType(EventUnitProgressUnit()) == "Colossus")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_RescueUnit(EventUnitProgressUnit(), gv_pLAYER_01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossReinforcementsRescue_Init () {
    gt_ProtossReinforcementsRescue = TriggerCreate("gt_ProtossReinforcementsRescue_Func");
    TriggerAddEventUnitConstructProgress(gt_ProtossReinforcementsRescue, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Reinforcements F2 Helper
//--------------------------------------------------------------------------------------------------
bool gt_ProtossReinforcementsF2Helper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_armyNotSelected;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerUnitsSelected = false;
    TriggerEnable(gt_PlayerSelectsUnits, true);
    Wait(5.0, c_timeAI);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gf_UnitIsArmyUnit(UnitGroupLoopCurrent()) == true)) {
            if ((UnitIsSelected(UnitGroupLoopCurrent(), gv_pLAYER_01_USER) == false)) {
                lv_armyNotSelected = true;
            }
            else {
            }
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_armyNotSelected == true) && (gv_playerUnitsSelected == false)) {
        libVCUI_gf_ToggleArmyButtonFlashing(true);
        while (!((gv_playerUnitsSelected == true))) {
            Wait(1.0, c_timeAI);
        }
        libVCUI_gf_ToggleArmyButtonFlashing(false);
    }
    else {
    }
    TriggerEnable(gt_PlayerSelectsUnits, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossReinforcementsF2Helper_Init () {
    gt_ProtossReinforcementsF2Helper = TriggerCreate("gt_ProtossReinforcementsF2Helper_Func");
    TriggerEnable(gt_ProtossReinforcementsF2Helper, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit 01 Constriction Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_Conduit01ConstrictionTakesDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(2807), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(2807), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Conduit01ConstrictionTakesDamage_Init () {
    gt_Conduit01ConstrictionTakesDamage = TriggerCreate("gt_Conduit01ConstrictionTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_Conduit01ConstrictionTakesDamage, UnitRefFromUnit(UnitFromId(2807)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Warp Conduit 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWarpConduit01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_conduit01_Ping);
    libNtve_gf_KillDoodadsInRegion(RegionCircle(UnitGetPosition(gv_conduit01), 7.0), "CreepWeb");
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D2A91BD1"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_conduit01), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/27E13E84"), null, gv_conduit01);
    UnitSetState(gv_conduit01, c_unitStateSelectable, true);
    libNtve_gf_SendActorMessageToUnit(gv_conduit01, "Signal On");
    gv_objectiveActivateWarpConduitsCount += 1;
    TriggerExecute(gt_ObjectiveActivateWarpConduitsUpdate, true, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00169", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_Conduit01Reinforcements, true, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00088", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_conduit02), StringExternal("Param/Value/39BE779F"));
    gv_conduit02_Ping = PingLastCreated();
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_conduit03), StringExternal("Param/Value/DC52D605"));
    gv_conduit03_Ping = PingLastCreated();
    UnitIssueOrder(UnitFromId(268), Order(AbilityCommand("AiurLightBridgeNE10Out", 0)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00170", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWarpConduit01Q_Init () {
    gt_ActivateWarpConduit01Q = TriggerCreate("gt_ActivateWarpConduit01Q_Func");
    TriggerAddEventUnitDied(gt_ActivateWarpConduit01Q, UnitRefFromUnit(UnitFromId(2807)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit 01 Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_Conduit01Reinforcements_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_conduit01), 5.0), 6.0, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_02_PROTOSS_S01, PointFromId(910));
    Wait(0.25, c_timeAI);
    gf_WarpInProtossReinforcements(PointFromId(896), libLotv_gf_DifficultyValueInt2(8, 8, 8, 8), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(897), libLotv_gf_DifficultyValueInt2(8, 8, 8, 8), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(898), libLotv_gf_DifficultyValueInt2(8, 8, 8, 8), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(1350), libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Stalker");
    gf_WarpInProtossReinforcements(PointFromId(1351), libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Stalker");
    Wait(5.5, c_timeAI);
    TriggerEnable(gt_ProtossReinforcementsF2Helper, true);
    TriggerExecute(gt_ProtossReinforcementsF2Helper, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Conduit01Reinforcements_Init () {
    gt_Conduit01Reinforcements = TriggerCreate("gt_Conduit01Reinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit 02 ConstrictionTakes Damage
//--------------------------------------------------------------------------------------------------
bool gt_Conduit02ConstrictionTakesDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(2808), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(2808), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Conduit02ConstrictionTakesDamage_Init () {
    gt_Conduit02ConstrictionTakesDamage = TriggerCreate("gt_Conduit02ConstrictionTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_Conduit02ConstrictionTakesDamage, UnitRefFromUnit(UnitFromId(2808)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Warp Conduit 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWarpConduit02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_conduit02_Ping);
    libNtve_gf_KillDoodadsInRegion(RegionCircle(UnitGetPosition(gv_conduit02), 7.0), "CreepWeb");
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/660AAA7D"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_conduit02), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FDF791CB"), null, gv_conduit02);
    UnitSetState(gv_conduit02, c_unitStateSelectable, true);
    libNtve_gf_SendActorMessageToUnit(gv_conduit02, "Signal On");
    gv_objectiveActivateWarpConduitsCount += 1;
    TriggerExecute(gt_ObjectiveActivateWarpConduitsUpdate, true, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00171", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_Conduit02Reinforcements, true, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00199", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    UnitIssueOrder(UnitFromId(1445), Order(AbilityCommand("AiurLightBridgeAbandonedNW8Out", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWarpConduit02Q_Init () {
    gt_ActivateWarpConduit02Q = TriggerCreate("gt_ActivateWarpConduit02Q_Func");
    TriggerAddEventUnitDied(gt_ActivateWarpConduit02Q, UnitRefFromUnit(UnitFromId(2808)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit 02 Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_Conduit02Reinforcements_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_conduit02), 5.0), 6.0, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_02_PROTOSS_S01, PointFromId(1665));
    Wait(0.25, c_timeAI);
    gf_WarpInProtossReinforcements(PointFromId(903), libLotv_gf_DifficultyValueInt2(8, 8, 8, 8), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(1659), libLotv_gf_DifficultyValueInt2(8, 8, 8, 8), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(1665), libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Stalker");
    Wait(5.5, c_timeAI);
    TriggerEnable(gt_ProtossReinforcementsF2Helper, true);
    TriggerExecute(gt_ProtossReinforcementsF2Helper, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Conduit02Reinforcements_Init () {
    gt_Conduit02Reinforcements = TriggerCreate("gt_Conduit02Reinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach Warp Conduit 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_ApproachWarpConduit03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ActivateSecondWorms, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 0.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_conduit03), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/16EFCB35"), null, UnitGetPosition(gv_conduit03));
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00177", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachWarpConduit03Q_Init () {
    gt_ApproachWarpConduit03Q = TriggerCreate("gt_ApproachWarpConduit03Q_Func");
    TriggerAddEventTimePeriodic(gt_ApproachWarpConduit03Q, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reach Warp Conduit 03
//--------------------------------------------------------------------------------------------------
bool gt_ReachWarpConduit03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_ZERG_TOP, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_conduit03_Ping);
    gv_objectiveActivateWarpConduitsCount += 1;
    TriggerExecute(gt_ObjectiveActivateWarpConduitsUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReachWarpConduit03_Init () {
    gt_ReachWarpConduit03 = TriggerCreate("gt_ReachWarpConduit03_Func");
    TriggerAddEventTimePeriodic(gt_ReachWarpConduit03, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Mothership Survivors (Proximity)
//--------------------------------------------------------------------------------------------------
bool gt_RevealMothershipSurvivorsProximity_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(17), 6.0, false);
    UnitGroupLoopBegin(gv_mothershipSurvivorGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_mothershipZergGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, true);
    }
    UnitGroupLoopEnd();
    while (!(((libNtve_gf_UnitGroupIsDead(gv_mothershipZergGroup) == true) || (libNtve_gf_UnitGroupIsDead(gv_mothershipSurvivorGroup) == true)))) {
        Wait(0.5, c_timeAI);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_mothershipSurvivorGroup) == true)) {
        return true;
    }
    else {
    }
    TriggerExecute(gt_SurvivorsRescuedQ, true, false);
    UnitGroupLoopBegin(gv_mothershipSurvivorGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupRemove(gv_mothershipSurvivorGroup, UnitGroupLoopCurrent());
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_ProtossReinforcementsF2Helper, true);
    TriggerExecute(gt_ProtossReinforcementsF2Helper, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealMothershipSurvivorsProximity_Init () {
    gt_RevealMothershipSurvivorsProximity = TriggerCreate("gt_RevealMothershipSurvivorsProximity_Func");
    TriggerAddEventTimePeriodic(gt_RevealMothershipSurvivorsProximity, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survivors Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_SurvivorsRescuedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(UnitFromId(1321), "pMission_Aiur01|Line00167", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivorsRescuedQ_Init () {
    gt_SurvivorsRescuedQ = TriggerCreate("gt_SurvivorsRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Zerg 1
//--------------------------------------------------------------------------------------------------
bool gt_InitZerg1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup;
    int lv_zergCount;
    unitgroup lv_burrowedUltralisk;
    bool lv_bridgeExtended;
    unitgroup lv_playerUnits;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();
    lv_burrowedUltralisk = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zergGroup = UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_zergCount = UnitGroupCount(lv_zergGroup, c_unitCountAlive);
    lv_burrowedUltralisk = UnitGroup("UltraliskBurrowed", gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(lv_zergGroup, c_unitCountAlive) == lv_zergCount)) {
        UnitGroupLoopBegin(lv_zergGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(21))), c_orderQueueReplace);
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeAI);
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        UnitGroupLoopBegin(lv_burrowedUltralisk);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
            UnitGroupAdd(lv_zergGroup, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    while ((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == false)) {
        lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
            UnitGroupLoopBegin(lv_zergGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
            }
            UnitGroupLoopEnd();
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitSuicide(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitZerg1_Init () {
    gt_InitZerg1 = TriggerCreate("gt_InitZerg1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Zerg 2
//--------------------------------------------------------------------------------------------------
bool gt_InitZerg2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup;
    unitgroup lv_burrowedZerglings;
    bool lv_zerglingsUnburrowed;
    unitgroup lv_playerUnits;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();
    lv_burrowedZerglings = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zergGroup = UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_burrowedZerglings = UnitGroup("ZerglingBurrowed", gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true))) {
            return true;
        }
        else {
        }
        lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
            if ((lv_zerglingsUnburrowed == false)) {
                lv_zerglingsUnburrowed = true;
                UnitGroupLoopBegin(lv_burrowedZerglings);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                    UnitGroupAdd(lv_zergGroup, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
            }
            else {
            }
            UnitGroupLoopBegin(lv_zergGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
            }
            UnitGroupLoopEnd();
        }
        else {
            UnitGroupLoopBegin(lv_zergGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
                }
                else {
                }
            }
            UnitGroupLoopEnd();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitZerg2_Init () {
    gt_InitZerg2 = TriggerCreate("gt_InitZerg2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Zerg Rush 1
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersZergRush1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitSuicide(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersZergRush1_Init () {
    gt_UnitEntersZergRush1 = TriggerCreate("gt_UnitEntersZergRush1_Func");
    TriggerAddEventTimePeriodic(gt_UnitEntersZergRush1, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Zerg Rush 2 (Brutal)
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersZergRush2Brutal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitSuicide(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersZergRush2Brutal_Init () {
    gt_UnitEntersZergRush2Brutal = TriggerCreate("gt_UnitEntersZergRush2Brutal_Func");
    TriggerEnable(gt_UnitEntersZergRush2Brutal, false);
    TriggerAddEventTimePeriodic(gt_UnitEntersZergRush2Brutal, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormWave01_Func (bool testConds, bool runActions) {
    int auto55F43EBF_n;
    int auto55F43EBF_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnNydusWorm01, true, false);
    Wait(3.7, c_timeReal);
    auto55F43EBF_n = 6;
    for (auto55F43EBF_i = 1; auto55F43EBF_i <= auto55F43EBF_n; auto55F43EBF_i += 1) {
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm01, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 2.0));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm01, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 2.0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormWave01_Init () {
    gt_NydusWormWave01 = TriggerCreate("gt_NydusWormWave01_Func");
    TriggerAddEventTimePeriodic(gt_NydusWormWave01, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm 01
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_point = PointFromId(2182);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_point, 8.0), 10.0, false);
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_05_ZERG_TOP, lv_point);
    gv_nydusWorm01 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorm01), c_animNameDefault, "Birth 02", c_animFlagNonLooping, 0.0);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWorm01, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm01_Init () {
    gt_SpawnNydusWorm01 = TriggerCreate("gt_SpawnNydusWorm01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Are Too Smart Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAreTooSmartQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeAI);
    SoundPlayForPlayer(SoundLink("Mutalisk_Yes", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv_smartMutas);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(37))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(3.5, c_timeAI);
    SoundPlayForPlayer(SoundLink("Event_Lab01_ZerglingRelease", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_BurrowUnburrowZergUnitGroup(gv_smartZerglings, libVCMI_ge_BurrowUnburrowOption_Unburrow);
    Wait(0.5, c_timeAI);
    libVCMI_gf_BurrowUnburrowZergUnitGroup(gv_smartHydras, libVCMI_ge_BurrowUnburrowOption_Unburrow);
    Wait(1.0, c_timeAI);
    UnitGroupIssueOrder(gv_smartZerglings, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(37))), c_orderQueueReplace);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00193", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00194", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAreTooSmartQ_Init () {
    gt_ZergAreTooSmartQ = TriggerCreate("gt_ZergAreTooSmartQ_Func");
    TriggerAddEventTimePeriodic(gt_ZergAreTooSmartQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Second Worms
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSecondWorms_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_NydusWormWave02, true, false);
    Wait(1.0, c_timeAI);
    TriggerExecute(gt_NydusWormWave03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSecondWorms_Init () {
    gt_ActivateSecondWorms = TriggerCreate("gt_ActivateSecondWorms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormWave02_Func (bool testConds, bool runActions) {
    int auto6B1125EF_n;
    int auto6B1125EF_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnNydusWorm02, true, false);
    Wait(3.7, c_timeReal);
    auto6B1125EF_n = 3;
    for (auto6B1125EF_i = 1; auto6B1125EF_i <= auto6B1125EF_n; auto6B1125EF_i += 1) {
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm02, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm02, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm02, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm02, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Roach", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm02, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormWave02_Init () {
    gt_NydusWormWave02 = TriggerCreate("gt_NydusWormWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormWave03_Func (bool testConds, bool runActions) {
    int autoBC21C408_n;
    int autoBC21C408_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnNydusWorm03, true, false);
    Wait(3.7, c_timeReal);
    autoBC21C408_n = 3;
    for (autoBC21C408_i = 1; autoBC21C408_i <= autoBC21C408_n; autoBC21C408_i += 1) {
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm03, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm03, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Roach", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm03, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm03, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
        gf_SpawnNydusUnitsandAttackPlayer(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_ZERG_TOP, gv_nydusWorm03, libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 1.5));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormWave03_Init () {
    gt_NydusWormWave03 = TriggerCreate("gt_NydusWormWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm 02
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_point = PointFromId(962);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_point, 8.0), 10.0, false);
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_05_ZERG_TOP, lv_point);
    gv_nydusWorm02 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorm02), c_animNameDefault, "Birth 02", c_animFlagNonLooping, 0.0);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWorm02, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm02_Init () {
    gt_SpawnNydusWorm02 = TriggerCreate("gt_SpawnNydusWorm02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm 03
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_point = PointFromId(2183);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_point, 8.0), 10.0, false);
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_05_ZERG_TOP, lv_point);
    gv_nydusWorm03 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorm03), c_animNameDefault, "Birth 02", c_animFlagNonLooping, 0.0);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWorm03, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm03_Init () {
    gt_SpawnNydusWorm03 = TriggerCreate("gt_SpawnNydusWorm03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Zerg Units AI
//--------------------------------------------------------------------------------------------------
bool gt_NydusZergUnitsAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_nydusZerg, c_unitCountAlive) > 0)) {
        lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
            UnitGroupLoopBegin(gv_nydusZerg);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
            }
            UnitGroupLoopEnd();
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusZergUnitsAI_Init () {
    gt_NydusZergUnitsAI = TriggerCreate("gt_NydusZergUnitsAI_Func");
    TriggerAddEventTimePeriodic(gt_NydusZergUnitsAI, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In Hybrid 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpInHybrid1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_HybridShockwave1, true, false);
    gf_WarpInHybridReaver(PointFromId(122));
    Wait(1.0, c_timeGame);
    gf_WarpInHybridReaver(PointFromId(145));
    Wait(1.0, c_timeGame);
    gf_WarpInHybridReaver(PointFromId(2019));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    lv_speaker = UnitGroupClosestToPoint(UnitGroup("HybridReaver", gv_pLAYER_05_ZERG_TOP, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(122));
    if ((UnitIsAlive(lv_speaker) == true)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 0.25);
        libVCMI_gf_SendTransmissionCampaign(lv_speaker, "pMission_Aiur01|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerExecute(gt_ObjectiveKillHybridCreate, true, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00178", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInHybrid1Q_Init () {
    gt_WarpInHybrid1Q = TriggerCreate("gt_WarpInHybrid1Q_Func");
    TriggerAddEventTimePeriodic(gt_WarpInHybrid1Q, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Shockwave 1
//--------------------------------------------------------------------------------------------------
bool gt_HybridShockwave1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(PointFromId(122), 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 2.0, 1.0, 4.0);
        SoundPlayForPlayer(SoundLink("PAiur01_HybridShockwave", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    libNtve_gf_CreateModelAtPoint("Aiur_City_HybridWarp_ShockWave_Effects", PointFromId(122));
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.7, c_timeAI);
    if ((RegionContainsPoint(RegionCircle(PointFromId(122), 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        SoundPlayForPlayer(SoundLink("PAiur01_Shak1_sfx_CarrierCrashExplo", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    Wait(5.3, c_timeAI);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridShockwave1_Init () {
    gt_HybridShockwave1 = TriggerCreate("gt_HybridShockwave1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In Hybrid 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpInHybrid2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_HybridShockwave2, true, false);
    gf_WarpInHybridReaver(PointFromId(479));
    Wait(1.0, c_timeAI);
    gf_WarpInHybridReaver(PointFromId(643));
    Wait(1.0, c_timeAI);
    gf_WarpInHybridReaver(PointFromId(655));
    Wait(1.0, c_timeAI);
    TriggerQueueEnter();
    lv_speaker = UnitGroupClosestToPoint(UnitGroup("HybridReaver", gv_pLAYER_05_ZERG_TOP, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(479));
    if ((UnitIsAlive(lv_speaker) == true)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(lv_speaker, "pMission_Aiur01|Line00203", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInHybrid2Q_Init () {
    gt_WarpInHybrid2Q = TriggerCreate("gt_WarpInHybrid2Q_Func");
    TriggerAddEventTimePeriodic(gt_WarpInHybrid2Q, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Shockwave 2
//--------------------------------------------------------------------------------------------------
bool gt_HybridShockwave2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(PointFromId(479), 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 2.0, 1.0, 4.0);
        SoundPlayForPlayer(SoundLink("PAiur01_HybridShockwave", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    ActorSend(ActorFromDoodad(DoodadFromId(1742)), libNtve_gf_Signal("DoodadDeath"));
    ActorSend(ActorFromDoodad(DoodadFromId(478)), libNtve_gf_Signal("DoodadDeath"));
    libNtve_gf_CreateModelAtPoint("Aiur_City_HybridWarp_ShockWave_Effects", PointFromId(479));
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.7, c_timeAI);
    if ((RegionContainsPoint(RegionCircle(PointFromId(479), 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        SoundPlayForPlayer(SoundLink("PAiur01_Shak1_sfx_CarrierCrashExplo", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    Wait(5.3, c_timeAI);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridShockwave2_Init () {
    gt_HybridShockwave2 = TriggerCreate("gt_HybridShockwave2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Killed
//--------------------------------------------------------------------------------------------------
bool gt_HybridKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_ZERG_TOP))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HybridReaver"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridKilled += 1;
    TriggerExecute(gt_ObjectiveKillHybridCreate, true, true);
    if ((gv_hybridKilled == 6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveKillHybridComplete, true, true);
        if ((ObjectiveGetState(gv_objectiveActivateWarpConduits) == c_objectiveStateCompleted)) {
            TriggerExecute(gt_VictoryMainObjectivesCompleted, true, false);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridKilled_Init () {
    gt_HybridKilled = TriggerCreate("gt_HybridKilled_Func");
    TriggerAddEventUnitDied(gt_HybridKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Hive 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroHive01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(486)) == false)) {
        TriggerExecute(gt_ObjectiveDestroyZergHiveCreate, true, false);
        return true;
    }
    else {
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(486)), 8.0), 10.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/DF723E79"), null, UnitGetPosition(UnitFromId(486)));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(486)), 2.0, Color(100.00, 0.00, 0.00));
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(486)), StringExternal("Param/Value/8371F17B"));
    gv_hive01_Ping = PingLastCreated();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/FF93BC11"), UnitFromId(486), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitFromId(486), 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(UnitFromId(486), 1, TextTagLastCreated());
    }
    else {
    }
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(486)) == false)) {
        TriggerExecute(gt_ObjectiveDestroyZergHiveCreate, true, false);
        return true;
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00186", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_ObjectiveDestroyZergHiveCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroHive01Q_Init () {
    gt_IntroHive01Q = TriggerCreate("gt_IntroHive01Q_Func");
    TriggerAddEventTimePeriodic(gt_IntroHive01Q, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 01 Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Hive01Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(486), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(486), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive01Attacked_Init () {
    gt_Hive01Attacked = TriggerCreate("gt_Hive01Attacked_Func");
    TriggerAddEventUnitDamaged(gt_Hive01Attacked, UnitRefFromUnit(UnitFromId(486)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 01 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Hive01Dies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(UnitFromId(486)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F0DD6818"), null, UnitGetPosition(UnitFromId(486)));
    gv_objectiveDestroyZergHiveCount += 1;
    TriggerExecute(gt_ObjectiveDestroyZergHiveUpdate, true, false);
    PingDestroy(gv_hive01_Ping);
    UnitGroupLoopBegin(UnitGroup("Larva", EventPlayer(), RegionCircle(UnitGetPosition(UnitFromId(486)), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Drone", EventPlayer(), RegionCircle(UnitGetPosition(UnitFromId(486)), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowDroneDown", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_HiveDestroyedQ, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_Hive01PlayerReinforcements, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive01Dies_Init () {
    gt_Hive01Dies = TriggerCreate("gt_Hive01Dies_Func");
    TriggerAddEventUnitDied(gt_Hive01Dies, UnitRefFromUnit(UnitFromId(486)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 01 Player Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_Hive01PlayerReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_warpPrism;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(215));
    lv_warpPrism[1] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[1], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[1], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(232)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[1], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(1528));
    lv_warpPrism[2] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[2], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[2], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1654)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[2], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    gf_WarpInProtossReinforcements(PointFromId(232), libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(1654), libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Zealot");
    Wait(5.5, c_timeAI);
    TriggerEnable(gt_ProtossReinforcementsF2Helper, true);
    TriggerExecute(gt_ProtossReinforcementsF2Helper, true, false);
    Wait(0.5, c_timeAI);
    IntLoopBegin(1, 2);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitSetOwner(lv_warpPrism[IntLoopCurrent()], gv_pLAYER_04_PROTOSS_RESCUE, false);
        UnitIssueOrder(lv_warpPrism[IntLoopCurrent()], Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    }
    IntLoopEnd();
    Wait(2.0, c_timeGame);
    IntLoopBegin(1, 2);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitIssueOrder(lv_warpPrism[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1656)), c_orderQueueReplace);
    }
    IntLoopEnd();
    Wait(10.0, c_timeGame);
    IntLoopBegin(1, 2);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitRemove(lv_warpPrism[IntLoopCurrent()]);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive01PlayerReinforcements_Init () {
    gt_Hive01PlayerReinforcements = TriggerCreate("gt_Hive01PlayerReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(44)) == true)) {
        libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(44)), StringExternal("Param/Value/EEE9BAFA"));
        gv_hive02_Ping = PingLastCreated();
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/2D28C849"), UnitFromId(44), "Ref_Center");
            libHots_gf_StoreActorForUnit(UnitFromId(44), 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(UnitFromId(44), 1, TextTagLastCreated());
        }
        else {
        }
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(1194)) == true)) {
        libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(1194)), StringExternal("Param/Value/E463F7B0"));
        gv_hive03_Ping = PingLastCreated();
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/24A5289E"), UnitFromId(1194), "Ref_Center");
            libHots_gf_StoreActorForUnit(UnitFromId(1194), 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(UnitFromId(1194), 1, TextTagLastCreated());
        }
        else {
        }
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(1231)) == true)) {
        libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(1231)), StringExternal("Param/Value/94D38143"));
        gv_hive04_Ping = PingLastCreated();
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/9DDF0DDD"), UnitFromId(1231), "Ref_Center");
            libHots_gf_StoreActorForUnit(UnitFromId(1231), 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(UnitFromId(1231), 1, TextTagLastCreated());
        }
        else {
        }
    }
    else {
    }
    if ((ObjectiveGetState(gv_objectiveDestroyZergHives) == c_objectiveStateActive)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 0.25);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00188", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveIntroQ_Init () {
    gt_BonusObjectiveIntroQ = TriggerCreate("gt_BonusObjectiveIntroQ_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveIntroQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 02 Located Q
//--------------------------------------------------------------------------------------------------
bool gt_Hive02LocatedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyZergHiveCreate, true, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00158", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00187", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive02LocatedQ_Init () {
    gt_Hive02LocatedQ = TriggerCreate("gt_Hive02LocatedQ_Func");
    TriggerAddEventUnitRange(gt_Hive02LocatedQ, null, UnitFromId(44), 9.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 02 Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Hive02Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(44), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(44), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive02Attacked_Init () {
    gt_Hive02Attacked = TriggerCreate("gt_Hive02Attacked_Func");
    TriggerAddEventUnitDamaged(gt_Hive02Attacked, UnitRefFromUnit(UnitFromId(44)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 02 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Hive02Dies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(UnitFromId(44)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0F5D0539"), null, UnitGetPosition(UnitFromId(44)));
    gv_objectiveDestroyZergHiveCount += 1;
    TriggerExecute(gt_ObjectiveDestroyZergHiveUpdate, true, false);
    PingDestroy(gv_hive02_Ping);
    UnitGroupLoopBegin(UnitGroup("Larva", EventPlayer(), RegionCircle(UnitGetPosition(UnitFromId(44)), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Drone", EventPlayer(), RegionCircle(UnitGetPosition(UnitFromId(44)), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowDroneDown", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_HiveDestroyedQ, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_Hive02PlayerReinforcements, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive02Dies_Init () {
    gt_Hive02Dies = TriggerCreate("gt_Hive02Dies_Func");
    TriggerAddEventUnitDied(gt_Hive02Dies, UnitRefFromUnit(UnitFromId(44)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 02 Player Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_Hive02PlayerReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_warpPrism;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(131));
    lv_warpPrism[1] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[1], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[1], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(149)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[1], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(128));
    lv_warpPrism[2] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[2], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[2], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(154)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[2], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(1663));
    lv_warpPrism[3] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[3], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[3], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[3], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1664)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[3], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeAI);
    gf_WarpInProtossReinforcements(PointFromId(149), libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(154), libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Stalker");
    gf_WarpInProtossReinforcements(PointFromId(1664), libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Zealot");
    Wait(5.5, c_timeAI);
    TriggerEnable(gt_ProtossReinforcementsF2Helper, true);
    TriggerExecute(gt_ProtossReinforcementsF2Helper, true, false);
    Wait(0.5, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitSetOwner(lv_warpPrism[IntLoopCurrent()], gv_pLAYER_04_PROTOSS_RESCUE, false);
        UnitIssueOrder(lv_warpPrism[IntLoopCurrent()], Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    }
    IntLoopEnd();
    Wait(2.0, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitIssueOrder(lv_warpPrism[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2138)), c_orderQueueReplace);
        UnitSetHeight(lv_warpPrism[IntLoopCurrent()], 8.0, 3.0);
    }
    IntLoopEnd();
    Wait(10.0, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitRemove(lv_warpPrism[IntLoopCurrent()]);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive02PlayerReinforcements_Init () {
    gt_Hive02PlayerReinforcements = TriggerCreate("gt_Hive02PlayerReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 03 Charge Q
//--------------------------------------------------------------------------------------------------
bool gt_Hive03ChargeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00148", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive03ChargeQ_Init () {
    gt_Hive03ChargeQ = TriggerCreate("gt_Hive03ChargeQ_Func");
    TriggerAddEventUnitRegion(gt_Hive03ChargeQ, null, RegionFromId(51), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 03 Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Hive03Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1194), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1194), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive03Attacked_Init () {
    gt_Hive03Attacked = TriggerCreate("gt_Hive03Attacked_Func");
    TriggerAddEventUnitDamaged(gt_Hive03Attacked, UnitRefFromUnit(UnitFromId(1194)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 03 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Hive03Dies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(UnitFromId(1194)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/62C86722"), null, UnitGetPosition(UnitFromId(1194)));
    gv_objectiveDestroyZergHiveCount += 1;
    TriggerExecute(gt_ObjectiveDestroyZergHiveUpdate, true, false);
    PingDestroy(gv_hive03_Ping);
    UnitGroupLoopBegin(UnitGroup("Larva", EventPlayer(), RegionCircle(UnitGetPosition(UnitFromId(1194)), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Drone", EventPlayer(), RegionCircle(UnitGetPosition(UnitFromId(1194)), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowDroneDown", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_HiveDestroyedQ, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_Hive03Reinforcements, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive03Dies_Init () {
    gt_Hive03Dies = TriggerCreate("gt_Hive03Dies_Func");
    TriggerAddEventUnitDied(gt_Hive03Dies, UnitRefFromUnit(UnitFromId(1194)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 03 Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_Hive03Reinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_warpPrism;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(237));
    lv_warpPrism[1] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[1], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[1], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(242)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[1], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(238));
    lv_warpPrism[2] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[2], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[2], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(241)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[2], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(1666));
    lv_warpPrism[3] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[3], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[3], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[3], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1672)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[3], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeAI);
    gf_WarpInProtossReinforcements(PointFromId(242), libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(241), libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Stalker");
    gf_WarpInProtossReinforcements(PointFromId(1672), libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zealot");
    Wait(5.5, c_timeAI);
    TriggerEnable(gt_ProtossReinforcementsF2Helper, true);
    TriggerExecute(gt_ProtossReinforcementsF2Helper, true, false);
    Wait(0.5, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitSetOwner(lv_warpPrism[IntLoopCurrent()], gv_pLAYER_04_PROTOSS_RESCUE, false);
        UnitIssueOrder(lv_warpPrism[IntLoopCurrent()], Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    }
    IntLoopEnd();
    Wait(2.0, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitIssueOrder(lv_warpPrism[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2833)), c_orderQueueReplace);
        UnitSetHeight(lv_warpPrism[IntLoopCurrent()], 8.0, 3.0);
    }
    IntLoopEnd();
    Wait(10.0, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitRemove(lv_warpPrism[IntLoopCurrent()]);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive03Reinforcements_Init () {
    gt_Hive03Reinforcements = TriggerCreate("gt_Hive03Reinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 04 Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Hive04Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1231), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1231), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive04Attacked_Init () {
    gt_Hive04Attacked = TriggerCreate("gt_Hive04Attacked_Func");
    TriggerAddEventUnitDamaged(gt_Hive04Attacked, UnitRefFromUnit(UnitFromId(1231)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 04 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Hive04Dies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(UnitFromId(1231)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3AC333C6"), null, UnitGetPosition(UnitFromId(1231)));
    gv_objectiveDestroyZergHiveCount += 1;
    TriggerExecute(gt_ObjectiveDestroyZergHiveUpdate, true, false);
    PingDestroy(gv_hive04_Ping);
    UnitGroupLoopBegin(UnitGroup("Larva", EventPlayer(), RegionCircle(UnitGetPosition(UnitFromId(1231)), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_HiveDestroyedQ, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_Hive04Reinforcements, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive04Dies_Init () {
    gt_Hive04Dies = TriggerCreate("gt_Hive04Dies_Func");
    TriggerAddEventUnitDied(gt_Hive04Dies, UnitRefFromUnit(UnitFromId(1231)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive 04 Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_Hive04Reinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_warpPrism;
    unit lv_warpPrism01;
    unit lv_warpPrism02;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(258));
    lv_warpPrism[1] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[1], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[1], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(406)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[1], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(536));
    lv_warpPrism[2] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[2], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[2], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(899)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[2], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(1833));
    lv_warpPrism[3] = UnitLastCreated();
    UnitSetHeight(lv_warpPrism[3], 8.0, 0.0);
    UnitSetHeight(lv_warpPrism[3], 3.75, 3.0);
    UnitIssueOrder(lv_warpPrism[3], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2017)), c_orderQueueReplace);
    UnitIssueOrder(lv_warpPrism[3], Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeAI);
    gf_WarpInProtossReinforcements(PointFromId(406), libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(899), libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zealot");
    gf_WarpInProtossReinforcements(PointFromId(2017), libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zealot");
    Wait(5.5, c_timeAI);
    TriggerEnable(gt_ProtossReinforcementsF2Helper, true);
    TriggerExecute(gt_ProtossReinforcementsF2Helper, true, false);
    Wait(0.5, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitSetOwner(lv_warpPrism[IntLoopCurrent()], gv_pLAYER_04_PROTOSS_RESCUE, false);
        UnitIssueOrder(lv_warpPrism[IntLoopCurrent()], Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    }
    IntLoopEnd();
    Wait(2.0, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitIssueOrder(lv_warpPrism[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2834)), c_orderQueueReplace);
    }
    IntLoopEnd();
    Wait(10.0, c_timeAI);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitRemove(lv_warpPrism[IntLoopCurrent()]);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hive04Reinforcements_Init () {
    gt_Hive04Reinforcements = TriggerCreate("gt_Hive04Reinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hive Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_HiveDestroyedQ_Func (bool testConds, bool runActions) {
    int auto38479EE3_val;

    // Variable Declarations
    int lv_hivesDestroyedLocal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hivesDestroyedLocal = gv_objectiveDestroyZergHiveCount;
    TriggerQueueEnter();
    if ((gv_objectiveDestroyZergHiveCount != lv_hivesDestroyedLocal)) {
        return true;
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 0.25);
    auto38479EE3_val = lv_hivesDestroyedLocal;
    if (auto38479EE3_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00174", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto38479EE3_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00175", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto38479EE3_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00189", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto38479EE3_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00195", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HiveDestroyedQ_Init () {
    gt_HiveDestroyedQ = TriggerCreate("gt_HiveDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Fly Over 01
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFlyOver01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetUpUnitFlyBy(4, "Mutalisk", gv_pLAYER_07_ZERG_CINE, 12.0, PointFromId(83), PointFromId(452));
    Wait(1.0, c_timeGame);
    gf_SetUpUnitFlyBy(3, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointWithOffset(PointFromId(83), 5.0, 0.0), PointFromId(452));
    gf_SetUpUnitFlyBy(2, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointFromId(83), PointFromId(452));
    Wait(1.0, c_timeGame);
    gf_SetUpUnitFlyBy(5, "Mutalisk", gv_pLAYER_07_ZERG_CINE, 12.0, PointFromId(531), PointFromId(533));
    Wait(1.0, c_timeGame);
    gf_SetUpUnitFlyBy(2, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointWithOffset(PointFromId(531), 5.0, 0.0), PointFromId(533));
    gf_SetUpUnitFlyBy(1, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointFromId(531), PointFromId(533));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFlyOver01_Init () {
    gt_ActivateFlyOver01 = TriggerCreate("gt_ActivateFlyOver01_Func");
    TriggerAddEventTimePeriodic(gt_ActivateFlyOver01, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Fly Over 02
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFlyOver02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetUpUnitFlyBy(2, "Mutalisk", gv_pLAYER_07_ZERG_CINE, 12.0, PointFromId(947), PointFromId(948));
    gf_SetUpUnitFlyBy(1, "Mutalisk", gv_pLAYER_07_ZERG_CINE, 12.0, PointWithOffset(PointFromId(947), 2.0, 0.0), PointFromId(948));
    Wait(1.0, c_timeGame);
    gf_SetUpUnitFlyBy(2, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointWithOffset(PointFromId(947), 2.0, 0.0), PointFromId(948));
    gf_SetUpUnitFlyBy(3, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointWithOffset(PointFromId(947), -2.0, 0.0), PointFromId(948));
    Wait(2.0, c_timeGame);
    gf_SetUpUnitFlyBy(2, "Mutalisk", gv_pLAYER_07_ZERG_CINE, 12.0, PointFromId(947), PointFromId(948));
    gf_SetUpUnitFlyBy(1, "Mutalisk", gv_pLAYER_07_ZERG_CINE, 12.0, PointWithOffset(PointFromId(947), 2.0, 0.0), PointFromId(948));
    Wait(1.0, c_timeGame);
    gf_SetUpUnitFlyBy(2, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointWithOffset(PointFromId(947), 2.0, 0.0), PointFromId(948));
    gf_SetUpUnitFlyBy(3, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointWithOffset(PointFromId(947), -2.0, 0.0), PointFromId(948));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFlyOver02_Init () {
    gt_ActivateFlyOver02 = TriggerCreate("gt_ActivateFlyOver02_Func");
    TriggerAddEventTimePeriodic(gt_ActivateFlyOver02, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Fly Over 03
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFlyOver03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetUpUnitFlyBy(4, "Mutalisk", gv_pLAYER_07_ZERG_CINE, 15.0, PointFromId(1322), PointFromId(949));
    Wait(1.0, c_timeGame);
    gf_SetUpUnitFlyBy(3, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 15.0, PointWithOffset(PointFromId(1322), 5.0, 0.0), PointFromId(949));
    gf_SetUpUnitFlyBy(2, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 15.0, PointFromId(1322), PointFromId(949));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFlyOver03_Init () {
    gt_ActivateFlyOver03 = TriggerCreate("gt_ActivateFlyOver03_Func");
    TriggerAddEventTimePeriodic(gt_ActivateFlyOver03, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Fly Over 04
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFlyOver04_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetUpUnitFlyBy(4, "Mutalisk", gv_pLAYER_07_ZERG_CINE, 15.0, PointFromId(878), PointFromId(874));
    Wait(1.0, c_timeGame);
    gf_SetUpUnitFlyBy(3, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 15.0, PointWithOffset(PointFromId(878), 5.0, 0.0), PointFromId(874));
    gf_SetUpUnitFlyBy(2, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 15.0, PointFromId(878), PointFromId(874));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFlyOver04_Init () {
    gt_ActivateFlyOver04 = TriggerCreate("gt_ActivateFlyOver04_Func");
    TriggerAddEventTimePeriodic(gt_ActivateFlyOver04, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ceremonial Battle West
//--------------------------------------------------------------------------------------------------
bool gt_CeremonialBattleWest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zerglingAmount;
    int lv_hydraRoachAmount;
    int lv_mutaliskAmount;
    int lv_zealotAmount;
    int lv_dragoonAmount;
    bool lv_zergUnitSpawned;

    // Variable Initialization
    lv_zerglingAmount = 18;
    lv_hydraRoachAmount = 4;
    lv_mutaliskAmount = 2;
    lv_zealotAmount = 12;
    lv_dragoonAmount = 4;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(2352), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_PROTOSS_ALLY, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(38))), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(38))), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    while (true) {
        gv_conflictGroupZergWest = UnitGroupFilter(null, c_playerAny, gv_conflictGroupZergWest, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv_conflictGroupProtossWest = UnitGroupFilter(null, c_playerAny, gv_conflictGroupProtossWest, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_zergUnitSpawned = false;
        if ((UnitGroupCount(UnitGroupFilter("Zergling", gv_pLAYER_07_ZERG_CINE, gv_conflictGroupZergWest, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (lv_zerglingAmount - 4)) && (libVCMI_gf_GameIsOver() == false)) {
            UnitCreate(4, "Zergling", 0, gv_pLAYER_07_ZERG_CINE, RegionRandomPoint(RegionFromId(29)), 30.0);
            UnitGroupAddUnitGroup(gv_conflictGroupZergWest, UnitLastCreatedGroup());
            lv_zergUnitSpawned = true;
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Roach", gv_pLAYER_07_ZERG_CINE, gv_conflictGroupZergWest, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_hydraRoachAmount) && (libVCMI_gf_GameIsOver() == false)) {
            UnitCreate(1, "Roach", 0, gv_pLAYER_07_ZERG_CINE, RegionRandomPoint(RegionFromId(29)), 30.0);
            UnitGroupAdd(gv_conflictGroupZergWest, UnitLastCreated());
            lv_zergUnitSpawned = true;
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Hydralisk", gv_pLAYER_07_ZERG_CINE, gv_conflictGroupZergWest, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_hydraRoachAmount) && (libVCMI_gf_GameIsOver() == false)) {
            UnitCreate(1, "Hydralisk", 0, gv_pLAYER_07_ZERG_CINE, RegionRandomPoint(RegionFromId(29)), 30.0);
            UnitGroupAdd(gv_conflictGroupZergWest, UnitLastCreated());
            lv_zergUnitSpawned = true;
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Mutalisk", gv_pLAYER_07_ZERG_CINE, gv_conflictGroupZergWest, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_mutaliskAmount) && (libVCMI_gf_GameIsOver() == false)) {
            UnitCreate(1, "Mutalisk", 0, gv_pLAYER_07_ZERG_CINE, RegionRandomPoint(RegionFromId(29)), 30.0);
            UnitGroupAdd(gv_conflictGroupZergWest, UnitLastCreated());
            lv_zergUnitSpawned = true;
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Zealot", gv_pLAYER_06_PROTOSS_ALLY, gv_conflictGroupProtossWest, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (lv_zealotAmount - 2))) {
            UnitIssueOrder(UnitFromId(526), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
            UnitIssueOrder(UnitFromId(526), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
            UnitIssueOrder(UnitFromId(526), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Dragoon", gv_pLAYER_06_PROTOSS_ALLY, gv_conflictGroupProtossWest, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_dragoonAmount)) {
            UnitIssueOrder(UnitFromId(526), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 18), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((lv_zergUnitSpawned == true)) {
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(29), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", 0, c_animTimeDefault);
        }
        else {
            libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(29), null, c_animNameDefault);
        }
        if ((UnitCount(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            UnitGroupIssueOrder(gv_conflictGroupZergWest, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(38))), c_orderQueueReplace);
        }
        else {
            TriggerExecute(gt_PerformancePauseSideBattleWest, true, false);
        }
        Wait(5.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CeremonialBattleWest_Init () {
    gt_CeremonialBattleWest = TriggerCreate("gt_CeremonialBattleWest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ceremonial Battle East
//--------------------------------------------------------------------------------------------------
bool gt_CeremonialBattleEast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zerglingAmount;
    int lv_hydraRoachAmount;
    int lv_mutaliskAmount;
    int lv_zealotAmount;
    int lv_dragoonAmount;
    bool lv_zergUnitSpawned;

    // Variable Initialization
    lv_zerglingAmount = 18;
    lv_hydraRoachAmount = 4;
    lv_mutaliskAmount = 2;
    lv_zealotAmount = 12;
    lv_dragoonAmount = 4;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(517), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_PROTOSS_ALLY, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    while (true) {
        gv_conflictGroupZergEast = UnitGroupFilter(null, c_playerAny, gv_conflictGroupZergEast, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv_conflictGroupProtossEast = UnitGroupFilter(null, c_playerAny, gv_conflictGroupProtossEast, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_zergUnitSpawned = false;
        if ((UnitGroupCount(UnitGroupFilter("Zergling", gv_pLAYER_07_ZERG_CINE, gv_conflictGroupZergEast, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (lv_zerglingAmount - 4)) && (libVCMI_gf_GameIsOver() == false)) {
            UnitCreate(4, "Zergling", 0, gv_pLAYER_07_ZERG_CINE, RegionRandomPoint(RegionFromId(16)), 30.0);
            UnitGroupAddUnitGroup(gv_conflictGroupZergEast, UnitLastCreatedGroup());
            lv_zergUnitSpawned = true;
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Roach", gv_pLAYER_07_ZERG_CINE, gv_conflictGroupZergEast, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_hydraRoachAmount) && (libVCMI_gf_GameIsOver() == false)) {
            UnitCreate(1, "Roach", 0, gv_pLAYER_07_ZERG_CINE, RegionRandomPoint(RegionFromId(16)), 30.0);
            UnitGroupAdd(gv_conflictGroupZergEast, UnitLastCreated());
            lv_zergUnitSpawned = true;
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Hydralisk", gv_pLAYER_07_ZERG_CINE, gv_conflictGroupZergEast, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_hydraRoachAmount) && (libVCMI_gf_GameIsOver() == false)) {
            UnitCreate(1, "Hydralisk", 0, gv_pLAYER_07_ZERG_CINE, RegionRandomPoint(RegionFromId(16)), 30.0);
            UnitGroupAdd(gv_conflictGroupZergEast, UnitLastCreated());
            lv_zergUnitSpawned = true;
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Mutalisk", gv_pLAYER_07_ZERG_CINE, gv_conflictGroupZergEast, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_mutaliskAmount) && (libVCMI_gf_GameIsOver() == false)) {
            UnitCreate(1, "Mutalisk", 0, gv_pLAYER_07_ZERG_CINE, RegionRandomPoint(RegionFromId(16)), 30.0);
            UnitGroupAdd(gv_conflictGroupZergEast, UnitLastCreated());
            lv_zergUnitSpawned = true;
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Zealot", gv_pLAYER_06_PROTOSS_ALLY, gv_conflictGroupProtossEast, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (lv_zealotAmount - 2))) {
            UnitIssueOrder(UnitFromId(526), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
            UnitIssueOrder(UnitFromId(526), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
            UnitIssueOrder(UnitFromId(526), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("Dragoon", gv_pLAYER_06_PROTOSS_ALLY, gv_conflictGroupProtossEast, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_dragoonAmount)) {
            UnitIssueOrder(UnitFromId(526), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 18), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
        }
        else {
        }
        if ((lv_zergUnitSpawned == true)) {
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(16), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", 0, c_animTimeDefault);
        }
        else {
            libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(16), null, c_animNameDefault);
        }
        if ((UnitCount(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            UnitGroupIssueOrder(gv_conflictGroupZergEast, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
        }
        else {
            TriggerExecute(gt_PerformancePauseSideBattleEast, true, false);
        }
        Wait(5.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CeremonialBattleEast_Init () {
    gt_CeremonialBattleEast = TriggerCreate("gt_CeremonialBattleEast_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss P06 Warp In
//--------------------------------------------------------------------------------------------------
bool gt_ProtossP06WarpIn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_06_PROTOSS_ALLY))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(24)) == true)) {
        UnitGroupAdd(gv_conflictGroupProtossWest, EventUnitProgressUnit());
        while (!((UnitCount(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
            Wait(1.0, c_timeAI);
        }
        AISetUnitSuicide(EventUnitProgressUnit(), true);
    }
    else {
    }
    if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(5)) == true)) {
        UnitGroupAdd(gv_conflictGroupProtossEast, EventUnitProgressUnit());
        while (!((UnitCount(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
            Wait(1.0, c_timeAI);
        }
        AISetUnitSuicide(EventUnitProgressUnit(), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossP06WarpIn_Init () {
    gt_ProtossP06WarpIn = TriggerCreate("gt_ProtossP06WarpIn_Func");
    TriggerAddEventUnitConstructProgress(gt_ProtossP06WarpIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Twitch
//--------------------------------------------------------------------------------------------------
bool gt_NydusTwitch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_spineCrawlers;

    // Variable Initialization
    lv_spineCrawlers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spineCrawlers = UnitGroup("SpineCrawler", gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((libNtve_gf_UnitGroupIsDead(lv_spineCrawlers) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(0.5, c_timeAI);
        SoundPlayAtPointForPlayer(SoundLink("NydusSpace_SpellA", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(2799), 0.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1207)), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusTwitch_Init () {
    gt_NydusTwitch = TriggerCreate("gt_NydusTwitch_Func");
    TriggerAddEventTimePeriodic(gt_NydusTwitch, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Flyby
//--------------------------------------------------------------------------------------------------
bool gt_MothershipFlyby_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(2094)), "SetVisibility 1");
    ActorSend(ActorFromDoodad(DoodadFromId(2094)), "Signal Work");
    if ((RegionContainsPoint(RegionFromId(63), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        SoundPlayForPlayer(SoundLink("PAiur01_MothershipFlyby1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    Wait(10.0, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 2.0, 3.0, 6.0);
        SoundPlayForPlayer(SoundLink("PAiur01_MothershipFlyby2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    Wait(7.0, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(2094)), "Signal Dead");
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (libVCMI_gf_GameIsOver() == false)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
        SoundPlayForPlayer(SoundLink("PAiur01_MothershipExplosion1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("PAiur01_MothershipExplosion2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipFlyby_Init () {
    gt_MothershipFlyby = TriggerCreate("gt_MothershipFlyby_Func");
    TriggerAddEventTimePeriodic(gt_MothershipFlyby, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord Crash 1
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordCrash1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((RegionContainsPoint(RegionFromId(30), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            gf_SetUpUnitFlyBy(3, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointFromId(3982), PointFromId(3983));
            Wait(2.0, c_timeAI);
            libNtve_gf_KillDoodadsInRegion(RegionCircle(RegionGetCenter(RegionFromId(30)), 24.0), "Aiur_Broodlord_Crash");
            SoundPlayForPlayer(SoundLink("PAiur01_BroodLordIncoming", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            Wait(2.0, c_timeAI);
            if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(30)), 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
                CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.0, 1.0, 3.0);
                SoundPlayForPlayer(SoundLink("PAiur01_Shak1_sfx_CarrierCrashExplo", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordCrash1_Init () {
    gt_BroodLordCrash1 = TriggerCreate("gt_BroodLordCrash1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Lord Crash 2
//--------------------------------------------------------------------------------------------------
bool gt_BroodLordCrash2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((RegionContainsPoint(RegionFromId(32), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            gf_SetUpUnitFlyBy(3, "Phoenix", gv_pLAYER_04_PROTOSS_RESCUE, 12.0, PointFromId(3984), PointFromId(3985));
            Wait(2.0, c_timeAI);
            libNtve_gf_KillDoodadsInRegion(RegionCircle(RegionGetCenter(RegionFromId(32)), 24.0), "Aiur_Broodlord_Crash");
            SoundPlayForPlayer(SoundLink("PAiur01_BroodLordIncoming", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            Wait(2.0, c_timeAI);
            if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(32)), 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
                CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.0, 1.0, 3.0);
                SoundPlayForPlayer(SoundLink("PAiur01_Shak1_sfx_CarrierCrashExplo", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodLordCrash2_Init () {
    gt_BroodLordCrash2 = TriggerCreate("gt_BroodLordCrash2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat All Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAllUnitsDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/42177F7F"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAllUnitsDead_Init () {
    gt_DefeatAllUnitsDead = TriggerCreate("gt_DefeatAllUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatAllUnitsDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Main Objectives Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMainObjectivesCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMainObjectivesCompleted_Init () {
    gt_VictoryMainObjectivesCompleted = TriggerCreate("gt_VictoryMainObjectivesCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKillHybridComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyZergHives) == c_objectiveStateCompleted)) {
        libVoiC_gf_CampaignAwardAchievement("PAiur01_1", gv_pLAYER_01_USER);
    }
    else {
    }
    if ((PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsLostCount") < 100) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        libVoiC_gf_CampaignAwardAchievement("PAiur01_3", gv_pLAYER_01_USER);
    }
    else {
    }
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    TextExpressionSetToken("Param/Expression/ACF480BE", "A", IntToText(gv_zergUnitsKilled));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/40F7F007"), TextExpressionAssemble("Param/Expression/ACF480BE"));
    TextExpressionSetToken("Param/Expression/83371866", "A", IntToText(gv_colossusKillCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D3ED1B47"), TextExpressionAssemble("Param/Expression/83371866"));
    TextExpressionSetToken("Param/Expression/F4535E0A", "B", FixedToText((100.0 - ((gf_CreepPercent() / gv_startingCreepCoverage) * 100)), 1));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A3827A78"), TextExpressionAssemble("Param/Expression/F4535E0A"));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Colossus Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementColossusKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BOTTOM) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_ZERG_TOP)))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergUnitsKilled += 1;
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "Colossus")) {
        gv_colossusKillCount += 1;
        if ((gv_colossusKillCount >= 120) && (gv_colossusKillAchievement == false)) {
            gv_colossusKillAchievement = true;
            libVoiC_gf_CampaignAwardAchievement("PAiur01_2", gv_pLAYER_01_USER);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementColossusKills_Init () {
    gt_AchievementColossusKills = TriggerCreate("gt_AchievementColossusKills_Func");
    TriggerAddEventUnitDied(gt_AchievementColossusKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Oblivion Awaits
//--------------------------------------------------------------------------------------------------
bool gt_AchievementOblivionAwaits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_ZERG_TOP, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (GameGetMissionTime() < 600.0)) {
        libVoiC_gf_CampaignAwardAchievement("Mastery_Aiur01", gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementOblivionAwaits_Init () {
    gt_AchievementOblivionAwaits = TriggerCreate("gt_AchievementOblivionAwaits_Func");
    TriggerEnable(gt_AchievementOblivionAwaits, false);
    TriggerAddEventUnitDied(gt_AchievementOblivionAwaits, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Warp Conduits Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateWarpConduitsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur01Primary01");
    gv_objectiveActivateWarpConduits = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PAiur01Primary01", gv_objectiveActivateWarpConduitsCount);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateWarpConduitsCreate_Init () {
    gt_ObjectiveActivateWarpConduitsCreate = TriggerCreate("gt_ObjectiveActivateWarpConduitsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Warp Conduits Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateWarpConduitsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveActivateWarpConduitsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur01Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    if ((ObjectiveGetState(gv_objectiveKillHybrid) == c_objectiveStateCompleted)) {
        TriggerExecute(gt_VictoryMainObjectivesCompleted, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateWarpConduitsComplete_Init () {
    gt_ObjectiveActivateWarpConduitsComplete = TriggerCreate("gt_ObjectiveActivateWarpConduitsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Warp Conduits Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateWarpConduitsUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveActivateWarpConduitsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PAiur01Primary01", gv_objectiveActivateWarpConduitsCount);
    if ((gv_objectiveActivateWarpConduitsCount >= gv_objectiveActivateWarpConduitsMax)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveActivateWarpConduitsComplete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateWarpConduitsUpdate_Init () {
    gt_ObjectiveActivateWarpConduitsUpdate = TriggerCreate("gt_ObjectiveActivateWarpConduitsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Hybrid Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillHybridCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur01Primary02");
    gv_objectiveKillHybrid = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillHybridCreate_Init () {
    gt_ObjectiveKillHybridCreate = TriggerCreate("gt_ObjectiveKillHybridCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Hybrid Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillHybridComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillHybridCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur01Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillHybridComplete_Init () {
    gt_ObjectiveKillHybridComplete = TriggerCreate("gt_ObjectiveKillHybridComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Hive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergHiveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur01Bonus01");
    gv_objectiveDestroyZergHives = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PAiur01Bonus01", gv_objectiveDestroyZergHiveCount);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergHiveCreate_Init () {
    gt_ObjectiveDestroyZergHiveCreate = TriggerCreate("gt_ObjectiveDestroyZergHiveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Hive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergHiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyZergHiveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur01Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergHiveComplete_Init () {
    gt_ObjectiveDestroyZergHiveComplete = TriggerCreate("gt_ObjectiveDestroyZergHiveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Hive Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergHiveUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyZergHiveCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PAiur01Bonus01", gv_objectiveDestroyZergHiveCount);
    if ((gv_objectiveDestroyZergHiveCount >= gv_objectiveDestroyZergHiveMax)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyZergHiveComplete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergHiveUpdate_Init () {
    gt_ObjectiveDestroyZergHiveUpdate = TriggerCreate("gt_ObjectiveDestroyZergHiveUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_GlobalCinematicSetting(true);
    libVoiC_gf_PlayCinematic("AiurIntro", false);
    libNtve_gf_GlobalCinematicSetting(false);
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_S01, gv_pLAYER_03_ZERG_BOTTOM, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFoodIgnored, true);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_introProtossInitialUnits, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_PROTOSS_S01, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_introProtossInitialUnits, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies6", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies9", 1);
        if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "InstallationZergWander", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(254));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(328));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Purifier", c_unitCreateIgnorePlacement, gv_pLAYER_02_PROTOSS_S01, UnitGetPosition(UnitFromId(251)));
    gv_introMothership = UnitLastCreated();
    UnitGroupAdd(gv_introProtossGoldenArmada, gv_introMothership);
    UnitSetHeight(gv_introMothership, 15.0, 0.0);
    UnitBehaviorRemove(gv_introMothership, "PurifierPlanetCrackerCharge", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(250), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(468), 6.0, -1, 10, true);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 0.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(4.0, c_timeGame);
    UnitSetHeight(gv_introMothership, 4.0, 10.0);
    UnitIssueOrder(gv_introMothership, Order(AbilityCommand("PurifierPlanetCracker", 0)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("PAiur01_Mothership_beamSmallLaunch", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
    TriggerExecute(gt_IntroProtoss1, true, false);
    SoundPlayForPlayer(SoundLink("PAiur01_IntroMothership2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("PAiur01_Mothership_beamLargeLaunch", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(gv_introMothership, "PurifierPlanetCrackerDamage", UnitGroupLoopCurrent(), 500.0);
    }
    UnitGroupLoopEnd();
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 3.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ZERG_BOTTOM, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2806), 5.0, -1, 10, true);
    Wait(3.0, c_timeReal);
    UnitBehaviorRemove(gv_introMothership, "PurifierPlanetCrackerVoid", 1);
    Wait(9.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2801), 4.0, -1, 10, true);
    TriggerExecute(gt_IntroProtoss2, true, false);
    Wait(1.0, c_timeReal);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 1.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00191", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00198", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.5, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1077), 0.0, -1, 10, true);
    Wait(2.0, c_timeReal);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(2807), "HaloStart");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(2807), "SetTintColor {255,255,255 2.000000}");
    UnitGroupLoopBegin(gv_introProtossMainArmy);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_introProtossInitialUnits, RegionFromId(42), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_SendActorMessageToUnit(UnitFromId(2807), "HaloStop");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(2807), "SetTintColor 255,255,255");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(920), 0.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00192", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    if ((gv_cinematicCompleted == false)) {
        TriggerStop(gt_IntroProtoss1);
        TriggerStop(gt_IntroProtoss2);
        UnitGroupLoopBegin(gv_introProtossGoldenArmada);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_introProtossInitialUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, true);
        }
        UnitGroupLoopEnd();
    }
    else {
        UnitGroupLoopBegin(gv_introProtossInitialUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(42)) == false)) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
                UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, true);
            }
        }
        UnitGroupLoopEnd();
    }
    TriggerEnable(gt_IntroWarpIn, false);
    if ((gv_introMusicCompleted == false)) {
        TriggerStop(gt_IntroMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitSetPropertyFixed(UnitFromId(251), c_unitPropEnergyPercent, 100.0);
    CameraShakeStop(gv_pLAYER_01_USER);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_S01, gv_pLAYER_03_ZERG_BOTTOM, libNtve_ge_AllianceSetting_Enemy);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFoodIgnored, false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    if ((gv_cinematicCompleted == false)) {
        CreepModify(UnitGetPosition(UnitFromId(251)), 14.0, false, false);
    }
    else {
    }
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        CameraLockInput(gv_pLAYER_01_USER, true);
        libVoiC_gf_PauseMissionTimeCampaign(true);
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(628), lv_fadeDuration, -1, 10, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(628)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Protoss 1
//--------------------------------------------------------------------------------------------------
bool gt_IntroProtoss1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(2802));
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(32))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(2803));
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(31))), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("PAiur01_Intro_WarpPrism_flyIn_delayed5", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(31)), 2.0, 100.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(2804));
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(36))), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("PAiur01_Intro_WarpPrism_flyIn_delayed6", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(36)), 2.0, 100.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_S01, PointFromId(2805));
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(42))), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("PAiur01_Intro_WarpPrism_flyIn_delayed7", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(42)), 2.0, 100.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    while (!((UnitGroupCount(UnitGroupFilter("WarpPrismPhasing", gv_pLAYER_02_PROTOSS_S01, gv_introProtossGoldenArmada, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 4))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateConstruct, gv_pLAYER_02_PROTOSS_S01, UnitGetPosition(UnitFromId(50)));
    SoundPlayAtPointForPlayer(SoundLink("Protoss_BuildingWarpStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, 100.0, 0.0);
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "FastBuild", UnitLastCreated(), 1);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateConstruct, gv_pLAYER_02_PROTOSS_S01, UnitGetPosition(UnitFromId(49)));
    SoundPlayAtPointForPlayer(SoundLink("Protoss_BuildingWarpStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, 100.0, 0.0);
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "FastBuild", UnitLastCreated(), 1);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateConstruct, gv_pLAYER_02_PROTOSS_S01, UnitGetPosition(UnitFromId(111)));
    SoundPlayAtPointForPlayer(SoundLink("Protoss_BuildingWarpStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, 100.0, 0.0);
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "FastBuild", UnitLastCreated(), 1);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateConstruct, gv_pLAYER_02_PROTOSS_S01, UnitGetPosition(UnitFromId(51)));
    SoundPlayAtPointForPlayer(SoundLink("Protoss_BuildingWarpStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, 100.0, 0.0);
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "FastBuild", UnitLastCreated(), 1);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateConstruct, gv_pLAYER_02_PROTOSS_S01, UnitGetPosition(UnitFromId(504)));
    SoundPlayAtPointForPlayer(SoundLink("Protoss_BuildingWarpStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, 100.0, 0.0);
    UnitGroupAdd(gv_introProtossGoldenArmada, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "FastBuild", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroProtoss1_Init () {
    gt_IntroProtoss1 = TriggerCreate("gt_IntroProtoss1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Protoss 2
//--------------------------------------------------------------------------------------------------
bool gt_IntroProtoss2_Func (bool testConds, bool runActions) {
    string autoA8F7BA85_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_introProtossInitialUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        autoA8F7BA85_val = UnitGetType(UnitGroupLoopCurrent());
        if (autoA8F7BA85_val == "Zealot") {
            UnitIssueOrder(UnitFromId(2798), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(UnitGroupLoopCurrent())), c_orderQueueReplace);
        }
        else if (autoA8F7BA85_val == "Stalker") {
            UnitIssueOrder(UnitFromId(2798), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), UnitGetPosition(UnitGroupLoopCurrent())), c_orderQueueReplace);
        }
        else if (autoA8F7BA85_val == "Immortal") {
            UnitIssueOrder(UnitFromId(2798), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), UnitGetPosition(UnitGroupLoopCurrent())), c_orderQueueReplace);
        }
        else if (autoA8F7BA85_val == "HighTemplar") {
            UnitIssueOrder(UnitFromId(2798), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), UnitGetPosition(UnitGroupLoopCurrent())), c_orderQueueReplace);
        }
        else {
        }
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroProtoss2_Init () {
    gt_IntroProtoss2 = TriggerCreate("gt_IntroProtoss2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Warp In
//--------------------------------------------------------------------------------------------------
bool gt_IntroWarpIn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(1), UnitGetPosition(EventUnitProgressUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_introProtossMainArmy, EventUnitProgressUnit());
    UnitGroupAdd(gv_cinematicTempUnits, EventUnitProgressUnit());
    UnitSetFacing(EventUnitProgressUnit(), 135.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroWarpIn_Init () {
    gt_IntroWarpIn = TriggerCreate("gt_IntroWarpIn_Func");
    TriggerAddEventUnitConstructProgress(gt_IntroWarpIn, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "PAiur01_Music_Intro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CameraShakeStop(gv_pLAYER_01_USER);
    libVCUI_gf_HideCampaignDirective();
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) != 0)) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    CreepModify(RegionGetCenter(RegionFromId(41)), 32.0, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    int autoC7E4AA7B_ae;
    int autoC7E4AA7B_ai;
    int autoC1D3B590_ae;
    int autoC1D3B590_ai;
    int autoE36544BA_ae;
    int autoE36544BA_ai;
    int auto4D9BA057_ae;
    int auto4D9BA057_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1671), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(79), 10.0, -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur01_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    autoC7E4AA7B_ae = 8;
    autoC7E4AA7B_ai = 1;
    lv_i = 1;
    for ( ; ( (autoC7E4AA7B_ai >= 0 && lv_i <= autoC7E4AA7B_ae) || (autoC7E4AA7B_ai <= 0 && lv_i >= autoC7E4AA7B_ae) ) ; lv_i += autoC7E4AA7B_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_01_USER, PointFromName(("Victory Zealot " + IntToString(lv_i))), UnitGetPosition(gv_conduit03));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 6.0, AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), UnitGetPosition(gv_conduit03)))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    autoC1D3B590_ae = 3;
    autoC1D3B590_ai = 1;
    lv_i = 1;
    for ( ; ( (autoC1D3B590_ai >= 0 && lv_i <= autoC1D3B590_ae) || (autoC1D3B590_ai <= 0 && lv_i >= autoC1D3B590_ae) ) ; lv_i += autoC1D3B590_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_01_USER, PointFromName(("Victory Stalker " + IntToString(lv_i))), UnitGetPosition(gv_conduit03));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 6.0, AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), UnitGetPosition(gv_conduit03)))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    autoE36544BA_ae = 2;
    autoE36544BA_ai = 1;
    lv_i = 1;
    for ( ; ( (autoE36544BA_ai >= 0 && lv_i <= autoE36544BA_ae) || (autoE36544BA_ai <= 0 && lv_i >= autoE36544BA_ae) ) ; lv_i += autoE36544BA_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_pLAYER_01_USER, PointFromName(("Victory Immortal " + IntToString(lv_i))), UnitGetPosition(gv_conduit03));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 6.0, AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), UnitGetPosition(gv_conduit03)))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    auto4D9BA057_ae = 2;
    auto4D9BA057_ai = 1;
    lv_i = 1;
    for ( ; ( (auto4D9BA057_ai >= 0 && lv_i <= auto4D9BA057_ae) || (auto4D9BA057_ai <= 0 && lv_i >= auto4D9BA057_ae) ) ; lv_i += auto4D9BA057_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Colossus", 0, gv_pLAYER_01_USER, PointFromName(("Victory Colossus " + IntToString(lv_i))), UnitGetPosition(gv_conduit03));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 6.0, AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), UnitGetPosition(gv_conduit03)))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PauseUnit(gv_conduit03, false);
    SoundPlayForPlayer(SoundLink("Debris_Large_FlyBy_Loop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Debris_Small_FlyBy", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_conduit03, "Signal On");
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00204", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_VictoryWarpIns, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3977), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur01|Line00205", true), c_soundIndexAny)), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur01|Line00205", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Warp Ins
//--------------------------------------------------------------------------------------------------
bool gt_VictoryWarpIns_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_conduit03, "JumpGateRepulserField3", 1);
    CatalogFieldValueSet(c_gameCatalogUnit, "Phoenix", "Acceleration", gv_pLAYER_01_USER, "1000");
    CatalogFieldValueSet(c_gameCatalogUnit, "CarrierAiur", "Acceleration", gv_pLAYER_01_USER, "1000");
    TechTreeAbilityAllow(1, AbilityCommand("CarrierRepairDroneHanger", 0), false);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(2710), PointFromId(1660));
    Wait(0.25, c_timeGame);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(2711), PointFromId(1660));
    Wait(0.25, c_timeGame);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(3971), PointFromId(1660));
    Wait(3.0, c_timeGame);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(3972), PointFromId(1660));
    Wait(0.25, c_timeGame);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(3973), PointFromId(1660));
    Wait(0.25, c_timeGame);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(3974), PointFromId(1660));
    gf_VictorySetUpUnitWarpInFlyBy(1, "CarrierAiur", gv_pLAYER_01_USER, 10.0, PointFromId(3975), PointFromId(1660));
    Wait(6.0, c_timeGame);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(2710), PointFromId(1660));
    Wait(0.25, c_timeGame);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(2711), PointFromId(1660));
    Wait(0.25, c_timeGame);
    gf_VictorySetUpUnitWarpInFlyBy(1, "Phoenix", gv_pLAYER_01_USER, 10.0, PointFromId(3971), PointFromId(1660));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryWarpIns_Init () {
    gt_VictoryWarpIns = TriggerCreate("gt_VictoryWarpIns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_UIPulseAudio_Init();
    gt_PlayerUnitCreated_Init();
    gt_PlayerRescuesUnit_Init();
    gt_PerformancePauseAllAreas_Init();
    gt_PerformanceUnpauseArea1_Init();
    gt_PerformanceUnpauseArea2_Init();
    gt_PerformanceUnpauseArea3_Init();
    gt_PerformanceUnpauseArea4_Init();
    gt_PerformanceUnpauseArea5_Init();
    gt_PerformanceUnpauseArea6_Init();
    gt_PerformanceUnpauseAllCheats_Init();
    gt_PerformanceUnpauseSideBattles_Init();
    gt_PerformancePauseSideBattleWest_Init();
    gt_PerformancePauseSideBattleEast_Init();
    gt_StartGameQ_Init();
    gt_StartAI_Init();
    gt_PlayerIdleAtStart_Init();
    gt_PlayerSelectsUnits_Init();
    gt_PlayerUsesUnits_Init();
    gt_UnshareVisionWithMothershipForces_Init();
    gt_ColossusIntro_Init();
    gt_ColossusIntroTransmissionQ_Init();
    gt_TipReadyQ_Init();
    gt_ProtossReinforcementsRescue_Init();
    gt_ProtossReinforcementsF2Helper_Init();
    gt_Conduit01ConstrictionTakesDamage_Init();
    gt_ActivateWarpConduit01Q_Init();
    gt_Conduit01Reinforcements_Init();
    gt_Conduit02ConstrictionTakesDamage_Init();
    gt_ActivateWarpConduit02Q_Init();
    gt_Conduit02Reinforcements_Init();
    gt_ApproachWarpConduit03Q_Init();
    gt_ReachWarpConduit03_Init();
    gt_RevealMothershipSurvivorsProximity_Init();
    gt_SurvivorsRescuedQ_Init();
    gt_InitZerg1_Init();
    gt_InitZerg2_Init();
    gt_UnitEntersZergRush1_Init();
    gt_UnitEntersZergRush2Brutal_Init();
    gt_NydusWormWave01_Init();
    gt_SpawnNydusWorm01_Init();
    gt_ZergAreTooSmartQ_Init();
    gt_ActivateSecondWorms_Init();
    gt_NydusWormWave02_Init();
    gt_NydusWormWave03_Init();
    gt_SpawnNydusWorm02_Init();
    gt_SpawnNydusWorm03_Init();
    gt_NydusZergUnitsAI_Init();
    gt_WarpInHybrid1Q_Init();
    gt_HybridShockwave1_Init();
    gt_WarpInHybrid2Q_Init();
    gt_HybridShockwave2_Init();
    gt_HybridKilled_Init();
    gt_IntroHive01Q_Init();
    gt_Hive01Attacked_Init();
    gt_Hive01Dies_Init();
    gt_Hive01PlayerReinforcements_Init();
    gt_BonusObjectiveIntroQ_Init();
    gt_Hive02LocatedQ_Init();
    gt_Hive02Attacked_Init();
    gt_Hive02Dies_Init();
    gt_Hive02PlayerReinforcements_Init();
    gt_Hive03ChargeQ_Init();
    gt_Hive03Attacked_Init();
    gt_Hive03Dies_Init();
    gt_Hive03Reinforcements_Init();
    gt_Hive04Attacked_Init();
    gt_Hive04Dies_Init();
    gt_Hive04Reinforcements_Init();
    gt_HiveDestroyedQ_Init();
    gt_ActivateFlyOver01_Init();
    gt_ActivateFlyOver02_Init();
    gt_ActivateFlyOver03_Init();
    gt_ActivateFlyOver04_Init();
    gt_CeremonialBattleWest_Init();
    gt_CeremonialBattleEast_Init();
    gt_ProtossP06WarpIn_Init();
    gt_NydusTwitch_Init();
    gt_MothershipFlyby_Init();
    gt_BroodLordCrash1_Init();
    gt_BroodLordCrash2_Init();
    gt_DefeatAllUnitsDead_Init();
    gt_VictoryMainObjectivesCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementColossusKills_Init();
    gt_AchievementOblivionAwaits_Init();
    gt_ObjectiveActivateWarpConduitsCreate_Init();
    gt_ObjectiveActivateWarpConduitsComplete_Init();
    gt_ObjectiveActivateWarpConduitsUpdate_Init();
    gt_ObjectiveKillHybridCreate_Init();
    gt_ObjectiveKillHybridComplete_Init();
    gt_ObjectiveDestroyZergHiveCreate_Init();
    gt_ObjectiveDestroyZergHiveComplete_Init();
    gt_ObjectiveDestroyZergHiveUpdate_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroProtoss1_Init();
    gt_IntroProtoss2_Init();
    gt_IntroWarpIn_Init();
    gt_IntroMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryWarpIns_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
