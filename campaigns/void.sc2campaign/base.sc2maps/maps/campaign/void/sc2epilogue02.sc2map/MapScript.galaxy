//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Essence of Eternity
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai88D17C60"
include "ai8935C92D"
include "ai57E59F91"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION4 = 4;
const int gv_pLAYER_02_DOMINION3 = 5;
const int gv_pLAYER_02_DOMINION5 = 6;
const int gv_pLAYER_02_DOMINION6 = 7;
const int gv_pLAYER_02_DOMINION7 = 8;
const int gv_pLAYER_02_DOMINION8 = 9;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
unit gv_aRTANIS;
unit gv_kERRIGAN;
unit gv_zAGARA;
playergroup gv_enemyPlayers;
playergroup gv_alliedPlayers;
int gv_defendKerriganPing;
revealer gv_playerVision;
string gv_dangerLighting;
string gv_normalLighting;
unitgroup gv_s1_VoidForcesGroup;
timer gv_s2_ProtectKerriganTimer;
fixed gv_s2_KerriganPowerProgress;
fixed gv_s2_KerriganPowerProgressMax;
int gv_s2_KerriganLeaderboard;
timer gv_s2_KerriganNeedsToChannelReminderTimer;
int gv_kerriganUnderAttackWarningsCount;
int gv_kerriganAttackedRecently;
bool gv_protossDead;
bool gv_zergDead;
region gv_soundRegion;
actor gv_soundRegionActor;
bool gv_soundRegionCreated;
unitgroup gv_introDirectionalWave;
int gv_introDirectionalWavePing;
int gv_rageWavesActive;
unitgroup[5] gv_rageWaveGroup;
int gv_rageWaveUnitCap;
region gv_voidThrasherTerrainHideRegion;
fixed gv_kerriganLifeAchievementThreshold;
fixed gv_kerriganLowestLife;
int gv_celestialBeamKills;
bool gv_celestialAchievementAwarded;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDestroyZergBase3;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase4;
int gv_objectiveRescueStalkers;
int gv_objectiveRescueStalkers2;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_introCineVoidThrasher01;
unit gv_introCineVoidThrasher02;
unit gv_introCineVoidThrasher03;
unit gv_introCineKerrigan;
unitgroup gv_introTerranBaseGroup;
unitgroup gv_introTerranForcesGroup;
unitgroup gv_midCineFlyingStructures;
int[10] gv_midMinerals;
int[4] gv_midGas;
unit gv_midZagara;
unit gv_playersRefinery;
unit gv_cineZagara;
unit gv_cineArtanis;
unit gv_cineRaynor;
unit gv_cineVoidRift;
bool gv_cineExtinctionFired;

void InitGlobals () {
    int init_i;

    gv_enemyPlayers = PlayerGroupEmpty();
    gv_alliedPlayers = PlayerGroupEmpty();
    gv_defendKerriganPing = c_invalidPingId;
    gv_dangerLighting = "CastanarCampaign";
    gv_normalLighting = "TheVoid";
    gv_s1_VoidForcesGroup = UnitGroupEmpty();
    gv_s2_ProtectKerriganTimer = TimerCreate();
    gv_s2_KerriganPowerProgressMax = (21 * 60);
    gv_s2_KerriganLeaderboard = c_boardNone;
    gv_s2_KerriganNeedsToChannelReminderTimer = TimerCreate();
    gv_introDirectionalWave = UnitGroupEmpty();
    gv_introDirectionalWavePing = c_invalidPingId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_rageWaveGroup[init_i] = UnitGroupEmpty();
    }
    gv_voidThrasherTerrainHideRegion = RegionFromId(30);
    gv_kerriganLifeAchievementThreshold = 1500.0;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase4 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introTerranBaseGroup = UnitGroupEmpty();
    gv_introTerranForcesGroup = UnitGroupEmpty();
    gv_midCineFlyingStructures = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AIArtanis (int lp_owner, unit lp_artanis, unitgroup lp_nearbyUnits);
void gf_AIZagara (int lp_owner, unit lp_zagara, unitgroup lp_nearbyUnits);
void gf_S2_SpawnStreamingWaveUnit (int lp_qTY, string lp_uNIT_TYPE, int lp_pLAYER, point lp_sPAWN_POINT, fixed lp_dELAY);
void gf_S2_RageWaveWaitSpecial (unitgroup lp_waveGroup, fixed lp_duration);
void gf_CreateVoidThrasher (point lp_cHOSEN_POINT, fixed lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS, fixed lp_cOOLDOWN_AFTER_UNIT_ATTACKS);
void gf_DestroyPingWhenUnitDies (unit lp_unit);
void gf_HideTerrainWhileVoidThrasherIsAlive (unit lp_voidThrasher);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init01aAlliedTechnology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_ArtanisDies;
trigger gt_ArtanisRespawned;
trigger gt_ZagaraDies;
trigger gt_AddVoidShadeBehavior;
trigger gt_VoidThrasherMissiles;
trigger gt_StartGameStage01Q;
trigger gt_StartGameStage02Q;
trigger gt_S1_TransmissionCleartheAreaQ;
trigger gt_S1_KerriganSelected;
trigger gt_S1_KerriganDeSelected;
trigger gt_S1_CreateVoidForces;
trigger gt_S1_VoidTrashersAttack;
trigger gt_S1_RemoveActorfromVoidForces;
trigger gt_S1_VoidForcesUnitDies;
trigger gt_S1_VoidForcesDestroyed;
trigger gt_S2_ProgressAutoSave01;
trigger gt_S2_ProgressAutoSave02;
trigger gt_S2_ProgressAutoSave03;
trigger gt_S2_ProgressFinaleWaves;
trigger gt_S2_TransmissionProgress01Q;
trigger gt_S2_TransmissionProgress02Q;
trigger gt_S2_VoidForcesCloseInController;
trigger gt_S2_VoidForcesCloseInRifts01;
trigger gt_S2_VoidForcesCloseInRifts02;
trigger gt_S2_VoidForcesCloseInVoidRiftDies;
trigger gt_S2_VoidForcesCloseInShadowClouds01;
trigger gt_S2_VoidForcesCloseInShadowClouds02;
trigger gt_S2_VoidForcesCloseInRaynorAreaBullies;
trigger gt_S2_VoidForcesCloseInArtanisAreaBullies;
trigger gt_S2_VoidForcesCloseInZagaraAreaBullies;
trigger gt_S2_CreateProtectKerriganTimer;
trigger gt_S2_KerriganPowerProgressBar;
trigger gt_S2_KerriganAttacks;
trigger gt_S2_TransmissionKerriganNeedsToChannelReminderQ;
trigger gt_S2_FlashKerriganSelectButtonStart;
trigger gt_S2_FlashKerriganSelectButtonStop;
trigger gt_S2_TrackWarningPingVariable;
trigger gt_S2_TrackWarningPingOnKerrigan;
trigger gt_S2_TransmissionKerriganAttackedQ;
trigger gt_S2_TransmissionKerriganHealthLowQ;
trigger gt_S2_TransmissionKerriganHealthCriticalQ;
trigger gt_S2_IntroBonusObjectivesQ;
trigger gt_S2_VoidRiftsKillingPlayer;
trigger gt_S2_TransmissionPlayerInPerilQ;
trigger gt_S2_VoidRiftsForcesKillingZerg;
trigger gt_S2_TransmissionZergInPerilQ;
trigger gt_S2_VoidRiftForcesKillingProtoss;
trigger gt_S2_TransmissionProtossInPerilQ;
trigger gt_S2_ProtossBullies_Activate;
trigger gt_S2_ZergBullies_Activate;
trigger gt_S2_ProtossDeadQ;
trigger gt_S2_ZergDeadQ;
trigger gt_CelestialBeamSoundRegionClear;
trigger gt_CelestialBeamSoundFiring;
trigger gt_StartAI;
trigger gt_AI_GiveResources;
trigger gt_StartUpgradesCasualNormal;
trigger gt_StartUpgradesHardBrutal;
trigger gt_S2_SendFirstRaynorNWWave;
trigger gt_S2_FirstRaynorNWWavePing;
trigger gt_S2_TransmissionFirstRaynorNWWaveQ;
trigger gt_S2_SendFirstRaynorWWave;
trigger gt_S2_FirstRaynorWWavePing;
trigger gt_S2_TransmissionFirstRaynorWWaveQ;
trigger gt_S2_RageWave01ZagaraSE;
trigger gt_S2_RageWave02ArtanisSW;
trigger gt_S2_RageWave03RaynorNW;
trigger gt_S2_RageWave04ZagaraSE;
trigger gt_S2_RageWave05ArtanisSW;
trigger gt_S2_RageWave06RaynorW;
trigger gt_S2_RageWave07ZagaraSE;
trigger gt_S2_RageWave08ArtanisSW;
trigger gt_S2_RunFinalRageWaves;
trigger gt_S2_RageWave09RaynorNW;
trigger gt_S2_RageWave10ZagaraSE;
trigger gt_S2_RageWave11ArtanisSW;
trigger gt_S2_RageWave12RaynorW;
trigger gt_S2_TransmissionRageWave01ZagaraSEQ;
trigger gt_S2_TransmissionRageWave02ArtanisSWQ;
trigger gt_S2_TransmissionRageWave03RaynorNWQ;
trigger gt_S2_TransmissionRageWave0405ZagaraArtanisAttackQ;
trigger gt_S2_TransmissionRageWave060708RaynorZagaraArtanisAttackQ;
trigger gt_S2_TransmissionRageWave09101112FinalWavesQ;
trigger gt_S2_VoidThrasherSpawn01;
trigger gt_S2_TransmissionThrasherSpawn01Q;
trigger gt_S2_VoidThrasherSpawn02;
trigger gt_S2_TransmissionThrasherSpawn02Q;
trigger gt_S2_VoidThrasherSpawn03;
trigger gt_S2_TransmissionThrasherSpawn03Q;
trigger gt_S2_VoidThrasherSpawn04;
trigger gt_S2_TransmissionThrasherSpawn04Q;
trigger gt_S2_VoidThrasherSpawn05;
trigger gt_S2_TransmissionThrasherSpawn05Q;
trigger gt_S2_VoidThrasherSpawn06;
trigger gt_S2_TransmissionThrasherSpawn06Q;
trigger gt_StatKerrigansLowestLife;
trigger gt_AchievementUnitsKilledwithBeam;
trigger gt_DefeatBaseDead;
trigger gt_DefeatKerriganDied;
trigger gt_VictoryHoldoutCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipReadyQ;
trigger gt_TipCelestialBeam;
trigger gt_ObjectiveDestroyVoidForcesCreate;
trigger gt_ObjectiveDestroyVoidForcesComplete;
trigger gt_ObjectiveDestroyVoidForcesFailed;
trigger gt_ObjectiveKerriganMustSurviveCreate;
trigger gt_ObjectiveKerriganMustSurviveComplete;
trigger gt_ObjectiveKerriganMustSurviveFailed;
trigger gt_ObjectiveDefendKerriganCreate;
trigger gt_ObjectiveDefendKerriganComplete;
trigger gt_ObjectiveDefendKerriganFailed;
trigger gt_ObjectiveKerriganMustSurviveCreate2;
trigger gt_ObjectiveKerriganMustSurviveComplete2;
trigger gt_ObjectiveKerriganMustSurviveFailed2;
trigger gt_ObjectiveProtossSurvivalCreate;
trigger gt_ObjectiveProtossSurvivalComplete;
trigger gt_ObjectiveProtossSurvivalFailedQ;
trigger gt_ObjectiveZergSurvivalCreate;
trigger gt_ObjectiveZergSurvivalComplete;
trigger gt_ObjectiveZergSurvivalFailedQ;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroSpawnFirstVoidThrasher;
trigger gt_IntroSpawnSecondandThirdThrasher;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidLandFlyingUnitsMove;
trigger gt_MidLandFlyingUnitsLand;
trigger gt_MidMoveRaynorsUnits;
trigger gt_MidAnimateZerg;
trigger gt_MidWarpProtoss;
trigger gt_AssignWarpinUnitstoCinematicTemp;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryFurtherUnitGeneration;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai88D17C60") { ai88D17C60_start(p); }
    if (cai_playerAI[p] == "ai8935C92D") { ai8935C92D_start(p); }
    if (cai_playerAI[p] == "ai57E59F91") { ai57E59F91_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai88D17C60") { ai88D17C60_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai8935C92D") { ai8935C92D_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai57E59F91") { ai57E59F91_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai88D17C60") { return ai88D17C60_getCustomData(p); }
    if (cai_playerAI[p] == "ai8935C92D") { return ai8935C92D_getCustomData(p); }
    if (cai_playerAI[p] == "ai57E59F91") { return ai57E59F91_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai88D17C60") { return ai88D17C60_getLastWave(p); }
    if (cai_playerAI[p] == "ai8935C92D") { return ai8935C92D_getLastWave(p); }
    if (cai_playerAI[p] == "ai57E59F91") { return ai57E59F91_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai88D17C60") { ai88D17C60_waves_run(p, target); }
    if (cai_playerAI[p] == "ai8935C92D") { ai8935C92D_waves_run(p, target); }
    if (cai_playerAI[p] == "ai57E59F91") { ai57E59F91_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai88D17C60") { ai88D17C60_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai8935C92D") { ai8935C92D_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai57E59F91") { ai57E59F91_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai88D17C60") { ai88D17C60_waves_stop(); }
    if (ai == "ai8935C92D") { ai8935C92D_waves_stop(); }
    if (ai == "ai57E59F91") { ai57E59F91_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai88D17C60") { ai88D17C60_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai8935C92D") { ai8935C92D_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai57E59F91") { ai57E59F91_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai88D17C60") { ai88D17C60_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai8935C92D") { ai8935C92D_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai57E59F91") { ai57E59F91_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai88D17C60") { return ai88D17C60_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai8935C92D") { return ai8935C92D_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai57E59F91") { return ai57E59F91_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai88D17C60") { return ai88D17C60_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai8935C92D") { return ai8935C92D_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai57E59F91") { return ai57E59F91_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai88D17C60") { return ai88D17C60_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai8935C92D") { return ai8935C92D_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai57E59F91") { return ai57E59F91_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai88D17C60", 4);
    cai_start("ai8935C92D", 5);
    cai_start("ai57E59F91", 6);
    AICampaignStart(2);
    AICampaignStart(3);
    AICampaignStart(7);
    AICampaignStart(8);
    AICampaignStart(9);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 7);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 7);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 7);
    cai_waves_run(6, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AIArtanis (int lp_owner, unit lp_artanis, unitgroup lp_nearbyUnits) {
    unitgroup auto2B06C860_g;
    int auto2B06C860_u;
    unitgroup auto6079380E_g;
    int auto6079380E_u;

    // Variable Declarations
    unitgroup lv_enemyGroup8;
    unit lv_currentUnit;
    unit lv_target;
    int lv_clusterCount;

    // Variable Initialization
    lv_enemyGroup8 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup8 = libVCMI_gf_AITacticalEnemiesWithinRange(lp_artanis, 8.0, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitAbilityCheck(lp_artanis, "ArtanisLightningDash", true) == true) && (UnitCheckAbilCmdState(lp_artanis, AbilityCommand("ArtanisLightningDash", 0), c_cmdStateCooldown) == false) && (UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0)) {
        lv_target = null;
        lv_clusterCount = 2;
        auto2B06C860_g = lv_enemyGroup8;
        auto2B06C860_u = 1;
        for ( ; auto2B06C860_u <= UnitGroupCount(auto2B06C860_g, c_unitCountAll) ; auto2B06C860_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto2B06C860_g, auto2B06C860_u)) ) {
            lv_currentUnit = UnitGroupUnit(auto2B06C860_g, auto2B06C860_u);
            if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_artanis), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentUnit), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > lv_clusterCount)) {
                lv_target = lv_currentUnit;
                lv_clusterCount = UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_artanis), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentUnit), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            }
            else {
            }
        }
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_artanis, OrderTargetingPoint(AbilityCommand("ArtanisLightningDash", 0), UnitGetPosition(lv_target)));
        }
        else {
            lv_target = UnitGroupRandomUnit(lv_enemyGroup8, c_unitCountAlive);
            auto6079380E_g = lv_enemyGroup8;
            auto6079380E_u = 1;
            for ( ; auto6079380E_u <= UnitGroupCount(auto6079380E_g, c_unitCountAll) ; auto6079380E_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto6079380E_g, auto6079380E_u)) ) {
                lv_currentUnit = UnitGroupUnit(auto6079380E_g, auto6079380E_u);
                if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropLifeMax, c_unitPropCurrent) > UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent))) {
                    lv_target = lv_currentUnit;
                }
                else {
                }
            }
            libNtve_gf_AICast(lp_artanis, OrderTargetingPoint(AbilityCommand("ArtanisLightningDash", 0), UnitGetPosition(lv_target)));
        }
    }
    else {
    }
    if ((libNtve_gf_UnitInRegion(lp_artanis, RegionFromId(33)) == false) && (libNtve_gf_UnitInRegion(lp_artanis, RegionFromId(39)) == false)) {
        libNtve_gf_AICast(lp_artanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(120)));
    }
    else {
        if ((libNtve_gf_UnitInRegion(lp_artanis, RegionFromId(33)) == false) && (libNtve_gf_UnitInRegion(lp_artanis, RegionFromId(39)) == true)) {
            libNtve_gf_AICast(lp_artanis, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(120)));
        }
        else {
        }
    }
}

void gf_AIZagara (int lp_owner, unit lp_zagara, unitgroup lp_nearbyUnits) {
    unitgroup auto26F9DB50_g;
    int auto26F9DB50_u;

    // Variable Declarations
    unitgroup lv_friendlyGroup7;
    unit lv_currentUnit;
    fixed lv_mostDamage;
    unit lv_target;

    // Variable Initialization
    lv_friendlyGroup7 = UnitGroupEmpty();

    // Implementation
    lv_friendlyGroup7 = UnitGroupAlliance(UnitGetOwner(lp_zagara), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_zagara), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    if ((UnitAbilityCheck(lp_zagara, "Transfusion", true) == true) && (UnitCheckAbilCmdState(lp_zagara, AbilityCommand("Transfusion", 0), c_cmdStateCooldown) == false) && (UnitGetPropertyFixed(lp_zagara, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("Transfusion", "Energy")) && (UnitGroupCount(lv_friendlyGroup7, c_unitCountAlive) > 0)) {
        lv_target = null;
        lv_mostDamage = 50.0;
        auto26F9DB50_g = lv_friendlyGroup7;
        auto26F9DB50_u = 1;
        for ( ; auto26F9DB50_u <= UnitGroupCount(auto26F9DB50_g, c_unitCountAll) ; auto26F9DB50_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto26F9DB50_g, auto26F9DB50_u)) ) {
            lv_currentUnit = UnitGroupUnit(auto26F9DB50_g, auto26F9DB50_u);
            if (((UnitGetPropertyFixed(lv_currentUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_currentUnit, c_unitPropLife, c_unitPropCurrent)) > lv_mostDamage)) {
                lv_target = lv_currentUnit;
                lv_mostDamage = (UnitGetPropertyFixed(lv_currentUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_currentUnit, c_unitPropLife, c_unitPropCurrent));
            }
            else {
            }
        }
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_zagara, OrderTargetingUnit(AbilityCommand("Transfusion", 0), lv_target));
        }
        else {
        }
    }
    else {
    }
}

trigger auto_gf_S2_SpawnStreamingWaveUnit_Trigger = null;
int auto_gf_S2_SpawnStreamingWaveUnit_lp_qTY;
string auto_gf_S2_SpawnStreamingWaveUnit_lp_uNIT_TYPE;
int auto_gf_S2_SpawnStreamingWaveUnit_lp_pLAYER;
point auto_gf_S2_SpawnStreamingWaveUnit_lp_sPAWN_POINT;
fixed auto_gf_S2_SpawnStreamingWaveUnit_lp_dELAY;

void gf_S2_SpawnStreamingWaveUnit (int lp_qTY, string lp_uNIT_TYPE, int lp_pLAYER, point lp_sPAWN_POINT, fixed lp_dELAY) {
    auto_gf_S2_SpawnStreamingWaveUnit_lp_qTY = lp_qTY;
    auto_gf_S2_SpawnStreamingWaveUnit_lp_uNIT_TYPE = lp_uNIT_TYPE;
    auto_gf_S2_SpawnStreamingWaveUnit_lp_pLAYER = lp_pLAYER;
    auto_gf_S2_SpawnStreamingWaveUnit_lp_sPAWN_POINT = lp_sPAWN_POINT;
    auto_gf_S2_SpawnStreamingWaveUnit_lp_dELAY = lp_dELAY;

    if (auto_gf_S2_SpawnStreamingWaveUnit_Trigger == null) {
        auto_gf_S2_SpawnStreamingWaveUnit_Trigger = TriggerCreate("auto_gf_S2_SpawnStreamingWaveUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_S2_SpawnStreamingWaveUnit_Trigger, false, false);
}

bool auto_gf_S2_SpawnStreamingWaveUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_qTY = auto_gf_S2_SpawnStreamingWaveUnit_lp_qTY;
    string lp_uNIT_TYPE = auto_gf_S2_SpawnStreamingWaveUnit_lp_uNIT_TYPE;
    int lp_pLAYER = auto_gf_S2_SpawnStreamingWaveUnit_lp_pLAYER;
    point lp_sPAWN_POINT = auto_gf_S2_SpawnStreamingWaveUnit_lp_sPAWN_POINT;
    fixed lp_dELAY = auto_gf_S2_SpawnStreamingWaveUnit_lp_dELAY;

    point auto3E983B38_val;

    // Implementation
    if ((libVCMI_gf_GameIsOver() == false)) {
        libNtve_gf_CreateUnitsAtPoint2(lp_qTY, lp_uNIT_TYPE, 0, lp_pLAYER, lp_sPAWN_POINT);
        AIAttackWaveSetTargetUnit(lp_pLAYER, gv_kERRIGAN);
        auto3E983B38_val = lp_sPAWN_POINT;
        if (auto3E983B38_val == PointFromId(358)) {
            AIAttackWaveSetGatherPoint(lp_pLAYER, PointFromId(1103));
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(16), false);
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(79), false);
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(362), false);
            UnitGroupAddUnitGroup(gv_rageWaveGroup[1], UnitLastCreatedGroup());
        }
        else if (auto3E983B38_val == PointFromId(359)) {
            AIAttackWaveSetGatherPoint(lp_pLAYER, PointFromId(351));
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(15), false);
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(106), false);
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(362), false);
            UnitGroupAddUnitGroup(gv_rageWaveGroup[2], UnitLastCreatedGroup());
        }
        else if (auto3E983B38_val == PointFromId(357)) {
            AIAttackWaveSetGatherPoint(lp_pLAYER, PointFromId(350));
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(106), false);
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(362), false);
            UnitGroupAddUnitGroup(gv_rageWaveGroup[3], UnitLastCreatedGroup());
        }
        else if (auto3E983B38_val == PointFromId(356)) {
            AIAttackWaveSetGatherPoint(lp_pLAYER, PointFromId(1101));
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(79), false);
            AIAttackWaveAddWaypoint(lp_pLAYER, PointFromId(362), false);
            UnitGroupAddUnitGroup(gv_rageWaveGroup[4], UnitLastCreatedGroup());
        }
        else {
        }
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
            AIAttackWaveUseUnit(lp_pLAYER, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        AIAttackWaveSend(lp_pLAYER, FixedToInt(lp_dELAY), false);
    }
    else {
    }
    return true;
}

void gf_S2_RageWaveWaitSpecial (unitgroup lp_waveGroup, fixed lp_duration) {
    // Implementation
    Wait(lp_duration, c_timeAI);
    if ((UnitGroupCount(lp_waveGroup, c_unitCountAlive) >= gv_rageWaveUnitCap)) {
        while (!((UnitGroupCount(lp_waveGroup, c_unitCountAlive) < gv_rageWaveUnitCap))) {
            Wait(1.0, c_timeAI);
        }
    }
    else {
    }
}

trigger auto_gf_CreateVoidThrasher_Trigger = null;
point auto_gf_CreateVoidThrasher_lp_cHOSEN_POINT;
fixed auto_gf_CreateVoidThrasher_lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS;
fixed auto_gf_CreateVoidThrasher_lp_cOOLDOWN_AFTER_UNIT_ATTACKS;

void gf_CreateVoidThrasher (point lp_cHOSEN_POINT, fixed lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS, fixed lp_cOOLDOWN_AFTER_UNIT_ATTACKS) {
    auto_gf_CreateVoidThrasher_lp_cHOSEN_POINT = lp_cHOSEN_POINT;
    auto_gf_CreateVoidThrasher_lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS = lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS;
    auto_gf_CreateVoidThrasher_lp_cOOLDOWN_AFTER_UNIT_ATTACKS = lp_cOOLDOWN_AFTER_UNIT_ATTACKS;

    if (auto_gf_CreateVoidThrasher_Trigger == null) {
        auto_gf_CreateVoidThrasher_Trigger = TriggerCreate("auto_gf_CreateVoidThrasher_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateVoidThrasher_Trigger, false, false);
}

bool auto_gf_CreateVoidThrasher_TriggerFunc (bool testConds, bool runActions) {
    point lp_cHOSEN_POINT = auto_gf_CreateVoidThrasher_lp_cHOSEN_POINT;
    fixed lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS = auto_gf_CreateVoidThrasher_lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS;
    fixed lp_cOOLDOWN_AFTER_UNIT_ATTACKS = auto_gf_CreateVoidThrasher_lp_cOOLDOWN_AFTER_UNIT_ATTACKS;

    // Variable Declarations
    unit lv_voidThrasher;

    // Variable Initialization

    // Implementation
    if ((lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS > 0.0)) {
        libNtve_gf_UnitCreateFacingPoint(1, "VoidThrasher", 0, gv_pLAYER_02_DOMINION4, lp_cHOSEN_POINT, UnitGetPosition(gv_kERRIGAN));
        lv_voidThrasher = UnitLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_voidThrasher), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
        UnitSetPropertyFixed(lv_voidThrasher, c_unitPropLifeMax, 1000.0);
        UnitSetPropertyFixed(lv_voidThrasher, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(lv_voidThrasher, c_unitPropShieldsMax, 800.0);
        UnitSetPropertyFixed(lv_voidThrasher, c_unitPropShieldsPercent, 100.0);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_voidThrasher), 3.0), 4.0, false);
        gf_HideTerrainWhileVoidThrasherIsAlive(lv_voidThrasher);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_voidThrasher), 2.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingObjective", UnitGetPosition(lv_voidThrasher), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        libHots_gf_StorePingForUnit(lv_voidThrasher, 1, PingLastCreated());
        PingSetUnit(PingLastCreated(), lv_voidThrasher);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3BE2CB14"));
        gf_DestroyPingWhenUnitDies(lv_voidThrasher);
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5D3A6615"), null, lv_voidThrasher);
        Wait(6.0, c_timeGame);
        while ((UnitIsAlive(lv_voidThrasher) == true) && (libVCMI_gf_GameIsOver() == false)) {
            if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lv_voidThrasher), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_voidThrasher), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_voidThrasher, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(lv_voidThrasher), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_voidThrasher), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                Wait(lp_cOOLDOWN_AFTER_UNIT_ATTACKS, c_timeGame);
            }
            else {
                UnitIssueOrder(lv_voidThrasher, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_kERRIGAN), c_orderQueueReplace);
                Wait(lp_cOOLDOWN_AFTER_KERRIGAN_ATTACKS, c_timeGame);
            }
        }
    }
    else {
    }
    return true;
}

trigger auto_gf_DestroyPingWhenUnitDies_Trigger = null;
unit auto_gf_DestroyPingWhenUnitDies_lp_unit;

void gf_DestroyPingWhenUnitDies (unit lp_unit) {
    auto_gf_DestroyPingWhenUnitDies_lp_unit = lp_unit;

    if (auto_gf_DestroyPingWhenUnitDies_Trigger == null) {
        auto_gf_DestroyPingWhenUnitDies_Trigger = TriggerCreate("auto_gf_DestroyPingWhenUnitDies_TriggerFunc");
    }

    TriggerExecute(auto_gf_DestroyPingWhenUnitDies_Trigger, false, false);
}

bool auto_gf_DestroyPingWhenUnitDies_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_DestroyPingWhenUnitDies_lp_unit;

    // Implementation
    while (!((UnitIsAlive(lp_unit) == false))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lp_unit, 1));
    return true;
}

trigger auto_gf_HideTerrainWhileVoidThrasherIsAlive_Trigger = null;
unit auto_gf_HideTerrainWhileVoidThrasherIsAlive_lp_voidThrasher;

void gf_HideTerrainWhileVoidThrasherIsAlive (unit lp_voidThrasher) {
    auto_gf_HideTerrainWhileVoidThrasherIsAlive_lp_voidThrasher = lp_voidThrasher;

    if (auto_gf_HideTerrainWhileVoidThrasherIsAlive_Trigger == null) {
        auto_gf_HideTerrainWhileVoidThrasherIsAlive_Trigger = TriggerCreate("auto_gf_HideTerrainWhileVoidThrasherIsAlive_TriggerFunc");
    }

    TriggerExecute(auto_gf_HideTerrainWhileVoidThrasherIsAlive_Trigger, false, false);
}

bool auto_gf_HideTerrainWhileVoidThrasherIsAlive_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidThrasher = auto_gf_HideTerrainWhileVoidThrasherIsAlive_lp_voidThrasher;

    // Variable Declarations
    bool lv_terrainHidden;
    point lv_voidThrasherPoint;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    lv_voidThrasherPoint = UnitGetPosition(lp_voidThrasher);
    RegionSetCenter(RegionFromId(30), lv_voidThrasherPoint);
    TerrainShowRegion(gv_voidThrasherTerrainHideRegion, false);
    lv_terrainHidden = true;
    while ((UnitIsAlive(lp_voidThrasher) == true)) {
        if ((libNtve_gf_UnitIsHidden(lp_voidThrasher) == true)) {
            if ((lv_terrainHidden == true)) {
                RegionSetCenter(RegionFromId(30), lv_voidThrasherPoint);
                TerrainShowRegion(gv_voidThrasherTerrainHideRegion, true);
                lv_terrainHidden = false;
            }
            else {
            }
        }
        else {
            if ((lv_terrainHidden == false)) {
                RegionSetCenter(RegionFromId(30), lv_voidThrasherPoint);
                TerrainShowRegion(gv_voidThrasherTerrainHideRegion, false);
                lv_terrainHidden = true;
            }
            else {
            }
        }
        Wait(0.25, c_timeGame);
    }
    RegionSetCenter(RegionFromId(30), lv_voidThrasherPoint);
    TerrainShowRegion(gv_voidThrasherTerrainHideRegion, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("SC2Epilogue02");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TriggerExecute(gt_Init01aAlliedTechnology, true, false);
    libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationImmediate);
    libVoiC_gf_EnableCampaignTechUnit(true, "SCV", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Marine", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Marauder", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Medic", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Reaper", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Spectre", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Firebat", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Hellion", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Vulture", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Goliath", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Diamondback", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Siege Tank", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Thor", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Viking", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Wraith", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Medivac", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Banshee", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Battlecruiser", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "ScienceVessel", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "CommandCenter", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Bunker", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "MissileTurret", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SensorTower", gv_pLAYER_01_USER);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "VoidSpectre", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "CombatShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "Stimpack", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "PunisherGrenades", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "StabilizerMedPacks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "ClusterBomb", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "PermanentCloakSpectre", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "UltrasonicPulse", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SiegeTankShapedBlast", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "AresClassWeaponsSystem", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "NanoConstructor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "TwinLinkedFlameThrowers", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "TransformationServos", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "MechanicalRebirth", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HALORockets", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "ClusterWarheads", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "BansheeCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "AdvancedHealingAI", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "YamatoCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "BattlecruiserEnableSpecializations", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "NeosteelFrame", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "ShrikeTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "TechReactor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "AutoHarvester", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "SupplyDepotDrop", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "RegenerativeBioSteel", 1);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("EngineeringBayResearch", 2), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("EngineeringBayResearch", 3), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("EngineeringBayResearch", 4), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("EngineeringBayResearch", 6), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("EngineeringBayResearch", 7), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("EngineeringBayResearch", 8), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ArmoryResearchSwarm", 3), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ArmoryResearchSwarm", 4), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ArmoryResearchSwarm", 5), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ArmoryResearchSwarm", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ArmoryResearchSwarm", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ArmoryResearchSwarm", 2), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MengskMercTrain", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MengskMercTrain", 1), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MengskMercTrain", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MengskMercTrain", 3), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MengskMercTrain", 4), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TrainKorhalMercenaries", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TrainKorhalMercenaries", 3), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TrainKorhalMercenaries", 1), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TrainKorhalMercenaries", 10), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TrainKorhalMercenaries", 9), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01a Allied Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01aAlliedTechnology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION8, "CombatShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION8, "SiegeTankShapedBlast", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION8, "NeosteelFrame", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION8, "ShrikeTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION8, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION8, "TechReactor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION8, "AutoHarvester", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION8, "RegenerativeBioSteel", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "K5ImprovedOverlords", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "K5AutoExtractor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "K5ZerglingRespawn", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZerglingRaptor", gv_pLAYER_02_DOMINION);
    libVoiC_gf_EnableCampaignTechUnit(true, "BanelingSplitter", gv_pLAYER_02_DOMINION);
    libVoiC_gf_EnableCampaignTechUnit(true, "HydraliskLurker", gv_pLAYER_02_DOMINION);
    libVoiC_gf_EnableCampaignTechUnit(true, "RoachCorpser", gv_pLAYER_02_DOMINION);
    libVoiC_gf_EnableCampaignTechUnit(true, "MutaliskBroodlord", gv_pLAYER_02_DOMINION);
    libVoiC_gf_EnableCampaignTechUnit(true, "UltraliskTorrasque", gv_pLAYER_02_DOMINION);
    libVoiC_gf_EnableCampaignTechUnit(true, "SwarmHostCreeper", gv_pLAYER_02_DOMINION);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZealotAiur", gv_pLAYER_02_DOMINION2);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryPurifier", gv_pLAYER_02_DOMINION2);
    libVoiC_gf_EnableCampaignTechUnit(true, "StalkerShakuras", gv_pLAYER_02_DOMINION2);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalTaldarim", gv_pLAYER_02_DOMINION2);
    libVoiC_gf_EnableCampaignTechUnit(true, "DarkTemplarShakuras", gv_pLAYER_02_DOMINION2);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusTaldarim", gv_pLAYER_02_DOMINION2);
    libVoiC_gf_EnableCampaignTechUnit(true, "HighTemplarShakuras", gv_pLAYER_02_DOMINION2);
    libVoiC_gf_EnableCampaignTechUnit(true, "CarrierAiur", gv_pLAYER_02_DOMINION2);
    libVoiC_gf_EnableCampaignTechUnit(true, "PhoenixAiur", gv_pLAYER_02_DOMINION2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01aAlliedTechnology_Init () {
    gt_Init01aAlliedTechnology = TriggerCreate("gt_Init01aAlliedTechnology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_alliedPlayers, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_alliedPlayers, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_alliedPlayers, gv_pLAYER_02_DOMINION6);
    PlayerGroupAdd(gv_alliedPlayers, gv_pLAYER_02_DOMINION8);
    PlayerGroupAdd(gv_alliedPlayers, gv_pLAYER_02_DOMINION7);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION4);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION4, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION3, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "HeroicShieldCleanUp", 1);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateMineralCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateVespeneCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateFoodIgnored, true);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateMineralCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateVespeneCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateFoodIgnored, true);
    }
    PlayerGroupLoopEnd();
    PlayerSetState(gv_pLAYER_02_DOMINION4, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_02_DOMINION3, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_02_DOMINION5, c_playerStateFidgetingEnabled, false);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION4, 1, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION3, 1, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION5, 1, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_voidUnitGroup;

    // Variable Initialization
    lv_voidUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kERRIGAN = UnitFromId(360);
    gv_zAGARA = UnitFromId(108);
    gv_aRTANIS = UnitFromId(621);
    UnitBehaviorRemove(gv_zAGARA, "ZaGaraDontDie", 1);
    UnitSetState(gv_kERRIGAN, c_unitStateTargetable, false);
    UnitSetState(gv_kERRIGAN, c_unitStateStatusBar, false);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropBaseMovementSpeed, 0.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropMovementSpeed, 0.0);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_aRTANIS), "Cover");
    libNtve_gf_ShowHideUnit(UnitFromId(48), false);
    libNtve_gf_ShowHideUnit(UnitFromId(41), false);
    libNtve_gf_ShowHideUnit(UnitFromId(40), false);
    UnitGroupLoopBegin(UnitGroup("Carrier", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitMagazineArm(UnitGroupLoopCurrent(), AbilityCommand("CarrierHangar", 0), 8);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(2));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(3));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(5));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFromId(6));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(lv_voidUnitGroup, UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_voidUnitGroup, UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_voidUnitGroup, UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(lv_voidUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "VoidShade", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PEpilogue02_Music_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(3500.0, 3500.0, 2500.0, 2500.0));
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    gv_kerriganLowestLife = UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropLife, c_unitPropCurrent);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "VoidThrasherEpilogue02", 1);
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShieldWall", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "PunisherGrenades", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel1", 1);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShieldWall", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "PunisherGrenades", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel1", 1);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("KerriganCelestialBeam");
    libVCMI_gf_AddMissionTipCampaign("VoidThrasher");
    libVCMI_gf_AddMissionTipCampaign("VoidRift");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HellionTank", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Vulture", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Dies
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_HandleHeroDeathVoid(gv_aRTANIS, null, -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisDies_Init () {
    gt_ArtanisDies = TriggerCreate("gt_ArtanisDies_Func");
    TriggerAddEventUnitDied(gt_ArtanisDies, UnitRefFromVariable("gv_aRTANIS"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Respawned
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisRespawned_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "ArtanisVoid"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(EventUnitProgressUnit()), "Cover");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisRespawned_Init () {
    gt_ArtanisRespawned = TriggerCreate("gt_ArtanisRespawned_Func");
    TriggerAddEventUnitConstructProgress(gt_ArtanisRespawned, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Dies
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_HandleHeroDeathVoid(gv_zAGARA, null, -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraDies_Init () {
    gt_ZagaraDies = TriggerCreate("gt_ZagaraDies_Func");
    TriggerAddEventUnitDied(gt_ZagaraDies, UnitRefFromVariable("gv_zAGARA"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Void Shade Behavior
//--------------------------------------------------------------------------------------------------
bool gt_AddVoidShadeBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "VoidShade") == false) && (UnitGetType(UnitGroupLoopCurrent()) != "VoidThrasher")) {
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "VoidShade", UnitGetOwner(UnitGroupLoopCurrent()), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "VoidShade") == false) && (UnitGetType(UnitGroupLoopCurrent()) != "VoidThrasher")) {
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "VoidShade", UnitGetOwner(UnitGroupLoopCurrent()), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddVoidShadeBehavior_Init () {
    gt_AddVoidShadeBehavior = TriggerCreate("gt_AddVoidShadeBehavior_Func");
    TriggerAddEventTimePeriodic(gt_AddVoidShadeBehavior, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Missiles
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missileUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "KaiserWormScourgeMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missileUnit = EventUnit();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "KaiserWormScourgeMissile", UnitGetPosition(lv_missileUnit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, UnitGetFacing(lv_missileUnit));
    libHots_gf_StorePingForUnit(lv_missileUnit, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), lv_missileUnit);
    PingSetScale(PingLastCreated(), 0.075);
    while (!((UnitIsAlive(EventUnit()) == false))) {
        Wait(0.0625, c_timeGame);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lv_missileUnit, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherMissiles_Init () {
    gt_VoidThrasherMissiles = TriggerCreate("gt_VoidThrasherMissiles_Func");
    TriggerAddEventUnitRegion(gt_VoidThrasherMissiles, null, RegionPlayableMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Stage 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage01Q_Func (bool testConds, bool runActions) {
    string auto05879F37_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4427C835"), null, UnitGetPosition(gv_kERRIGAN));
    UnitControlGroupAddUnit(gv_pLAYER_01_USER, 1, gv_kERRIGAN);
    libVCUI_gf_SetHeroPanelUnit(1, gv_kERRIGAN);
    TriggerEnable(gt_S1_KerriganSelected, true);
    TriggerEnable(gt_S1_VoidForcesDestroyed, true);
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_kERRIGAN), StringExternal("Param/Value/651F66CE"));
    libHots_gf_StorePingForUnit(gv_kERRIGAN, 1, PingLastCreated());
    gv_defendKerriganPing = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_kERRIGAN);
    Wait(0.5, c_timeReal);
    UnitGroupLoopBegin(gv_s1_VoidForcesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto05879F37_val = UnitGetType(UnitGroupLoopCurrent());
        if (auto05879F37_val == "VoidThrasher") {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingObjective", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
            libHots_gf_StorePingForUnit(UnitGroupLoopCurrent(), 1, PingLastCreated());
            PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9B786374"));
            Wait(0.125, c_timeGame);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyVoidForcesCreate, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, true);
    if ((UnitIsSelected(gv_kERRIGAN, gv_pLAYER_01_USER) == false)) {
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ZergMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/8EFFCA6B"), gv_kERRIGAN, "Ref_Head");
        libHots_gf_StoreActorForUnit(gv_kERRIGAN, 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(gv_kERRIGAN, 1, TextTagLastCreated());
    }
    else {
    }
    Wait(1.0, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_TipCelestialBeam, true, false);
    TriggerExecute(gt_S1_TransmissionCleartheAreaQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage01Q_Init () {
    gt_StartGameStage01Q = TriggerCreate("gt_StartGameStage01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Stage 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage02Q_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4A0B2182"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(1));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(5));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(14));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(15));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_pLAYER_01_USER);
    UnitIssueOrder(UnitFromId(28), OrderTargetingUnit(AbilityCommand("RallyCommand", 0), UnitFromId(8)), c_orderQueueReplace);
    TriggerExecute(gt_S2_ProtossBullies_Activate, true, false);
    TriggerExecute(gt_S2_ZergBullies_Activate, true, false);
    TriggerExecute(gt_S2_VoidForcesCloseInController, true, false);
    TriggerExecute(gt_S2_TrackWarningPingOnKerrigan, true, false);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, true);
    TriggerEnable(gt_S2_TransmissionKerriganHealthLowQ, true);
    TriggerEnable(gt_S2_TransmissionKerriganHealthCriticalQ, true);
    TriggerEnable(gt_S2_ZergDeadQ, true);
    TriggerEnable(gt_S2_ProtossDeadQ, true);
    TriggerEnable(gt_DefeatBaseDead, true);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDefendKerriganCreate, true, true);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate2, true, true);
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_kERRIGAN), StringExternal("Param/Value/0C7B12F7"));
    gv_defendKerriganPing = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_kERRIGAN);
    libHots_gf_StorePingForUnit(gv_kERRIGAN, 1, PingLastCreated());
    libNtve_gf_ShareVisionofUnit(gv_kERRIGAN, true, gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BD7CCBEF"), null, UnitGetPosition(gv_kERRIGAN));
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_S2_CreateProtectKerriganTimer, true, false);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00049", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00050", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_zAGARA, "Mission_Epilogue02|Line00066", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage02Q_Init () {
    gt_StartGameStage02Q = TriggerCreate("gt_StartGameStage02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1_Transmission - Clear the Area Q
//--------------------------------------------------------------------------------------------------
bool gt_S1_TransmissionCleartheAreaQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00064", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((UnitGroupCount(gv_s1_VoidForcesGroup, c_unitCountAlive) > 0)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00044", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1_TransmissionCleartheAreaQ_Init () {
    gt_S1_TransmissionCleartheAreaQ = TriggerCreate("gt_S1_TransmissionCleartheAreaQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1_Kerrigan Selected
//--------------------------------------------------------------------------------------------------
bool gt_S1_KerriganSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1_KerriganDeSelected, true);
    if ((libHots_gf_ActorForUnit(gv_kERRIGAN, 1) != null)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_kERRIGAN, 1));
    }
    else {
    }
    if ((libHots_gf_TextTagForUnit(EventUnit(), 1) != c_textTagNone)) {
        TextTagDestroy(libHots_gf_TextTagForUnit(gv_kERRIGAN, 1));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1_KerriganSelected_Init () {
    gt_S1_KerriganSelected = TriggerCreate("gt_S1_KerriganSelected_Func");
    TriggerEnable(gt_S1_KerriganSelected, false);
    TriggerAddEventUnitSelected(gt_S1_KerriganSelected, UnitRefFromVariable("gv_kERRIGAN"), gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1_Kerrigan De-Selected
//--------------------------------------------------------------------------------------------------
bool gt_S1_KerriganDeSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1_KerriganSelected, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1_KerriganDeSelected_Init () {
    gt_S1_KerriganDeSelected = TriggerCreate("gt_S1_KerriganDeSelected_Func");
    TriggerEnable(gt_S1_KerriganDeSelected, false);
    TriggerAddEventUnitSelected(gt_S1_KerriganDeSelected, UnitRefFromVariable("gv_kERRIGAN"), gv_pLAYER_01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1_Create Void Forces
//--------------------------------------------------------------------------------------------------
bool gt_S1_CreateVoidForces_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(1, "VoidThrasher", 0, gv_pLAYER_02_DOMINION4, PointFromId(59), UnitGetPosition(gv_kERRIGAN));
    UnitGroupAdd(gv_s1_VoidForcesGroup, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 1000.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, 800.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    gf_HideTerrainWhileVoidThrasherIsAlive(UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(1, "VoidThrasher", 0, gv_pLAYER_02_DOMINION4, PointFromId(590), UnitGetPosition(gv_kERRIGAN));
    UnitGroupAdd(gv_s1_VoidForcesGroup, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 1000.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, 800.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    gf_HideTerrainWhileVoidThrasherIsAlive(UnitLastCreated());
    Wait(0.1, c_timeGame);
    UnitGroupLoopBegin(gv_s1_VoidForcesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(6.0, c_timeGame);
    TriggerExecute(gt_S1_VoidTrashersAttack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1_CreateVoidForces_Init () {
    gt_S1_CreateVoidForces = TriggerCreate("gt_S1_CreateVoidForces_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1_Void Trashers Attack
//--------------------------------------------------------------------------------------------------
bool gt_S1_VoidTrashersAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitGroupCount(UnitGroup("VoidThrasher", gv_pLAYER_02_DOMINION4, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitGroupLoopBegin(UnitGroup("VoidThrasher", gv_pLAYER_02_DOMINION4, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_kERRIGAN), c_orderQueueReplace);
                Wait(2.0, c_timeGame);
            }
            UnitGroupLoopEnd();
            Wait(4.0, c_timeGame);
        }
        else {
            break;
            TriggerStop(TriggerGetCurrent());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1_VoidTrashersAttack_Init () {
    gt_S1_VoidTrashersAttack = TriggerCreate("gt_S1_VoidTrashersAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1_Remove Actor from Void Forces
//--------------------------------------------------------------------------------------------------
bool gt_S1_RemoveActorfromVoidForces_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_s1_VoidForcesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnit(), 0) == 0.0) && (libHots_gf_TextTagForUnit(EventUnit(), 1) != c_textTagNone)) {
        UnitSetCustomValue(EventUnit(), 0, 1.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1_RemoveActorfromVoidForces_Init () {
    gt_S1_RemoveActorfromVoidForces = TriggerCreate("gt_S1_RemoveActorfromVoidForces_Func");
    TriggerAddEventUnitDamaged(gt_S1_RemoveActorfromVoidForces, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1_Void Forces Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_S1_VoidForcesUnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_s1_VoidForcesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_PingStoredForUnit(EventUnit(), 1) != c_invalidPingId)) {
        PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1_VoidForcesUnitDies_Init () {
    gt_S1_VoidForcesUnitDies = TriggerCreate("gt_S1_VoidForcesUnitDies_Func");
    TriggerAddEventUnitDied(gt_S1_VoidForcesUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1_Void Forces Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_S1_VoidForcesDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1_VoidForcesGroup, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1_TransmissionCleartheAreaQ, false);
    TransmissionClearAll();
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/15B12535"));
    UnitIssueOrder(gv_kERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    TriggerEnable(gt_S1_RemoveActorfromVoidForces, false);
    TriggerEnable(gt_S1_KerriganSelected, false);
    TriggerEnable(gt_S1_KerriganDeSelected, false);
    UnitSelect(gv_kERRIGAN, gv_pLAYER_01_USER, false);
    TriggerExecute(gt_ObjectiveDestroyVoidForcesComplete, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveComplete, true, true);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1_VoidForcesDestroyed_Init () {
    gt_S1_VoidForcesDestroyed = TriggerCreate("gt_S1_VoidForcesDestroyed_Func");
    TriggerEnable(gt_S1_VoidForcesDestroyed, false);
    TriggerAddEventTimePeriodic(gt_S1_VoidForcesDestroyed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Progress Auto Save 01
//--------------------------------------------------------------------------------------------------
bool gt_S2_ProgressAutoSave01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetElapsed(gv_s2_ProtectKerriganTimer) > (10.0 * 60.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_ProgressAutoSave02, true);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E701EFE3"));
    TriggerExecute(gt_S2_TransmissionProgress01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_ProgressAutoSave01_Init () {
    gt_S2_ProgressAutoSave01 = TriggerCreate("gt_S2_ProgressAutoSave01_Func");
    TriggerEnable(gt_S2_ProgressAutoSave01, false);
    TriggerAddEventTimePeriodic(gt_S2_ProgressAutoSave01, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Progress Auto Save 02
//--------------------------------------------------------------------------------------------------
bool gt_S2_ProgressAutoSave02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetElapsed(gv_s2_ProtectKerriganTimer) > (16.0 * 60.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_ProgressAutoSave03, true);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/4CAA2C0E"));
    TriggerExecute(gt_S2_TransmissionProgress02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_ProgressAutoSave02_Init () {
    gt_S2_ProgressAutoSave02 = TriggerCreate("gt_S2_ProgressAutoSave02_Func");
    TriggerEnable(gt_S2_ProgressAutoSave02, false);
    TriggerAddEventTimePeriodic(gt_S2_ProgressAutoSave02, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Progress Auto Save 03
//--------------------------------------------------------------------------------------------------
bool gt_S2_ProgressAutoSave03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetElapsed(gv_s2_ProtectKerriganTimer) > (19.0 * 60.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_ProgressFinaleWaves, true);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7E880912"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_ProgressAutoSave03_Init () {
    gt_S2_ProgressAutoSave03 = TriggerCreate("gt_S2_ProgressAutoSave03_Func");
    TriggerEnable(gt_S2_ProgressAutoSave03, false);
    TriggerAddEventTimePeriodic(gt_S2_ProgressAutoSave03, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Progress Finale Waves
//--------------------------------------------------------------------------------------------------
bool gt_S2_ProgressFinaleWaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetElapsed(gv_s2_ProtectKerriganTimer) > (19.5 * 60.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2_RunFinalRageWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_ProgressFinaleWaves_Init () {
    gt_S2_ProgressFinaleWaves = TriggerCreate("gt_S2_ProgressFinaleWaves_Func");
    TriggerEnable(gt_S2_ProgressFinaleWaves, false);
    TriggerAddEventTimePeriodic(gt_S2_ProgressFinaleWaves, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Progress 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionProgress01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00081", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionProgress01Q_Init () {
    gt_S2_TransmissionProgress01Q = TriggerCreate("gt_S2_TransmissionProgress01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Progress 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionProgress02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00082", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionProgress02Q_Init () {
    gt_S2_TransmissionProgress02Q = TriggerCreate("gt_S2_TransmissionProgress02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In Controller
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait((5.0 * 60.0), c_timeAI);
    TriggerExecute(gt_S2_VoidForcesCloseInRifts01, true, false);
    Wait((5.0 * 60.0), c_timeAI);
    TriggerExecute(gt_S2_VoidForcesCloseInShadowClouds01, true, false);
    Wait((5.0 * 60.0), c_timeAI);
    TriggerExecute(gt_S2_VoidForcesCloseInShadowClouds02, true, false);
    Wait((5.0 * 60.0), c_timeAI);
    TriggerExecute(gt_S2_VoidForcesCloseInRifts02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInController_Init () {
    gt_S2_VoidForcesCloseInController = TriggerCreate("gt_S2_VoidForcesCloseInController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In - Rifts 01
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInRifts01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(5));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_unitPoint = UnitGetPosition(UnitGroupLoopCurrent());
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRiftAutoBuild", c_unitCreateIgnorePlacement, UnitGetOwner(UnitGroupLoopCurrent()), lv_unitPoint);
        Wait(60.0, c_timeAI);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInRifts01_Init () {
    gt_S2_VoidForcesCloseInRifts01 = TriggerCreate("gt_S2_VoidForcesCloseInRifts01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In - Rifts 02
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInRifts02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(6));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_unitPoint = UnitGetPosition(UnitGroupLoopCurrent());
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRiftAutoBuild", c_unitCreateIgnorePlacement, UnitGetOwner(UnitGroupLoopCurrent()), lv_unitPoint);
        Wait(60.0, c_timeAI);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInRifts02_Init () {
    gt_S2_VoidForcesCloseInRifts02 = TriggerCreate("gt_S2_VoidForcesCloseInRifts02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In - Void Rift Dies
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInVoidRiftDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_voidRiftPoint;

    // Variable Initialization
    lv_voidRiftPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION5))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VoidRift"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(60.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRiftAutoBuild", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION5, lv_voidRiftPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInVoidRiftDies_Init () {
    gt_S2_VoidForcesCloseInVoidRiftDies = TriggerCreate("gt_S2_VoidForcesCloseInVoidRiftDies_Func");
    TriggerAddEventUnitDied(gt_S2_VoidForcesCloseInVoidRiftDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In - Shadow Clouds 01
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInShadowClouds01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(2));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_unitPoint = UnitGetPosition(UnitGroupLoopCurrent());
        UnitSetPosition(UnitGroupLoopCurrent(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupLoopCurrent()), -20.0, UnitGetPosition(gv_kERRIGAN)), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), lv_unitPoint), c_orderQueueReplace);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity 1.000000 1.000000");
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInShadowClouds01_Init () {
    gt_S2_VoidForcesCloseInShadowClouds01 = TriggerCreate("gt_S2_VoidForcesCloseInShadowClouds01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In - Shadow Clouds 02
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInShadowClouds02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(3));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_unitPoint = UnitGetPosition(UnitGroupLoopCurrent());
        UnitSetPosition(UnitGroupLoopCurrent(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupLoopCurrent()), -20.0, UnitGetPosition(gv_kERRIGAN)), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), lv_unitPoint), c_orderQueueReplace);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity 1.000000 1.000000");
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInShadowClouds02_Init () {
    gt_S2_VoidForcesCloseInShadowClouds02 = TriggerCreate("gt_S2_VoidForcesCloseInShadowClouds02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In - Raynor Area Bullies
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInRaynorAreaBullies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(22), true);
    Wait((10.0 * 60.0), c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(23), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInRaynorAreaBullies_Init () {
    gt_S2_VoidForcesCloseInRaynorAreaBullies = TriggerCreate("gt_S2_VoidForcesCloseInRaynorAreaBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In - Artanis Area Bullies
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInArtanisAreaBullies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(31), true);
    Wait((10.0 * 60.0), c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(32), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInArtanisAreaBullies_Init () {
    gt_S2_VoidForcesCloseInArtanisAreaBullies = TriggerCreate("gt_S2_VoidForcesCloseInArtanisAreaBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Forces Close In - Zagara Area Bullies
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidForcesCloseInZagaraAreaBullies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(34), true);
    Wait((10.0 * 60.0), c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(34), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidForcesCloseInZagaraAreaBullies_Init () {
    gt_S2_VoidForcesCloseInZagaraAreaBullies = TriggerCreate("gt_S2_VoidForcesCloseInZagaraAreaBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Create Protect Kerrigan Timer
//--------------------------------------------------------------------------------------------------
bool gt_S2_CreateProtectKerriganTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_s2_ProtectKerriganTimer, gv_s2_KerriganPowerProgressMax, false, c_timeGame);
    gv_s2_ProtectKerriganTimer = TimerLastStarted();
    TimerStart(gv_s2_KerriganNeedsToChannelReminderTimer, 30.0, false, c_timeGame);
    TimerPause(TimerLastStarted(), true);
    TriggerExecute(gt_S2_KerriganPowerProgressBar, true, false);
    TriggerEnable(gt_S2_KerriganAttacks, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_CreateProtectKerriganTimer_Init () {
    gt_S2_CreateProtectKerriganTimer = TriggerCreate("gt_S2_CreateProtectKerriganTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Kerrigan Power Progress Bar
//--------------------------------------------------------------------------------------------------
bool gt_S2_KerriganPowerProgressBar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_DisplayProgressBar(StringExternal("Param/Value/E2A2EE00"), 0, 100);
    libVCUI_gf_SetProgressBarProgress(FixedToInt((100.0 * (gv_s2_KerriganPowerProgress / gv_s2_KerriganPowerProgressMax))));
    libVCUI_gf_SetProgressBarLabel((StringExternal("Param/Value/7846DBC3") + FixedToText((100.0 * (gv_s2_KerriganPowerProgress / gv_s2_KerriganPowerProgressMax)), 1) + StringExternal("Param/Value/CF8AA956")));
    SoundPlay(SoundLink("UI_DropdownListSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    while (true) {
        Wait(1.0, c_timeGame);
        gv_s2_KerriganPowerProgress = TimerGetElapsed(gv_s2_ProtectKerriganTimer);
        libVCUI_gf_SetProgressBarProgress(FixedToInt((100.0 * (gv_s2_KerriganPowerProgress / gv_s2_KerriganPowerProgressMax))));
        if ((TimerIsPaused(gv_s2_ProtectKerriganTimer) == true)) {
            libVCUI_gf_SetProgressBarLabel((StringExternal("Param/Value/75784CD7") + FixedToText((100.0 * (gv_s2_KerriganPowerProgress / gv_s2_KerriganPowerProgressMax)), 1) + StringExternal("Param/Value/C93EBE22")));
        }
        else {
            libVCUI_gf_SetProgressBarLabel((StringExternal("Param/Value/7249DFF5") + FixedToText((100.0 * (gv_s2_KerriganPowerProgress / gv_s2_KerriganPowerProgressMax)), 1) + StringExternal("Param/Value/F4150FC4")));
        }
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_KerriganPowerProgressBar_Init () {
    gt_S2_KerriganPowerProgressBar = TriggerCreate("gt_S2_KerriganPowerProgressBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Kerrigan Attacks
//--------------------------------------------------------------------------------------------------
bool gt_S2_KerriganAttacks_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_s2_ProtectKerriganTimer, true);
    if ((TimerGetRemaining(gv_s2_KerriganNeedsToChannelReminderTimer) > 0.0)) {
        TimerPause(gv_s2_KerriganNeedsToChannelReminderTimer, false);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    TimerPause(gv_s2_ProtectKerriganTimer, false);
    if ((TimerGetRemaining(gv_s2_KerriganNeedsToChannelReminderTimer) > 0.0)) {
        TimerPause(gv_s2_KerriganNeedsToChannelReminderTimer, true);
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_KerriganAttacks_Init () {
    gt_S2_KerriganAttacks = TriggerCreate("gt_S2_KerriganAttacks_Func");
    TriggerEnable(gt_S2_KerriganAttacks, false);
    TriggerAddEventUnitDamaged(gt_S2_KerriganAttacks, null, c_unitDamageTypeAny, c_unitDamageEither, "CelestialBeamWeaponDamage");
    TriggerAddEventUnitDamaged(gt_S2_KerriganAttacks, null, c_unitDamageTypeAny, c_unitDamageEither, "CelestialBeamWeaponInitialDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Kerrigan Needs To Channel Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionKerriganNeedsToChannelReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6D6A112C"), null, UnitGetPosition(gv_kERRIGAN));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionKerriganNeedsToChannelReminderQ_Init () {
    gt_S2_TransmissionKerriganNeedsToChannelReminderQ = TriggerCreate("gt_S2_TransmissionKerriganNeedsToChannelReminderQ_Func");
    TriggerAddEventTimer(gt_S2_TransmissionKerriganNeedsToChannelReminderQ, gv_s2_KerriganNeedsToChannelReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Flash Kerrigan Select Button Start
//--------------------------------------------------------------------------------------------------
bool gt_S2_FlashKerriganSelectButtonStart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsSelected(gv_kERRIGAN, gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueVoidBoolean(true, true, false, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_FlashScreenButton(1, 2.0, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), ColorWithAlpha(100.00, 100.00, 100.00, 0.00));
    TriggerEnable(gt_S2_FlashKerriganSelectButtonStop, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_FlashKerriganSelectButtonStart_Init () {
    gt_S2_FlashKerriganSelectButtonStart = TriggerCreate("gt_S2_FlashKerriganSelectButtonStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Flash Kerrigan Select Button Stop
//--------------------------------------------------------------------------------------------------
bool gt_S2_FlashKerriganSelectButtonStop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopFlashingScreenButton(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_FlashKerriganSelectButtonStop_Init () {
    gt_S2_FlashKerriganSelectButtonStop = TriggerCreate("gt_S2_FlashKerriganSelectButtonStop_Func");
    TriggerEnable(gt_S2_FlashKerriganSelectButtonStop, false);
    TriggerAddEventUnitSelected(gt_S2_FlashKerriganSelectButtonStop, UnitRefFromVariable("gv_kERRIGAN"), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Track Warning Ping Variable
//--------------------------------------------------------------------------------------------------
bool gt_S2_TrackWarningPingVariable_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "VoidThrasher"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerriganAttackedRecently += 1;
    Wait(4.0, c_timeGame);
    gv_kerriganAttackedRecently -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TrackWarningPingVariable_Init () {
    gt_S2_TrackWarningPingVariable = TriggerCreate("gt_S2_TrackWarningPingVariable_Func");
    TriggerAddEventUnitDamaged(gt_S2_TrackWarningPingVariable, UnitRefFromVariable("gv_kERRIGAN"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Track Warning Ping On Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_S2_TrackWarningPingOnKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;
    bool lv_pingActive;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(8.0, c_timeGame);
    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((gv_kerriganAttackedRecently > 0)) {
            if ((lv_pingActive == false)) {
                lv_pingActive = true;
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_kERRIGAN), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
                lv_ping = PingLastCreated();
            }
            else {
            }
        }
        else {
            lv_pingActive = false;
            PingDestroy(lv_ping);
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TrackWarningPingOnKerrigan_Init () {
    gt_S2_TrackWarningPingOnKerrigan = TriggerCreate("gt_S2_TrackWarningPingOnKerrigan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Kerrigan Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionKerriganAttackedQ_Func (bool testConds, bool runActions) {
    int auto82A3DB22_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, c_unitPropCurrent) >= 66.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_kerriganUnderAttackWarningsCount += 1;
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3D32914C"), null, UnitGetPosition(gv_kERRIGAN));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto82A3DB22_val = ModI(gv_kerriganUnderAttackWarningsCount, 3);
    if (auto82A3DB22_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00052", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto82A3DB22_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00096", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto82A3DB22_val == 0) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00097", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (!((UnitGetDamageTakenTime(gv_kERRIGAN) > 20.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionKerriganAttackedQ_Init () {
    gt_S2_TransmissionKerriganAttackedQ = TriggerCreate("gt_S2_TransmissionKerriganAttackedQ_Func");
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, false);
    TriggerAddEventUnitDamaged(gt_S2_TransmissionKerriganAttackedQ, UnitRefFromVariable("gv_kERRIGAN"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Kerrigan Health Low Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionKerriganHealthLowQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, c_unitPropCurrent) < 66.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B3B0AE85"), null, UnitGetPosition(gv_kERRIGAN));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00098", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (!((UnitGetDamageTakenTime(gv_kERRIGAN) > 20.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionKerriganHealthLowQ_Init () {
    gt_S2_TransmissionKerriganHealthLowQ = TriggerCreate("gt_S2_TransmissionKerriganHealthLowQ_Func");
    TriggerEnable(gt_S2_TransmissionKerriganHealthLowQ, false);
    TriggerAddEventUnitDamaged(gt_S2_TransmissionKerriganHealthLowQ, UnitRefFromVariable("gv_kERRIGAN"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Kerrigan Health Critical Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionKerriganHealthCriticalQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, c_unitPropCurrent) < 33.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/784557C4"), null, UnitGetPosition(gv_kERRIGAN));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00099", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (!((UnitGetDamageTakenTime(gv_kERRIGAN) > 20.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionKerriganHealthCriticalQ_Init () {
    gt_S2_TransmissionKerriganHealthCriticalQ = TriggerCreate("gt_S2_TransmissionKerriganHealthCriticalQ_Func");
    TriggerEnable(gt_S2_TransmissionKerriganHealthCriticalQ, false);
    TriggerAddEventUnitDamaged(gt_S2_TransmissionKerriganHealthCriticalQ, UnitRefFromVariable("gv_kERRIGAN"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Intro Bonus Objectives Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_IntroBonusObjectivesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_ProtossDeadQ, true);
    TriggerEnable(gt_S2_ZergDeadQ, true);
    Wait(15.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveProtossSurvivalCreate, true, false);
    TriggerExecute(gt_ObjectiveZergSurvivalCreate, true, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00051", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_S2_VoidForcesCloseInZagaraAreaBullies, true, false);
    TriggerExecute(gt_S2_VoidForcesCloseInArtanisAreaBullies, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_IntroBonusObjectivesQ_Init () {
    gt_S2_IntroBonusObjectivesQ = TriggerCreate("gt_S2_IntroBonusObjectivesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Rifts Killing Player
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidRiftsKillingPlayer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/EFF7E0E2"), null, EventUnit());
    TriggerExecute(gt_S2_TransmissionPlayerInPerilQ, true, false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidRiftsKillingPlayer_Init () {
    gt_S2_VoidRiftsKillingPlayer = TriggerCreate("gt_S2_VoidRiftsKillingPlayer_Func");
    TriggerEnable(gt_S2_VoidRiftsKillingPlayer, false);
    TriggerAddEventUnitDamaged(gt_S2_VoidRiftsKillingPlayer, null, c_unitDamageTypeAny, c_unitDamageEither, "Epilogue02VoidRiftDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Player In Peril Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionPlayerInPerilQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_zAGARA, "Mission_Epilogue02|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionPlayerInPerilQ_Init () {
    gt_S2_TransmissionPlayerInPerilQ = TriggerCreate("gt_S2_TransmissionPlayerInPerilQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Rifts/Forces Killing Zerg
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidRiftsForcesKillingZerg_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!(((EventUnitDamageSourcePlayer() == gv_pLAYER_02_DOMINION4) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_DOMINION3) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_DOMINION5)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_02_DOMINION, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpineCrawler"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SporeCrawler"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorBurrowed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/03CC92BA"), null, EventUnit());
    TriggerExecute(gt_S2_TransmissionZergInPerilQ, true, false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidRiftsForcesKillingZerg_Init () {
    gt_S2_VoidRiftsForcesKillingZerg = TriggerCreate("gt_S2_VoidRiftsForcesKillingZerg_Func");
    TriggerEnable(gt_S2_VoidRiftsForcesKillingZerg, false);
    TriggerAddEventUnitDamaged(gt_S2_VoidRiftsForcesKillingZerg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Zerg In Peril Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionZergInPerilQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_zAGARA, "Mission_Epilogue02|Line00054", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionZergInPerilQ_Init () {
    gt_S2_TransmissionZergInPerilQ = TriggerCreate("gt_S2_TransmissionZergInPerilQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Rift/Forces Killing Protoss
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidRiftForcesKillingProtoss_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!(((EventUnitDamageSourcePlayer() == gv_pLAYER_02_DOMINION4) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_DOMINION3) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_DOMINION5)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_02_DOMINION2, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/21120746"), null, EventUnit());
    TriggerExecute(gt_S2_TransmissionProtossInPerilQ, true, false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidRiftForcesKillingProtoss_Init () {
    gt_S2_VoidRiftForcesKillingProtoss = TriggerCreate("gt_S2_VoidRiftForcesKillingProtoss_Func");
    TriggerEnable(gt_S2_VoidRiftForcesKillingProtoss, false);
    TriggerAddEventUnitDamaged(gt_S2_VoidRiftForcesKillingProtoss, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Protoss In Peril Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionProtossInPerilQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00055", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionProtossInPerilQ_Init () {
    gt_S2_TransmissionProtossInPerilQ = TriggerCreate("gt_S2_TransmissionProtossInPerilQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_ProtossBullies_Activate
//--------------------------------------------------------------------------------------------------
bool gt_S2_ProtossBullies_Activate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_protossDead == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(18), true);
        Wait((5.0 * 60.0), c_timeGame);
        if ((gv_protossDead == false)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(16), true);
            Wait((7.0 * 60.0), c_timeGame);
            if ((gv_protossDead == false)) {
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(17), true);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_ProtossBullies_Activate_Init () {
    gt_S2_ProtossBullies_Activate = TriggerCreate("gt_S2_ProtossBullies_Activate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_ZergBullies_Activate
//--------------------------------------------------------------------------------------------------
bool gt_S2_ZergBullies_Activate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_zergDead == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(19), true);
        Wait((5.0 * 60.0), c_timeGame);
        if ((gv_zergDead == false)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(20), true);
            Wait((7.0 * 60.0), c_timeGame);
            if ((gv_zergDead == false)) {
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(21), true);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_ZergBullies_Activate_Init () {
    gt_S2_ZergBullies_Activate = TriggerCreate("gt_S2_ZergBullies_Activate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_ProtossDead Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_ProtossDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Nexus", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_protossDead = true;
    TriggerEnable(gt_S2_VoidRiftForcesKillingProtoss, false);
    TriggerStop(gt_S2_VoidRiftForcesKillingProtoss);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(6), false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveProtossSurvivalFailedQ, true, true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_zergDead == true)) {
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00101", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_ProtossDeadQ_Init () {
    gt_S2_ProtossDeadQ = TriggerCreate("gt_S2_ProtossDeadQ_Func");
    TriggerEnable(gt_S2_ProtossDeadQ, false);
    TriggerAddEventTimePeriodic(gt_S2_ProtossDeadQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_ZergDead Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_ZergDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Lair", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Hive", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_zergDead = true;
    TriggerEnable(gt_S2_VoidRiftsForcesKillingZerg, false);
    TriggerStop(gt_S2_VoidRiftsForcesKillingZerg);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(6), false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveZergSurvivalFailedQ, true, true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_protossDead == true)) {
        libVCMI_gf_SendTransmissionCampaign(gv_zAGARA, "Mission_Epilogue02|Line00106", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00107", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_zAGARA, "Mission_Epilogue02|Line00105", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_ZergDeadQ_Init () {
    gt_S2_ZergDeadQ = TriggerCreate("gt_S2_ZergDeadQ_Func");
    TriggerEnable(gt_S2_ZergDeadQ, false);
    TriggerAddEventTimePeriodic(gt_S2_ZergDeadQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Celestial Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool gt_CelestialBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(gv_soundRegionActor), "Signal StopSound");
        gv_soundRegion = RegionEmpty();
        gv_soundRegionCreated = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CelestialBeamSoundRegionClear_Init () {
    gt_CelestialBeamSoundRegionClear = TriggerCreate("gt_CelestialBeamSoundRegionClear_Func");
    TriggerAddEventPlayerEffectUsed(gt_CelestialBeamSoundRegionClear, c_playerAny, "CelestialBeamWeaponFinalPersistantEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Celestial Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool gt_CelestialBeamSoundFiring_Func (bool testConds, bool runActions) {
    int auto6B813145_ae;
    int auto6B813145_ai;

    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(gv_soundRegionActor), "Signal StopSound");
        gv_soundRegion = RegionEmpty();
        gv_soundRegionCreated = false;
    }
    else {
    }
    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    gv_soundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto6B813145_ae = lv_di;
    auto6B813145_ai = 1;
    lv_i = 1;
    for ( ; ( (auto6B813145_ai >= 0 && lv_i <= auto6B813145_ae) || (auto6B813145_ai <= 0 && lv_i >= auto6B813145_ae) ) ; lv_i += auto6B813145_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(gv_soundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "CelestialBeamRegion", gv_soundRegion);
    gv_soundRegionActor = libNtve_gf_ActorLastCreated();
    gv_soundRegionCreated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CelestialBeamSoundFiring_Init () {
    gt_CelestialBeamSoundFiring = TriggerCreate("gt_CelestialBeamSoundFiring_Func");
    TriggerAddEventPlayerEffectUsed(gt_CelestialBeamSoundFiring, c_playerAny, "CelestialBeamWeaponFinalPersistant");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_StartUpgradesCasualNormal, true, false);
    }
    else {
        TriggerExecute(gt_StartUpgradesHardBrutal, true, false);
    }
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DOMINION2, "ArtanisVoid", "AIArtanis", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DOMINION, "ZaGara", "AIZagara", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI_Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AI_GiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_GiveResources_Init () {
    gt_AI_GiveResources = TriggerCreate("gt_AI_GiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AI_GiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades - Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesCasualNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(480.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(420.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesCasualNormal_Init () {
    gt_StartUpgradesCasualNormal = TriggerCreate("gt_StartUpgradesCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades - Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHardBrutal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel3", 1);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_alliedPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel3", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHardBrutal_Init () {
    gt_StartUpgradesHardBrutal = TriggerCreate("gt_StartUpgradesHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Send First Raynor NW Wave
//--------------------------------------------------------------------------------------------------
bool gt_S2_SendFirstRaynorNWWave_Func (bool testConds, bool runActions) {
    int auto0190A5B3_n;
    int auto0190A5B3_i;
    int autoC3C22ACD_n;
    int autoC3C22ACD_i;
    int auto7C256BEC_n;
    int auto7C256BEC_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto0190A5B3_n = libLotv_gf_DifficultyValueInt2(4, 4, 4, 6);
    for (auto0190A5B3_i = 1; auto0190A5B3_i <= auto0190A5B3_n; auto0190A5B3_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_DOMINION4, PointFromId(358));
        UnitGroupAdd(gv_introDirectionalWave, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1103)), c_orderQueueReplace);
    }
    autoC3C22ACD_n = libLotv_gf_DifficultyValueInt2(2, 2, 2, 3);
    for (autoC3C22ACD_i = 1; autoC3C22ACD_i <= autoC3C22ACD_n; autoC3C22ACD_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_02_DOMINION4, PointFromId(358));
        UnitGroupAdd(gv_introDirectionalWave, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1103)), c_orderQueueReplace);
    }
    auto7C256BEC_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 1);
    for (auto7C256BEC_i = 1; auto7C256BEC_i <= auto7C256BEC_n; auto7C256BEC_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Thor", 0, gv_pLAYER_02_DOMINION4, PointFromId(358));
        UnitGroupAdd(gv_introDirectionalWave, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1103)), c_orderQueueReplace);
    }
    TriggerExecute(gt_S2_FirstRaynorNWWavePing, true, false);
    TriggerExecute(gt_S2_TransmissionFirstRaynorNWWaveQ, true, false);
    Wait(60.0, c_timeGame);
    if ((UnitGroupCount(gv_introDirectionalWave, c_unitCountAlive) > 0)) {
        AIAttackWaveSetTargetUnit(gv_pLAYER_02_DOMINION4, gv_kERRIGAN);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION4, PointFromId(79), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION4, PointFromId(362), false);
        UnitGroupLoopBegin(gv_introDirectionalWave);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION4, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        AIAttackWaveSend(gv_pLAYER_02_DOMINION4, 0, false);
    }
    else {
    }
    TriggerExecute(gt_S2_VoidForcesCloseInRaynorAreaBullies, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_SendFirstRaynorNWWave_Init () {
    gt_S2_SendFirstRaynorNWWave = TriggerCreate("gt_S2_SendFirstRaynorNWWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_First Raynor NW Wave Ping
//--------------------------------------------------------------------------------------------------
bool gt_S2_FirstRaynorNWWavePing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/DDAB8DAC"), null, PointFromId(358));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingAlert", PointFromId(1103), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_introDirectionalWavePing = PingLastCreated();
    PingSetVisible(gv_introDirectionalWavePing, false);
    PingSetScale(gv_introDirectionalWavePing, 0.6);
    PingSetTooltip(gv_introDirectionalWavePing, StringExternal("Param/Value/063FD24B"));
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }
        else {
        }
        if ((libNtve_gf_UnitGroupIsDead(gv_introDirectionalWave) == true)) {
            PingDestroy(gv_introDirectionalWavePing);
            return true;
        }
        else {
            PingSetPosition(gv_introDirectionalWavePing, UnitGroupCenterOfGroup(gv_introDirectionalWave));
            PingSetVisible(gv_introDirectionalWavePing, true);
            UnitGroupLoopBegin(gv_introDirectionalWave);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER)) {
                    UnitGroupRemove(gv_introDirectionalWave, UnitGroupLoopCurrent());
                }
                else {
                }
            }
            UnitGroupLoopEnd();
        }
        Wait(0.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_FirstRaynorNWWavePing_Init () {
    gt_S2_FirstRaynorNWWavePing = TriggerCreate("gt_S2_FirstRaynorNWWavePing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - First Raynor NW Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionFirstRaynorNWWaveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00056", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00057", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_S2_FlashKerriganSelectButtonStart, true, false);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00091", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionFirstRaynorNWWaveQ_Init () {
    gt_S2_TransmissionFirstRaynorNWWaveQ = TriggerCreate("gt_S2_TransmissionFirstRaynorNWWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Send First Raynor W Wave
//--------------------------------------------------------------------------------------------------
bool gt_S2_SendFirstRaynorWWave_Func (bool testConds, bool runActions) {
    int auto8DC85EDF_n;
    int auto8DC85EDF_i;
    int auto2291DF2B_n;
    int auto2291DF2B_i;
    int autoA149D3F6_n;
    int autoA149D3F6_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto8DC85EDF_n = libLotv_gf_DifficultyValueInt2(3, 3, 3, 3);
    for (auto8DC85EDF_i = 1; auto8DC85EDF_i <= auto8DC85EDF_n; auto8DC85EDF_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_DOMINION4, PointFromId(356));
        UnitGroupAdd(gv_introDirectionalWave, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1101)), c_orderQueueReplace);
    }
    auto2291DF2B_n = libLotv_gf_DifficultyValueInt2(3, 3, 3, 3);
    for (auto2291DF2B_i = 1; auto2291DF2B_i <= auto2291DF2B_n; auto2291DF2B_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_pLAYER_02_DOMINION4, PointFromId(356));
        UnitGroupAdd(gv_introDirectionalWave, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1101)), c_orderQueueReplace);
    }
    autoA149D3F6_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
    for (autoA149D3F6_i = 1; autoA149D3F6_i <= autoA149D3F6_n; autoA149D3F6_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Immortal", 0, gv_pLAYER_02_DOMINION4, PointFromId(356));
        UnitGroupAdd(gv_introDirectionalWave, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1101)), c_orderQueueReplace);
    }
    TriggerExecute(gt_S2_FirstRaynorWWavePing, true, false);
    TriggerExecute(gt_S2_TransmissionFirstRaynorWWaveQ, true, false);
    Wait(30.0, c_timeAI);
    if ((UnitGroupCount(gv_introDirectionalWave, c_unitCountAlive) > 0)) {
        AIAttackWaveSetTargetUnit(gv_pLAYER_02_DOMINION4, gv_kERRIGAN);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION4, PointFromId(79), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION4, PointFromId(362), false);
        UnitGroupLoopBegin(gv_introDirectionalWave);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION4, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        AIAttackWaveSend(gv_pLAYER_02_DOMINION4, 0, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_SendFirstRaynorWWave_Init () {
    gt_S2_SendFirstRaynorWWave = TriggerCreate("gt_S2_SendFirstRaynorWWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_First Raynor W Wave Ping
//--------------------------------------------------------------------------------------------------
bool gt_S2_FirstRaynorWWavePing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/EE26E0B0"), null, PointFromId(356));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingAlert", PointFromId(1101), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_introDirectionalWavePing = PingLastCreated();
    PingSetVisible(gv_introDirectionalWavePing, false);
    PingSetScale(gv_introDirectionalWavePing, 0.6);
    PingSetTooltip(gv_introDirectionalWavePing, StringExternal("Param/Value/5E40EB57"));
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }
        else {
        }
        if ((libNtve_gf_UnitGroupIsDead(gv_introDirectionalWave) == true)) {
            PingDestroy(gv_introDirectionalWavePing);
            return true;
        }
        else {
            PingSetPosition(gv_introDirectionalWavePing, UnitGroupCenterOfGroup(gv_introDirectionalWave));
            PingSetVisible(gv_introDirectionalWavePing, true);
            UnitGroupLoopBegin(gv_introDirectionalWave);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER)) {
                    UnitGroupRemove(gv_introDirectionalWave, UnitGroupLoopCurrent());
                }
                else {
                }
            }
            UnitGroupLoopEnd();
        }
        Wait(0.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_FirstRaynorWWavePing_Init () {
    gt_S2_FirstRaynorWWavePing = TriggerCreate("gt_S2_FirstRaynorWWavePing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - First Raynor W Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionFirstRaynorWWaveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00059", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_zAGARA, "Mission_Epilogue02|Line00067", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00068", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionFirstRaynorWWaveQ_Init () {
    gt_S2_TransmissionFirstRaynorWWaveQ = TriggerCreate("gt_S2_TransmissionFirstRaynorWWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 01 (Zagara SE)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave01ZagaraSE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delayTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    TriggerExecute(gt_S2_TransmissionRageWave01ZagaraSEQ, true, false);
    lv_delayTime += 60.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 8, 8), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 8, 8), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 7), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 8, 8), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Banshee", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    Wait(30.0, c_timeAI);
    lv_delayTime -= 30.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Mutalisk", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 8, 10), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "SiegeTank", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Immortal", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    Wait(lv_delayTime, c_timeAI);
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave01ZagaraSE_Init () {
    gt_S2_RageWave01ZagaraSE = TriggerCreate("gt_S2_RageWave01ZagaraSE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 02 (Artanis SW)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave02ArtanisSW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delayTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    TriggerExecute(gt_S2_TransmissionRageWave02ArtanisSWQ, true, false);
    lv_delayTime += 60.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(5, 5, 7, 7), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "InfestedAbomination", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Thor", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Hydralisk", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(8, 8, 10, 10), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 5), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(8, 8, 10, 10), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Banshee", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    Wait(30.0, c_timeAI);
    lv_delayTime -= 30.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Goliath", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Immortal", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Roach", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Colossus", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "SiegeTank", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Marauder", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Ultralisk", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    Wait(lv_delayTime, c_timeAI);
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave02ArtanisSW_Init () {
    gt_S2_RageWave02ArtanisSW = TriggerCreate("gt_S2_RageWave02ArtanisSW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 03 (Raynor NW)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave03RaynorNW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delayTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    TriggerExecute(gt_S2_TransmissionRageWave03RaynorNWQ, true, false);
    lv_delayTime += 60.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zealot", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 8), "Zergling", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Banshee", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 8), "Zergling", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 8), "Zergling", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "SiegeTank", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zealot", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 2.0;
    Wait(30.0, c_timeAI);
    lv_delayTime -= 30.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Marine", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Marine", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 2, 4), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Baneling", "Baneling"), gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Hydralisk", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Banshee", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Ultralisk", gv_pLAYER_02_DOMINION4, PointFromId(358), lv_delayTime);
    Wait(lv_delayTime, c_timeAI);
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave03RaynorNW_Init () {
    gt_S2_RageWave03RaynorNW = TriggerCreate("gt_S2_RageWave03RaynorNW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 04 (Zagara SE)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave04ZagaraSE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delayTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    TriggerExecute(gt_S2_TransmissionRageWave0405ZagaraArtanisAttackQ, true, false);
    lv_delayTime += 60.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(9, 9, 12, 12), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 5), "Roach", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Mutalisk", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Thor", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    Wait(30.0, c_timeAI);
    lv_delayTime -= 30.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(9, 9, 12, 12), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Immortal", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 5), "Goliath", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(9, 9, 12, 12), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 4, 4), "Archon", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "BroodLord", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    Wait(lv_delayTime, c_timeAI);
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave04ZagaraSE_Init () {
    gt_S2_RageWave04ZagaraSE = TriggerCreate("gt_S2_RageWave04ZagaraSE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 05 (Artanis SW)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave05ArtanisSW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delayTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    lv_delayTime += 60.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(9, 9, 12, 12), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(8, 8, 10, 10), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(15, 15, 20, 20), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 6), "InfestedAbomination", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 4, 4), "Ghost", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "BroodLord", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    Wait(30.0, c_timeAI);
    lv_delayTime -= 30.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 4, 4), "Mutalisk", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "SiegeTank", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Carrier", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Battlecruiser", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Banshee", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    Wait(lv_delayTime, c_timeAI);
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave05ArtanisSW_Init () {
    gt_S2_RageWave05ArtanisSW = TriggerCreate("gt_S2_RageWave05ArtanisSW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 06 (Raynor W)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave06RaynorW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delayTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    TriggerExecute(gt_S2_TransmissionRageWave060708RaynorZagaraArtanisAttackQ, true, false);
    lv_delayTime += 60.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zealot", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 8), "Zergling", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 3, 3), "Marauder", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Marine", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Wraith", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Stalker", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Ultralisk", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 2.0;
    Wait(30.0, c_timeAI);
    lv_delayTime -= 30.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Goliath", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zealot", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Mutalisk", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Battlecruiser", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Marine", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Archon", gv_pLAYER_02_DOMINION4, PointFromId(356), lv_delayTime);
    Wait(lv_delayTime, c_timeAI);
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave06RaynorW_Init () {
    gt_S2_RageWave06RaynorW = TriggerCreate("gt_S2_RageWave06RaynorW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 07 (Zagara SE)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave07ZagaraSE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delayTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    lv_delayTime += 60.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(9, 9, 12, 12), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Mutalisk", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Archon", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Thor", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    Wait(30.0, c_timeAI);
    lv_delayTime -= 30.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Baneling", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Reaper", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Banshee", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Ultralisk", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "BroodLord", gv_pLAYER_02_DOMINION3, PointFromId(359), lv_delayTime);
    Wait(lv_delayTime, c_timeAI);
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave07ZagaraSE_Init () {
    gt_S2_RageWave07ZagaraSE = TriggerCreate("gt_S2_RageWave07ZagaraSE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 08 (Artanis SW)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave08ArtanisSW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delayTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    lv_delayTime += 60.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 5), "Firebat", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(9, 9, 12, 12), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Archon", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 3.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Liberator", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "SiegeTank", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Roach", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    Wait(30.0, c_timeAI);
    lv_delayTime -= 30.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 5), "Reaper", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Banshee", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 2.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Immortal", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Battlecruiser", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(9, 9, 12, 12), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    lv_delayTime += 1.0;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "WarHound", gv_pLAYER_02_DOMINION3, PointFromId(357), lv_delayTime);
    Wait(lv_delayTime, c_timeAI);
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave08ArtanisSW_Init () {
    gt_S2_RageWave08ArtanisSW = TriggerCreate("gt_S2_RageWave08ArtanisSW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Run Final Rage Waves
//--------------------------------------------------------------------------------------------------
bool gt_S2_RunFinalRageWaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWaveUnitCap = 50;
    TriggerExecute(gt_S2_RageWave09RaynorNW, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(20.0, 20.0, 10.0, 10.0), c_timeAI);
    TriggerExecute(gt_S2_RageWave10ZagaraSE, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(20.0, 20.0, 10.0, 10.0), c_timeAI);
    TriggerExecute(gt_S2_RageWave11ArtanisSW, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(20.0, 20.0, 10.0, 10.0), c_timeAI);
    TriggerExecute(gt_S2_RageWave12RaynorW, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RunFinalRageWaves_Init () {
    gt_S2_RunFinalRageWaves = TriggerCreate("gt_S2_RunFinalRageWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 09 (Raynor NW)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave09RaynorNW_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    cai_waves_stop("ai88D17C60");
    cai_waves_stop("ai8935C92D");
    TriggerExecute(gt_S2_TransmissionRageWave09101112FinalWavesQ, true, false);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Zergling", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Marine", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Hydralisk", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Marine", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Roach", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "SiegeTank", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 8, 8), "Zergling", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Wraith", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Marine", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Ultralisk", gv_pLAYER_02_DOMINION4, PointFromId(358), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Stalker", gv_pLAYER_02_DOMINION4, PointFromId(358), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION4, PointFromId(358), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Battlecruiser", gv_pLAYER_02_DOMINION4, PointFromId(358), 1.0);
    Wait(1.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Marine", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Hydralisk", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 6, 6), "Zergling", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Banshee", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 6, 6), "Zergling", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Mutalisk", gv_pLAYER_02_DOMINION4, PointFromId(358), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Stalker", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Roach", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Marauder", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Immortal", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Ultralisk", gv_pLAYER_02_DOMINION4, PointFromId(358), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[1], 3.0);
    }
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave09RaynorNW_Init () {
    gt_S2_RageWave09RaynorNW = TriggerCreate("gt_S2_RageWave09RaynorNW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 10 (Zagara SE)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave10ZagaraSE_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 10, 10), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 4, 6), "Baneling", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 7, 9), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Ghost", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Reaper", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Hydralisk", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Ultralisk", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Battlecruiser", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "BroodLord", gv_pLAYER_02_DOMINION3, PointFromId(359), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(359), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(5, 5, 6, 8), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "SiegeTank", gv_pLAYER_02_DOMINION3, PointFromId(359), 1.0);
    Wait(1.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Baneling", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 5, 5), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 7, 7), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Banshee", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(5, 5, 6, 6), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Immortal", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Reaper", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Thor", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(5, 5, 6, 6), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(359), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[2], 3.0);
    }
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave10ZagaraSE_Init () {
    gt_S2_RageWave10ZagaraSE = TriggerCreate("gt_S2_RageWave10ZagaraSE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 11 (Artanis SW)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave11ArtanisSW_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 8), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Mutalisk", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Immortal", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Mutalisk", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "SiegeTank", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Wraith", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Baneling", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Marauder", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "VoidRay", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 8), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(357), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Scout", gv_pLAYER_02_DOMINION3, PointFromId(357), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Thor", gv_pLAYER_02_DOMINION3, PointFromId(357), 1.0);
    Wait(1.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(7, 7, 9, 9), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Baneling", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Battlecruiser", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Mutalisk", gv_pLAYER_02_DOMINION3, PointFromId(357), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "BroodLord", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Hydralisk", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Thor", gv_pLAYER_02_DOMINION3, PointFromId(357), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[3], 3.0);
    }
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave11ArtanisSW_Init () {
    gt_S2_RageWave11ArtanisSW = TriggerCreate("gt_S2_RageWave11ArtanisSW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Rage Wave 12 (Raynor W)
//--------------------------------------------------------------------------------------------------
bool gt_S2_RageWave12RaynorW_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rageWavesActive += 1;
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 8, 8), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Baneling", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
    Wait(3.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Ghost", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Reaper", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Hydralisk", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Ultralisk", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Battlecruiser", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
    Wait(2.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 8, 8), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(356), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "BroodLord", gv_pLAYER_02_DOMINION3, PointFromId(356), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(356), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(356), 1.0);
    Wait(1.0, c_timeAI);
    gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Banshee", gv_pLAYER_02_DOMINION3, PointFromId(356), 1.0);
    Wait(1.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(6, 6, 6, 6), "Zergling", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Baneling", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Carrier", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Marine", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Banshee", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(356), 3.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Immortal", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Reaper", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Stalker", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Battlecruiser", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
        gf_S2_SpawnStreamingWaveUnit(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot", gv_pLAYER_02_DOMINION3, PointFromId(356), 2.0);
        gf_S2_RageWaveWaitSpecial(gv_rageWaveGroup[4], 3.0);
    }
    gv_rageWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_RageWave12RaynorW_Init () {
    gt_S2_RageWave12RaynorW = TriggerCreate("gt_S2_RageWave12RaynorW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Rage Wave 01 (Zagara SE) Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionRageWave01ZagaraSEQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/40D782CC"), null, PointFromId(351));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(351), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_zergDead == false)) {
        libVCMI_gf_SendTransmissionCampaign(gv_zAGARA, "Mission_Epilogue02|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_zAGARA, "Mission_Epilogue02|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionRageWave01ZagaraSEQ_Init () {
    gt_S2_TransmissionRageWave01ZagaraSEQ = TriggerCreate("gt_S2_TransmissionRageWave01ZagaraSEQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Rage Wave 02 (Artanis SW) Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionRageWave02ArtanisSWQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/572C2E46"), null, PointFromId(350));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(350), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_zergDead == false)) {
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionRageWave02ArtanisSWQ_Init () {
    gt_S2_TransmissionRageWave02ArtanisSWQ = TriggerCreate("gt_S2_TransmissionRageWave02ArtanisSWQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Rage Wave 03 (Raynor NW) Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionRageWave03RaynorNWQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E09B183E"), null, PointFromId(1103));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1103), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00088", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionRageWave03RaynorNWQ_Init () {
    gt_S2_TransmissionRageWave03RaynorNWQ = TriggerCreate("gt_S2_TransmissionRageWave03RaynorNWQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Rage Wave 04/05 (Zagara/Artanis Attack) Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionRageWave0405ZagaraArtanisAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2A75F69A"), null, PointFromId(351));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(351), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/32241041"), null, PointFromId(350));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(350), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if (((gv_zergDead == false) || (gv_protossDead == false))) {
        libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00060", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionRageWave0405ZagaraArtanisAttackQ_Init () {
    gt_S2_TransmissionRageWave0405ZagaraArtanisAttackQ = TriggerCreate("gt_S2_TransmissionRageWave0405ZagaraArtanisAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Rage Wave 06/07/08 (Raynor/Zagara/Artanis Attack) Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionRageWave060708RaynorZagaraArtanisAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D1C8EBC9"), null, PointFromId(1101));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1101), 8.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeGame);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/57E425D9"), null, PointFromId(351));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(351), 8.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeGame);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/810FAB4F"), null, PointFromId(350));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(350), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00062", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00070", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00071", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionRageWave060708RaynorZagaraArtanisAttackQ_Init () {
    gt_S2_TransmissionRageWave060708RaynorZagaraArtanisAttackQ = TriggerCreate("gt_S2_TransmissionRageWave060708RaynorZagaraArtanisAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Rage Wave 09/10/11/12 (Final Waves) Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionRageWave09101112FinalWavesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 0.5, 3.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionRageWave09101112FinalWavesQ_Init () {
    gt_S2_TransmissionRageWave09101112FinalWavesQ = TriggerCreate("gt_S2_TransmissionRageWave09101112FinalWavesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Thrasher Spawn 01
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidThrasherSpawn01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2_TransmissionThrasherSpawn01Q, true, false);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(24)), 8.0, 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidThrasherSpawn01_Init () {
    gt_S2_VoidThrasherSpawn01 = TriggerCreate("gt_S2_VoidThrasherSpawn01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Thrasher Spawn 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionThrasherSpawn01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, false);
    TriggerQueueEnter();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 0.5, 3.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00092", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionThrasherSpawn01Q_Init () {
    gt_S2_TransmissionThrasherSpawn01Q = TriggerCreate("gt_S2_TransmissionThrasherSpawn01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Thrasher Spawn 02
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidThrasherSpawn02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_thrasher01;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2_TransmissionThrasherSpawn02Q, true, false);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(27)), 8.0, 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidThrasherSpawn02_Init () {
    gt_S2_VoidThrasherSpawn02 = TriggerCreate("gt_S2_VoidThrasherSpawn02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Thrasher Spawn 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionThrasherSpawn02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, false);
    TriggerQueueEnter();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 0.5, 3.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00094", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionThrasherSpawn02Q_Init () {
    gt_S2_TransmissionThrasherSpawn02Q = TriggerCreate("gt_S2_TransmissionThrasherSpawn02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Thrasher Spawn 03
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidThrasherSpawn03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2_TransmissionThrasherSpawn03Q, true, false);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(24)), 12.8, 8.0);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(26)), 12.8, 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidThrasherSpawn03_Init () {
    gt_S2_VoidThrasherSpawn03 = TriggerCreate("gt_S2_VoidThrasherSpawn03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Thrasher Spawn 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionThrasherSpawn03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, false);
    TriggerQueueEnter();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 0.5, 3.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionThrasherSpawn03Q_Init () {
    gt_S2_TransmissionThrasherSpawn03Q = TriggerCreate("gt_S2_TransmissionThrasherSpawn03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Thrasher Spawn 04
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidThrasherSpawn04_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2_TransmissionThrasherSpawn04Q, true, false);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(28)), 12.8, 8.0);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(26)), 12.8, 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidThrasherSpawn04_Init () {
    gt_S2_VoidThrasherSpawn04 = TriggerCreate("gt_S2_VoidThrasherSpawn04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Thrasher Spawn 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionThrasherSpawn04Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, false);
    TriggerQueueEnter();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 0.5, 3.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionThrasherSpawn04Q_Init () {
    gt_S2_TransmissionThrasherSpawn04Q = TriggerCreate("gt_S2_TransmissionThrasherSpawn04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Thrasher Spawn 05
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidThrasherSpawn05_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2_TransmissionThrasherSpawn05Q, true, false);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(26)), 16.0, 8.0);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(28)), 16.0, 8.0);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(24)), 16.0, 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidThrasherSpawn05_Init () {
    gt_S2_VoidThrasherSpawn05 = TriggerCreate("gt_S2_VoidThrasherSpawn05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Thrasher Spawn 05 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionThrasherSpawn05Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, false);
    TriggerQueueEnter();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 0.5, 3.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionThrasherSpawn05Q_Init () {
    gt_S2_TransmissionThrasherSpawn05Q = TriggerCreate("gt_S2_TransmissionThrasherSpawn05Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Void Thrasher Spawn 06
//--------------------------------------------------------------------------------------------------
bool gt_S2_VoidThrasherSpawn06_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2_TransmissionThrasherSpawn06Q, true, false);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(27)), 32.0, 8.0);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(24)), 32.0, 8.0);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(28)), 32.0, 8.0);
    gf_CreateVoidThrasher(RegionGetCenter(RegionFromId(26)), 32.0, 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_VoidThrasherSpawn06_Init () {
    gt_S2_VoidThrasherSpawn06 = TriggerCreate("gt_S2_VoidThrasherSpawn06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2_Transmission - Thrasher Spawn 06 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2_TransmissionThrasherSpawn06Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, false);
    TriggerQueueEnter();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 0.5, 3.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00121", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_S2_TransmissionKerriganAttackedQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2_TransmissionThrasherSpawn06Q_Init () {
    gt_S2_TransmissionThrasherSpawn06Q = TriggerCreate("gt_S2_TransmissionThrasherSpawn06Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Kerrigan's Lowest Life
//--------------------------------------------------------------------------------------------------
bool gt_StatKerrigansLowestLife_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropLife, c_unitPropCurrent) < gv_kerriganLowestLife)) {
        gv_kerriganLowestLife = UnitGetPropertyFixed(gv_kERRIGAN, c_unitPropLife, c_unitPropCurrent);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatKerrigansLowestLife_Init () {
    gt_StatKerrigansLowestLife = TriggerCreate("gt_StatKerrigansLowestLife_Func");
    TriggerAddEventUnitDamaged(gt_StatKerrigansLowestLife, UnitRefFromVariable("gv_kERRIGAN"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Units Killed with Beam
//--------------------------------------------------------------------------------------------------
bool gt_AchievementUnitsKilledwithBeam_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_celestialBeamKills += 1;
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_celestialBeamKills >= 60) && (gv_celestialAchievementAwarded == false)) {
        gv_celestialAchievementAwarded = true;
        libVoiC_gf_CampaignAwardAchievement("SC2Epilogue02_3", gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementUnitsKilledwithBeam_Init () {
    gt_AchievementUnitsKilledwithBeam = TriggerCreate("gt_AchievementUnitsKilledwithBeam_Func");
    TriggerAddEventUnitDamaged(gt_AchievementUnitsKilledwithBeam, null, c_unitDamageTypeAny, c_unitDamageFatal, "CelestialBeamWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/4F63B8EB"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Kerrigan Died
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKerriganDied_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    if ((ObjectiveVisible(gv_objectiveDestroyZergBase3, gv_pLAYER_01_USER) == true)) {
        TriggerExecute(gt_ObjectiveKerriganMustSurviveFailed, true, false);
    }
    else {
        TriggerExecute(gt_ObjectiveKerriganMustSurviveFailed2, true, false);
    }
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FF89513D"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKerriganDied_Init () {
    gt_DefeatKerriganDied = TriggerCreate("gt_DefeatKerriganDied_Func");
    TriggerAddEventUnitDied(gt_DefeatKerriganDied, UnitRefFromVariable("gv_kERRIGAN"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Holdout Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryHoldoutCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_kERRIGAN, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryHoldoutCompleted_Init () {
    gt_VictoryHoldoutCompleted = TriggerCreate("gt_VictoryHoldoutCompleted_Func");
    TriggerAddEventTimer(gt_VictoryHoldoutCompleted, gv_s2_ProtectKerriganTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveProtossSurvivalComplete, true, true);
    TriggerExecute(gt_ObjectiveZergSurvivalComplete, true, true);
    TriggerExecute(gt_ObjectiveDefendKerriganComplete, true, true);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveComplete2, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("SC2Epilogue02_1", gv_pLAYER_01_USER);
    if ((gv_kerriganLowestLife >= 1500.0)) {
        libVoiC_gf_CampaignAwardAchievement("SC2Epilogue02_2", 1);
    }
    else {
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_celestialBeamKills <= 15)) {
        libVoiC_gf_CampaignAwardAchievement("Mastery_Epilogue02", gv_pLAYER_01_USER);
    }
    else {
    }
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0861DA52"), IntToText(gv_celestialBeamKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/30A4DCCA"), FixedToText(gv_kerriganLowestLife, 0));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Celestial Beam
//--------------------------------------------------------------------------------------------------
bool gt_TipCelestialBeam_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/CBE4889D"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/93B12A3B"), StringExternal("Param/Value/5877DF48"), "Assets\\Textures\\abilityicon_infestedcortex_square.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipCelestialBeam_Init () {
    gt_TipCelestialBeam = TriggerCreate("gt_TipCelestialBeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Void Forces Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidForcesCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue02Primary01");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 3);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidForcesCreate_Init () {
    gt_ObjectiveDestroyVoidForcesCreate = TriggerCreate("gt_ObjectiveDestroyVoidForcesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Void Forces Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidForcesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyVoidForcesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidForcesComplete_Init () {
    gt_ObjectiveDestroyVoidForcesComplete = TriggerCreate("gt_ObjectiveDestroyVoidForcesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Void Forces Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidForcesFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyVoidForcesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidForcesFailed_Init () {
    gt_ObjectiveDestroyVoidForcesFailed = TriggerCreate("gt_ObjectiveDestroyVoidForcesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue02Primary02");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 3);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveCreate_Init () {
    gt_ObjectiveKerriganMustSurviveCreate = TriggerCreate("gt_ObjectiveKerriganMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveComplete_Init () {
    gt_ObjectiveKerriganMustSurviveComplete = TriggerCreate("gt_ObjectiveKerriganMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveFailed_Init () {
    gt_ObjectiveKerriganMustSurviveFailed = TriggerCreate("gt_ObjectiveKerriganMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Kerrigan Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendKerriganCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue02Primary03");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 3);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendKerriganCreate_Init () {
    gt_ObjectiveDefendKerriganCreate = TriggerCreate("gt_ObjectiveDefendKerriganCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Kerrigan Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendKerriganComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDefendKerriganCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Primary03", libVoiC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendKerriganComplete_Init () {
    gt_ObjectiveDefendKerriganComplete = TriggerCreate("gt_ObjectiveDefendKerriganComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Kerrigan Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendKerriganFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDefendKerriganCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Primary03", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendKerriganFailed_Init () {
    gt_ObjectiveDefendKerriganFailed = TriggerCreate("gt_ObjectiveDefendKerriganFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Create 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveCreate2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue02Primary02");
    gv_objectiveDestroyZergBase4 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 3);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveCreate2_Init () {
    gt_ObjectiveKerriganMustSurviveCreate2 = TriggerCreate("gt_ObjectiveKerriganMustSurviveCreate2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Complete 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveComplete2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate2, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveComplete2_Init () {
    gt_ObjectiveKerriganMustSurviveComplete2 = TriggerCreate("gt_ObjectiveKerriganMustSurviveComplete2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Failed 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveFailed2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate2, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveFailed2_Init () {
    gt_ObjectiveKerriganMustSurviveFailed2 = TriggerCreate("gt_ObjectiveKerriganMustSurviveFailed2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Survival Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossSurvivalCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue02Bonus02");
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossSurvivalCreate_Init () {
    gt_ObjectiveProtossSurvivalCreate = TriggerCreate("gt_ObjectiveProtossSurvivalCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Survival Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossSurvivalComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProtossSurvivalCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Bonus02", libVoiC_ge_MissionObjectiveState_Completed);
    ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossSurvivalComplete_Init () {
    gt_ObjectiveProtossSurvivalComplete = TriggerCreate("gt_ObjectiveProtossSurvivalComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Survival Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossSurvivalFailedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveProtossSurvivalCreate, true, false);
    TriggerQueueEnter();
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Bonus02", libVoiC_ge_MissionObjectiveState_Failed);
    ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateFailed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossSurvivalFailedQ_Init () {
    gt_ObjectiveProtossSurvivalFailedQ = TriggerCreate("gt_ObjectiveProtossSurvivalFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Zerg Survival Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZergSurvivalCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue02Bonus01");
    gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZergSurvivalCreate_Init () {
    gt_ObjectiveZergSurvivalCreate = TriggerCreate("gt_ObjectiveZergSurvivalCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Zerg Survival Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZergSurvivalComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZergSurvivalCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    ObjectiveSetState(gv_objectiveRescueStalkers2, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZergSurvivalComplete_Init () {
    gt_ObjectiveZergSurvivalComplete = TriggerCreate("gt_ObjectiveZergSurvivalComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Zerg Survival Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZergSurvivalFailedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveZergSurvivalCreate, true, false);
    TriggerQueueEnter();
    ObjectiveSetState(gv_objectiveRescueStalkers2, c_objectiveStateFailed);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue02Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZergSurvivalFailedQ_Init () {
    gt_ObjectiveZergSurvivalFailedQ = TriggerCreate("gt_ObjectiveZergSurvivalFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    CreepModify(UnitGetPosition(UnitFromId(82)), 10.0, false, false);
    CreepModify(UnitGetPosition(UnitFromId(80)), 7.75, false, false);
    CreepModify(UnitGetPosition(UnitFromId(102)), 7.75, false, false);
    CreepModify(UnitGetPosition(UnitFromId(198)), 7.75, false, false);
    CreepModify(UnitGetPosition(UnitFromId(105)), 7.75, false, false);
    CreepModify(UnitGetPosition(UnitFromId(103)), 7.75, false, false);
    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(gv_kERRIGAN, false);
    libNtve_gf_ShowHideUnit(gv_kERRIGAN, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kERRIGAN), c_animNameDefault, "Stand Morph Zero One", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_ChangeUnitDamage(gv_kERRIGAN, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    gv_introCineVoidThrasher01 = UnitFromId(48);
    gv_introCineVoidThrasher02 = UnitFromId(41);
    gv_introCineVoidThrasher03 = UnitFromId(40);
    UnitGroupAdd(gv_cinematicTempUnits, gv_introCineVoidThrasher01);
    UnitGroupAdd(gv_s1_VoidForcesGroup, gv_introCineVoidThrasher02);
    UnitSetPropertyFixed(gv_introCineVoidThrasher02, c_unitPropLifeMax, 1000.0);
    UnitSetPropertyFixed(gv_introCineVoidThrasher02, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_introCineVoidThrasher02, c_unitPropShieldsMax, 800.0);
    UnitSetPropertyFixed(gv_introCineVoidThrasher02, c_unitPropShieldsPercent, 100.0);
    UnitGroupAdd(gv_s1_VoidForcesGroup, gv_introCineVoidThrasher03);
    UnitSetPropertyFixed(gv_introCineVoidThrasher03, c_unitPropLifeMax, 1000.0);
    UnitSetPropertyFixed(gv_introCineVoidThrasher03, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_introCineVoidThrasher03, c_unitPropShieldsMax, 800.0);
    UnitSetPropertyFixed(gv_introCineVoidThrasher03, c_unitPropShieldsPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitGroupLoopBegin(gv_s1_VoidForcesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(582), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(277), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00040", true), c_soundIndexAny)) + 3.0), -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "Shake", 0.0, 0.0, (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00040", true), c_soundIndexAny)) + 5.0));
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PEpilogue02_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundPlayForPlayer(SoundLink("Event_Epilogue02_OpenCine_AmbPt1", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00040", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 6.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(584), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00040", true), c_soundIndexAny)), -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00041", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kERRIGAN), c_animNameDefault, "Stand Morph End", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("Event_Epilogue02_OpenCine_Kerrigan_Awake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue02_OpenCine_Kerrigan_Awake_Vx1", -1), PlayerGroupAll(), 50.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 30.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 30.0, 0.0);
    TriggerExecute(gt_IntroSpawnFirstVoidThrasher, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1353), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00042", true), c_soundIndexAny)) + 7.0), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00042", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingUnit(AbilityCommand("attack", 0), gv_introCineVoidThrasher01), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introCineVoidThrasher01), c_animNameDefault, "Stun", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue02_OpenCine_Kerrigan_Awake_Vx2", -1), PlayerGroupAll(), 70.0, 0.0);
    TriggerExecute(gt_IntroSpawnSecondandThirdThrasher, true, false);
    Wait(4.0, c_timeGame);
    UnitKill(gv_introCineVoidThrasher01);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("ChangeFacing", 0), PointFromId(590)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    CameraShakeStop(gv_pLAYER_01_USER);
    if ((gv_cinematicCompleted == false)) {
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_kERRIGAN), c_animNameDefault);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_introCineVoidThrasher02), c_animNameDefault);
        libNtve_gf_ShowHideUnit(gv_introCineVoidThrasher02, true);
        libNtve_gf_PauseUnit(gv_introCineVoidThrasher02, false);
        gf_HideTerrainWhileVoidThrasherIsAlive(gv_introCineVoidThrasher02);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_introCineVoidThrasher03), c_animNameDefault);
        libNtve_gf_ShowHideUnit(gv_introCineVoidThrasher03, true);
        libNtve_gf_PauseUnit(gv_introCineVoidThrasher03, false);
        gf_HideTerrainWhileVoidThrasherIsAlive(gv_introCineVoidThrasher03);
        libNtve_gf_MakeUnitFacePoint(gv_kERRIGAN, UnitGetPosition(gv_introCineVoidThrasher03), 0.0);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    RegionPlayableMapSet(RegionFromId(2));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(4), true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(36), 0.0, false);
    gv_playerVision = VisRevealerLastCreated();
    libVCMI_gf_StopCinematicSounds();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerEnable(gt_IntroSpawnFirstVoidThrasher, false);
    TriggerEnable(gt_IntroSpawnSecondandThirdThrasher, false);
    CreepModify(UnitGetPosition(UnitFromId(82)), 30.0, false, false);
    libNtve_gf_ChangeUnitDamage(gv_kERRIGAN, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION8, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_S1_VoidTrashersAttack, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1351), 4.0, -1, 10, true);
        Wait(2.0, c_timeGame);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1351)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Spawn First Void Thrasher
//--------------------------------------------------------------------------------------------------
bool gt_IntroSpawnFirstVoidThrasher_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introCineVoidThrasher01), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.0625, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_introCineVoidThrasher01, true);
    libNtve_gf_PauseUnit(gv_introCineVoidThrasher01, false);
    gf_HideTerrainWhileVoidThrasherIsAlive(gv_introCineVoidThrasher01);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(gv_introCineVoidThrasher01, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_kERRIGAN), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSpawnFirstVoidThrasher_Init () {
    gt_IntroSpawnFirstVoidThrasher = TriggerCreate("gt_IntroSpawnFirstVoidThrasher_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Spawn Second and Third Thrasher
//--------------------------------------------------------------------------------------------------
bool gt_IntroSpawnSecondandThirdThrasher_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introCineVoidThrasher02), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.0625, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_introCineVoidThrasher02, true);
    libNtve_gf_PauseUnit(gv_introCineVoidThrasher02, false);
    gf_HideTerrainWhileVoidThrasherIsAlive(gv_introCineVoidThrasher02);
    Wait(1.5, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introCineVoidThrasher03), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.0625, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_introCineVoidThrasher03, true);
    libNtve_gf_PauseUnit(gv_introCineVoidThrasher03, false);
    gf_HideTerrainWhileVoidThrasherIsAlive(gv_introCineVoidThrasher03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSpawnSecondandThirdThrasher_Init () {
    gt_IntroSpawnSecondandThirdThrasher = TriggerCreate("gt_IntroSpawnSecondandThirdThrasher_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    string autoDAFC92AB_val;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(6));
    CreepModify(UnitGetPosition(UnitFromId(82)), 10.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(80)), 7.75, true, false);
    CreepModify(UnitGetPosition(UnitFromId(102)), 7.75, true, false);
    CreepModify(UnitGetPosition(UnitFromId(198)), 7.75, true, false);
    CreepModify(UnitGetPosition(UnitFromId(105)), 7.75, true, false);
    CreepModify(UnitGetPosition(UnitFromId(103)), 7.75, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_introTerranBaseGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_introTerranForcesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganEpilogue02", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(1490));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() == UnitFromId(13))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", 0, gv_pLAYER_01_USER, UnitGetPosition(UnitGroupLoopCurrent()));
            gv_midGas[1] = FixedToInt(UnitGetPropertyFixed(UnitLastCreated(), c_unitPropResources, c_unitPropCurrent));
            gv_playersRefinery = UnitLastCreated();
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION8, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        autoDAFC92AB_val = UnitGetType(UnitGroupLoopCurrent());
        if (autoDAFC92AB_val == "Barracks") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BarracksFlying", 0, gv_pLAYER_02_DOMINION8, PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 9.0, 45.0));
            UnitGroupAdd(gv_midCineFlyingStructures, UnitLastCreated());
        }
        else if (autoDAFC92AB_val == "Factory") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FactoryFlying", 0, gv_pLAYER_02_DOMINION8, PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, 45.0));
            UnitGroupAdd(gv_midCineFlyingStructures, UnitLastCreated());
        }
        else if (autoDAFC92AB_val == "Starport") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StarportFlying", 0, gv_pLAYER_02_DOMINION8, PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 14.0, 45.0));
            UnitGroupAdd(gv_midCineFlyingStructures, UnitLastCreated());
        }
        else if (autoDAFC92AB_val == "SupplyDepot") {
            continue;
        }
        else if (autoDAFC92AB_val == "MercCompound") {
            continue;
        }
        else if (autoDAFC92AB_val == "BarracksTechReactor") {
            continue;
        }
        else if (autoDAFC92AB_val == "EngineeringBay") {
            continue;
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, gv_pLAYER_02_DOMINION8, UnitGetPosition(UnitGroupLoopCurrent()));
        }
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    UnitGroupLoopEnd();
    Wait(0.1, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Drone")) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        }
        else {
        }
        if ((UnitGroupLoopCurrent() == gv_zAGARA)) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
            libNtve_gf_CreateUnitsAtPoint2(1, "ZaGara", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(1476));
            gv_midZagara = UnitLastCreated();
            UnitGroupAdd(gv_cinematicTempUnits, gv_midZagara);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Probe", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(621), true);
    UnitGroupLoopBegin(UnitGroupFromId(1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION6, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(282), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1350), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00045", true), c_soundIndexAny)) + 1.0), -1, 10, true);
    PlayerSetRace(gv_pLAYER_01_USER, "Terr");
    Wait(0.0625, c_timeGame);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PEpilogue02_Music_Mid", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundPlayForPlayer(SoundLink("Event_Epilogue02_OpenCine_AmbPt2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    gv_midMinerals[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(8), c_unitPropResources, c_unitPropCurrent));
    gv_midMinerals[2] = FixedToInt(UnitGetPropertyFixed(UnitFromId(10), c_unitPropResources, c_unitPropCurrent));
    gv_midMinerals[3] = FixedToInt(UnitGetPropertyFixed(UnitFromId(60), c_unitPropResources, c_unitPropCurrent));
    gv_midMinerals[4] = FixedToInt(UnitGetPropertyFixed(UnitFromId(9), c_unitPropResources, c_unitPropCurrent));
    gv_midMinerals[5] = FixedToInt(UnitGetPropertyFixed(UnitFromId(11), c_unitPropResources, c_unitPropCurrent));
    gv_midMinerals[6] = FixedToInt(UnitGetPropertyFixed(UnitFromId(58), c_unitPropResources, c_unitPropCurrent));
    gv_midMinerals[7] = FixedToInt(UnitGetPropertyFixed(UnitFromId(6), c_unitPropResources, c_unitPropCurrent));
    gv_midMinerals[8] = FixedToInt(UnitGetPropertyFixed(UnitFromId(7), c_unitPropResources, c_unitPropCurrent));
    gv_midMinerals[9] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_midGas[2] = FixedToInt(UnitGetPropertyFixed(UnitFromId(27), c_unitPropResources, c_unitPropCurrent));
    gv_midGas[3] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_02_DOMINION);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_02_DOMINION2);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_MidLandFlyingUnitsMove, true, false);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00045", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_MidMoveRaynorsUnits, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(190), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(191), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00046", true), c_soundIndexAny)), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00046", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_MidLandFlyingUnitsLand, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(354), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(355), 16.0, -1, 10, true);
    TriggerExecute(gt_MidAnimateZerg, true, false);
    libVCMI_gf_SendTransmissionCampaign(gv_midZagara, "Mission_Epilogue02|Line00047", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_MidWarpProtoss, true, false);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(352), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(353), 9.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_aRTANIS, "Mission_Epilogue02|Line00048", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00065", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerSetRace(gv_pLAYER_01_USER, "Terr");
    Wait(0.0625, c_timeGame);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    ObjectiveSetState(gv_objectiveDestroyZergBase2, c_objectiveStateHidden);
    ObjectiveSetState(gv_objectiveDestroyZergBase3, c_objectiveStateHidden);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    UnitSetPropertyFixed(UnitFromId(8), c_unitPropResources, gv_midMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(10), c_unitPropResources, gv_midMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(60), c_unitPropResources, gv_midMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(9), c_unitPropResources, gv_midMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(11), c_unitPropResources, gv_midMinerals[5]);
    UnitSetPropertyFixed(UnitFromId(58), c_unitPropResources, gv_midMinerals[6]);
    UnitSetPropertyFixed(UnitFromId(6), c_unitPropResources, gv_midMinerals[7]);
    UnitSetPropertyFixed(UnitFromId(7), c_unitPropResources, gv_midMinerals[8]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_midMinerals[9]);
    UnitSetPropertyFixed(gv_playersRefinery, c_unitPropResources, gv_midGas[1]);
    UnitSetPropertyFixed(UnitFromId(27), c_unitPropResources, gv_midGas[2]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_midGas[3]);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropShieldsPercent, 100.0);
    UnitSetPosition(UnitFromId(35), PointFromId(52), false);
    UnitIssueOrder(UnitFromId(35), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(7), true, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeMinerals, true);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_kERRIGAN, 1));
    libNtve_gf_ReplaceUnit(UnitFromId(1489), "BarracksTechReactor", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION8, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ReplaceUnit(UnitFromId(65), "SiegeTankSieged", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_01_USER);
    TriggerEnable(gt_S1_KerriganSelected, true);
    TriggerEnable(gt_S1_KerriganDeSelected, true);
    TriggerEnable(gt_S2_ProgressAutoSave01, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(1), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Land Flying Units Move
//--------------------------------------------------------------------------------------------------
bool gt_MidLandFlyingUnitsMove_Func (bool testConds, bool runActions) {
    string auto2C88DC9A_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupFilterPlayer(gv_midCineFlyingStructures, gv_pLAYER_02_DOMINION8, 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto2C88DC9A_val = UnitGetType(UnitGroupLoopCurrent());
        if (auto2C88DC9A_val == "BarracksFlying") {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(25))), c_orderQueueReplace);
        }
        else if (auto2C88DC9A_val == "StarportFlying") {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(32))), c_orderQueueReplace);
        }
        else if (auto2C88DC9A_val == "FactoryFlying") {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(30))), c_orderQueueReplace);
        }
        else {
            continue;
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLandFlyingUnitsMove_Init () {
    gt_MidLandFlyingUnitsMove = TriggerCreate("gt_MidLandFlyingUnitsMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Land Flying Units Land
//--------------------------------------------------------------------------------------------------
bool gt_MidLandFlyingUnitsLand_Func (bool testConds, bool runActions) {
    string auto9F22E34C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupFilterPlayer(gv_midCineFlyingStructures, gv_pLAYER_02_DOMINION8, 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto9F22E34C_val = UnitGetType(UnitGroupLoopCurrent());
        if (auto9F22E34C_val == "BarracksFlying") {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("BarracksLand", 0), UnitGetPosition(UnitFromId(25))), c_orderQueueAddToEnd);
        }
        else if (auto9F22E34C_val == "StarportFlying") {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("StarportLand", 0), UnitGetPosition(UnitFromId(32))), c_orderQueueAddToEnd);
        }
        else if (auto9F22E34C_val == "FactoryFlying") {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("FactoryLand", 0), UnitGetPosition(UnitFromId(30))), c_orderQueueAddToEnd);
        }
        else {
            continue;
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLandFlyingUnitsLand_Init () {
    gt_MidLandFlyingUnitsLand = TriggerCreate("gt_MidLandFlyingUnitsLand_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Move Raynors Units
//--------------------------------------------------------------------------------------------------
bool gt_MidMoveRaynorsUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_raynorsUnits;

    // Variable Initialization
    lv_raynorsUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION8, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 6.0, 45.0)), c_orderQueueReplace);
        libHots_gf_StorePointForUnit(UnitGroupLoopCurrent(), 1, UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 6.0, 260.0), false);
        UnitGroupAdd(lv_raynorsUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(0.0625, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }
    else {
    }
    UnitGroupLoopBegin(lv_raynorsUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), libHots_gf_PointStoredForUnit(UnitGroupLoopCurrent(), 1)), c_orderQueueReplace);
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SiegeTank")) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMoveRaynorsUnits_Init () {
    gt_MidMoveRaynorsUnits = TriggerCreate("gt_MidMoveRaynorsUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Animate Zerg
//--------------------------------------------------------------------------------------------------
bool gt_MidAnimateZerg_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(UnitFromId(17), false);
    libNtve_gf_PauseUnit(UnitFromId(201), false);
    libNtve_gf_PauseUnit(UnitFromId(200), false);
    UnitIssueOrder(UnitFromId(17), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(17)), 3.0, 15.0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }
    else {
    }
    UnitIssueOrder(UnitFromId(201), OrderTargetingUnit(AbilityCommand("SpawnLarva", 0), UnitFromId(539)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }
    else {
    }
    UnitIssueOrder(UnitFromId(200), OrderTargetingUnit(AbilityCommand("SpawnLarva", 0), UnitFromId(82)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAnimateZerg_Init () {
    gt_MidAnimateZerg = TriggerCreate("gt_MidAnimateZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Warp Protoss
//--------------------------------------------------------------------------------------------------
bool gt_MidWarpProtoss_Func (bool testConds, bool runActions) {
    int auto0FB64CF5_ae;
    int auto0FB64CF5_ai;
    int auto3DD016ED_ae;
    int auto3DD016ED_ai;

    // Variable Declarations
    int lv_zealotIter;
    int lv_zealotCount;
    unit lv_superWarpGate;

    // Variable Initialization
    lv_zealotCount = 3;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SuperWarpGate", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, Point(0.0, 0.0));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_superWarpGate = UnitLastCreated();
    TriggerEnable(gt_AssignWarpinUnitstoCinematicTemp, true);
    auto0FB64CF5_ae = lv_zealotCount;
    auto0FB64CF5_ai = 1;
    lv_zealotIter = 1;
    for ( ; ( (auto0FB64CF5_ai >= 0 && lv_zealotIter <= auto0FB64CF5_ae) || (auto0FB64CF5_ai <= 0 && lv_zealotIter >= auto0FB64CF5_ae) ) ; lv_zealotIter += auto0FB64CF5_ai ) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            break;
        }
        else {
        }
        UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(621)), 2.0, (45.0 * lv_zealotIter))), c_orderQueueReplace);
        Wait(0.2, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        TriggerEnable(gt_AssignWarpinUnitstoCinematicTemp, false);
        return true;
    }
    else {
    }
    auto3DD016ED_ae = lv_zealotCount;
    auto3DD016ED_ai = 1;
    lv_zealotIter = 1;
    for ( ; ( (auto3DD016ED_ai >= 0 && lv_zealotIter <= auto3DD016ED_ae) || (auto3DD016ED_ai <= 0 && lv_zealotIter >= auto3DD016ED_ae) ) ; lv_zealotIter += auto3DD016ED_ai ) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            break;
        }
        else {
        }
        if ((lv_zealotIter == 2)) {
            UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 12), PointWithOffsetPolar(UnitGetPosition(UnitFromId(621)), 4.5, (35.0 * lv_zealotIter))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(UnitGetPosition(UnitFromId(621)), 4.5, (35.0 * lv_zealotIter))), c_orderQueueReplace);
        }
        Wait(0.2, c_timeGame);
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            break;
        }
        else {
        }
    }
    Wait(2.0, c_timeGame);
    TriggerEnable(gt_AssignWarpinUnitstoCinematicTemp, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidWarpProtoss_Init () {
    gt_MidWarpProtoss = TriggerCreate("gt_MidWarpProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Warpin Units to Cinematic Temp
//--------------------------------------------------------------------------------------------------
bool gt_AssignWarpinUnitstoCinematicTemp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(EventUnitProgressUnit(), UnitGetPosition(gv_aRTANIS), 0.0);
    UnitGroupAdd(gv_cinematicTempUnits, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignWarpinUnitstoCinematicTemp_Init () {
    gt_AssignWarpinUnitstoCinematicTemp = TriggerCreate("gt_AssignWarpinUnitstoCinematicTemp_Func");
    TriggerAddEventUnitConstructProgress(gt_AssignWarpinUnitstoCinematicTemp, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    playergroup auto1BFF61FD_g;
    int auto1BFF61FD_p;
    int auto5F76DA6D_ae;
    int auto5F76DA6D_ai;
    int autoFC694F53_ae;
    int autoFC694F53_ai;
    int autoEE00B5A6_ae;
    int autoEE00B5A6_ai;
    int auto982CCD07_ae;
    int auto982CCD07_ai;
    int autoE58ACF61_ae;
    int autoE58ACF61_ai;
    int auto4BF29701_ae;
    int auto4BF29701_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_shadowCloudIndex;
    int lv_unitCreationIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_HideScreenButton(false, 1);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(38), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VoidThrasher", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("KaiserWormScourgeMissile", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    auto1BFF61FD_g = gv_alliedPlayers; 
    auto1BFF61FD_p = 1;
    for ( ; auto1BFF61FD_p <= PlayerGroupCount(auto1BFF61FD_g) ; auto1BFF61FD_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto1BFF61FD_g, auto1BFF61FD_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto1BFF61FD_g, auto1BFF61FD_p);
        UnitGroupLoopBegin(UnitGroup(null, lv_playerIndex, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }
        UnitGroupLoopEnd();
    }
    libNtve_gf_ShowHideUnit(gv_kERRIGAN, true);
    UnitSetFacing(gv_kERRIGAN, 270.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kERRIGAN), c_animNameDefault, "Stand Morph Zero One", c_animFlagPlayForever, c_animTimeDefault);
    UnitCreateEffectPoint(gv_kERRIGAN, "KerriganEpilogue03Extinction", UnitGetPosition(gv_kERRIGAN));
    libNtve_gf_CreateUnitsAtPoint2(1, "Raynor", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION8, PointFromId(623));
    gv_cineRaynor = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "ArtanisVoid", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(624));
    gv_cineArtanis = UnitLastCreated();
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cineArtanis), "Cover");
    libNtve_gf_CreateUnitsAtPoint2(1, "ZaGara", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(625));
    gv_cineZagara = UnitLastCreated();
    libNtve_gf_ShowHideUnit(gv_cineArtanis, false);
    libNtve_gf_ShowHideUnit(gv_cineRaynor, false);
    libNtve_gf_ShowHideUnit(gv_cineZagara, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(59), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRift", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(59));
    gv_cineVoidRift = UnitLastCreated();
    UnitIssueOrder(gv_cineVoidRift, Order(AbilityCommand("VoidRiftTrain", 21)), c_orderQueueReplace);
    TriggerExecute(gt_VictoryFurtherUnitGeneration, true, false);
    auto5F76DA6D_ae = 3;
    auto5F76DA6D_ai = 1;
    lv_unitCreationIndex = 1;
    for ( ; ( (auto5F76DA6D_ai >= 0 && lv_unitCreationIndex <= auto5F76DA6D_ae) || (auto5F76DA6D_ai <= 0 && lv_unitCreationIndex >= auto5F76DA6D_ae) ) ; lv_unitCreationIndex += auto5F76DA6D_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionCircle(libNtve_gf_RandomPointBetweenPoints(PointFromId(422), PointFromId(684)), 5.0)));
        UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kERRIGAN), c_orderQueueReplace);
    }
    autoFC694F53_ae = 4;
    autoFC694F53_ai = 1;
    lv_unitCreationIndex = 1;
    for ( ; ( (autoFC694F53_ai >= 0 && lv_unitCreationIndex <= autoFC694F53_ae) || (autoFC694F53_ai <= 0 && lv_unitCreationIndex >= autoFC694F53_ae) ) ; lv_unitCreationIndex += autoFC694F53_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VikingFighter", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionCircle(libNtve_gf_RandomPointBetweenPoints(PointFromId(422), PointFromId(684)), 5.0)));
        UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kERRIGAN), c_orderQueueReplace);
    }
    autoEE00B5A6_ae = 5;
    autoEE00B5A6_ai = 1;
    lv_unitCreationIndex = 1;
    for ( ; ( (autoEE00B5A6_ai >= 0 && lv_unitCreationIndex <= autoEE00B5A6_ae) || (autoEE00B5A6_ai <= 0 && lv_unitCreationIndex >= autoEE00B5A6_ae) ) ; lv_unitCreationIndex += autoEE00B5A6_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Corruptor", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionCircle(libNtve_gf_RandomPointBetweenPoints(PointFromId(684), PointFromId(849)), 5.0)));
        UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kERRIGAN), c_orderQueueReplace);
    }
    auto982CCD07_ae = 8;
    auto982CCD07_ai = 1;
    lv_unitCreationIndex = 1;
    for ( ; ( (auto982CCD07_ai >= 0 && lv_unitCreationIndex <= auto982CCD07_ae) || (auto982CCD07_ai <= 0 && lv_unitCreationIndex >= auto982CCD07_ae) ) ; lv_unitCreationIndex += auto982CCD07_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionCircle(libNtve_gf_RandomPointBetweenPoints(PointFromId(684), PointFromId(849)), 5.0)));
        UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kERRIGAN), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionCircle(libNtve_gf_RandomPointBetweenPoints(PointFromId(422), PointFromId(684)), 5.0)));
    UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionCircle(libNtve_gf_RandomPointBetweenPoints(PointFromId(684), PointFromId(849)), 5.0)));
    UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
    autoE58ACF61_ae = 12;
    autoE58ACF61_ai = 1;
    lv_unitCreationIndex = 1;
    for ( ; ( (autoE58ACF61_ai >= 0 && lv_unitCreationIndex <= autoE58ACF61_ae) || (autoE58ACF61_ai <= 0 && lv_unitCreationIndex >= autoE58ACF61_ae) ) ; lv_unitCreationIndex += autoE58ACF61_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionCircle(libNtve_gf_RandomPointBetweenPoints(PointFromId(850), PointFromId(1355)), 3.0)));
        UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kERRIGAN), c_orderQueueReplace);
    }
    auto4BF29701_ae = 4;
    auto4BF29701_ai = 1;
    lv_shadowCloudIndex = 1;
    for ( ; ( (auto4BF29701_ai >= 0 && lv_shadowCloudIndex <= auto4BF29701_ae) || (auto4BF29701_ai <= 0 && lv_shadowCloudIndex >= auto4BF29701_ae) ) ; lv_shadowCloudIndex += auto4BF29701_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloudEpilogue01", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromName(("Victory Cinematic Cloud " + IntToString(lv_shadowCloudIndex))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(109), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(622), 8.0, -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PEpilogue02_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libVCMI_gf_PlaySoundCinematic(SoundLink("VoidTendril_VoidZone_ChargeUp", -1), PlayerGroupAll(), 100.0, 0.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.5, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kERRIGAN), c_animNameDefault, "Stand Morph End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.4, c_timeGame);
    Wait(0.1, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Kerrigan_Extinction_ShockwaveExplosion_Distant", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreateEffectPoint(gv_kERRIGAN, "KerriganEpilogue03ExtinctionPulseCP", UnitGetPosition(gv_kERRIGAN));
    gv_cineExtinctionFired = true;
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != gv_kERRIGAN)) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_cineArtanis, true);
    libNtve_gf_ShowHideUnit(gv_cineRaynor, true);
    libNtve_gf_ShowHideUnit(gv_cineZagara, true);
    UnitIssueOrder(gv_cineArtanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1357)), c_orderQueueReplace);
    UnitIssueOrder(gv_cineRaynor, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1358)), c_orderQueueReplace);
    UnitIssueOrder(gv_cineZagara, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1359)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1354), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1356), ((SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00063", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00075", true), c_soundIndexAny))) + (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00076", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue02|Line00077", true), c_soundIndexAny)))), -1, 10, true);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionEntireMap());
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_kERRIGAN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(623)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00063", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_cineZagara, "Mission_Epilogue02|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kERRIGAN, "Mission_Epilogue02|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_cineZagara, "Mission_Epilogue02|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue02|Line00079", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVoiC_gf_PlayCinematic("XelNagaKerrigan", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Further Unit Generation
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFurtherUnitGeneration_Func (bool testConds, bool runActions) {
    int auto930BF5C3_ae;
    int auto930BF5C3_ai;

    // Variable Declarations
    int lv_unitCreationIndex;
    fixed lv_offsetAngle;

    // Variable Initialization
    lv_offsetAngle = 270.0;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    auto930BF5C3_ae = 15;
    auto930BF5C3_ai = 1;
    lv_unitCreationIndex = 1;
    for ( ; ( (auto930BF5C3_ai >= 0 && lv_unitCreationIndex <= auto930BF5C3_ae) || (auto930BF5C3_ai <= 0 && lv_unitCreationIndex >= auto930BF5C3_ae) ) ; lv_unitCreationIndex += auto930BF5C3_ai ) {
        if (((libVCMI_gf_PlayerInCinematicModeCampaign() == false) || (gv_cineExtinctionFired == true))) {
            break;
        }
        else {
        }
        lv_offsetAngle += 5.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION4, PointWithOffsetPolar(UnitGetPosition(gv_cineVoidRift), 2.5, lv_offsetAngle));
        UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kERRIGAN), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
        if (((libVCMI_gf_PlayerInCinematicModeCampaign() == false) || (gv_cineExtinctionFired == true))) {
            break;
        }
        else {
        }
        lv_offsetAngle += 5.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION4, PointWithOffsetPolar(UnitGetPosition(gv_cineVoidRift), 2.5, lv_offsetAngle));
        UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kERRIGAN), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
        if (((libVCMI_gf_PlayerInCinematicModeCampaign() == false) || (gv_cineExtinctionFired == true))) {
            break;
        }
        else {
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionCircle(libNtve_gf_RandomPointBetweenPoints(PointFromId(850), PointFromId(1355)), 3.0)));
        UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_kERRIGAN), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFurtherUnitGeneration_Init () {
    gt_VictoryFurtherUnitGeneration = TriggerCreate("gt_VictoryFurtherUnitGeneration_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init01aAlliedTechnology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_ArtanisDies_Init();
    gt_ArtanisRespawned_Init();
    gt_ZagaraDies_Init();
    gt_AddVoidShadeBehavior_Init();
    gt_VoidThrasherMissiles_Init();
    gt_StartGameStage01Q_Init();
    gt_StartGameStage02Q_Init();
    gt_S1_TransmissionCleartheAreaQ_Init();
    gt_S1_KerriganSelected_Init();
    gt_S1_KerriganDeSelected_Init();
    gt_S1_CreateVoidForces_Init();
    gt_S1_VoidTrashersAttack_Init();
    gt_S1_RemoveActorfromVoidForces_Init();
    gt_S1_VoidForcesUnitDies_Init();
    gt_S1_VoidForcesDestroyed_Init();
    gt_S2_ProgressAutoSave01_Init();
    gt_S2_ProgressAutoSave02_Init();
    gt_S2_ProgressAutoSave03_Init();
    gt_S2_ProgressFinaleWaves_Init();
    gt_S2_TransmissionProgress01Q_Init();
    gt_S2_TransmissionProgress02Q_Init();
    gt_S2_VoidForcesCloseInController_Init();
    gt_S2_VoidForcesCloseInRifts01_Init();
    gt_S2_VoidForcesCloseInRifts02_Init();
    gt_S2_VoidForcesCloseInVoidRiftDies_Init();
    gt_S2_VoidForcesCloseInShadowClouds01_Init();
    gt_S2_VoidForcesCloseInShadowClouds02_Init();
    gt_S2_VoidForcesCloseInRaynorAreaBullies_Init();
    gt_S2_VoidForcesCloseInArtanisAreaBullies_Init();
    gt_S2_VoidForcesCloseInZagaraAreaBullies_Init();
    gt_S2_CreateProtectKerriganTimer_Init();
    gt_S2_KerriganPowerProgressBar_Init();
    gt_S2_KerriganAttacks_Init();
    gt_S2_TransmissionKerriganNeedsToChannelReminderQ_Init();
    gt_S2_FlashKerriganSelectButtonStart_Init();
    gt_S2_FlashKerriganSelectButtonStop_Init();
    gt_S2_TrackWarningPingVariable_Init();
    gt_S2_TrackWarningPingOnKerrigan_Init();
    gt_S2_TransmissionKerriganAttackedQ_Init();
    gt_S2_TransmissionKerriganHealthLowQ_Init();
    gt_S2_TransmissionKerriganHealthCriticalQ_Init();
    gt_S2_IntroBonusObjectivesQ_Init();
    gt_S2_VoidRiftsKillingPlayer_Init();
    gt_S2_TransmissionPlayerInPerilQ_Init();
    gt_S2_VoidRiftsForcesKillingZerg_Init();
    gt_S2_TransmissionZergInPerilQ_Init();
    gt_S2_VoidRiftForcesKillingProtoss_Init();
    gt_S2_TransmissionProtossInPerilQ_Init();
    gt_S2_ProtossBullies_Activate_Init();
    gt_S2_ZergBullies_Activate_Init();
    gt_S2_ProtossDeadQ_Init();
    gt_S2_ZergDeadQ_Init();
    gt_CelestialBeamSoundRegionClear_Init();
    gt_CelestialBeamSoundFiring_Init();
    gt_StartAI_Init();
    gt_AI_GiveResources_Init();
    gt_StartUpgradesCasualNormal_Init();
    gt_StartUpgradesHardBrutal_Init();
    gt_S2_SendFirstRaynorNWWave_Init();
    gt_S2_FirstRaynorNWWavePing_Init();
    gt_S2_TransmissionFirstRaynorNWWaveQ_Init();
    gt_S2_SendFirstRaynorWWave_Init();
    gt_S2_FirstRaynorWWavePing_Init();
    gt_S2_TransmissionFirstRaynorWWaveQ_Init();
    gt_S2_RageWave01ZagaraSE_Init();
    gt_S2_RageWave02ArtanisSW_Init();
    gt_S2_RageWave03RaynorNW_Init();
    gt_S2_RageWave04ZagaraSE_Init();
    gt_S2_RageWave05ArtanisSW_Init();
    gt_S2_RageWave06RaynorW_Init();
    gt_S2_RageWave07ZagaraSE_Init();
    gt_S2_RageWave08ArtanisSW_Init();
    gt_S2_RunFinalRageWaves_Init();
    gt_S2_RageWave09RaynorNW_Init();
    gt_S2_RageWave10ZagaraSE_Init();
    gt_S2_RageWave11ArtanisSW_Init();
    gt_S2_RageWave12RaynorW_Init();
    gt_S2_TransmissionRageWave01ZagaraSEQ_Init();
    gt_S2_TransmissionRageWave02ArtanisSWQ_Init();
    gt_S2_TransmissionRageWave03RaynorNWQ_Init();
    gt_S2_TransmissionRageWave0405ZagaraArtanisAttackQ_Init();
    gt_S2_TransmissionRageWave060708RaynorZagaraArtanisAttackQ_Init();
    gt_S2_TransmissionRageWave09101112FinalWavesQ_Init();
    gt_S2_VoidThrasherSpawn01_Init();
    gt_S2_TransmissionThrasherSpawn01Q_Init();
    gt_S2_VoidThrasherSpawn02_Init();
    gt_S2_TransmissionThrasherSpawn02Q_Init();
    gt_S2_VoidThrasherSpawn03_Init();
    gt_S2_TransmissionThrasherSpawn03Q_Init();
    gt_S2_VoidThrasherSpawn04_Init();
    gt_S2_TransmissionThrasherSpawn04Q_Init();
    gt_S2_VoidThrasherSpawn05_Init();
    gt_S2_TransmissionThrasherSpawn05Q_Init();
    gt_S2_VoidThrasherSpawn06_Init();
    gt_S2_TransmissionThrasherSpawn06Q_Init();
    gt_StatKerrigansLowestLife_Init();
    gt_AchievementUnitsKilledwithBeam_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatKerriganDied_Init();
    gt_VictoryHoldoutCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipReadyQ_Init();
    gt_TipCelestialBeam_Init();
    gt_ObjectiveDestroyVoidForcesCreate_Init();
    gt_ObjectiveDestroyVoidForcesComplete_Init();
    gt_ObjectiveDestroyVoidForcesFailed_Init();
    gt_ObjectiveKerriganMustSurviveCreate_Init();
    gt_ObjectiveKerriganMustSurviveComplete_Init();
    gt_ObjectiveKerriganMustSurviveFailed_Init();
    gt_ObjectiveDefendKerriganCreate_Init();
    gt_ObjectiveDefendKerriganComplete_Init();
    gt_ObjectiveDefendKerriganFailed_Init();
    gt_ObjectiveKerriganMustSurviveCreate2_Init();
    gt_ObjectiveKerriganMustSurviveComplete2_Init();
    gt_ObjectiveKerriganMustSurviveFailed2_Init();
    gt_ObjectiveProtossSurvivalCreate_Init();
    gt_ObjectiveProtossSurvivalComplete_Init();
    gt_ObjectiveProtossSurvivalFailedQ_Init();
    gt_ObjectiveZergSurvivalCreate_Init();
    gt_ObjectiveZergSurvivalComplete_Init();
    gt_ObjectiveZergSurvivalFailedQ_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroSpawnFirstVoidThrasher_Init();
    gt_IntroSpawnSecondandThirdThrasher_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidLandFlyingUnitsMove_Init();
    gt_MidLandFlyingUnitsLand_Init();
    gt_MidMoveRaynorsUnits_Init();
    gt_MidAnimateZerg_Init();
    gt_MidWarpProtoss_Init();
    gt_AssignWarpinUnitstoCinematicTemp_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryFurtherUnitGeneration_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
