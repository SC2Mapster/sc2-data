//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Purification
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai0108C8E1"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;
const int gv_pLAYER_02_DOMINION4 = 5;
const int gv_pLAYER_02_DOMINION5 = 6;
const int gv_pLAYER_02_DOMINION6 = 7;
const int gv_pLAYER_02_DOMINION7 = 8;
const int gv_pLAYER_02_DOMINION8 = 9;
const int gv_objectivePurifierWardenMax = 1;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORDZergBase {
    bool lv_isEngaged;
    bool lv_isDestroyed;
    int lv_basePlayer;
    region lv_baseRegion;
    region lv_baseRevealRegion;
    point lv_basePingPoint;
    point lv_waveGatherPoint;
    region lv_waveDespawnRegion;
};

struct gs_RECORDStasisChambers {
    region lv_revealRegion;
    point lv_spawnPoint;
    point lv_waypoint01;
    point lv_waypoint02;
    point lv_waypoint03;
    unitgroup lv_warpathGroup;
    bool lv_isActivated;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESETCoreMatrixApproach_NorthEast = 0;
const int ge_PRESETCoreMatrixApproach_SouthEast = 1;
const int ge_PRESETCoreMatrixApproach_SouthWest = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
playergroup gv_enemyPlayers;
unit gv_purifierCoreMatrix;
unit gv_purifierSuperWarpgate;
unitgroup gv_unpoweredDefenses;
gs_RECORDZergBase[5] gv_zergBase;
int gv_zergBasesDestroyedCount;
unit[13] gv_nullCircuits;
gs_RECORDStasisChambers[5] gv_purifierStasisChambers;
int gv_purifierStasisChambersOnlineCount;
unit gv_purifierWarpathEscortTargetUnit;
unitgroup gv_purifierWarpathEscortTargetUnitGroup;
fixed gv_warpinAngle;
fixed gv_warpinAngleIteration;
int gv_coreMatrixWarningCycle;
unit gv_purifierWarden;
int gv_purifierWardenBattlecryCount;
int gv_repeatWaveCycle;
fixed gv_coreMatrixLowestShields;
timer gv_purifierComboTimer;
int gv_hybridKilledCount;
int gv_masteryBehemothKilledCount;
timer gv_masteryBehemothKillTimer;
int gv_objectiveDestroyZergBase;
int gv_objectiveNullCircuitsCount;
int gv_objectiveNullCircuitsMax;
int gv_objectiveDestroyZergBase2;
int gv_objectiveRescueStalkers;
int gv_objectivePurifierWardenCount;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicCoreMatrix;
unit gv_cinematicCybros;
unitgroup gv_cinematicPurifierGroup;
unitgroup gv_cinematicZergGroup;
unit gv_cinematicPylon;
unitgroup gv_cinematicZergAttackerGroup;
unitgroup gv_cinematicProtossDefenderGroup;
bool gv_introZergSpreadingInfestation;
unitgroup gv_introZergInfestation;
unit gv_midSuperWarpgate;
int gv_midContainmentIndex;
camerainfo gv_midCamera01;
camerainfo gv_midCamera02;
camerainfo gv_midCamera03;
camerainfo gv_midCamera04;
int gv_midColossusCount;
unit[4] gv_victoryStalker;

void InitGlobals () {
    int init_i;

    gv_enemyPlayers = PlayerGroupEmpty();
    gv_purifierCoreMatrix = UnitFromId(436);
    gv_purifierSuperWarpgate = UnitFromId(3168);
    gv_unpoweredDefenses = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_purifierStasisChambers[init_i].lv_warpathGroup = UnitGroupEmpty();
    }
    gv_purifierWarpathEscortTargetUnitGroup = UnitGroupEmpty();
    gv_purifierWarden = UnitFromId(610);
    gv_purifierComboTimer = TimerCreate();
    gv_masteryBehemothKillTimer = TimerCreate();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveNullCircuitsMax = 12;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPurifierGroup = UnitGroupEmpty();
    gv_cinematicZergGroup = UnitGroupEmpty();
    gv_cinematicZergAttackerGroup = UnitGroupEmpty();
    gv_cinematicProtossDefenderGroup = UnitGroupEmpty();
    gv_introZergInfestation = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateWarpInEffect (unit lp_unit);
unit gf_ToughestUnitinUnitGroup (unitgroup lp_unitGroup);
int gf_GetZergBaseTarget (int lp_containmentTowerIndex);
void gf_ActivateStasisChamber (int lp_containmentTowerIndex);
void gf_WarpInPurifiers (int lp_stasisChamberIndex);
void gf_SendPurifierWarpathEscortGroup (int lp_containmentTowerIndex, int lp_chosenZergBaseTarget);
void gf_DespawnPurifiers (int lp_containmentTowerIndex, int lp_zergBaseIndex);
void gf_WarpOutPurifier (unit lp_warpOutUnit);
void gf_RevealPurifierContainmentTower (unit lp_purifierUnit);
void gf_TrackNullCircuitReticleAndTextTag (unit lp_inhibitorUnit);
string gf_GetCybrosLightConfiguration ();
void gf_PingClosestNullCircuitToPoint (point lp_point);
void gf_HybridBehemothAI (unit lp_hybrid);
void gf_HybridNemesisAI (unit lp_hybrid);
int gf_GetZergBaseAttacker (int lp_coreMatrixApproach);
void gf_AddWaypointIfZergBase03Attacking (int lp_zergBaseIndex, int lp_coreMatrixApproach);
void gf_UpdateWaveGroupPing (unitgroup lp_unitGroup, int lp_ping);
void gf_WarpInHybridReaverCinematic (point lp_point);
void gf_WarpInPurifiersCinematic (int lp_stasisChamberIndex);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGame;
trigger gt_TransmissionPurifierNullCircuitsQ;
trigger gt_TransmissionPurifierCoreMatrixQ;
trigger gt_TrackReticlesonUnpoweredDefenses;
trigger gt_ZergBasesInit;
trigger gt_ZergBaseDestroyed;
trigger gt_TransmissionAllZergBasesDestroyedQ;
trigger gt_TurnOffWarnOfZergBaseTriggers;
trigger gt_TransmissionWarnOfZergBase01Q;
trigger gt_TransmissionWarnOfZergBase02Q;
trigger gt_TransmissionWarnOfZergBase03Q;
trigger gt_TransmissionWarnOfZergBase04Q;
trigger gt_KillLarva;
trigger gt_PurifierStasisChambersInit;
trigger gt_AssignPurifierUnitstoWaveGroup;
trigger gt_NullCircuitDestroyed;
trigger gt_TransmissionActivateStasisChamberQ;
trigger gt_TransmissionInitiateAttackFromStasisChamberQ;
trigger gt_TransmissionDestroyNullCircuitsReminderQ;
trigger gt_TransmissionPlayerSeesFirstNullCircuitRevealQ;
trigger gt_TransmissionLastFewNullCircuitsToGoEncouragementQ;
trigger gt_TrackNullCircuitPings;
trigger gt_UpdateCybrosLights;
trigger gt_TrackWarningPingOnCoreMatrix;
trigger gt_TransmissionCoreMatrixAttackedQ;
trigger gt_TransmissionCoreMatrixBadlyDamagedQ;
trigger gt_TransmissionCoreMatrixCriticallyDamagedQ;
trigger gt_RevealBonusObjectiveAfterTime;
trigger gt_UnitEntersRevealBonusObjectiveRegion;
trigger gt_TransmissionPurifierWardenRevealQ;
trigger gt_TransmissionPurifierWardenDiesQ;
trigger gt_PurifierWardenBehavior;
trigger gt_TransmissionPurifierWardenEngagesPlayerQ;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_AIUpgradesPurifierAttackGroup;
trigger gt_HybridCreated;
trigger gt_VsCoreAttackWave01SW;
trigger gt_VsCoreAttackWave02SW;
trigger gt_VsCoreAttackWave03NE;
trigger gt_VsCoreAttackWave04SE;
trigger gt_VsCoreAttackWave05NE;
trigger gt_VsCoreAttackWave06SWHybridIntro;
trigger gt_VsCoreAttackWave07SE;
trigger gt_VsCoreAttackWave08NE;
trigger gt_VsCoreAttackWave09SE;
trigger gt_VsCoreAttackWave10SW;
trigger gt_VsCoreAttackWaveRepeatCycle;
trigger gt_VsCoreAttackWaveOneVectorRepeatableNE;
trigger gt_VsCoreAttackWaveOneVectorRepeatableSE;
trigger gt_VsCoreAttackWaveOneVectorRepeatableSW;
trigger gt_VsCoreAttackWaveTwoVectorsRepeatableNESE;
trigger gt_VsCoreAttackWaveTwoVectorsRepeatableNESW;
trigger gt_TransmissionVsCoreMatrixAttackWave01Q;
trigger gt_TransmissionFirstNEAttackWarningQ;
trigger gt_TransmissionHybridAttackWarning01Q;
trigger gt_ZergReinforcementsController;
trigger gt_ZergReinforcements01Q;
trigger gt_ZergReinforcements02;
trigger gt_ZergReinforcements03;
trigger gt_ZergReinforcements04Hard;
trigger gt_StatCoreMatrixMinimumShields;
trigger gt_StatHybridSlain;
trigger gt_AchievementPurifierActivationCombo;
trigger gt_AchievementHybridBehemothsKilledMastery;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryStasisChambersCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipReadyQ;
trigger gt_ObjectiveNullCircuitsCreate;
trigger gt_ObjectiveNullCircuitsComplete;
trigger gt_ObjectiveNullCircuitsUpdate;
trigger gt_ObjectiveNullCircuitsFailed;
trigger gt_ObjectivePurifiersMustSurviveCreate;
trigger gt_ObjectivePurifiersMustSurviveComplete;
trigger gt_ObjectivePurifiersMustSurviveFailed;
trigger gt_ObjectiveDestroyPurifierWardenCreate;
trigger gt_ObjectiveDestroyPurifierWardenUpdate;
trigger gt_ObjectiveDestroyPurifierWardenComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZerglingFlow;
trigger gt_IntroZerglingReinforce;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidSpawnPurifiersInstantlyNew;
trigger gt_AssignPurifierUnitstoCinematicTemp;
trigger gt_IssueWalkoutOrdertoPurifiers;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryBlinkingStalkers;
trigger gt_VictoryZealotsandZerg;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai0108C8E1") { ai0108C8E1_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai0108C8E1", 2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
    AICampaignStart(9);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_CreateWarpInEffect_Trigger = null;
unit auto_gf_CreateWarpInEffect_lp_unit;

void gf_CreateWarpInEffect (unit lp_unit) {
    auto_gf_CreateWarpInEffect_lp_unit = lp_unit;

    if (auto_gf_CreateWarpInEffect_Trigger == null) {
        auto_gf_CreateWarpInEffect_Trigger = TriggerCreate("auto_gf_CreateWarpInEffect_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWarpInEffect_Trigger, false, false);
}

bool auto_gf_CreateWarpInEffect_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateWarpInEffect_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    if (((UnitGetType(lp_unit) == "HybridDestroyer") || (UnitGetType(lp_unit) == "HybridReaver") || (UnitGetType(lp_unit) == "HybridNemesis"))) {
        libNtve_gf_AttachModelToUnit(lp_unit, "HybridWarpInEffect", "Ref_Center");
        lv_model = libNtve_gf_ActorLastCreated();
    }
    else {
        if (((UnitGetType(lp_unit) == "HybridDominatorVoid") || (UnitGetType(lp_unit) == "HybridBehemoth"))) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "Signal Birth");
        }
        else {
            libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Center");
            lv_model = libNtve_gf_ActorLastCreated();
        }
    }
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_model);
    if ((UnitIsAlive(lp_unit) == true)) {
        UnitAbilityEnable(lp_unit, "move", true);
        UnitAbilityEnable(lp_unit, "attack", true);
    }
    else {
    }
    return true;
}

unit gf_ToughestUnitinUnitGroup (unitgroup lp_unitGroup) {
    // Variable Declarations
    int lv_unitCount;
    unit lv_currentUnit;
    unit lv_targetUnit;

    // Variable Initialization

    // Implementation
    lv_unitCount = UnitGroupCount(lp_unitGroup, c_unitCountAlive);
    if ((lv_unitCount == 0)) {
        lv_targetUnit = null;
    }
    else if ((lv_unitCount == 1)) {
        lv_targetUnit = UnitGroupUnit(lp_unitGroup, 1);
    }
    else if ((lv_unitCount > 1)) {
        lv_targetUnit = UnitGroupUnit(lp_unitGroup, 1);
        IntLoopBegin(2, lv_unitCount);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_currentUnit = UnitGroupUnit(lp_unitGroup, IntLoopCurrent());
            if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropVitality, c_unitPropCurrent) > UnitGetPropertyFixed(lv_targetUnit, c_unitPropVitality, c_unitPropCurrent))) {
                lv_targetUnit = lv_currentUnit;
            }
            else {
                lv_currentUnit = null;
            }
        }
        IntLoopEnd();
    }
    return lv_targetUnit;
}

int gf_GetZergBaseTarget (int lp_containmentTowerIndex) {
    int autoCF9A4388_val;

    // Variable Declarations
    int lv_i;
    int[5] lv_zergBaseSortList;

    // Variable Initialization

    // Implementation
    autoCF9A4388_val = lp_containmentTowerIndex;
    if (autoCF9A4388_val == 1) {
        return 2;
    }
    else if (autoCF9A4388_val == 2) {
        return 4;
    }
    else if (autoCF9A4388_val == 3) {
        return 1;
    }
    else if (autoCF9A4388_val == 4) {
        return 3;
    }
    else {
    }
    return 1;
}

void gf_ActivateStasisChamber (int lp_containmentTowerIndex) {
    // Variable Declarations
    int lv_chosenZergBaseTarget;

    // Variable Initialization

    // Implementation
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (TimerGetRemaining(gv_purifierComboTimer) > 0.0)) {
        TriggerExecute(gt_AchievementPurifierActivationCombo, true, false);
    }
    else {
        TimerStart(gv_purifierComboTimer, 60.0, false, c_timeAI);
    }
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E441FB13"));
    gv_purifierStasisChambersOnlineCount += 1;
    gv_purifierStasisChambers[lp_containmentTowerIndex].lv_isActivated = true;
    Wait(2.0, c_timeGame);
    if ((gv_purifierStasisChambersOnlineCount == 1)) {
        gv_midContainmentIndex = lp_containmentTowerIndex;
        TriggerExecute(gt_TransmissionActivateStasisChamberQ, true, true);
        Wait(1.0, c_timeGame);
        TriggerExecute(gt_MidQ, true, true);
        VisRevealArea(gv_pLAYER_01_USER, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_revealRegion, 32.0, false);
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_purifierStasisChambers[lp_containmentTowerIndex].lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
        TriggerExecute(gt_TransmissionInitiateAttackFromStasisChamberQ, true, true);
    }
    else {
        TriggerExecute(gt_UpdateCybrosLights, true, false);
        VisRevealArea(gv_pLAYER_01_USER, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_revealRegion, 32.0, false);
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_purifierStasisChambers[lp_containmentTowerIndex].lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionActivateStasisChamberQ, true, false);
        gf_WarpInPurifiers(lp_containmentTowerIndex);
    }
    lv_chosenZergBaseTarget = gf_GetZergBaseTarget(lp_containmentTowerIndex);
    gv_zergBase[lv_chosenZergBaseTarget].lv_isEngaged = true;
    Wait(2.0, c_timeGame);
    if ((gv_purifierStasisChambersOnlineCount > 1)) {
        TriggerExecute(gt_TransmissionInitiateAttackFromStasisChamberQ, true, true);
    }
    else {
    }
    gf_SendPurifierWarpathEscortGroup(lp_containmentTowerIndex, lv_chosenZergBaseTarget);
    AIToggleBulliesInRegion(gv_zergBase[lv_chosenZergBaseTarget].lv_basePlayer, gv_zergBase[lv_chosenZergBaseTarget].lv_baseRegion, false);
}

void gf_WarpInPurifiers (int lp_stasisChamberIndex) {
    int autoC17FD440_ae;
    int autoC17FD440_ai;
    int auto48015167_ae;
    int auto48015167_ai;
    int autoC4733E0F_ae;
    int autoC4733E0F_ai;
    int auto30CA256F_ae;
    int auto30CA256F_ai;

    // Variable Declarations
    int lv_warpIndex;
    fixed lv_warpinOffset;
    point lv_warpinLocationOrigin;
    point lv_warpinLocationIteration;

    // Variable Initialization

    // Implementation
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.3, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.3, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand A", c_animFlagPlayForever, c_animTimeDefault);
    lv_warpinLocationOrigin = PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)));
    autoC17FD440_ae = 16;
    autoC17FD440_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (autoC17FD440_ai >= 0 && lv_warpIndex <= autoC17FD440_ae) || (autoC17FD440_ai <= 0 && lv_warpIndex >= autoC17FD440_ae) ) ; lv_warpIndex += autoC17FD440_ai ) {
        if ((lv_warpIndex <= 10)) {
            gv_warpinAngleIteration = (180.0 / 10.0);
            lv_warpinOffset = 3.3;
        }
        else {
            gv_warpinAngleIteration = (180.0 / 6.0);
            lv_warpinOffset = 1.7;
        }
        if (((lv_warpIndex == 1) || (lv_warpIndex == 11))) {
            Wait(2.0, c_timeGame);
            gv_warpinAngle = ((PointGetFacing(lv_warpinLocationOrigin) - 90.0) + (gv_warpinAngleIteration / 2.0));
        }
        else {
            gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
        }
        UnitIssueOrder(gv_purifierSuperWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 10), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    gv_warpinAngleIteration = 180.0;
    gv_warpinAngle = (PointGetFacing(lv_warpinLocationOrigin) - 90.0);
    auto48015167_ae = 4;
    auto48015167_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto48015167_ai >= 0 && lv_warpIndex <= auto48015167_ae) || (auto48015167_ai <= 0 && lv_warpIndex >= auto48015167_ae) ) ; lv_warpIndex += auto48015167_ai ) {
        if ((lv_warpIndex <= 2)) {
            lv_warpinOffset = 2.0;
        }
        else {
            lv_warpinOffset = 0.75;
        }
        UnitIssueOrder(gv_purifierSuperWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 16), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    Wait(2.0, c_timeGame);
    gv_warpinAngleIteration = 180.0;
    gv_warpinAngle = (PointGetFacing(lv_warpinLocationOrigin) - 90.0);
    lv_warpinLocationOrigin = PointWithOffsetPolar(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), -1.0, PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)))));
    autoC4733E0F_ae = 4;
    autoC4733E0F_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (autoC4733E0F_ai >= 0 && lv_warpIndex <= autoC4733E0F_ae) || (autoC4733E0F_ai <= 0 && lv_warpIndex >= autoC4733E0F_ae) ) ; lv_warpIndex += autoC4733E0F_ai ) {
        if ((lv_warpIndex <= 2)) {
            lv_warpinOffset = 2.0;
        }
        else {
            lv_warpinOffset = 0.75;
        }
        UnitIssueOrder(gv_purifierSuperWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 12), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    Wait(2.0, c_timeGame);
    lv_warpinLocationOrigin = PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)));
    gv_warpinAngleIteration = 90.0;
    gv_warpinAngle = ((PointGetFacing(lv_warpinLocationOrigin) + 90.0) + (gv_warpinAngleIteration / 2.0));
    lv_warpinOffset = 3.0;
    auto30CA256F_ae = 2;
    auto30CA256F_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto30CA256F_ai >= 0 && lv_warpIndex <= auto30CA256F_ae) || (auto30CA256F_ai <= 0 && lv_warpIndex >= auto30CA256F_ae) ) ; lv_warpIndex += auto30CA256F_ai ) {
        UnitIssueOrder(gv_purifierSuperWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 14), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
}

trigger auto_gf_SendPurifierWarpathEscortGroup_Trigger = null;
int auto_gf_SendPurifierWarpathEscortGroup_lp_containmentTowerIndex;
int auto_gf_SendPurifierWarpathEscortGroup_lp_chosenZergBaseTarget;

void gf_SendPurifierWarpathEscortGroup (int lp_containmentTowerIndex, int lp_chosenZergBaseTarget) {
    auto_gf_SendPurifierWarpathEscortGroup_lp_containmentTowerIndex = lp_containmentTowerIndex;
    auto_gf_SendPurifierWarpathEscortGroup_lp_chosenZergBaseTarget = lp_chosenZergBaseTarget;

    if (auto_gf_SendPurifierWarpathEscortGroup_Trigger == null) {
        auto_gf_SendPurifierWarpathEscortGroup_Trigger = TriggerCreate("auto_gf_SendPurifierWarpathEscortGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendPurifierWarpathEscortGroup_Trigger, false, false);
}

bool auto_gf_SendPurifierWarpathEscortGroup_TriggerFunc (bool testConds, bool runActions) {
    int lp_containmentTowerIndex = auto_gf_SendPurifierWarpathEscortGroup_lp_containmentTowerIndex;
    int lp_chosenZergBaseTarget = auto_gf_SendPurifierWarpathEscortGroup_lp_chosenZergBaseTarget;

    int auto7C0A0961_ae;
    int auto7C0A0961_ai;
    int autoEBFC8AD4_val;

    // Variable Declarations
    unit lv_escortUnit;
    int lv_i;
    point lv_waypoint;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION7, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_spawnPoint);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    lv_escortUnit = UnitLastCreated();
    AISetGroupScriptControlled(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION7, UnitGetPosition(lv_escortUnit));
    AIAttackWaveSetTargetEscort(gv_pLAYER_02_DOMINION7, libNtve_gf_ConvertUnitToUnitGroup(lv_escortUnit), 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION7, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION7, 0, true);
    auto7C0A0961_ae = 4;
    auto7C0A0961_ai = 1;
    lv_i = 1;
    for ( ; ( (auto7C0A0961_ai >= 0 && lv_i <= auto7C0A0961_ae) || (auto7C0A0961_ai <= 0 && lv_i >= auto7C0A0961_ae) ) ; lv_i += auto7C0A0961_ai ) {
        autoEBFC8AD4_val = lv_i;
        if (autoEBFC8AD4_val == 1) {
            lv_waypoint = gv_purifierStasisChambers[lp_containmentTowerIndex].lv_waypoint01;
        }
        else if (autoEBFC8AD4_val == 2) {
            lv_waypoint = gv_purifierStasisChambers[lp_containmentTowerIndex].lv_waypoint02;
        }
        else if (autoEBFC8AD4_val == 3) {
            lv_waypoint = gv_purifierStasisChambers[lp_containmentTowerIndex].lv_waypoint03;
        }
        else if (autoEBFC8AD4_val == 4) {
            lv_waypoint = gv_zergBase[lp_chosenZergBaseTarget].lv_basePingPoint;
        }
        else {
        }
        while ((libVCMI_gf_GameIsOver() == false) && (DistanceBetweenPoints(UnitGetPosition(lv_escortUnit), lv_waypoint) > 1.0)) {
            if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_escortUnit), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                UnitIssueOrder(lv_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_waypoint), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_escortUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
            Wait(0.25, c_timeGame);
        }
    }
    UnitRemove(lv_escortUnit);
    AIRemoveGroupFromAnyWaves(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION7, UnitGroupCenterOfGroup(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_DOMINION7, gv_zergBase[lp_chosenZergBaseTarget].lv_baseRegion, 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION7, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION7, 0, true);
    while (!(((gv_zergBase[lp_chosenZergBaseTarget].lv_isDestroyed == true) || (UnitGroupCount(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, c_unitCountAlive) == 0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitGroupCount(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, c_unitCountAlive) > 0)) {
        gf_DespawnPurifiers(lp_containmentTowerIndex, lp_chosenZergBaseTarget);
    }
    else {
    }
    return true;
}

void gf_DespawnPurifiers (int lp_containmentTowerIndex, int lp_zergBaseIndex) {
    // Implementation
    AIRemoveGroupFromAnyWaves(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION7, UnitGroupCenterOfGroup(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_DOMINION7, gv_zergBase[lp_zergBaseIndex].lv_waveDespawnRegion, 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION7, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION7, 0, true);
    while ((libVCMI_gf_GameIsOver() == false) && (UnitGroupCount(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION7, gv_zergBase[lp_zergBaseIndex].lv_waveDespawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupHasUnit(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, UnitGroupLoopCurrent()) == true)) {
                UnitGroupRemove(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, UnitGroupLoopCurrent());
                gf_WarpOutPurifier(UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        Wait(0.5, c_timeGame);
    }
}

trigger auto_gf_WarpOutPurifier_Trigger = null;
unit auto_gf_WarpOutPurifier_lp_warpOutUnit;

void gf_WarpOutPurifier (unit lp_warpOutUnit) {
    auto_gf_WarpOutPurifier_lp_warpOutUnit = lp_warpOutUnit;

    if (auto_gf_WarpOutPurifier_Trigger == null) {
        auto_gf_WarpOutPurifier_Trigger = TriggerCreate("auto_gf_WarpOutPurifier_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpOutPurifier_Trigger, false, false);
}

bool auto_gf_WarpOutPurifier_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpOutUnit = auto_gf_WarpOutPurifier_lp_warpOutUnit;

    // Variable Declarations
    actor lv_warpOutModel;

    // Variable Initialization

    // Implementation
    libNtve_gf_PauseUnit(lp_warpOutUnit, true);
    libNtve_gf_AttachModelToUnitInheritVisibility(lp_warpOutUnit, "ProtossGenericWarpInOut", "Ref_Origin");
    lv_warpOutModel = libNtve_gf_ActorLastCreated();
    SoundPlayAtPointForPlayer(SoundLink("Event_Exp3_LassaraWarpInFinish", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_warpOutUnit), 0.0, 50.0, 0.0);
    Wait(5.0, c_timeGame);
    UnitRemove(lp_warpOutUnit);
    libNtve_gf_KillModel(lv_warpOutModel);
    return true;
}

void gf_RevealPurifierContainmentTower (unit lp_purifierUnit) {
    // Implementation
    if (((UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x8A") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x8B") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x8C"))) {
        VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(UnitGetPosition(lp_purifierUnit)) - 7.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) - 5.0), (PointGetX(UnitGetPosition(lp_purifierUnit)) + 7.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) + 5.0)), 6.0, false);
    }
    else if (((UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x12A") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x12B") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x12C"))) {
        VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(UnitGetPosition(lp_purifierUnit)) - 5.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) - 7.0), (PointGetX(UnitGetPosition(lp_purifierUnit)) + 5.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) + 7.0)), 6.0, false);
    }
    else if (((UnitGetType(lp_purifierUnit) == "PurifierCellBlock12x8A") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock12x8B") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock12x8C"))) {
        VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(UnitGetPosition(lp_purifierUnit)) - 7.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) - 5.0), (PointGetX(UnitGetPosition(lp_purifierUnit)) + 7.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) + 5.0)), 6.0, false);
    }
}

trigger auto_gf_TrackNullCircuitReticleAndTextTag_Trigger = null;
unit auto_gf_TrackNullCircuitReticleAndTextTag_lp_inhibitorUnit;

void gf_TrackNullCircuitReticleAndTextTag (unit lp_inhibitorUnit) {
    auto_gf_TrackNullCircuitReticleAndTextTag_lp_inhibitorUnit = lp_inhibitorUnit;

    if (auto_gf_TrackNullCircuitReticleAndTextTag_Trigger == null) {
        auto_gf_TrackNullCircuitReticleAndTextTag_Trigger = TriggerCreate("auto_gf_TrackNullCircuitReticleAndTextTag_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrackNullCircuitReticleAndTextTag_Trigger, false, false);
}

bool auto_gf_TrackNullCircuitReticleAndTextTag_TriggerFunc (bool testConds, bool runActions) {
    unit lp_inhibitorUnit = auto_gf_TrackNullCircuitReticleAndTextTag_lp_inhibitorUnit;

    // Implementation
    while (!((UnitGetType(lp_inhibitorUnit) == "NullCircuitActivated"))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_inhibitorUnit, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(lp_inhibitorUnit, 1));
    return true;
}

string gf_GetCybrosLightConfiguration () {
    // Variable Declarations
    string lv_newLight;

    // Variable Initialization

    // Implementation
    if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros01_Nesw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros02_nEsw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros03_neSw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros04_nesW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros05_NEsw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros06_nESw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros07_neSW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros08_NesW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros09_NeSw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros10_nEsW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros11_nESW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros12_NeSW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros13_NEsW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros14_NESw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros15_NESW";
    }
    else if (true) {
        lv_newLight = "Cybros00_nesw";
    }
    return lv_newLight;
}

void gf_PingClosestNullCircuitToPoint (point lp_point) {
    int auto35EF9B15_ae;
    int auto35EF9B15_ai;

    // Variable Declarations
    int lv_i;
    unitgroup lv_lockGroup;
    unit lv_lockUnit;

    // Variable Initialization
    lv_lockGroup = UnitGroupEmpty();

    // Implementation
    TriggerEnable(TriggerGetCurrent(), false);
    auto35EF9B15_ae = gv_objectiveNullCircuitsMax;
    auto35EF9B15_ai = 1;
    lv_i = 1;
    for ( ; ( (auto35EF9B15_ai >= 0 && lv_i <= auto35EF9B15_ae) || (auto35EF9B15_ai <= 0 && lv_i >= auto35EF9B15_ae) ) ; lv_i += auto35EF9B15_ai ) {
        if ((UnitGetType(gv_nullCircuits[lv_i]) == "NullCircuit")) {
            UnitGroupAdd(lv_lockGroup, gv_nullCircuits[lv_i]);
        }
        else {
        }
    }
    lv_lockUnit = UnitGroupClosestToPoint(lv_lockGroup, lp_point);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7F379361"), null, UnitGetPosition(lv_lockUnit));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_lockUnit), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_lockUnit), 2.0), 8.0, false);
}

trigger auto_gf_HybridBehemothAI_Trigger = null;
unit auto_gf_HybridBehemothAI_lp_hybrid;

void gf_HybridBehemothAI (unit lp_hybrid) {
    auto_gf_HybridBehemothAI_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridBehemothAI_Trigger == null) {
        auto_gf_HybridBehemothAI_Trigger = TriggerCreate("auto_gf_HybridBehemothAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBehemothAI_Trigger, false, false);
}

bool auto_gf_HybridBehemothAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridBehemothAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_enemyGroup5;
    int lv_targetCount;

    // Variable Initialization
    lv_enemyGroup5 = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_hybrid) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_enemyGroup5 = UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hybrid), 5.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("ConsumeDNA", 0), c_cmdStateCooldown) == false)) {
            if ((UnitGroupCount(lv_enemyGroup5, c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("ConsumeDNA", 0), gf_ToughestUnitinUnitGroup(lv_enemyGroup5)));
            }
            else {
            }
        }
        else {
        }
        lv_targetCount = UnitGroupCount(lv_enemyGroup5, c_unitCountAlive);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridFAoEStun", 0), c_cmdStateCooldown) == false) && (lv_targetCount >= 3)) {
            libNtve_gf_AICast(lp_hybrid, Order(AbilityCommand("HybridFAoEStun", 0)));
        }
        else {
        }
        lv_enemyGroup5 = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_HybridNemesisAI_Trigger = null;
unit auto_gf_HybridNemesisAI_lp_hybrid;

void gf_HybridNemesisAI (unit lp_hybrid) {
    auto_gf_HybridNemesisAI_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridNemesisAI_Trigger == null) {
        auto_gf_HybridNemesisAI_Trigger = TriggerCreate("auto_gf_HybridNemesisAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridNemesisAI_Trigger, false, false);
}

bool auto_gf_HybridNemesisAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridNemesisAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_enemyGroup9;

    // Variable Initialization
    lv_enemyGroup9 = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_hybrid) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_enemyGroup9 = UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hybrid), 9.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridGeneralPhaseShift", 0), c_cmdStateCooldown) == false)) {
            UnitGroupLoopBegin(lv_enemyGroup9);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((UnitHasBehavior2(UnitGroupLoopCurrent(), "HybridGeneralPhaseShift") == true) || (UnitHasBehavior2(UnitGroupLoopCurrent(), "HybridNemesisStasisPrevention") == true))) {
                    UnitGroupRemove(lv_enemyGroup9, UnitGroupLoopCurrent());
                }
                else {
                }
            }
            UnitGroupLoopEnd();
            if ((UnitGroupCount(lv_enemyGroup9, c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridGeneralPhaseShift", 0), UnitGroupClosestToPoint(lv_enemyGroup9, UnitGetPosition(lp_hybrid))));
            }
            else {
            }
        }
        else {
        }
        lv_enemyGroup9 = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

int gf_GetZergBaseAttacker (int lp_coreMatrixApproach) {
    int auto0FFFCA91_val;
    int auto11E7BBBF_ae;
    int auto11E7BBBF_ai;
    int auto03932E96_ae;
    int auto03932E96_ai;

    // Variable Declarations
    int lv_i;
    int[5] lv_zergBaseSortList;

    // Variable Initialization

    // Implementation
    auto0FFFCA91_val = lp_coreMatrixApproach;
    if (auto0FFFCA91_val == ge_PRESETCoreMatrixApproach_SouthWest) {
        lv_zergBaseSortList[1] = 1;
        lv_zergBaseSortList[2] = 2;
        lv_zergBaseSortList[3] = 3;
        lv_zergBaseSortList[4] = 4;
    }
    else if (auto0FFFCA91_val == ge_PRESETCoreMatrixApproach_NorthEast) {
        lv_zergBaseSortList[1] = 4;
        lv_zergBaseSortList[2] = 2;
        lv_zergBaseSortList[3] = 3;
        lv_zergBaseSortList[4] = 1;
    }
    else if (auto0FFFCA91_val == ge_PRESETCoreMatrixApproach_SouthEast) {
        lv_zergBaseSortList[1] = 2;
        lv_zergBaseSortList[2] = 4;
        lv_zergBaseSortList[3] = 1;
        lv_zergBaseSortList[4] = 3;
    }
    else {
        lv_zergBaseSortList[1] = 1;
        lv_zergBaseSortList[2] = 2;
        lv_zergBaseSortList[3] = 3;
        lv_zergBaseSortList[4] = 4;
    }
    auto11E7BBBF_ae = 4;
    auto11E7BBBF_ai = 1;
    lv_i = 1;
    for ( ; ( (auto11E7BBBF_ai >= 0 && lv_i <= auto11E7BBBF_ae) || (auto11E7BBBF_ai <= 0 && lv_i >= auto11E7BBBF_ae) ) ; lv_i += auto11E7BBBF_ai ) {
        if ((gv_zergBase[lv_zergBaseSortList[lv_i]].lv_isEngaged == false) && (gv_zergBase[lv_zergBaseSortList[lv_i]].lv_isDestroyed == false)) {
            return lv_zergBaseSortList[lv_i];
        }
        else {
        }
    }
    auto03932E96_ae = 4;
    auto03932E96_ai = 1;
    lv_i = 1;
    for ( ; ( (auto03932E96_ai >= 0 && lv_i <= auto03932E96_ae) || (auto03932E96_ai <= 0 && lv_i >= auto03932E96_ae) ) ; lv_i += auto03932E96_ai ) {
        if ((gv_zergBase[lv_zergBaseSortList[lv_i]].lv_isDestroyed == false)) {
            return lv_zergBaseSortList[lv_i];
        }
        else {
        }
    }
    return 1;
}

void gf_AddWaypointIfZergBase03Attacking (int lp_zergBaseIndex, int lp_coreMatrixApproach) {
    // Implementation
    if ((lp_zergBaseIndex == 3)) {
        if ((lp_coreMatrixApproach == ge_PRESETCoreMatrixApproach_NorthEast)) {
            AIAttackWaveAddWaypoint(gv_zergBase[lp_zergBaseIndex].lv_basePlayer, PointFromId(1648), false);
        }
        else {
        }
        if ((lp_coreMatrixApproach == ge_PRESETCoreMatrixApproach_SouthEast)) {
            AIAttackWaveAddWaypoint(gv_zergBase[lp_zergBaseIndex].lv_basePlayer, PointFromId(1647), false);
        }
        else {
        }
        if ((lp_coreMatrixApproach == ge_PRESETCoreMatrixApproach_SouthWest)) {
            AIAttackWaveAddWaypoint(gv_zergBase[lp_zergBaseIndex].lv_basePlayer, PointFromId(1647), false);
        }
        else {
        }
    }
    else {
    }
}

trigger auto_gf_UpdateWaveGroupPing_Trigger = null;
unitgroup auto_gf_UpdateWaveGroupPing_lp_unitGroup;
int auto_gf_UpdateWaveGroupPing_lp_ping;

void gf_UpdateWaveGroupPing (unitgroup lp_unitGroup, int lp_ping) {
    auto_gf_UpdateWaveGroupPing_lp_unitGroup = lp_unitGroup;
    auto_gf_UpdateWaveGroupPing_lp_ping = lp_ping;

    if (auto_gf_UpdateWaveGroupPing_Trigger == null) {
        auto_gf_UpdateWaveGroupPing_Trigger = TriggerCreate("auto_gf_UpdateWaveGroupPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateWaveGroupPing_Trigger, false, false);
}

bool auto_gf_UpdateWaveGroupPing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_UpdateWaveGroupPing_lp_unitGroup;
    int lp_ping = auto_gf_UpdateWaveGroupPing_lp_ping;

    // Implementation
    while ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) > 0)) {
        PingSetPosition(lp_ping, UnitGroupCenterOfGroup(lp_unitGroup));
        Wait(0.25, c_timeGame);
    }
    PingDestroy(lp_ping);
    return true;
}

trigger auto_gf_WarpInHybridReaverCinematic_Trigger = null;
point auto_gf_WarpInHybridReaverCinematic_lp_point;

void gf_WarpInHybridReaverCinematic (point lp_point) {
    auto_gf_WarpInHybridReaverCinematic_lp_point = lp_point;

    if (auto_gf_WarpInHybridReaverCinematic_Trigger == null) {
        auto_gf_WarpInHybridReaverCinematic_Trigger = TriggerCreate("auto_gf_WarpInHybridReaverCinematic_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInHybridReaverCinematic_Trigger, false, false);
}

bool auto_gf_WarpInHybridReaverCinematic_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_WarpInHybridReaverCinematic_lp_point;

    // Variable Declarations
    unit lv_hybrid;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridBehemoth", 0, gv_pLAYER_02_DOMINION4, lp_point);
    lv_hybrid = UnitLastCreated();
    libNtve_gf_PauseUnit(lv_hybrid, true);
    libNtve_gf_SendActorMessageToUnit(lv_hybrid, "Signal Birth");
    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_hybrid, true);
    libNtve_gf_PauseUnit(lv_hybrid, false);
    UnitSetInfoText(lv_hybrid, StringExternal("Param/Value/C300FB84"), StringExternal("Param/Value/2E1B5A8A"), StringToText(""));
    return true;
}

trigger auto_gf_WarpInPurifiersCinematic_Trigger = null;
int auto_gf_WarpInPurifiersCinematic_lp_stasisChamberIndex;

void gf_WarpInPurifiersCinematic (int lp_stasisChamberIndex) {
    auto_gf_WarpInPurifiersCinematic_lp_stasisChamberIndex = lp_stasisChamberIndex;

    if (auto_gf_WarpInPurifiersCinematic_Trigger == null) {
        auto_gf_WarpInPurifiersCinematic_Trigger = TriggerCreate("auto_gf_WarpInPurifiersCinematic_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInPurifiersCinematic_Trigger, false, false);
}

bool auto_gf_WarpInPurifiersCinematic_TriggerFunc (bool testConds, bool runActions) {
    int lp_stasisChamberIndex = auto_gf_WarpInPurifiersCinematic_lp_stasisChamberIndex;

    int auto940BBE17_ae;
    int auto940BBE17_ai;
    int auto01223E66_ae;
    int auto01223E66_ai;
    int auto9A333B19_ae;
    int auto9A333B19_ai;
    int auto0D008719_ae;
    int auto0D008719_ai;

    // Variable Declarations
    fixed lv_warpinOffset;
    point lv_warpinLocationOrigin;
    point lv_warpinLocationIteration;
    unit lv_cinematicWarpgate;
    int lv_warpIndex;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SuperWarpGate", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION7, Point(0.0, 0.0));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_cinematicWarpgate = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION7, PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.3, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.3, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand A", c_animFlagPlayForever, c_animTimeDefault);
    lv_warpinLocationOrigin = PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)));
    auto940BBE17_ae = 16;
    auto940BBE17_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto940BBE17_ai >= 0 && lv_warpIndex <= auto940BBE17_ae) || (auto940BBE17_ai <= 0 && lv_warpIndex >= auto940BBE17_ae) ) ; lv_warpIndex += auto940BBE17_ai ) {
        if ((lv_warpIndex <= 10)) {
            gv_warpinAngleIteration = (180.0 / 10.0);
            lv_warpinOffset = 3.3;
        }
        else {
            gv_warpinAngleIteration = (180.0 / 6.0);
            lv_warpinOffset = 1.7;
        }
        if (((lv_warpIndex == 1) || (lv_warpIndex == 11))) {
            Wait(2.0, c_timeGame);
            gv_warpinAngle = ((PointGetFacing(lv_warpinLocationOrigin) - 90.0) + (gv_warpinAngleIteration / 2.0));
        }
        else {
            gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
        }
        UnitIssueOrder(lv_cinematicWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 10), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    gv_warpinAngleIteration = 180.0;
    gv_warpinAngle = (PointGetFacing(lv_warpinLocationOrigin) - 90.0);
    auto01223E66_ae = 4;
    auto01223E66_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto01223E66_ai >= 0 && lv_warpIndex <= auto01223E66_ae) || (auto01223E66_ai <= 0 && lv_warpIndex >= auto01223E66_ae) ) ; lv_warpIndex += auto01223E66_ai ) {
        if ((lv_warpIndex <= 2)) {
            lv_warpinOffset = 2.0;
        }
        else {
            lv_warpinOffset = 0.75;
        }
        UnitIssueOrder(lv_cinematicWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 16), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    Wait(2.0, c_timeGame);
    gv_warpinAngleIteration = 180.0;
    gv_warpinAngle = (PointGetFacing(lv_warpinLocationOrigin) - 90.0);
    lv_warpinLocationOrigin = PointWithOffsetPolar(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), -1.0, PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)))));
    auto9A333B19_ae = 4;
    auto9A333B19_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto9A333B19_ai >= 0 && lv_warpIndex <= auto9A333B19_ae) || (auto9A333B19_ai <= 0 && lv_warpIndex >= auto9A333B19_ae) ) ; lv_warpIndex += auto9A333B19_ai ) {
        if ((lv_warpIndex <= 2)) {
            lv_warpinOffset = 2.0;
        }
        else {
            lv_warpinOffset = 0.75;
        }
        UnitIssueOrder(lv_cinematicWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 12), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    Wait(2.0, c_timeGame);
    lv_warpinLocationOrigin = PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)));
    gv_warpinAngleIteration = 90.0;
    gv_warpinAngle = ((PointGetFacing(lv_warpinLocationOrigin) + 90.0) + (gv_warpinAngleIteration / 2.0));
    lv_warpinOffset = 3.0;
    auto0D008719_ae = 2;
    auto0D008719_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto0D008719_ai >= 0 && lv_warpIndex <= auto0D008719_ae) || (auto0D008719_ai <= 0 && lv_warpIndex >= auto0D008719_ae) ) ; lv_warpIndex += auto0D008719_ai ) {
        UnitIssueOrder(lv_cinematicWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 14), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PPurifier03");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION3, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION3, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "overlordspeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION6, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION6, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION7, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION4);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateMineralCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateVespeneCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 1, true);
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1000);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    TriggerExecute(gt_ZergBasesInit, true, true);
    libNtve_gf_ShareVisionofUnit(gv_purifierCoreMatrix, true, gv_pLAYER_01_USER);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_purifierCoreMatrix, null, StringExternal("Param/Value/4F090CB6"), StringExternal("Param/Value/5F87AFC2"));
    UnitBehaviorAddPlayer(gv_purifierCoreMatrix, "HybridNemesisStasisPrevention", gv_pLAYER_02_DOMINION6, 1);
    UnitGroupLoopBegin(UnitGroup("HybridBehemoth", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_HybridBehemothAI(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libVCMI_gf_SetUnitInfoTextCampaign(gv_purifierWarden, null, StringExternal("Param/Value/993180C1"), null);
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(3)) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(26)) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(27)) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(29)) == false) && (UnitGetType(UnitGroupLoopCurrent()) == "Zergling")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "CritterWanderLeashShort", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_PurifierStasisChambersInit, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PPurifier03_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    GameSetLighting("Cybros00_nesw", 0.0);
    libLbty_gf_AutoRevealRegion(RegionFromId(107), RegionFromId(107), gv_pLAYER_01_USER);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(117), "Purifier_StasisPods_Chamber");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(117), "Purifier_StasisPods");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_purifierCoreMatrix, c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(6000, 6000, 4000, 2000));
    UnitSetPropertyFixed(gv_purifierCoreMatrix, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShieldsMax, libLotv_gf_DifficultyValueInt2(2000, 2000, 2000, 2000));
    UnitSetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShieldsPercent, 100.0);
    gv_coreMatrixLowestShields = UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShields, c_unitPropCurrent);
    IntLoopBegin(1, 12);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitSetPropertyFixed(gv_nullCircuits[IntLoopCurrent()], c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(500, 500, 750, 1000));
        UnitSetPropertyFixed(gv_nullCircuits[IntLoopCurrent()], c_unitPropLifePercent, 100.0);
    }
    IntLoopEnd();
    UnitSetPropertyFixed(gv_purifierWarden, c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(3000, 3000, 4000, 5000));
    UnitSetPropertyFixed(gv_purifierWarden, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_purifierWarden, c_unitPropShieldsMax, libLotv_gf_DifficultyValueInt2(1000, 1000, 1500, 2000));
    UnitSetPropertyFixed(gv_purifierWarden, c_unitPropShieldsPercent, 100.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION8, "RoguePurifierBotCountUpgrade", 1);
    }
    else {
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        PlayerGroupLoopBegin(gv_enemyPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
        PlayerGroupLoopBegin(gv_enemyPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("FungalGrowth", 0), false);
        }
        PlayerGroupLoopEnd();
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        PlayerGroupLoopBegin(gv_enemyPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "ChitinousPlating", 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("NullCircuit");
    libVCMI_gf_AddMissionTipCampaign("PurifierCoreMatrix");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("QueenClassic", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("RoguePurifier", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDominatorVoid", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4E1BCD29"), null, PointFromId(1087));
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    TriggerExecute(gt_RevealBonusObjectiveAfterTime, true, false);
    TriggerExecute(gt_TransmissionDestroyNullCircuitsReminderQ, true, false);
    TriggerExecute(gt_TrackNullCircuitPings, true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TimerStart(gv_masteryBehemothKillTimer, 900.0, false, c_timeAI);
    }
    else {
    }
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_TransmissionPurifierNullCircuitsQ, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TransmissionPurifierCoreMatrixQ, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Null Circuits Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierNullCircuitsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveNullCircuitsCreate, true, true);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F95E02B3"), null, UnitFromId(213));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(213)), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(213)), 3.0), 2.0, false);
    Wait(0.25, c_timeGame);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CC560994"), null, UnitFromId(212));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(212)), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(212)), 3.0), 2.0, false);
    Wait(0.25, c_timeGame);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3182698F"), null, UnitFromId(214));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(214)), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(214)), 3.0), 2.0, false);
    Wait(0.25, c_timeGame);
    Wait(1.75, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00094", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierNullCircuitsQ_Init () {
    gt_TransmissionPurifierNullCircuitsQ = TriggerCreate("gt_TransmissionPurifierNullCircuitsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Core Matrix Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierCoreMatrixQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TrackWarningPingOnCoreMatrix, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectivePurifiersMustSurviveCreate, true, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A51458D4"), null, PointFromId(75));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), 0.0, false);
    Wait(0.25, c_timeGame);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_purifierCoreMatrix), 4.0, Color(0.00, 100.00, 0.00));
    libVCUI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\tip_cybroscorematrix.dds", StringExternal("Param/Value/9F124553"), 100);
    libVCUI_gf_SetSingularBossBarBossVoidCampaign(gv_purifierCoreMatrix, true);
    UnitSetOwner(UnitFromId(1437), gv_pLAYER_01_USER, true);
    UnitSetOwner(UnitFromId(1097), gv_pLAYER_01_USER, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(57), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitGroupLoopCurrent()), "PowerSource") == 0) && (libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringToText(""), UnitGroupLoopCurrent(), "Ref_Center");
            libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 1, libNtve_gf_ActorLastCreated());
            UnitGroupAdd(gv_unpoweredDefenses, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_TrackReticlesonUnpoweredDefenses, true, false);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierCoreMatrixQ_Init () {
    gt_TransmissionPurifierCoreMatrixQ = TriggerCreate("gt_TransmissionPurifierCoreMatrixQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Reticles on Unpowered Defenses
//--------------------------------------------------------------------------------------------------
bool gt_TrackReticlesonUnpoweredDefenses_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitGroupCount(gv_unpoweredDefenses, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(gv_unpoweredDefenses);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitGroupLoopCurrent()), "PowerSource") > 0)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1));
                UnitGroupRemove(gv_unpoweredDefenses, UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackReticlesonUnpoweredDefenses_Init () {
    gt_TrackReticlesonUnpoweredDefenses = TriggerCreate("gt_TrackReticlesonUnpoweredDefenses_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Bases Init
//--------------------------------------------------------------------------------------------------
bool gt_ZergBasesInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gv_zergBase[lv_i].lv_baseRegion = RegionFromId(3);
    gv_zergBase[lv_i].lv_baseRevealRegion = RegionFromId(30);
    gv_zergBase[lv_i].lv_basePlayer = gv_pLAYER_02_DOMINION;
    gv_zergBase[lv_i].lv_basePingPoint = PointFromId(15);
    gv_zergBase[lv_i].lv_waveGatherPoint = PointFromId(1355);
    gv_zergBase[lv_i].lv_waveDespawnRegion = RegionFromId(21);
    lv_i += 1;
    gv_zergBase[lv_i].lv_baseRegion = RegionFromId(26);
    gv_zergBase[lv_i].lv_baseRevealRegion = RegionFromId(33);
    gv_zergBase[lv_i].lv_basePlayer = gv_pLAYER_02_DOMINION2;
    gv_zergBase[lv_i].lv_basePingPoint = PointFromId(71);
    gv_zergBase[lv_i].lv_waveGatherPoint = PointFromId(1356);
    gv_zergBase[lv_i].lv_waveDespawnRegion = RegionFromId(22);
    lv_i += 1;
    gv_zergBase[lv_i].lv_baseRegion = RegionFromId(27);
    gv_zergBase[lv_i].lv_baseRevealRegion = RegionFromId(35);
    gv_zergBase[lv_i].lv_basePlayer = gv_pLAYER_02_DOMINION3;
    gv_zergBase[lv_i].lv_basePingPoint = PointFromId(273);
    gv_zergBase[lv_i].lv_waveGatherPoint = PointFromId(1357);
    gv_zergBase[lv_i].lv_waveDespawnRegion = RegionFromId(23);
    lv_i += 1;
    gv_zergBase[lv_i].lv_baseRegion = RegionFromId(29);
    gv_zergBase[lv_i].lv_baseRevealRegion = RegionFromId(37);
    gv_zergBase[lv_i].lv_basePlayer = gv_pLAYER_02_DOMINION4;
    gv_zergBase[lv_i].lv_basePingPoint = PointFromId(520);
    gv_zergBase[lv_i].lv_waveGatherPoint = PointFromId(869);
    gv_zergBase[lv_i].lv_waveDespawnRegion = RegionFromId(24);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBasesInit_Init () {
    gt_ZergBasesInit = TriggerCreate("gt_ZergBasesInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ZergBaseDestroyed_Func (bool testConds, bool runActions) {
    int autoB5D55A8B_ae;
    int autoB5D55A8B_ai;

    // Variable Declarations
    int lv_i;
    unitgroup lv_zergBaseStructureGroup;

    // Variable Initialization
    lv_zergBaseStructureGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB5D55A8B_ae = 4;
    autoB5D55A8B_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB5D55A8B_ai >= 0 && lv_i <= autoB5D55A8B_ae) || (autoB5D55A8B_ai <= 0 && lv_i >= autoB5D55A8B_ae) ) ; lv_i += autoB5D55A8B_ai ) {
        if ((gv_zergBase[lv_i].lv_isDestroyed == false)) {
            lv_zergBaseStructureGroup = UnitGroupEmpty();
            UnitGroupLoopBegin(UnitGroup(null, gv_zergBase[lv_i].lv_basePlayer, gv_zergBase[lv_i].lv_baseRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((UnitGetType(UnitGroupLoopCurrent()) == "Hatchery") || (UnitGetType(UnitGroupLoopCurrent()) == "Lair") || (UnitGetType(UnitGroupLoopCurrent()) == "Hive"))) {
                    UnitGroupAdd(lv_zergBaseStructureGroup, UnitGroupLoopCurrent());
                }
                else {
                }
            }
            UnitGroupLoopEnd();
            if ((UnitGroupCount(lv_zergBaseStructureGroup, c_unitCountAlive) == 0)) {
                gv_zergBase[lv_i].lv_isDestroyed = true;
                gv_zergBasesDestroyedCount += 1;
                if ((gv_zergBase[1].lv_isDestroyed == true) && (gv_zergBase[2].lv_isDestroyed == true) && (gv_zergBase[3].lv_isDestroyed == true) && (gv_zergBase[4].lv_isDestroyed == true)) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_TransmissionAllZergBasesDestroyedQ, true, false);
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBaseDestroyed_Init () {
    gt_ZergBaseDestroyed = TriggerCreate("gt_ZergBaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_ZergBaseDestroyed, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - All Zerg Bases Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAllZergBasesDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00158", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_VictoryStasisChambersCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAllZergBasesDestroyedQ_Init () {
    gt_TransmissionAllZergBasesDestroyedQ = TriggerCreate("gt_TransmissionAllZergBasesDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn Off Warn Of Zerg Base Triggers
//--------------------------------------------------------------------------------------------------
bool gt_TurnOffWarnOfZergBaseTriggers_Func (bool testConds, bool runActions) {
    region auto636719FE_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto636719FE_val = EventUnitRegion();
    if (auto636719FE_val == RegionFromId(41)) {
        TriggerEnable(gt_TransmissionWarnOfZergBase01Q, false);
    }
    else if (auto636719FE_val == RegionFromId(44)) {
        TriggerEnable(gt_TransmissionWarnOfZergBase02Q, false);
    }
    else if (auto636719FE_val == RegionFromId(45)) {
        TriggerEnable(gt_TransmissionWarnOfZergBase03Q, false);
    }
    else if (auto636719FE_val == RegionFromId(46)) {
        TriggerEnable(gt_TransmissionWarnOfZergBase04Q, false);
    }
    else {
    }
    if ((TriggerIsEnabled(gt_TransmissionWarnOfZergBase01Q) == false) && (TriggerIsEnabled(gt_TransmissionWarnOfZergBase02Q) == false) && (TriggerIsEnabled(gt_TransmissionWarnOfZergBase03Q) == false) && (TriggerIsEnabled(gt_TransmissionWarnOfZergBase04Q) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOffWarnOfZergBaseTriggers_Init () {
    gt_TurnOffWarnOfZergBaseTriggers = TriggerCreate("gt_TurnOffWarnOfZergBaseTriggers_Func");
    TriggerAddEventUnitRegion(gt_TurnOffWarnOfZergBaseTriggers, null, RegionFromId(41), true);
    TriggerAddEventUnitRegion(gt_TurnOffWarnOfZergBaseTriggers, null, RegionFromId(44), true);
    TriggerAddEventUnitRegion(gt_TurnOffWarnOfZergBaseTriggers, null, RegionFromId(45), true);
    TriggerAddEventUnitRegion(gt_TurnOffWarnOfZergBaseTriggers, null, RegionFromId(46), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warn Of Zerg Base 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarnOfZergBase01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    gf_PingClosestNullCircuitToPoint(gv_zergBase[1].lv_basePingPoint);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00200", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarnOfZergBase01Q_Init () {
    gt_TransmissionWarnOfZergBase01Q = TriggerCreate("gt_TransmissionWarnOfZergBase01Q_Func");
    TriggerAddEventUnitRegion(gt_TransmissionWarnOfZergBase01Q, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warn Of Zerg Base 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarnOfZergBase02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    gf_PingClosestNullCircuitToPoint(gv_zergBase[2].lv_basePingPoint);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00200", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarnOfZergBase02Q_Init () {
    gt_TransmissionWarnOfZergBase02Q = TriggerCreate("gt_TransmissionWarnOfZergBase02Q_Func");
    TriggerAddEventUnitRegion(gt_TransmissionWarnOfZergBase02Q, null, RegionFromId(44), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warn Of Zerg Base 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarnOfZergBase03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00131", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    gf_PingClosestNullCircuitToPoint(gv_zergBase[3].lv_basePingPoint);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00200", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarnOfZergBase03Q_Init () {
    gt_TransmissionWarnOfZergBase03Q = TriggerCreate("gt_TransmissionWarnOfZergBase03Q_Func");
    TriggerAddEventUnitRegion(gt_TransmissionWarnOfZergBase03Q, null, RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warn Of Zerg Base 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarnOfZergBase04Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00132", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    gf_PingClosestNullCircuitToPoint(gv_zergBase[4].lv_basePingPoint);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00200", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarnOfZergBase04Q_Init () {
    gt_TransmissionWarnOfZergBase04Q = TriggerCreate("gt_TransmissionWarnOfZergBase04Q_Func");
    TriggerAddEventUnitRegion(gt_TransmissionWarnOfZergBase04Q, null, RegionFromId(46), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Larva
//--------------------------------------------------------------------------------------------------
bool gt_KillLarva_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Larva", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillLarva_Init () {
    gt_KillLarva = TriggerCreate("gt_KillLarva_Func");
    TriggerAddEventUnitDied(gt_KillLarva, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Stasis Chambers Init
//--------------------------------------------------------------------------------------------------
bool gt_PurifierStasisChambersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gv_purifierStasisChambers[lv_i].lv_revealRegion = RegionFromId(4);
    gv_purifierStasisChambers[lv_i].lv_spawnPoint = PointFromId(519);
    gv_purifierStasisChambers[lv_i].lv_waypoint01 = PointFromId(1556);
    gv_purifierStasisChambers[lv_i].lv_waypoint02 = PointFromId(1557);
    gv_purifierStasisChambers[lv_i].lv_waypoint03 = PointFromId(1558);
    gv_nullCircuits[1] = UnitFromId(2);
    gv_nullCircuits[2] = UnitFromId(411);
    gv_nullCircuits[3] = UnitFromId(1);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[1], null, StringExternal("Param/Value/024F9E2D"), StringExternal("Param/Value/BFB6124E"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[2], null, StringExternal("Param/Value/72348F38"), StringExternal("Param/Value/7BD6614C"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[3], null, StringExternal("Param/Value/98780D7E"), StringExternal("Param/Value/5D431F9A"));
    lv_i += 1;
    gv_purifierStasisChambers[lv_i].lv_revealRegion = RegionFromId(17);
    gv_purifierStasisChambers[lv_i].lv_spawnPoint = PointFromId(442);
    gv_purifierStasisChambers[lv_i].lv_waypoint01 = PointFromId(1559);
    gv_purifierStasisChambers[lv_i].lv_waypoint02 = PointFromId(1562);
    gv_purifierStasisChambers[lv_i].lv_waypoint03 = PointFromId(1563);
    gv_nullCircuits[4] = UnitFromId(4);
    gv_nullCircuits[5] = UnitFromId(7);
    gv_nullCircuits[6] = UnitFromId(8);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[4], null, StringExternal("Param/Value/BF9B9D00"), StringExternal("Param/Value/7E63F35A"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[5], null, StringExternal("Param/Value/E03BF46D"), StringExternal("Param/Value/5C84B483"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[6], null, StringExternal("Param/Value/64C01EBB"), StringExternal("Param/Value/7D11905E"));
    lv_i += 1;
    gv_purifierStasisChambers[lv_i].lv_revealRegion = RegionFromId(18);
    gv_purifierStasisChambers[lv_i].lv_spawnPoint = PointFromId(450);
    gv_purifierStasisChambers[lv_i].lv_waypoint01 = PointFromId(1560);
    gv_purifierStasisChambers[lv_i].lv_waypoint02 = PointFromId(1567);
    gv_purifierStasisChambers[lv_i].lv_waypoint03 = PointFromId(1568);
    gv_nullCircuits[7] = UnitFromId(212);
    gv_nullCircuits[8] = UnitFromId(213);
    gv_nullCircuits[9] = UnitFromId(214);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[7], null, StringExternal("Param/Value/37658080"), StringExternal("Param/Value/54771EBA"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[8], null, StringExternal("Param/Value/8B4335BA"), StringExternal("Param/Value/6C7B0458"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[9], null, StringExternal("Param/Value/D5D19258"), StringExternal("Param/Value/15B74676"));
    lv_i += 1;
    gv_purifierStasisChambers[lv_i].lv_revealRegion = RegionFromId(19);
    gv_purifierStasisChambers[lv_i].lv_spawnPoint = PointFromId(458);
    gv_purifierStasisChambers[lv_i].lv_waypoint01 = PointFromId(1561);
    gv_purifierStasisChambers[lv_i].lv_waypoint02 = PointFromId(1564);
    gv_purifierStasisChambers[lv_i].lv_waypoint03 = PointFromId(1566);
    gv_nullCircuits[10] = UnitFromId(210);
    gv_nullCircuits[11] = UnitFromId(211);
    gv_nullCircuits[12] = UnitFromId(209);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[10], null, StringExternal("Param/Value/AB757EB7"), StringExternal("Param/Value/8D137209"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[11], null, StringExternal("Param/Value/A9E6A4BF"), StringExternal("Param/Value/19574FCB"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[12], null, StringExternal("Param/Value/0C91D1E2"), StringExternal("Param/Value/4E396BE5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierStasisChambersInit_Init () {
    gt_PurifierStasisChambersInit = TriggerCreate("gt_PurifierStasisChambersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Purifier Units to Wave Group
//--------------------------------------------------------------------------------------------------
bool gt_AssignPurifierUnitstoWaveGroup_Func (bool testConds, bool runActions) {
    int auto24291705_ae;
    int auto24291705_ai;

    // Variable Declarations
    int lv_regionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(4)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(17)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(18)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(19)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto24291705_ae = 4;
    auto24291705_ai = 1;
    lv_regionIndex = 1;
    for ( ; ( (auto24291705_ai >= 0 && lv_regionIndex <= auto24291705_ae) || (auto24291705_ai <= 0 && lv_regionIndex >= auto24291705_ae) ) ; lv_regionIndex += auto24291705_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromName(("Purifier Spawn Reveal " + IntToString(lv_regionIndex)))) == true)) {
            UnitGroupAdd(gv_purifierStasisChambers[lv_regionIndex].lv_warpathGroup, EventUnitProgressUnit());
            AISetUnitScriptControlled(EventUnitProgressUnit(), true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignPurifierUnitstoWaveGroup_Init () {
    gt_AssignPurifierUnitstoWaveGroup = TriggerCreate("gt_AssignPurifierUnitstoWaveGroup_Func");
    TriggerAddEventUnitConstructProgress(gt_AssignPurifierUnitstoWaveGroup, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Null Circuit Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_NullCircuitDestroyed_Func (bool testConds, bool runActions) {
    int auto4AAF15E7_ae;
    int auto4AAF15E7_ai;

    // Variable Declarations
    int lv_i;
    int lv_powerInhibitorIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NullCircuitActivated"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveNullCircuitsCount += 1;
    TriggerExecute(gt_ObjectiveNullCircuitsUpdate, true, false);
    if ((gv_objectiveNullCircuitsCount == gv_objectiveNullCircuitsMax)) {
        PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
        TriggerExecute(gt_VictoryStasisChambersCompleted, true, false);
    }
    else {
    }
    UnitSetOwner(EventUnit(), gv_pLAYER_02_DOMINION6, true);
    UnitStatusBarOverride(EventUnit(), -1);
    UnitSetState(EventUnit(), c_unitStateHighlightable, false);
    UnitSetState(EventUnit(), c_unitStateTargetable, false);
    UnitSetState(EventUnit(), c_unitStateSelectable, false);
    UnitSetState(EventUnit(), c_unitStateTooltipable, false);
    UnitSelect(EventUnit(), gv_pLAYER_01_USER, false);
    auto4AAF15E7_ae = 12;
    auto4AAF15E7_ai = 1;
    lv_i = 1;
    for ( ; ( (auto4AAF15E7_ai >= 0 && lv_i <= auto4AAF15E7_ae) || (auto4AAF15E7_ai <= 0 && lv_i >= auto4AAF15E7_ae) ) ; lv_i += auto4AAF15E7_ai ) {
        if ((EventUnit() == gv_nullCircuits[lv_i])) {
            lv_powerInhibitorIndex = lv_i;
            break;
        }
        else {
        }
    }
    if ((lv_powerInhibitorIndex < 10)) {
        libVCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupApply Work", "Purifier_Energy_Pipes", RegionFromName(("Power Line 0" + IntToString(lv_powerInhibitorIndex))));
    }
    else {
        libVCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupApply Work", "Purifier_Energy_Pipes", RegionFromName(("Power Line " + IntToString(lv_powerInhibitorIndex))));
    }
    if (((gv_objectiveNullCircuitsMax - gv_objectiveNullCircuitsCount) <= 4)) {
        TriggerExecute(gt_TransmissionLastFewNullCircuitsToGoEncouragementQ, true, false);
    }
    else {
    }
    if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (UnitGetType(gv_nullCircuits[1]) == "NullCircuitActivated") && (UnitGetType(gv_nullCircuits[2]) == "NullCircuitActivated") && (UnitGetType(gv_nullCircuits[3]) == "NullCircuitActivated")) {
        gf_ActivateStasisChamber(1);
    }
    else {
    }
    if ((gv_purifierStasisChambers[2].lv_isActivated == false) && (UnitGetType(gv_nullCircuits[4]) == "NullCircuitActivated") && (UnitGetType(gv_nullCircuits[5]) == "NullCircuitActivated") && (UnitGetType(gv_nullCircuits[6]) == "NullCircuitActivated")) {
        gf_ActivateStasisChamber(2);
    }
    else {
    }
    if ((gv_purifierStasisChambers[3].lv_isActivated == false) && (UnitGetType(gv_nullCircuits[7]) == "NullCircuitActivated") && (UnitGetType(gv_nullCircuits[8]) == "NullCircuitActivated") && (UnitGetType(gv_nullCircuits[9]) == "NullCircuitActivated")) {
        gf_ActivateStasisChamber(3);
    }
    else {
    }
    if ((gv_purifierStasisChambers[4].lv_isActivated == false) && (UnitGetType(gv_nullCircuits[10]) == "NullCircuitActivated") && (UnitGetType(gv_nullCircuits[11]) == "NullCircuitActivated") && (UnitGetType(gv_nullCircuits[12]) == "NullCircuitActivated")) {
        gf_ActivateStasisChamber(4);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NullCircuitDestroyed_Init () {
    gt_NullCircuitDestroyed = TriggerCreate("gt_NullCircuitDestroyed_Func");
    TriggerAddEventUnitAbility(gt_NullCircuitDestroyed, null, AbilityCommand("PowerConductorLockMorph", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Activate Stasis Chamber Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionActivateStasisChamberQ_Func (bool testConds, bool runActions) {
    int auto229ECD4C_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto229ECD4C_val = gv_purifierStasisChambersOnlineCount;
    if (auto229ECD4C_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00133", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto229ECD4C_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00134", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto229ECD4C_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00135", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionActivateStasisChamberQ_Init () {
    gt_TransmissionActivateStasisChamberQ = TriggerCreate("gt_TransmissionActivateStasisChamberQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Initiate Attack From Stasis Chamber Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionInitiateAttackFromStasisChamberQ_Func (bool testConds, bool runActions) {
    int auto23B6075B_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto23B6075B_val = gv_purifierStasisChambersOnlineCount;
    if (auto23B6075B_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00185", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00163", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto23B6075B_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00138", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto23B6075B_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00139", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionInitiateAttackFromStasisChamberQ_Init () {
    gt_TransmissionInitiateAttackFromStasisChamberQ = TriggerCreate("gt_TransmissionInitiateAttackFromStasisChamberQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Destroy Null Circuits Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDestroyNullCircuitsReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait((4.0 * 60.0), c_timeAI);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_purifierStasisChambersOnlineCount == 0)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00143", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDestroyNullCircuitsReminderQ_Init () {
    gt_TransmissionDestroyNullCircuitsReminderQ = TriggerCreate("gt_TransmissionDestroyNullCircuitsReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Player Sees First Null Circuit Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPlayerSeesFirstNullCircuitRevealQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cHOSEN_UNIT;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_cHOSEN_UNIT = UnitGroupUnit(UnitGroup("NullCircuit", c_playerAny, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/40400A71"), null, UnitGetPosition(lv_cHOSEN_UNIT));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_cHOSEN_UNIT), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, EventUnitRegion(), 8.0, false);
    libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/1653F5A8"), libNtve_gf_PointFromXYZ(PointGetX(UnitGetPosition(lv_cHOSEN_UNIT)), PointGetY(UnitGetPosition(lv_cHOSEN_UNIT)), 0.5));
    libHots_gf_StoreActorForUnit(lv_cHOSEN_UNIT, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lv_cHOSEN_UNIT, 1, TextTagLastCreated());
    gf_TrackNullCircuitReticleAndTextTag(lv_cHOSEN_UNIT);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00145", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPlayerSeesFirstNullCircuitRevealQ_Init () {
    gt_TransmissionPlayerSeesFirstNullCircuitRevealQ = TriggerCreate("gt_TransmissionPlayerSeesFirstNullCircuitRevealQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(56), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(40), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(47), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(48), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(65), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(66), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(67), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(110), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Last Few Null Circuits To Go Encouragement Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLastFewNullCircuitsToGoEncouragementQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        UnitGroupLoopBegin(UnitGroup("NullCircuit", gv_pLAYER_02_DOMINION5, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitGroupLoopCurrent()), 6.0, Color(0.00, 100.00, 0.00));
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 3.0), 8.0, false);
            Wait(0.25, c_timeAI);
        }
        UnitGroupLoopEnd();
        Wait(1.75, c_timeAI);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00149", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLastFewNullCircuitsToGoEncouragementQ_Init () {
    gt_TransmissionLastFewNullCircuitsToGoEncouragementQ = TriggerCreate("gt_TransmissionLastFewNullCircuitsToGoEncouragementQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Null Circuit Pings
//--------------------------------------------------------------------------------------------------
bool gt_TrackNullCircuitPings_Func (bool testConds, bool runActions) {
    int auto85A62C08_ae;
    int auto85A62C08_ai;

    // Variable Declarations
    int lv_i;
    unit lv_nullCircuit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            auto85A62C08_ae = gv_objectiveNullCircuitsMax;
            auto85A62C08_ai = 1;
            lv_i = 1;
            for ( ; ( (auto85A62C08_ai >= 0 && lv_i <= auto85A62C08_ae) || (auto85A62C08_ai <= 0 && lv_i >= auto85A62C08_ae) ) ; lv_i += auto85A62C08_ai ) {
                lv_nullCircuit = gv_nullCircuits[lv_i];
                if ((UnitGetType(lv_nullCircuit) == "NullCircuit")) {
                    if ((libNtve_gf_UnitIsVisibleToPlayer(lv_nullCircuit, gv_pLAYER_01_USER) == true) && (libHots_gf_PingStoredForUnit(lv_nullCircuit, 1) == c_invalidPingId)) {
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lv_nullCircuit), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
                        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/10DFB082"));
                        libHots_gf_StorePingForUnit(lv_nullCircuit, 1, PingLastCreated());
                    }
                    else {
                    }
                }
                else {
                    PingDestroy(libHots_gf_PingStoredForUnit(lv_nullCircuit, 1));
                }
            }
        }
        else {
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackNullCircuitPings_Init () {
    gt_TrackNullCircuitPings = TriggerCreate("gt_TrackNullCircuitPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Cybros Lights
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCybrosLights_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_newLight;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newLight = gf_GetCybrosLightConfiguration();
    GameSetLighting(lv_newLight, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCybrosLights_Init () {
    gt_UpdateCybrosLights = TriggerCreate("gt_UpdateCybrosLights_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Warning Ping On Core Matrix
//--------------------------------------------------------------------------------------------------
bool gt_TrackWarningPingOnCoreMatrix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;
    bool lv_pingActive;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((UnitGetDamageTakenTime(gv_purifierCoreMatrix) <= 4.0)) {
            if ((lv_pingActive == false)) {
                lv_pingActive = true;
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_purifierCoreMatrix), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
                lv_ping = PingLastCreated();
            }
            else {
            }
        }
        else {
            lv_pingActive = false;
            PingDestroy(lv_ping);
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackWarningPingOnCoreMatrix_Init () {
    gt_TrackWarningPingOnCoreMatrix = TriggerCreate("gt_TrackWarningPingOnCoreMatrix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Core Matrix Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCoreMatrixAttackedQ_Func (bool testConds, bool runActions) {
    int autoBCCB3931_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShieldsPercent, c_unitPropCurrent) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (gv_coreMatrixWarningCycle >= 3) {
        gv_coreMatrixWarningCycle = 1;
    }
    else {
        gv_coreMatrixWarningCycle = gv_coreMatrixWarningCycle + 1;
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C04CA56A"), null, UnitGetPosition(gv_purifierCoreMatrix));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoBCCB3931_val = gv_coreMatrixWarningCycle;
    if (autoBCCB3931_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00150", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBCCB3931_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00164", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBCCB3931_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00165", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (!((UnitGetDamageTakenTime(gv_purifierCoreMatrix) > 20.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCoreMatrixAttackedQ_Init () {
    gt_TransmissionCoreMatrixAttackedQ = TriggerCreate("gt_TransmissionCoreMatrixAttackedQ_Func");
    TriggerAddEventUnitAttacked2(gt_TransmissionCoreMatrixAttackedQ, UnitRefFromVariable("gv_purifierCoreMatrix"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Core Matrix Badly Damaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCoreMatrixBadlyDamagedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionCoreMatrixCriticallyDamagedQ, true);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/51E52E85"), null, UnitGetPosition(gv_purifierCoreMatrix));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00151", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCoreMatrixBadlyDamagedQ_Init () {
    gt_TransmissionCoreMatrixBadlyDamagedQ = TriggerCreate("gt_TransmissionCoreMatrixBadlyDamagedQ_Func");
    TriggerAddEventUnitProperty(gt_TransmissionCoreMatrixBadlyDamagedQ, UnitRefFromVariable("gv_purifierCoreMatrix"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Core Matrix Critically Damaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCoreMatrixCriticallyDamagedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A85C6A70"), null, UnitGetPosition(gv_purifierCoreMatrix));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00152", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCoreMatrixCriticallyDamagedQ_Init () {
    gt_TransmissionCoreMatrixCriticallyDamagedQ = TriggerCreate("gt_TransmissionCoreMatrixCriticallyDamagedQ_Func");
    TriggerEnable(gt_TransmissionCoreMatrixCriticallyDamagedQ, false);
    TriggerAddEventUnitProperty(gt_TransmissionCoreMatrixCriticallyDamagedQ, UnitRefFromVariable("gv_purifierCoreMatrix"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Bonus Objective After Time
//--------------------------------------------------------------------------------------------------
bool gt_RevealBonusObjectiveAfterTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait((4.5 * 60.0), c_timeAI);
    TriggerExecute(gt_TransmissionPurifierWardenRevealQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealBonusObjectiveAfterTime_Init () {
    gt_RevealBonusObjectiveAfterTime = TriggerCreate("gt_RevealBonusObjectiveAfterTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Reveal Bonus Objective Region
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersRevealBonusObjectiveRegion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionPurifierWardenRevealQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersRevealBonusObjectiveRegion_Init () {
    gt_UnitEntersRevealBonusObjectiveRegion = TriggerCreate("gt_UnitEntersRevealBonusObjectiveRegion_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersRevealBonusObjectiveRegion, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Warden Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierWardenRevealQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_AddMissionTipCampaign("PurifierWarden");
    TriggerExecute(gt_PurifierWardenBehavior, true, false);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_purifierWarden), StringExternal("Param/Value/1DF8E26D"));
    libHots_gf_StorePingForUnit(gv_purifierWarden, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), gv_purifierWarden);
    TriggerExecute(gt_ObjectiveDestroyPurifierWardenCreate, true, true);
    TriggerQueueEnter();
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00171", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00172", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierWardenRevealQ_Init () {
    gt_TransmissionPurifierWardenRevealQ = TriggerCreate("gt_TransmissionPurifierWardenRevealQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Warden Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierWardenDiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;
    unit lv_solariteUnit;

    // Variable Initialization
    lv_unitPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TransmissionPurifierWardenEngagesPlayerQ, false);
    gv_objectivePurifierWardenCount += 1;
    if ((gv_objectivePurifierWardenCount == gv_objectivePurifierWardenMax)) {
        TriggerExecute(gt_ObjectiveDestroyPurifierWardenComplete, true, false);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, lv_unitPoint);
    lv_solariteUnit = UnitLastCreated();
    UnitSetState(lv_solariteUnit, c_unitStateSelectable, false);
    UnitSetState(lv_solariteUnit, c_unitStateTargetable, false);
    UnitBehaviorAddPlayer(lv_solariteUnit, "ObjectiveCollectionBeam", 0, 1);
    Wait(2.0, c_timeAI);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(lv_unitPoint, "PPurifier03Bonus01");
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4038E4B2"), null, lv_unitPoint);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_unitPoint, 3.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00174", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00175", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierWardenDiesQ_Init () {
    gt_TransmissionPurifierWardenDiesQ = TriggerCreate("gt_TransmissionPurifierWardenDiesQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionPurifierWardenDiesQ, UnitRefFromVariable("gv_purifierWarden"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Warden Behavior
//--------------------------------------------------------------------------------------------------
bool gt_PurifierWardenBehavior_Func (bool testConds, bool runActions) {
    fixed auto3505BB6D_at;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_purifierWarden) == true)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(gv_purifierWarden, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
                while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
                    Wait(1.0, c_timeAI);
                }
            }
            else {
                libNtve_gf_AICast(gv_purifierWarden, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroup("InvisibleTargetDummy", 0, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
                auto3505BB6D_at = 0;
                while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) && auto3505BB6D_at <= 8.0) {
                    Wait(1.0, c_timeAI);
                    auto3505BB6D_at = auto3505BB6D_at + 1.0;
                }
            }
        }
        else {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierWardenBehavior_Init () {
    gt_PurifierWardenBehavior = TriggerCreate("gt_PurifierWardenBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Warden Engages Player Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierWardenEngagesPlayerQ_Func (bool testConds, bool runActions) {
    int auto08FB9393_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierWarden) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false)) {
        gv_purifierWardenBattlecryCount += 1;
        TriggerQueueEnter();
        if ((UnitIsAlive(gv_purifierWarden) == true)) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            auto08FB9393_val = gv_purifierWardenBattlecryCount;
            if (auto08FB9393_val == 1) {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00173", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto08FB9393_val == 2) {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00176", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00177", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        }
        else {
        }
        TriggerQueueExit();
    }
    else {
    }
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(gv_purifierWarden) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierWardenEngagesPlayerQ_Init () {
    gt_TransmissionPurifierWardenEngagesPlayerQ = TriggerCreate("gt_TransmissionPurifierWardenEngagesPlayerQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPurifierWardenEngagesPlayerQ, null, RegionFromId(107), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    TriggerExecute(gt_AIUpgradesPurifierAttackGroup, true, false);
    TriggerExecute(gt_ZergReinforcementsController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel3", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades Purifier Attack Group
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesPurifierAttackGroup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossShieldsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesPurifierAttackGroup_Init () {
    gt_AIUpgradesPurifierAttackGroup = TriggerCreate("gt_AIUpgradesPurifierAttackGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Created
//--------------------------------------------------------------------------------------------------
bool gt_HybridCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "HybridReaver") || (UnitGetType(EventUnitCreatedUnit()) == "HybridDestroyer") || (UnitGetType(EventUnitCreatedUnit()) == "HybridNemesis") || (UnitGetType(EventUnitCreatedUnit()) == "HybridBehemoth") || (UnitGetType(EventUnitCreatedUnit()) == "HybridDominatorVoid")))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateWarpInEffect(EventUnitCreatedUnit());
    if ((UnitGetType(EventUnitCreatedUnit()) == "HybridBehemoth")) {
        gf_HybridBehemothAI(EventUnitCreatedUnit());
    }
    else {
    }
    if ((UnitGetType(EventUnitCreatedUnit()) == "HybridNemesis")) {
        gf_HybridNemesisAI(EventUnitCreatedUnit());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCreated_Init () {
    gt_HybridCreated = TriggerCreate("gt_HybridCreated_Func");
    TriggerAddEventUnitCreated(gt_HybridCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 01 - SW
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave01SW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthWest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    AIAttackWaveAddUnits4(6, 6, 6, 6, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Roach");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave01SW_Init () {
    gt_VsCoreAttackWave01SW = TriggerCreate("gt_VsCoreAttackWave01SW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 02 - SW
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave02SW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthWest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    AIAttackWaveAddUnits4(4, 4, 8, 8, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 2, 3, "Hydralisk");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave02SW_Init () {
    gt_VsCoreAttackWave02SW = TriggerCreate("gt_VsCoreAttackWave02SW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 03 - NE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave03NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_NorthEast;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, PointFromId(13));
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    AIAttackWaveAddUnits4(6, 6, 8, 8, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Roach");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Mutalisk");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave03NE_Init () {
    gt_VsCoreAttackWave03NE = TriggerCreate("gt_VsCoreAttackWave03NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 04 - SE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave04SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthEast;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    AIAttackWaveAddUnits4(10, 10, 10, 12, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 2, 5, "Hydralisk");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Ultralisk");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave04SE_Init () {
    gt_VsCoreAttackWave04SE = TriggerCreate("gt_VsCoreAttackWave04SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 05 - NE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave05NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_NorthEast;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, PointFromId(13));
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    AIAttackWaveAddUnits4(2, 2, 2, 3, "Roach");
    AIAttackWaveAddUnits4(3, 3, 3, 5, "Hydralisk");
    AIAttackWaveAddUnits4(1, 1, 3, 3, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave05NE_Init () {
    gt_VsCoreAttackWave05NE = TriggerCreate("gt_VsCoreAttackWave05NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 06 - SW - Hybrid Intro
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave06SWHybridIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthWest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 0, 3), "HybridDestroyer", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "HybridBehemoth", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup);
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    Wait(150.0, c_timeAI);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGroupCenterOfGroup(lv_attackGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.65);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C7E4139D"));
    TriggerExecute(gt_TransmissionHybridAttackWarning01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave06SWHybridIntro_Init () {
    gt_VsCoreAttackWave06SWHybridIntro = TriggerCreate("gt_VsCoreAttackWave06SWHybridIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 07 - SE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave07SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthEast;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "HybridDestroyer", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup);
    AIAttackWaveAddUnits4(10, 10, 10, 10, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Ultralisk");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave07SE_Init () {
    gt_VsCoreAttackWave07SE = TriggerCreate("gt_VsCoreAttackWave07SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 08 - NE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave08NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_NorthEast;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, PointFromId(13));
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "HybridReaver", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "HybridDestroyer", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup);
    AIAttackWaveAddUnits4(3, 3, 3, 6, "Hydralisk");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "Mutalisk");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave08NE_Init () {
    gt_VsCoreAttackWave08NE = TriggerCreate("gt_VsCoreAttackWave08NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 09 - SE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave09SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthEast;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 0, 3), "HybridDestroyer", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAdd(lv_attackGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "HybridBehemoth", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup);
    AIAttackWaveAddUnits4(8, 8, 8, 8, "Zergling");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "Mutalisk");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave09SE_Init () {
    gt_VsCoreAttackWave09SE = TriggerCreate("gt_VsCoreAttackWave09SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave 10 - SW
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWave10SW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthWest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "HybridReaver", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup);
    AIAttackWaveAddUnits4(3, 3, 6, 6, "Hydralisk");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "Mutalisk");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWave10SW_Init () {
    gt_VsCoreAttackWave10SW = TriggerCreate("gt_VsCoreAttackWave10SW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave Repeat Cycle
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWaveRepeatCycle_Func (bool testConds, bool runActions) {
    int autoAF57FDB2_val;
    int auto3985CEF7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if (gv_repeatWaveCycle >= 6) {
        gv_repeatWaveCycle = 1;
    }
    else {
        gv_repeatWaveCycle = gv_repeatWaveCycle + 1;
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        auto3985CEF7_val = gv_repeatWaveCycle;
        if (auto3985CEF7_val == 1) {
            TriggerExecute(gt_VsCoreAttackWaveTwoVectorsRepeatableNESE, true, false);
        }
        else if (auto3985CEF7_val == 2) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableSW, true, false);
        }
        else if (auto3985CEF7_val == 3) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableSE, true, false);
        }
        else if (auto3985CEF7_val == 4) {
            TriggerExecute(gt_VsCoreAttackWaveTwoVectorsRepeatableNESW, true, false);
        }
        else if (auto3985CEF7_val == 5) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableSE, true, false);
        }
        else if (auto3985CEF7_val == 6) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableSW, true, false);
        }
        else {
        }
    }
    else {
        autoAF57FDB2_val = gv_repeatWaveCycle;
        if (autoAF57FDB2_val == 1) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableNE, true, false);
        }
        else if (autoAF57FDB2_val == 2) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableSE, true, false);
        }
        else if (autoAF57FDB2_val == 3) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableSW, true, false);
        }
        else if (autoAF57FDB2_val == 4) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableNE, true, false);
        }
        else if (autoAF57FDB2_val == 5) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableSW, true, false);
        }
        else if (autoAF57FDB2_val == 6) {
            TriggerExecute(gt_VsCoreAttackWaveOneVectorRepeatableSE, true, false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWaveRepeatCycle_Init () {
    gt_VsCoreAttackWaveRepeatCycle = TriggerCreate("gt_VsCoreAttackWaveRepeatCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave One Vector Repeatable NE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWaveOneVectorRepeatableNE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackVector = ge_PRESETCoreMatrixApproach_NorthEast;
    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, PointFromId(13));
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    AIAttackWaveAddUnits4(12, 12, 8, 16, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Ultralisk");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWaveOneVectorRepeatableNE_Init () {
    gt_VsCoreAttackWaveOneVectorRepeatableNE = TriggerCreate("gt_VsCoreAttackWaveOneVectorRepeatableNE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave One Vector Repeatable SE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWaveOneVectorRepeatableSE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthEast;
    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 2, 5), "HybridDestroyer", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAdd(lv_attackGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "HybridBehemoth", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup);
    AIAttackWaveAddUnits4(4, 4, 4, 4, "Mutalisk");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWaveOneVectorRepeatableSE_Init () {
    gt_VsCoreAttackWaveOneVectorRepeatableSE = TriggerCreate("gt_VsCoreAttackWaveOneVectorRepeatableSE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave One Vector Repeatable SW
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWaveOneVectorRepeatableSW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackingZergBase;
    int lv_attackVector;
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackVector = ge_PRESETCoreMatrixApproach_SouthWest;
    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 0, 0), "HybridReaver", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAdd(lv_attackGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "HybridBehemoth", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup);
    AIAttackWaveAddUnits4(6, 6, 6, 6, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 3, "Ultralisk");
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Roach");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "Hydralisk");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWaveOneVectorRepeatableSW_Init () {
    gt_VsCoreAttackWaveOneVectorRepeatableSW = TriggerCreate("gt_VsCoreAttackWaveOneVectorRepeatableSW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave Two Vectors Repeatable NE/SE
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWaveTwoVectorsRepeatableNESE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector01;
    int lv_attackVector02;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup1;
    unitgroup lv_attackGroup2;

    // Variable Initialization
    lv_attackGroup1 = UnitGroupEmpty();
    lv_attackGroup2 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackVector01 = ge_PRESETCoreMatrixApproach_NorthEast;
    lv_attackVector02 = ge_PRESETCoreMatrixApproach_SouthEast;
    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector01);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, PointFromId(13));
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector01);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridDestroyer", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup1, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup1);
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Ultralisk");
    AIAttackWaveAddUnits4(2, 2, 3, 5, "Roach");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector02);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector02);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "HybridReaver", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup2, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup2);
    AIAttackWaveAddUnits4(8, 8, 10, 12, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 3, 5, "Hydralisk");
    AIAttackWaveAddUnits4(1, 1, 3, 3, "Mutalisk");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWaveTwoVectorsRepeatableNESE_Init () {
    gt_VsCoreAttackWaveTwoVectorsRepeatableNESE = TriggerCreate("gt_VsCoreAttackWaveTwoVectorsRepeatableNESE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs. Core Attack Wave Two Vectors Repeatable NE/SW
//--------------------------------------------------------------------------------------------------
bool gt_VsCoreAttackWaveTwoVectorsRepeatableNESW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackVector01;
    int lv_attackVector02;
    int lv_attackingZergBase;
    unitgroup lv_attackGroup1;
    unitgroup lv_attackGroup2;

    // Variable Initialization
    lv_attackGroup1 = UnitGroupEmpty();
    lv_attackGroup2 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackVector01 = ge_PRESETCoreMatrixApproach_NorthEast;
    lv_attackVector02 = ge_PRESETCoreMatrixApproach_SouthWest;
    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector01);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, PointFromId(13));
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector01);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "HybridReaver", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup1, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup1);
    AIAttackWaveAddUnits4(6, 6, 6, 6, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "Mutalisk");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    lv_attackingZergBase = gf_GetZergBaseAttacker(lv_attackVector02);
    AIAttackWaveSetGatherPoint(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    AIAttackWaveSetTargetUnit(gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_purifierCoreMatrix);
    gf_AddWaypointIfZergBase03Attacking(lv_attackingZergBase, lv_attackVector02);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridDestroyer", 0, gv_zergBase[lv_attackingZergBase].lv_basePlayer, gv_zergBase[lv_attackingZergBase].lv_waveGatherPoint);
    UnitGroupAddUnitGroup(lv_attackGroup2, UnitLastCreatedGroup());
    AIAttackWaveUseGroup(gv_zergBase[lv_attackingZergBase].lv_basePlayer, lv_attackGroup2);
    AIAttackWaveAddUnits4(10, 10, 10, 10, "Zergling");
    AIAttackWaveAddUnits4(3, 3, 3, 5, "Roach");
    AIAttackWaveSend(gv_zergBase[lv_attackingZergBase].lv_basePlayer, 180, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsCoreAttackWaveTwoVectorsRepeatableNESW_Init () {
    gt_VsCoreAttackWaveTwoVectorsRepeatableNESW = TriggerCreate("gt_VsCoreAttackWaveTwoVectorsRepeatableNESW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Vs. Core Matrix Attack Wave 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVsCoreMatrixAttackWave01Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Variable Initialization
    lv_waveGroup = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(757), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.65);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AA1FFFF6"));
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00153", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVsCoreMatrixAttackWave01Q_Init () {
    gt_TransmissionVsCoreMatrixAttackWave01Q = TriggerCreate("gt_TransmissionVsCoreMatrixAttackWave01Q_Func");
    TriggerAddEventPlayerAIWave(gt_TransmissionVsCoreMatrixAttackWave01Q, gv_pLAYER_02_DOMINION);
    TriggerAddEventPlayerAIWave(gt_TransmissionVsCoreMatrixAttackWave01Q, gv_pLAYER_02_DOMINION2);
    TriggerAddEventPlayerAIWave(gt_TransmissionVsCoreMatrixAttackWave01Q, gv_pLAYER_02_DOMINION3);
    TriggerAddEventPlayerAIWave(gt_TransmissionVsCoreMatrixAttackWave01Q, gv_pLAYER_02_DOMINION4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First NE Attack Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstNEAttackWarningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Variable Initialization
    lv_waveGroup = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((UnitGroupCount(UnitGroupFilter("HybridDestroyer", c_playerAny, AIWaveGetUnits(EventPlayerWave()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilter("HybridReaver", c_playerAny, AIWaveGetUnits(EventPlayerWave()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        return true;
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(758), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.65);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/79480D39"));
    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00179", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstNEAttackWarningQ_Init () {
    gt_TransmissionFirstNEAttackWarningQ = TriggerCreate("gt_TransmissionFirstNEAttackWarningQ_Func");
    TriggerAddEventPlayerAIWave(gt_TransmissionFirstNEAttackWarningQ, gv_pLAYER_02_DOMINION4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Attack Warning 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridAttackWarning01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00169", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridAttackWarning01Q_Init () {
    gt_TransmissionHybridAttackWarning01Q = TriggerCreate("gt_TransmissionHybridAttackWarning01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements Controller
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcementsController_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(360.0, c_timeAI);
    TriggerExecute(gt_ZergReinforcements01Q, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(360.0, 360.0, 240.0, 240.0), c_timeAI);
    TriggerExecute(gt_ZergReinforcements02, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(360.0, 360.0, 240.0, 240.0), c_timeAI);
    TriggerExecute(gt_ZergReinforcements03, true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        Wait(240.0, c_timeAI);
        TriggerExecute(gt_ZergReinforcements04Hard, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcementsController_Init () {
    gt_ZergReinforcementsController = TriggerCreate("gt_ZergReinforcementsController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcements01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(25), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(58), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(61), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(64), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(70), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(82), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(73), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(74), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(77), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(104), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(49), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(95), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(96), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(97), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(84), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(87), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(90), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(93), true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00160", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcements01Q_Init () {
    gt_ZergReinforcements01Q = TriggerCreate("gt_ZergReinforcements01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements 02
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcements02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(28), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(52), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(60), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(63), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(69), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(80), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(72), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(75), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(79), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(105), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(50), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(98), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(99), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(100), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(85), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(88), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(91), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(94), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcements02_Init () {
    gt_ZergReinforcements02 = TriggerCreate("gt_ZergReinforcements02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements 03
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcements03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(31), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(55), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(59), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(62), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(68), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(81), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(71), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(76), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(78), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(106), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(51), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(101), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(102), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(103), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(83), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(86), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(89), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(92), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcements03_Init () {
    gt_ZergReinforcements03 = TriggerCreate("gt_ZergReinforcements03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements 04 (Hard+)
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcements04Hard_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(108), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(109), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(111), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(112), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(115), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(116), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(113), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(114), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcements04Hard_Init () {
    gt_ZergReinforcements04Hard = TriggerCreate("gt_ZergReinforcements04Hard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Core Matrix Minimum Shields
//--------------------------------------------------------------------------------------------------
bool gt_StatCoreMatrixMinimumShields_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) != gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShields, c_unitPropCurrent) == 0.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_coreMatrixLowestShields = 0.0;
    }
    else {
        if ((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShields, c_unitPropCurrent) < gv_coreMatrixLowestShields)) {
            gv_coreMatrixLowestShields = UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShields, c_unitPropCurrent);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatCoreMatrixMinimumShields_Init () {
    gt_StatCoreMatrixMinimumShields = TriggerCreate("gt_StatCoreMatrixMinimumShields_Func");
    TriggerAddEventUnitDamaged(gt_StatCoreMatrixMinimumShields, UnitRefFromVariable("gv_purifierCoreMatrix"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Hybrid Slain
//--------------------------------------------------------------------------------------------------
bool gt_StatHybridSlain_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HybridReaver") || (UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "HybridNemesis") || (UnitGetType(EventUnit()) == "HybridBehemoth") || (UnitGetType(EventUnit()) == "HybridDominatorVoid")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridKilledCount += 1;
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (UnitGetType(EventUnit()) == "HybridBehemoth")) {
        gv_masteryBehemothKilledCount += 1;
        if ((gv_masteryBehemothKilledCount >= 5) && (TimerGetRemaining(gv_masteryBehemothKillTimer) > 0.0)) {
            TriggerExecute(gt_AchievementHybridBehemothsKilledMastery, true, false);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatHybridSlain_Init () {
    gt_StatHybridSlain = TriggerCreate("gt_StatHybridSlain_Func");
    TriggerAddEventUnitDied(gt_StatHybridSlain, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Purifier Activation Combo
//--------------------------------------------------------------------------------------------------
bool gt_AchievementPurifierActivationCombo_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PPurifier03_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementPurifierActivationCombo_Init () {
    gt_AchievementPurifierActivationCombo = TriggerCreate("gt_AchievementPurifierActivationCombo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Hybrid Behemoths Killed (Mastery)
//--------------------------------------------------------------------------------------------------
bool gt_AchievementHybridBehemothsKilledMastery_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Purifier03", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementHybridBehemothsKilledMastery_Init () {
    gt_AchievementHybridBehemothsKilledMastery = TriggerCreate("gt_AchievementHybridBehemothsKilledMastery_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/F3D96F51"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveNullCircuitsFailed, true, false);
    TriggerExecute(gt_ObjectivePurifiersMustSurviveFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7BDA836D"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_purifierCoreMatrix"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Stasis Chambers Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStasisChambersCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStasisChambersCompleted_Init () {
    gt_VictoryStasisChambersCompleted = TriggerCreate("gt_VictoryStasisChambersCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_MakeUnitInvulnerable(gv_purifierCoreMatrix, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveNullCircuitsComplete, true, false);
    TriggerExecute(gt_ObjectivePurifiersMustSurviveComplete, true, true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00136", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PPurifier03_1", gv_pLAYER_01_USER);
    if ((gv_coreMatrixLowestShields > 0.0)) {
        libVoiC_gf_CampaignAwardAchievement("PPurifier03_2", gv_pLAYER_01_USER);
    }
    else {
    }
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/558FD3C1"), IntToText(gv_hybridKilledCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EFB13424"), FixedToText(gv_coreMatrixLowestShields, 0));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Null Circuits Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNullCircuitsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PPurifier03Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier03Primary01", gv_objectiveNullCircuitsCount);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNullCircuitsCreate_Init () {
    gt_ObjectiveNullCircuitsCreate = TriggerCreate("gt_ObjectiveNullCircuitsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Null Circuits Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNullCircuitsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNullCircuitsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNullCircuitsComplete_Init () {
    gt_ObjectiveNullCircuitsComplete = TriggerCreate("gt_ObjectiveNullCircuitsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Null Circuits Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNullCircuitsUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveNullCircuitsCreate, true, true);
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier03Primary01", gv_objectiveNullCircuitsCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNullCircuitsUpdate_Init () {
    gt_ObjectiveNullCircuitsUpdate = TriggerCreate("gt_ObjectiveNullCircuitsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Null Circuits Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNullCircuitsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNullCircuitsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNullCircuitsFailed_Init () {
    gt_ObjectiveNullCircuitsFailed = TriggerCreate("gt_ObjectiveNullCircuitsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifiers Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifiersMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PPurifier03Primary02");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifiersMustSurviveCreate_Init () {
    gt_ObjectivePurifiersMustSurviveCreate = TriggerCreate("gt_ObjectivePurifiersMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifiers Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifiersMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectivePurifiersMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifiersMustSurviveComplete_Init () {
    gt_ObjectivePurifiersMustSurviveComplete = TriggerCreate("gt_ObjectivePurifiersMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifiers Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifiersMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectivePurifiersMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifiersMustSurviveFailed_Init () {
    gt_ObjectivePurifiersMustSurviveFailed = TriggerCreate("gt_ObjectivePurifiersMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Warden Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierWardenCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PPurifier03Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierWardenCreate_Init () {
    gt_ObjectiveDestroyPurifierWardenCreate = TriggerCreate("gt_ObjectiveDestroyPurifierWardenCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Warden Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierWardenUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyPurifierWardenCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier03Bonus01", gv_objectivePurifierWardenCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierWardenUpdate_Init () {
    gt_ObjectiveDestroyPurifierWardenUpdate = TriggerCreate("gt_ObjectiveDestroyPurifierWardenUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Warden Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierWardenComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPurifierWardenCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierWardenComplete_Init () {
    gt_ObjectiveDestroyPurifierWardenComplete = TriggerCreate("gt_ObjectiveDestroyPurifierWardenComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(718), false);
    libNtve_gf_ShowHideUnit(UnitFromId(192), false);
    libNtve_gf_ShowHideUnit(UnitFromId(191), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1437), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1097), false);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(42), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(42), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != UnitFromId(1487))) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_02_DOMINION4);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(43), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(43), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, UnitGetOwner(UnitGroupLoopCurrent()), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitBehaviorAdd(UnitLastCreated(), "CritterWander", UnitLastCreated(), 1);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION6, RegionFromId(20), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(3060));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1593), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1440), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00089", true), c_soundIndexAny)), -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier03_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_StartCine_A_ZergMovement", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_IntroZerglingFlow, true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00089", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(gv_introZergInfestation);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1594), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2048), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00090", true), c_soundIndexAny)), -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00090", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_IntroZerglingReinforce, true, false);
    Wait(2.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Purifier03_StartCine_B_HybridSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Cinematic_Reaver_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    gf_WarpInHybridReaverCinematic(PointFromId(3072));
    TransmissionWait(TransmissionLastSent(), 0.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2049), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3075), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00092", true), c_soundIndexAny)), -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_StartCine_C_TeleportPadDrone", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00092", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2050), 4.0, -1, 10, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_StartCine_DNullCircuitDrone", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00122", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, UnitFromId(209), "Ref_Overhead");
    libHots_gf_StoreActorForUnit(UnitFromId(209), 1, libNtve_gf_ActorLastCreated());
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2051), 4.0, -1, 10, true);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, UnitFromId(210), "Ref_Overhead");
    libHots_gf_StoreActorForUnit(UnitFromId(210), 1, libNtve_gf_ActorLastCreated());
    Wait(2.5, c_timeGame);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, UnitFromId(211), "Ref_Overhead");
    libHots_gf_StoreActorForUnit(UnitFromId(211), 1, libNtve_gf_ActorLastCreated());
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(799), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(800), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00093", true), c_soundIndexAny)), -1, 10, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_StartCine_E_CoreMatrixDrone", -1), PlayerGroupAll(), 80.0, 0.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00093", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_IntroZerglingFlow, false);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    Wait(0.25, c_timeReal);
    libVCMI_gf_StopCinematicSounds();
    SoundStopAllTriggerSounds(true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitSetOwner(UnitFromId(1437), 0, true);
    UnitSetOwner(UnitFromId(1097), 0, true);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(209), 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(210), 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(211), 1));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(34), true, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zergling Flow
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerglingFlow_Func (bool testConds, bool runActions) {
    int autoCE9B0496_ae;
    int autoCE9B0496_ai;

    // Variable Declarations
    int lv_createZerglingIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infestor", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(3066));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3069), 10.0))), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
        return true;
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infestor", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(3068));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3069), 10.0))), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
        return true;
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infestor", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(3070));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3069), 10.0))), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
        return true;
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawlerUprooted", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(3061));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(3063)), c_orderQueueReplace);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
    autoCE9B0496_ae = 28;
    autoCE9B0496_ai = 1;
    lv_createZerglingIndex = 1;
    for ( ; ( (autoCE9B0496_ai >= 0 && lv_createZerglingIndex <= autoCE9B0496_ae) || (autoCE9B0496_ai <= 0 && lv_createZerglingIndex >= autoCE9B0496_ae) ) ; lv_createZerglingIndex += autoCE9B0496_ai ) {
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            return true;
        }
        else {
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionCircle(PointFromId(3064), 3.0)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3069), 10.0))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
        return true;
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(3062));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3069), 10.0))), c_orderQueueReplace);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerglingFlow_Init () {
    gt_IntroZerglingFlow = TriggerCreate("gt_IntroZerglingFlow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zergling Reinforce
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerglingReinforce_Func (bool testConds, bool runActions) {
    int autoC4A91944_ae;
    int autoC4A91944_ai;
    int autoB696E7B8_ae;
    int autoB696E7B8_ai;
    int autoEB70BF6A_ae;
    int autoEB70BF6A_ai;
    int auto407C30B4_ae;
    int auto407C30B4_ai;
    int auto6E7CCEB4_ae;
    int auto6E7CCEB4_ai;
    int auto42A366C6_ae;
    int auto42A366C6_ai;

    // Variable Declarations
    int lv_createZerglingIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC4A91944_ae = 7;
    autoC4A91944_ai = 1;
    lv_createZerglingIndex = 1;
    for ( ; ( (autoC4A91944_ai >= 0 && lv_createZerglingIndex <= autoC4A91944_ae) || (autoC4A91944_ai <= 0 && lv_createZerglingIndex >= autoC4A91944_ae) ) ; lv_createZerglingIndex += autoC4A91944_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionCircle(PointFromId(3074), 3.0)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(869), 4.0))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    autoB696E7B8_ae = 7;
    autoB696E7B8_ai = 1;
    lv_createZerglingIndex = 1;
    for ( ; ( (autoB696E7B8_ai >= 0 && lv_createZerglingIndex <= autoB696E7B8_ae) || (autoB696E7B8_ai <= 0 && lv_createZerglingIndex >= autoB696E7B8_ae) ) ; lv_createZerglingIndex += autoB696E7B8_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionCircle(PointFromId(3073), 3.0)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(869), 4.0))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    Wait(1.5, c_timeGame);
    autoEB70BF6A_ae = 7;
    autoEB70BF6A_ai = 1;
    lv_createZerglingIndex = 1;
    for ( ; ( (autoEB70BF6A_ai >= 0 && lv_createZerglingIndex <= autoEB70BF6A_ae) || (autoEB70BF6A_ai <= 0 && lv_createZerglingIndex >= autoEB70BF6A_ae) ) ; lv_createZerglingIndex += autoEB70BF6A_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionCircle(PointFromId(3074), 3.0)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3072), 6.0))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    auto407C30B4_ae = 3;
    auto407C30B4_ai = 1;
    lv_createZerglingIndex = 1;
    for ( ; ( (auto407C30B4_ai >= 0 && lv_createZerglingIndex <= auto407C30B4_ae) || (auto407C30B4_ai <= 0 && lv_createZerglingIndex >= auto407C30B4_ae) ) ; lv_createZerglingIndex += auto407C30B4_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionCircle(PointFromId(3074), 3.0)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3072), 6.0))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    auto6E7CCEB4_ae = 7;
    auto6E7CCEB4_ai = 1;
    lv_createZerglingIndex = 1;
    for ( ; ( (auto6E7CCEB4_ai >= 0 && lv_createZerglingIndex <= auto6E7CCEB4_ae) || (auto6E7CCEB4_ai <= 0 && lv_createZerglingIndex >= auto6E7CCEB4_ae) ) ; lv_createZerglingIndex += auto6E7CCEB4_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionCircle(PointFromId(3073), 3.0)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3072), 6.0))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    auto42A366C6_ae = 4;
    auto42A366C6_ai = 1;
    lv_createZerglingIndex = 1;
    for ( ; ( (auto42A366C6_ai >= 0 && lv_createZerglingIndex <= auto42A366C6_ae) || (auto42A366C6_ai <= 0 && lv_createZerglingIndex >= auto42A366C6_ae) ) ; lv_createZerglingIndex += auto42A366C6_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionCircle(PointFromId(3074), 3.0)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introZergInfestation, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(3072), 6.0))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerglingReinforce_Init () {
    gt_IntroZerglingReinforce = TriggerCreate("gt_IntroZerglingReinforce_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    int autoC721F740_val;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER) && (((UnitGetType(UnitGroupLoopCurrent()) == libVoiC_gf_EnabledUnitTypeforArmyCategory("Sentry")) || (UnitGetType(UnitGroupLoopCurrent()) == libVoiC_gf_EnabledUnitTypeforArmyCategory("VoidRay"))))) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
            continue;
        }
        else {
        }
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false) && (UnitGroupLoopCurrent() != UnitFromId(3168))) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetOwner(UnitGroupLoopCurrent()) == 0) || (UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER))) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NullCircuit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NullCircuitActivated", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    autoC721F740_val = gv_midContainmentIndex;
    if (autoC721F740_val == 1) {
        gv_midCamera01 = CameraInfoFromId(1630);
        gv_midCamera02 = CameraInfoFromId(1631);
        gv_midCamera03 = CameraInfoFromId(3279);
        gv_midCamera04 = CameraInfoFromId(3280);
    }
    else if (autoC721F740_val == 2) {
        gv_midCamera01 = CameraInfoFromId(1632);
        gv_midCamera02 = CameraInfoFromId(1633);
        gv_midCamera03 = CameraInfoFromId(3281);
        gv_midCamera04 = CameraInfoFromId(3282);
    }
    else if (autoC721F740_val == 3) {
        gv_midCamera01 = CameraInfoFromId(1634);
        gv_midCamera02 = CameraInfoFromId(1635);
        gv_midCamera03 = CameraInfoFromId(3286);
        gv_midCamera04 = CameraInfoFromId(3285);
    }
    else if (autoC721F740_val == 4) {
        gv_midCamera01 = CameraInfoFromId(1636);
        gv_midCamera02 = CameraInfoFromId(1637);
        gv_midCamera03 = CameraInfoFromId(3283);
        gv_midCamera04 = CameraInfoFromId(3284);
    }
    else {
    }
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(117), "Purifier_StasisPods_Chamber");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(117), "Purifier_StasisPods");
    TerrainShowRegion(RegionFromId(117), false);
    TriggerEnable(gt_AssignPurifierUnitstoCinematicTemp, true);
    TriggerEnable(gt_IssueWalkoutOrdertoPurifiers, true);
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER) && (((UnitGetType(UnitGroupLoopCurrent()) == libVoiC_gf_EnabledUnitTypeforArmyCategory("Sentry")) || (UnitGetType(UnitGroupLoopCurrent()) == libVoiC_gf_EnabledUnitTypeforArmyCategory("VoidRay"))))) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(701), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(715), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00181", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00182", true), c_soundIndexAny))), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier03_Music_Mid", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_MidCine_ALL", -1), PlayerGroupAll(), 100.0, 0.0);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal Work", "Purifier_StasisPods", RegionFromId(117));
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00181", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00182", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_WarpInPurifiersCinematic(gv_midContainmentIndex);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_MidCine_ALL", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_midCamera01, 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_midCamera02, (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00181", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00182", true), c_soundIndexAny))), -1, 10, true);
    TriggerExecute(gt_UpdateCybrosLights, true, false);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal Work", "Purifier_StasisPods", RegionFromName(("Activate Stasis Pods " + IntToString(gv_midContainmentIndex))));
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00186", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00195", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_midCamera03, 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_midCamera04, ((SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00195", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00184", true), c_soundIndexAny))) + 0.0), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00184", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vespenePoint;
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    SoundStopAllTriggerSounds(true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    Wait(0.0625, c_timeGame);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    TriggerExecute(gt_UpdateCybrosLights, true, false);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(117), "Purifier_StasisPods_Chamber");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(117), "Purifier_StasisPods");
    TerrainShowRegion(RegionFromId(117), true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    TriggerExecute(gt_MidSpawnPurifiersInstantlyNew, true, false);
    TriggerEnable(gt_AssignPurifierUnitstoCinematicTemp, false);
    TriggerEnable(gt_IssueWalkoutOrdertoPurifiers, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10.0);
    Wait(0.0625, c_timeGame);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraGetTarget(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Spawn Purifiers Instantly (New)
//--------------------------------------------------------------------------------------------------
bool gt_MidSpawnPurifiersInstantlyNew_Func (bool testConds, bool runActions) {
    int autoAFBD596A_ae;
    int autoAFBD596A_ai;
    int auto77242819_ae;
    int auto77242819_ai;
    int autoA6B891AA_ae;
    int autoA6B891AA_ai;
    int auto8111CCDA_ae;
    int auto8111CCDA_ai;
    int autoCE1A81ED_val;
    int auto863FD4B5_val;

    // Variable Declarations
    int lv_i;
    unitgroup lv_localWarpathGroup;
    string lv_pointIndexString;
    string lv_containmentTowerIndexString;
    fixed lv_warpinOffset;
    point lv_warpinLocationOrigin;
    point lv_warpinLocationIteration;
    point lv_spawnLocation;
    unit lv_cinematicWarpgate;
    int lv_warpIndex;

    // Variable Initialization
    lv_localWarpathGroup = UnitGroupEmpty();
    lv_pointIndexString = "";
    lv_containmentTowerIndexString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_containmentTowerIndexString = ("0" + IntToString(gv_midContainmentIndex));
    lv_spawnLocation = PointWithOffsetPolar(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex))), 10.0, PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
    autoAFBD596A_ae = 16;
    autoAFBD596A_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (autoAFBD596A_ai >= 0 && lv_warpIndex <= autoAFBD596A_ae) || (autoAFBD596A_ai <= 0 && lv_warpIndex >= autoAFBD596A_ae) ) ; lv_warpIndex += autoAFBD596A_ai ) {
        if ((lv_warpIndex <= 10)) {
            gv_warpinAngleIteration = (180.0 / 10.0);
            lv_warpinOffset = 3.3;
        }
        else {
            gv_warpinAngleIteration = (180.0 / 6.0);
            lv_warpinOffset = 1.7;
        }
        if (((lv_warpIndex == 1) || (lv_warpIndex == 11))) {
            gv_warpinAngle = ((PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))) - 90.0) + (gv_warpinAngleIteration / 2.0));
        }
        else {
            gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
        }
        UnitCreate(1, "ZealotPurifier", 0, gv_pLAYER_02_DOMINION7, PointWithOffsetPolar(lv_spawnLocation, lv_warpinOffset, gv_warpinAngle), PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
        UnitGroupAdd(lv_localWarpathGroup, UnitLastCreated());
    }
    gv_warpinAngleIteration = 180.0;
    gv_warpinAngle = (PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))) - 90.0);
    lv_spawnLocation = PointWithOffsetPolar(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex))), 9.0, PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
    auto77242819_ae = 4;
    auto77242819_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto77242819_ai >= 0 && lv_warpIndex <= auto77242819_ae) || (auto77242819_ai <= 0 && lv_warpIndex >= auto77242819_ae) ) ; lv_warpIndex += auto77242819_ai ) {
        if ((lv_warpIndex <= 2)) {
            lv_warpinOffset = 2.0;
        }
        else {
            lv_warpinOffset = 0.75;
        }
        UnitCreate(1, "StalkerPurifier", 0, gv_pLAYER_02_DOMINION7, PointWithOffsetPolar(lv_spawnLocation, lv_warpinOffset, gv_warpinAngle), PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
        UnitGroupAdd(lv_localWarpathGroup, UnitLastCreated());
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    gv_warpinAngleIteration = 180.0;
    gv_warpinAngle = (PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))) - 90.0);
    lv_spawnLocation = PointWithOffsetPolar(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex))), 7.0, PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
    autoA6B891AA_ae = 4;
    autoA6B891AA_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (autoA6B891AA_ai >= 0 && lv_warpIndex <= autoA6B891AA_ae) || (autoA6B891AA_ai <= 0 && lv_warpIndex >= autoA6B891AA_ae) ) ; lv_warpIndex += autoA6B891AA_ai ) {
        if ((lv_warpIndex <= 2)) {
            lv_warpinOffset = 2.0;
        }
        else {
            lv_warpinOffset = 0.75;
        }
        UnitCreate(1, "SentryPurifier", 0, gv_pLAYER_02_DOMINION7, PointWithOffsetPolar(lv_spawnLocation, lv_warpinOffset, gv_warpinAngle), PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
        UnitGroupAdd(lv_localWarpathGroup, UnitLastCreated());
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    gv_warpinAngleIteration = 90.0;
    gv_warpinAngle = ((PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))) + 90.0) + (gv_warpinAngleIteration / 2.0));
    lv_warpinOffset = 3.0;
    lv_spawnLocation = PointWithOffsetPolar(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex))), 7.0, PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
    gv_midColossusCount = 0;
    auto8111CCDA_ae = 2;
    auto8111CCDA_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto8111CCDA_ai >= 0 && lv_warpIndex <= auto8111CCDA_ae) || (auto8111CCDA_ai <= 0 && lv_warpIndex >= auto8111CCDA_ae) ) ; lv_warpIndex += auto8111CCDA_ai ) {
        autoCE1A81ED_val = gv_midColossusCount;
        if (autoCE1A81ED_val == 0) {
            UnitCreate(1, "ColossusPurifier", 0, gv_pLAYER_02_DOMINION7, PointFromName(("Purifier Colossus " + IntToString(gv_midContainmentIndex) + " A")), PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
        }
        else if (autoCE1A81ED_val == 1) {
            UnitCreate(1, "ColossusPurifier", 0, gv_pLAYER_02_DOMINION7, PointFromName(("Purifier Colossus " + IntToString(gv_midContainmentIndex) + " B")), PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(gv_midContainmentIndex)))));
        }
        else {
        }
        UnitGroupAdd(lv_localWarpathGroup, UnitLastCreated());
        gv_midColossusCount += 1;
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    auto863FD4B5_val = gv_midContainmentIndex;
    if (auto863FD4B5_val == 1) {
        UnitGroupAddUnitGroup(gv_purifierStasisChambers[1].lv_warpathGroup, lv_localWarpathGroup);
    }
    else if (auto863FD4B5_val == 2) {
        UnitGroupAddUnitGroup(gv_purifierStasisChambers[2].lv_warpathGroup, lv_localWarpathGroup);
    }
    else if (auto863FD4B5_val == 3) {
        UnitGroupAddUnitGroup(gv_purifierStasisChambers[3].lv_warpathGroup, lv_localWarpathGroup);
    }
    else if (auto863FD4B5_val == 4) {
        UnitGroupAddUnitGroup(gv_purifierStasisChambers[4].lv_warpathGroup, lv_localWarpathGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSpawnPurifiersInstantlyNew_Init () {
    gt_MidSpawnPurifiersInstantlyNew = TriggerCreate("gt_MidSpawnPurifiersInstantlyNew_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Purifier Units to Cinematic Temp
//--------------------------------------------------------------------------------------------------
bool gt_AssignPurifierUnitstoCinematicTemp_Func (bool testConds, bool runActions) {
    int autoBAD78F46_ae;
    int autoBAD78F46_ai;

    // Variable Declarations
    int lv_regionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(4)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(17)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(18)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(19)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBAD78F46_ae = 4;
    autoBAD78F46_ai = 1;
    lv_regionIndex = 1;
    for ( ; ( (autoBAD78F46_ai >= 0 && lv_regionIndex <= autoBAD78F46_ae) || (autoBAD78F46_ai <= 0 && lv_regionIndex >= autoBAD78F46_ae) ) ; lv_regionIndex += autoBAD78F46_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromName(("Purifier Spawn Reveal " + IntToString(lv_regionIndex)))) == true)) {
            UnitGroupAdd(gv_cinematicTempUnits, EventUnitProgressUnit());
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignPurifierUnitstoCinematicTemp_Init () {
    gt_AssignPurifierUnitstoCinematicTemp = TriggerCreate("gt_AssignPurifierUnitstoCinematicTemp_Func");
    TriggerEnable(gt_AssignPurifierUnitstoCinematicTemp, false);
    TriggerAddEventUnitConstructProgress(gt_AssignPurifierUnitstoCinematicTemp, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Issue Walkout Order to Purifiers
//--------------------------------------------------------------------------------------------------
bool gt_IssueWalkoutOrdertoPurifiers_Func (bool testConds, bool runActions) {
    int autoBE32480D_val;
    string auto9E5F1AAA_val;
    int auto21E34840_val;

    // Variable Declarations
    int lv_regionIndex;
    fixed lv_walkoutAngle;
    fixed lv_walkoutOffset;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(4)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(17)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(18)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(19)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBE32480D_val = gv_midContainmentIndex;
    if (autoBE32480D_val == 1) {
        lv_walkoutAngle = 270.0;
    }
    else if (autoBE32480D_val == 2) {
        lv_walkoutAngle = 0.0;
    }
    else if (autoBE32480D_val == 3) {
        lv_walkoutAngle = 180.0;
    }
    else if (autoBE32480D_val == 4) {
        lv_walkoutAngle = 90.0;
    }
    else {
    }
    auto9E5F1AAA_val = UnitGetType(EventUnitProgressUnit());
    if (auto9E5F1AAA_val == "ZealotPurifier") {
        lv_walkoutOffset = 10.0;
    }
    else if (auto9E5F1AAA_val == "StalkerPurifier") {
        lv_walkoutOffset = 9.0;
    }
    else if (auto9E5F1AAA_val == "SentryPurifier") {
        lv_walkoutOffset = 8.0;
    }
    else {
    }
    Wait(1.0, c_timeGame);
    if ((UnitGetType(EventUnitProgressUnit()) == "ColossusPurifier")) {
        auto21E34840_val = gv_midColossusCount;
        if (auto21E34840_val == 0) {
            UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Purifier Colossus " + IntToString(gv_midContainmentIndex) + " A"))), c_orderQueueReplace);
        }
        else if (auto21E34840_val == 1) {
            UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Purifier Colossus " + IntToString(gv_midContainmentIndex) + " B"))), c_orderQueueReplace);
        }
        else {
        }
        gv_midColossusCount += 1;
    }
    else {
        UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnitProgressUnit()), lv_walkoutOffset, lv_walkoutAngle)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IssueWalkoutOrdertoPurifiers_Init () {
    gt_IssueWalkoutOrdertoPurifiers = TriggerCreate("gt_IssueWalkoutOrdertoPurifiers_Func");
    TriggerEnable(gt_IssueWalkoutOrdertoPurifiers, false);
    TriggerAddEventUnitConstructProgress(gt_IssueWalkoutOrdertoPurifiers, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    if ((UnitGroupCount(gv_unpoweredDefenses, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(gv_unpoweredDefenses);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(UnitGroupLoopCurrent(), 1));
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PurifierCoreMatrix", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, Point(104.0, 104.0));
    gv_cinematicCoreMatrix = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Purifier", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(980));
    gv_cinematicCybros = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(31), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(43), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00127", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier03|Line00128", true), c_soundIndexAny))), -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier03_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    TriggerExecute(gt_VictoryBlinkingStalkers, true, false);
    TriggerExecute(gt_VictoryZealotsandZerg, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SendActorMessageToUnit(gv_cinematicCoreMatrix, "Signal Swap");
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(971), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(972), 10.0, -1, 10, true);
    libNtve_gf_SendActorMessageToUnit(gv_cinematicCoreMatrix, "Signal Startup");
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier03_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "Shake", 0.0, 1.0, 10.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00192", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(874), 10.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00194", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00193", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_CoreMatrix_StandWorkStart_End_ActiveLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(1);
    libVCMI_gf_StopCinematicSounds();
    SoundStopAllTriggerSounds(true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    TransmissionClearAll();
    UISetCursorVisible(PlayerGroupAll(), false);
    Wait(1.0, c_timeReal);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    UnitPauseAll(true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libVoiC_gf_PlayCinematic("Purifier03MissionEnd", false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Blinking Stalkers
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBlinkingStalkers_Func (bool testConds, bool runActions) {
    int auto9CB05CA3_ae;
    int auto9CB05CA3_ai;
    int auto11722341_ae;
    int auto11722341_ai;
    int auto4F63C76A_ae;
    int auto4F63C76A_ai;

    // Variable Declarations
    unit lv_victoryBroodlord;
    unit lv_victoryOverlord;
    int lv_stalkerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Guardian", 0, gv_pLAYER_02_DOMINION, PointFromId(3143));
    lv_victoryBroodlord = UnitLastCreated();
    UnitIssueOrder(lv_victoryBroodlord, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3144)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_pLAYER_02_DOMINION, PointFromId(3151));
    lv_victoryOverlord = UnitLastCreated();
    UnitIssueOrder(lv_victoryOverlord, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3152)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "StalkerPurifier", 0, gv_pLAYER_02_DOMINION6, PointWithOffsetPolar(PointFromId(3140), 2.0, 0.0));
    gv_victoryStalker[1] = UnitLastCreated();
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "StalkerPurifier", 0, gv_pLAYER_02_DOMINION6, PointWithOffsetPolar(PointFromId(3141), 2.0, 0.0));
    gv_victoryStalker[2] = UnitLastCreated();
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "StalkerPurifier", 0, gv_pLAYER_02_DOMINION6, PointWithOffsetPolar(PointFromId(3142), 2.0, 0.0));
    gv_victoryStalker[3] = UnitLastCreated();
    auto9CB05CA3_ae = 3;
    auto9CB05CA3_ai = 1;
    lv_stalkerIndex = 1;
    for ( ; ( (auto9CB05CA3_ai >= 0 && lv_stalkerIndex <= auto9CB05CA3_ae) || (auto9CB05CA3_ai <= 0 && lv_stalkerIndex >= auto9CB05CA3_ae) ) ; lv_stalkerIndex += auto9CB05CA3_ai ) {
        Wait(0.3, c_timeGame);
        UnitIssueOrder(gv_victoryStalker[lv_stalkerIndex], OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Victory Stalker " + IntToString(lv_stalkerIndex)))), c_orderQueueReplace);
        UnitIssueOrder(gv_victoryStalker[lv_stalkerIndex], OrderTargetingPoint(AbilityCommand("BlinkMultiple", 0), PointFromName(("Victory Stalker Blink " + IntToString(lv_stalkerIndex) + " A"))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_victoryStalker[lv_stalkerIndex], OrderTargetingUnit(AbilityCommand("attack", 0), lv_victoryBroodlord), c_orderQueueAddToEnd);
    }
    Wait(3.0, c_timeGame);
    UnitKill(lv_victoryBroodlord);
    auto11722341_ae = 3;
    auto11722341_ai = 1;
    lv_stalkerIndex = 1;
    for ( ; ( (auto11722341_ai >= 0 && lv_stalkerIndex <= auto11722341_ae) || (auto11722341_ai <= 0 && lv_stalkerIndex >= auto11722341_ae) ) ; lv_stalkerIndex += auto11722341_ai ) {
        Wait(0.3, c_timeGame);
        UnitIssueOrder(gv_victoryStalker[lv_stalkerIndex], OrderTargetingPoint(AbilityCommand("BlinkMultiple", 0), PointFromName(("Victory Stalker Blink " + IntToString(lv_stalkerIndex) + " B"))), c_orderQueueReplace);
        UnitIssueOrder(gv_victoryStalker[lv_stalkerIndex], OrderTargetingUnit(AbilityCommand("attack", 0), lv_victoryOverlord), c_orderQueueAddToEnd);
    }
    Wait(2.0, c_timeGame);
    UnitKill(lv_victoryOverlord);
    auto4F63C76A_ae = 3;
    auto4F63C76A_ai = 1;
    lv_stalkerIndex = 1;
    for ( ; ( (auto4F63C76A_ai >= 0 && lv_stalkerIndex <= auto4F63C76A_ae) || (auto4F63C76A_ai <= 0 && lv_stalkerIndex >= auto4F63C76A_ae) ) ; lv_stalkerIndex += auto4F63C76A_ai ) {
        Wait(0.3, c_timeGame);
        UnitIssueOrder(gv_victoryStalker[lv_stalkerIndex], OrderTargetingPoint(AbilityCommand("BlinkMultiple", 0), PointFromName(("Victory Stalker Blink " + IntToString(lv_stalkerIndex) + " C"))), c_orderQueueReplace);
        UnitIssueOrder(gv_victoryStalker[lv_stalkerIndex], OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointFromName(("Victory Stalker Blink " + IntToString(lv_stalkerIndex) + " C")), 6.0, 90.0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBlinkingStalkers_Init () {
    gt_VictoryBlinkingStalkers = TriggerCreate("gt_VictoryBlinkingStalkers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zealots and Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZealotsandZerg_Func (bool testConds, bool runActions) {
    int autoD9AA75C3_ae;
    int autoD9AA75C3_ai;
    int auto05376EFE_ae;
    int auto05376EFE_ai;
    int autoD1144DEC_ae;
    int autoD1144DEC_ai;

    // Variable Declarations
    int lv_zealotIndex;
    int lv_zealotCount;
    unit[6] lv_zealotUnit;
    unitgroup lv_zealotGroup;
    int lv_zerglingIndex;
    int lv_zerglingCount;
    unitgroup lv_zerglingGroup;
    unit[4] lv_roach;

    // Variable Initialization
    lv_zealotCount = 5;
    lv_zealotGroup = UnitGroupEmpty();
    lv_zerglingCount = 5;
    lv_zerglingGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD9AA75C3_ae = lv_zealotCount;
    autoD9AA75C3_ai = 1;
    lv_zealotIndex = 1;
    for ( ; ( (autoD9AA75C3_ai >= 0 && lv_zealotIndex <= autoD9AA75C3_ae) || (autoD9AA75C3_ai <= 0 && lv_zealotIndex >= autoD9AA75C3_ae) ) ; lv_zealotIndex += autoD9AA75C3_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ZealotPurifier", 0, gv_pLAYER_02_DOMINION6, PointFromName(("Victory Zealot " + IntToString(lv_zealotIndex))));
        lv_zealotUnit[lv_zealotIndex] = UnitLastCreated();
        libNtve_gf_ChangeUnitDamage(lv_zealotUnit[lv_zealotIndex], libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(lv_zealotGroup, lv_zealotUnit[lv_zealotIndex]);
        libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER_02_DOMINION, PointWithOffsetPolar(PointFromName(("Victory Zealot " + IntToString(lv_zealotIndex))), 2.0, 45.0));
        UnitGroupAddUnitGroup(lv_zerglingGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_zealotUnit[lv_zealotIndex]), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_pLAYER_02_DOMINION, PointFromId(3163));
    lv_roach[1] = UnitLastCreated();
    UnitIssueOrder(lv_roach[1], OrderTargetingUnit(AbilityCommand("attack", 0), lv_zealotUnit[5]), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_pLAYER_02_DOMINION, PointFromId(3164));
    lv_roach[2] = UnitLastCreated();
    UnitIssueOrder(lv_roach[2], OrderTargetingUnit(AbilityCommand("attack", 0), lv_zealotUnit[5]), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_pLAYER_02_DOMINION, PointFromId(3165));
    lv_roach[3] = UnitLastCreated();
    UnitIssueOrder(lv_roach[3], OrderTargetingUnit(AbilityCommand("attack", 0), lv_zealotUnit[5]), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "ColossusPurifier", 0, gv_pLAYER_02_DOMINION6, PointFromId(3161));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3157)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "ColossusPurifier", 0, gv_pLAYER_02_DOMINION6, PointFromId(3162));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3159)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    libNtve_gf_ChangeUnitDamage(lv_zealotUnit[5], libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    auto05376EFE_ae = lv_zealotCount;
    auto05376EFE_ai = 1;
    lv_zealotIndex = 1;
    for ( ; ( (auto05376EFE_ai >= 0 && lv_zealotIndex <= auto05376EFE_ae) || (auto05376EFE_ai <= 0 && lv_zealotIndex >= auto05376EFE_ae) ) ; lv_zealotIndex += auto05376EFE_ai ) {
        UnitIssueOrder(lv_zealotUnit[lv_zealotIndex], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3164)), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Queen", 0, gv_pLAYER_02_DOMINION, PointFromId(3166));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3160)), c_orderQueueReplace);
    autoD1144DEC_ae = 4;
    autoD1144DEC_ai = 1;
    lv_zerglingIndex = 1;
    for ( ; ( (autoD1144DEC_ai >= 0 && lv_zerglingIndex <= autoD1144DEC_ae) || (autoD1144DEC_ai <= 0 && lv_zerglingIndex >= autoD1144DEC_ae) ) ; lv_zerglingIndex += autoD1144DEC_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_02_DOMINION, libNtve_gf_RandomPointBetweenPoints(PointFromId(3166), PointFromId(3167)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3160)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZealotsandZerg_Init () {
    gt_VictoryZealotsandZerg = TriggerCreate("gt_VictoryZealotsandZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGame_Init();
    gt_TransmissionPurifierNullCircuitsQ_Init();
    gt_TransmissionPurifierCoreMatrixQ_Init();
    gt_TrackReticlesonUnpoweredDefenses_Init();
    gt_ZergBasesInit_Init();
    gt_ZergBaseDestroyed_Init();
    gt_TransmissionAllZergBasesDestroyedQ_Init();
    gt_TurnOffWarnOfZergBaseTriggers_Init();
    gt_TransmissionWarnOfZergBase01Q_Init();
    gt_TransmissionWarnOfZergBase02Q_Init();
    gt_TransmissionWarnOfZergBase03Q_Init();
    gt_TransmissionWarnOfZergBase04Q_Init();
    gt_KillLarva_Init();
    gt_PurifierStasisChambersInit_Init();
    gt_AssignPurifierUnitstoWaveGroup_Init();
    gt_NullCircuitDestroyed_Init();
    gt_TransmissionActivateStasisChamberQ_Init();
    gt_TransmissionInitiateAttackFromStasisChamberQ_Init();
    gt_TransmissionDestroyNullCircuitsReminderQ_Init();
    gt_TransmissionPlayerSeesFirstNullCircuitRevealQ_Init();
    gt_TransmissionLastFewNullCircuitsToGoEncouragementQ_Init();
    gt_TrackNullCircuitPings_Init();
    gt_UpdateCybrosLights_Init();
    gt_TrackWarningPingOnCoreMatrix_Init();
    gt_TransmissionCoreMatrixAttackedQ_Init();
    gt_TransmissionCoreMatrixBadlyDamagedQ_Init();
    gt_TransmissionCoreMatrixCriticallyDamagedQ_Init();
    gt_RevealBonusObjectiveAfterTime_Init();
    gt_UnitEntersRevealBonusObjectiveRegion_Init();
    gt_TransmissionPurifierWardenRevealQ_Init();
    gt_TransmissionPurifierWardenDiesQ_Init();
    gt_PurifierWardenBehavior_Init();
    gt_TransmissionPurifierWardenEngagesPlayerQ_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_AIUpgradesPurifierAttackGroup_Init();
    gt_HybridCreated_Init();
    gt_VsCoreAttackWave01SW_Init();
    gt_VsCoreAttackWave02SW_Init();
    gt_VsCoreAttackWave03NE_Init();
    gt_VsCoreAttackWave04SE_Init();
    gt_VsCoreAttackWave05NE_Init();
    gt_VsCoreAttackWave06SWHybridIntro_Init();
    gt_VsCoreAttackWave07SE_Init();
    gt_VsCoreAttackWave08NE_Init();
    gt_VsCoreAttackWave09SE_Init();
    gt_VsCoreAttackWave10SW_Init();
    gt_VsCoreAttackWaveRepeatCycle_Init();
    gt_VsCoreAttackWaveOneVectorRepeatableNE_Init();
    gt_VsCoreAttackWaveOneVectorRepeatableSE_Init();
    gt_VsCoreAttackWaveOneVectorRepeatableSW_Init();
    gt_VsCoreAttackWaveTwoVectorsRepeatableNESE_Init();
    gt_VsCoreAttackWaveTwoVectorsRepeatableNESW_Init();
    gt_TransmissionVsCoreMatrixAttackWave01Q_Init();
    gt_TransmissionFirstNEAttackWarningQ_Init();
    gt_TransmissionHybridAttackWarning01Q_Init();
    gt_ZergReinforcementsController_Init();
    gt_ZergReinforcements01Q_Init();
    gt_ZergReinforcements02_Init();
    gt_ZergReinforcements03_Init();
    gt_ZergReinforcements04Hard_Init();
    gt_StatCoreMatrixMinimumShields_Init();
    gt_StatHybridSlain_Init();
    gt_AchievementPurifierActivationCombo_Init();
    gt_AchievementHybridBehemothsKilledMastery_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryStasisChambersCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveNullCircuitsCreate_Init();
    gt_ObjectiveNullCircuitsComplete_Init();
    gt_ObjectiveNullCircuitsUpdate_Init();
    gt_ObjectiveNullCircuitsFailed_Init();
    gt_ObjectivePurifiersMustSurviveCreate_Init();
    gt_ObjectivePurifiersMustSurviveComplete_Init();
    gt_ObjectivePurifiersMustSurviveFailed_Init();
    gt_ObjectiveDestroyPurifierWardenCreate_Init();
    gt_ObjectiveDestroyPurifierWardenUpdate_Init();
    gt_ObjectiveDestroyPurifierWardenComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZerglingFlow_Init();
    gt_IntroZerglingReinforce_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidSpawnPurifiersInstantlyNew_Init();
    gt_AssignPurifierUnitstoCinematicTemp_Init();
    gt_IssueWalkoutOrdertoPurifiers_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryBlinkingStalkers_Init();
    gt_VictoryZealotsandZerg_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
