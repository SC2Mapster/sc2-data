//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Steps of the Rite
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai7AEF50D9"
include "ai46315C0D"
include "ai8487A584"
include "ai059BAA2D"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_TAL_NORTH = 2;
const int gv_pLAYER_03_TAL_EAST = 3;
const int gv_pLAYER_04_TAL_SOUTH = 4;
const int gv_pLAYER_05_TAL_WEST = 5;
const int gv_pLAYER_06_VOIDRAY = 6;
const int gv_pLAYER_07_VOID_EAST = 7;
const int gv_pLAYER_08_VOID_SOUTH = 8;
const int gv_pLAYER_09_VOID_WEST = 9;
const int gv_pLAYER_10_VOID_NORTH = 10;
const int gv_pLAYER_11_MOTHERSHIPS = 11;
const int gv_mOTHERSHIP_COUNT = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
playergroup gv_enemyPlayerGroup;
unitgroup gv_shrineGroup;
unitgroup gv_voidRiftGroup;
unit gv_shrineNorthUnit;
unit gv_shrineSouthUnit;
unit gv_shrineEastUnit;
unit gv_shrineWestUnit;
unitgroup gv_ascendantGroup;
int gv_shrinesDestroyed;
string gv_opacityCloudOn;
unitgroup gv_stargateGroup;
bool gv_voidrayOrderIssued;
string gv_lightNight;
string gv_lightDay;
fixed gv_terrazineInactiveDuration;
fixed gv_terrazineInitialDelay;
fixed gv_terrazineActiveDuration;
bool gv_terrazineActive;
timer gv_terrazineTimer;
int gv_terrazineTimerWindow;
int gv_terrazineNightCount;
bool gv_bonusObjectiveActivated;
bool[3] gv_mothershipEngaged;
unit[3] gv_mothership;
unitgroup[3] gv_mothershipEscort;
int gv_mothershipsDestroyed;
bool gv_northShrineAttacked;
bool gv_eastShrineAttacked;
bool gv_southShrineAttacked;
bool gv_westShrineAttacked;
int gv_shrineAttackedTransmission;
unit gv_voidRiftNorth;
unit gv_voidRiftSouth;
unit gv_voidRiftEast;
unit gv_voidRiftWest;
int[3] gv_taldarimFleetPing;
int gv_foggyShrineKills;
int gv_voidShadesKilled;
int gv_taldarimKilled;
int gv_objectiveDestroyZergBase5;
int gv_objectiveDestroyZergBase;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unitgroup gv_introEnemies;
unit gv_introGuardian;
unitgroup gv_introPlayerSquad;
unitgroup gv_introPlayerStructures;
unit gv_victoryAlarak;
unit gv_victoryGuardian;
unit gv_victoryMalash;
unit gv_victoryCrystal;
int[9] gv_introMinerals;
int[3] gv_introGas;
point gv_finalShrineLocation;
unit gv_finalShrine;
camerainfo[4] gv_shrineCamera;
point gv_victoryZoomFocus;
point gv_victoryAlarakSpawnPoint;

void InitGlobals () {
    int init_i;

    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_shrineGroup = UnitGroupEmpty();
    gv_voidRiftGroup = UnitGroupEmpty();
    gv_ascendantGroup = UnitGroupEmpty();
    gv_opacityCloudOn = "SetOpacity 0.200000 5.000000";
    gv_stargateGroup = UnitGroupEmpty();
    gv_lightNight = "PTaldarim01Night";
    gv_lightDay = "PTaldarim01Day";
    gv_terrazineTimer = TimerCreate();
    gv_terrazineTimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_mothershipEscort[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_taldarimFleetPing[init_i] = c_invalidPingId;
    }
    gv_objectiveDestroyZergBase5 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introEnemies = UnitGroupEmpty();
    gv_introPlayerSquad = UnitGroupEmpty();
    gv_introPlayerStructures = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_HybridSpawnFX (unit lp_hybrid);
void gf_SendActorMessagetoDoodadsinRegion (string lp_actorMessage, string lp_doodadType, region lp_region);
void gf_ApplyShadowManifestationFX (unit lp_cHOSEN_UNIT);
void gf_LeashUnitShieldRestore (unit lp_leashingUnit);
void gf_MonitorDeathFleetPing (unitgroup lp_fleet, unit lp_escortUnit, int lp_pingIndex);
void gf_WarpPrismWaveSpawnUnits (int lp_pingIndex, unit lp_prism);
void gf_AscendantBehaviour (unit lp_ascendant);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGameQ;
trigger gt_FirstTerrazineCycle;
trigger gt_TransmissionFirstTerrazineQ;
trigger gt_ImmortalJohFoundQ;
trigger gt_VoidRayIntro;
trigger gt_TransmissionVoidRayIntroQ;
trigger gt_StargateSelectedCleanup;
trigger gt_StargateDiesCleanup;
trigger gt_VoidRayOrderIssued;
trigger gt_TerrazineCycle;
trigger gt_TransmissionFirstFogQ;
trigger gt_CreateTerrazineGauge;
trigger gt_UpdateTerrazineGauge;
trigger gt_TransmissionTerrazineFogSoonQ;
trigger gt_TransmissionTerrazineFogRecedesQ;
trigger gt_FirstNightSurvived;
trigger gt_TransmissionDestroytheShrinesQ;
trigger gt_WaveShadowFX;
trigger gt_BonusObjectiveIntro;
trigger gt_MothershipEngaged;
trigger gt_MothershipControllerBottom;
trigger gt_MothershipControllerTop;
trigger gt_MothershipDestroyed;
trigger gt_TransmissionBonusObjectiveIntroQ;
trigger gt_TransmissionBonusObjectiveUpdateQ;
trigger gt_TransmissionBonusObjectiveCompleteQ;
trigger gt_ShrineAttacked;
trigger gt_TransmissionShrineAttackedQ;
trigger gt_ShrineDestroyed;
trigger gt_TransmissionShrineDestroyedQ;
trigger gt_TaldarimDayWaves;
trigger gt_DayTimeDeathFleetNW;
trigger gt_DayTimeDeathFleetNE;
trigger gt_TransmissionTaldarimAttackTauntQ;
trigger gt_TransmissionFirstShipsWarningQ;
trigger gt_TransmissionEnemyShipsWarningQ;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_SetAIUpgradeLevel;
trigger gt_ShrineReinforcements;
trigger gt_UpdateBullyandWaveStatus;
trigger gt_DefeatBaseDead;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipReadyQ;
trigger gt_StatEnemyUnitKilled;
trigger gt_AchievementShrinesKilledDuringFog;
trigger gt_ObjectiveSurvivetheFirstNightCreate;
trigger gt_ObjectiveSurvivetheFirstNightComplete;
trigger gt_ObjectiveSurvivetheFirstNightFailed;
trigger gt_ObjectiveDestroyShrinesCreate;
trigger gt_ObjectiveDestroyShrinesComplete;
trigger gt_ObjectiveDestroyShrinesUpdate;
trigger gt_ObjectiveDestroyShrinesFailed;
trigger gt_ObjectiveDestroyShipsCreate;
trigger gt_ObjectiveDestroyShipsComplete;
trigger gt_ObjectiveDestroyShipsUpdate;
trigger gt_ObjectiveDestroyShipsFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroTaldarimAttack;
trigger gt_IntroMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryMusic;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai7AEF50D9") { ai7AEF50D9_start(p); }
    if (cai_playerAI[p] == "ai46315C0D") { ai46315C0D_start(p); }
    if (cai_playerAI[p] == "ai8487A584") { ai8487A584_start(p); }
    if (cai_playerAI[p] == "ai059BAA2D") { ai059BAA2D_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { ai7AEF50D9_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai46315C0D") { ai46315C0D_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai8487A584") { ai8487A584_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai059BAA2D") { ai059BAA2D_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { return ai7AEF50D9_getCustomData(p); }
    if (cai_playerAI[p] == "ai46315C0D") { return ai46315C0D_getCustomData(p); }
    if (cai_playerAI[p] == "ai8487A584") { return ai8487A584_getCustomData(p); }
    if (cai_playerAI[p] == "ai059BAA2D") { return ai059BAA2D_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { return ai7AEF50D9_getLastWave(p); }
    if (cai_playerAI[p] == "ai46315C0D") { return ai46315C0D_getLastWave(p); }
    if (cai_playerAI[p] == "ai8487A584") { return ai8487A584_getLastWave(p); }
    if (cai_playerAI[p] == "ai059BAA2D") { return ai059BAA2D_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { ai7AEF50D9_waves_run(p, target); }
    if (cai_playerAI[p] == "ai46315C0D") { ai46315C0D_waves_run(p, target); }
    if (cai_playerAI[p] == "ai8487A584") { ai8487A584_waves_run(p, target); }
    if (cai_playerAI[p] == "ai059BAA2D") { ai059BAA2D_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { ai7AEF50D9_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai46315C0D") { ai46315C0D_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai8487A584") { ai8487A584_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai059BAA2D") { ai059BAA2D_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai7AEF50D9") { ai7AEF50D9_waves_stop(); }
    if (ai == "ai46315C0D") { ai46315C0D_waves_stop(); }
    if (ai == "ai8487A584") { ai8487A584_waves_stop(); }
    if (ai == "ai059BAA2D") { ai059BAA2D_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { ai7AEF50D9_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai46315C0D") { ai46315C0D_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai8487A584") { ai8487A584_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai059BAA2D") { ai059BAA2D_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { ai7AEF50D9_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai46315C0D") { ai46315C0D_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai8487A584") { ai8487A584_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai059BAA2D") { ai059BAA2D_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { return ai7AEF50D9_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai46315C0D") { return ai46315C0D_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai8487A584") { return ai8487A584_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai059BAA2D") { return ai059BAA2D_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { return ai7AEF50D9_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai46315C0D") { return ai46315C0D_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai8487A584") { return ai8487A584_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai059BAA2D") { return ai059BAA2D_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai7AEF50D9") { return ai7AEF50D9_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai46315C0D") { return ai46315C0D_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai8487A584") { return ai8487A584_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai059BAA2D") { return ai059BAA2D_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai7AEF50D9", 7);
    cai_start("ai46315C0D", 8);
    cai_start("ai8487A584", 9);
    cai_start("ai059BAA2D", 10);
    AICampaignStart(2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(11);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(7, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(8, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(9, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(10, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_HybridSpawnFX_Trigger = null;
unit auto_gf_HybridSpawnFX_lp_hybrid;

void gf_HybridSpawnFX (unit lp_hybrid) {
    auto_gf_HybridSpawnFX_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridSpawnFX_Trigger == null) {
        auto_gf_HybridSpawnFX_Trigger = TriggerCreate("auto_gf_HybridSpawnFX_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridSpawnFX_Trigger, false, false);
}

bool auto_gf_HybridSpawnFX_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridSpawnFX_lp_hybrid;

    string autoA862846D_val;

    // Variable Declarations
    actor lv_portal;

    // Variable Initialization

    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_hybrid), "SetOpacity");
    UnitSetState(lp_hybrid, c_unitStateHighlightable, false);
    UnitSetState(lp_hybrid, c_unitStateTargetable, false);
    UnitSetState(lp_hybrid, c_unitStateInvulnerable, true);
    UnitSetState(lp_hybrid, c_unitStateStunned, true);
    SoundPlayAtPointForPlayer(SoundLink("Urun_GravitonBeamStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_hybrid), 0.0, 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("ZeratulStunModel", UnitGetPosition(lp_hybrid));
    lv_portal = libNtve_gf_ActorLastCreated();
    autoA862846D_val = UnitGetType(lp_hybrid);
    if (autoA862846D_val == "HybridDestroyer") {
        ActorSend(lv_portal, "SetScale 1.200000");
    }
    else if (autoA862846D_val == "HybridReaver") {
        ActorSend(lv_portal, "SetScale 1.400000");
    }
    else if (autoA862846D_val == "HybridDominatorVoid") {
        ActorSend(lv_portal, "SetScale 1.400000");
    }
    else if (autoA862846D_val == "HybridBehemoth") {
        ActorSend(lv_portal, "SetScale 1.600000");
    }
    else {
        ActorSend(lv_portal, "SetScale 1.200000");
    }
    ActorSend(libNtve_gf_MainActorofUnit(lp_hybrid), "SetOpacity 1.000000 2.500000");
    Wait(2.5, c_timeAI);
    libNtve_gf_KillModel(lv_portal);
    UnitSetState(lp_hybrid, c_unitStateHighlightable, true);
    UnitSetState(lp_hybrid, c_unitStateTargetable, true);
    UnitSetState(lp_hybrid, c_unitStateInvulnerable, false);
    UnitSetState(lp_hybrid, c_unitStateStunned, false);
    return true;
}

trigger auto_gf_SendActorMessagetoDoodadsinRegion_Trigger = null;
string auto_gf_SendActorMessagetoDoodadsinRegion_lp_actorMessage;
string auto_gf_SendActorMessagetoDoodadsinRegion_lp_doodadType;
region auto_gf_SendActorMessagetoDoodadsinRegion_lp_region;

void gf_SendActorMessagetoDoodadsinRegion (string lp_actorMessage, string lp_doodadType, region lp_region) {
    auto_gf_SendActorMessagetoDoodadsinRegion_lp_actorMessage = lp_actorMessage;
    auto_gf_SendActorMessagetoDoodadsinRegion_lp_doodadType = lp_doodadType;
    auto_gf_SendActorMessagetoDoodadsinRegion_lp_region = lp_region;

    if (auto_gf_SendActorMessagetoDoodadsinRegion_Trigger == null) {
        auto_gf_SendActorMessagetoDoodadsinRegion_Trigger = TriggerCreate("auto_gf_SendActorMessagetoDoodadsinRegion_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendActorMessagetoDoodadsinRegion_Trigger, false, false);
}

bool auto_gf_SendActorMessagetoDoodadsinRegion_TriggerFunc (bool testConds, bool runActions) {
    string lp_actorMessage = auto_gf_SendActorMessagetoDoodadsinRegion_lp_actorMessage;
    string lp_doodadType = auto_gf_SendActorMessagetoDoodadsinRegion_lp_doodadType;
    region lp_region = auto_gf_SendActorMessagetoDoodadsinRegion_lp_region;

    // Variable Declarations
    actor lv_actorRegion;

    // Variable Initialization

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", RegionEntireMap());
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_actorMessage, "Doodad", ("ScopeContains " + lp_doodadType));
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
    return true;
}

trigger auto_gf_ApplyShadowManifestationFX_Trigger = null;
unit auto_gf_ApplyShadowManifestationFX_lp_cHOSEN_UNIT;

void gf_ApplyShadowManifestationFX (unit lp_cHOSEN_UNIT) {
    auto_gf_ApplyShadowManifestationFX_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;

    if (auto_gf_ApplyShadowManifestationFX_Trigger == null) {
        auto_gf_ApplyShadowManifestationFX_Trigger = TriggerCreate("auto_gf_ApplyShadowManifestationFX_TriggerFunc");
    }

    TriggerExecute(auto_gf_ApplyShadowManifestationFX_Trigger, false, false);
}

bool auto_gf_ApplyShadowManifestationFX_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_ApplyShadowManifestationFX_lp_cHOSEN_UNIT;

    // Implementation
    if ((UnitGroupCount(UnitGroup("VoidRiftUnselectable", c_playerAny, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        UnitBehaviorAddPlayer(lp_cHOSEN_UNIT, "VoidRiftTrainPrecursor", UnitGetOwner(lp_cHOSEN_UNIT), 1);
        UnitCreateEffectUnit(UnitGroupClosestToPoint(UnitGroup("VoidRiftUnselectable", c_playerAny, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_cHOSEN_UNIT)), "VoidRiftTrainLM", lp_cHOSEN_UNIT);
    }
    else {
    }
    if ((UnitIsAlive(lp_cHOSEN_UNIT) == true)) {
        UnitBehaviorAddPlayer(lp_cHOSEN_UNIT, "TerrazineShadow", UnitGetOwner(lp_cHOSEN_UNIT), 1);
    }
    else {
        return true;
    }
    Wait(3.0, c_timeGame);
    if ((gv_terrazineActive == false) && (UnitHasBehavior2(lp_cHOSEN_UNIT, "SolarCombustion") == false)) {
        UnitBehaviorAddPlayer(lp_cHOSEN_UNIT, "SolarCombustion", UnitGetOwner(lp_cHOSEN_UNIT), 1);
    }
    else {
    }
    return true;
}

trigger auto_gf_LeashUnitShieldRestore_Trigger = null;
unit auto_gf_LeashUnitShieldRestore_lp_leashingUnit;

void gf_LeashUnitShieldRestore (unit lp_leashingUnit) {
    auto_gf_LeashUnitShieldRestore_lp_leashingUnit = lp_leashingUnit;

    if (auto_gf_LeashUnitShieldRestore_Trigger == null) {
        auto_gf_LeashUnitShieldRestore_Trigger = TriggerCreate("auto_gf_LeashUnitShieldRestore_TriggerFunc");
    }

    TriggerExecute(auto_gf_LeashUnitShieldRestore_Trigger, false, false);
}

bool auto_gf_LeashUnitShieldRestore_TriggerFunc (bool testConds, bool runActions) {
    unit lp_leashingUnit = auto_gf_LeashUnitShieldRestore_lp_leashingUnit;

    // Variable Declarations
    actor lv_shieldImpactActor;

    // Variable Initialization

    // Implementation
    UnitSetPropertyFixed(lp_leashingUnit, c_unitPropShieldsPercent, 100.0);
    libNtve_gf_AttachModelToUnit(lp_leashingUnit, "VulcanChampionShieldRestoreImpact", "Ref_Center");
    lv_shieldImpactActor = libNtve_gf_ActorLastCreated();
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(lv_shieldImpactActor);
    return true;
}

trigger auto_gf_MonitorDeathFleetPing_Trigger = null;
unitgroup auto_gf_MonitorDeathFleetPing_lp_fleet;
unit auto_gf_MonitorDeathFleetPing_lp_escortUnit;
int auto_gf_MonitorDeathFleetPing_lp_pingIndex;

void gf_MonitorDeathFleetPing (unitgroup lp_fleet, unit lp_escortUnit, int lp_pingIndex) {
    auto_gf_MonitorDeathFleetPing_lp_fleet = lp_fleet;
    auto_gf_MonitorDeathFleetPing_lp_escortUnit = lp_escortUnit;
    auto_gf_MonitorDeathFleetPing_lp_pingIndex = lp_pingIndex;

    if (auto_gf_MonitorDeathFleetPing_Trigger == null) {
        auto_gf_MonitorDeathFleetPing_Trigger = TriggerCreate("auto_gf_MonitorDeathFleetPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_MonitorDeathFleetPing_Trigger, false, false);
}

bool auto_gf_MonitorDeathFleetPing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_fleet = auto_gf_MonitorDeathFleetPing_lp_fleet;
    unit lp_escortUnit = auto_gf_MonitorDeathFleetPing_lp_escortUnit;
    int lp_pingIndex = auto_gf_MonitorDeathFleetPing_lp_pingIndex;

    // Implementation
    while ((UnitGroupCount(lp_fleet, c_unitCountAlive) >= 1) && (libVCMI_gf_GameIsOver() == false)) {
        if (((gv_taldarimFleetPing[lp_pingIndex] == c_invalidPingId) || (UnitIsAlive(lp_escortUnit) == false) || (UnitGetOwner(lp_escortUnit) == gv_pLAYER_01_USER) || (UnitGroupCount(lp_fleet, c_unitCountAlive) == 0))) {
            break;
        }
        else {
        }
        PingSetPosition(gv_taldarimFleetPing[lp_pingIndex], UnitGetPosition(lp_escortUnit));
        Wait(0.25, c_timeGame);
    }
    PingDestroy(gv_taldarimFleetPing[lp_pingIndex]);
    gv_taldarimFleetPing[lp_pingIndex] = c_invalidPingId;
    return true;
}

trigger auto_gf_WarpPrismWaveSpawnUnits_Trigger = null;
int auto_gf_WarpPrismWaveSpawnUnits_lp_pingIndex;
unit auto_gf_WarpPrismWaveSpawnUnits_lp_prism;

void gf_WarpPrismWaveSpawnUnits (int lp_pingIndex, unit lp_prism) {
    auto_gf_WarpPrismWaveSpawnUnits_lp_pingIndex = lp_pingIndex;
    auto_gf_WarpPrismWaveSpawnUnits_lp_prism = lp_prism;

    if (auto_gf_WarpPrismWaveSpawnUnits_Trigger == null) {
        auto_gf_WarpPrismWaveSpawnUnits_Trigger = TriggerCreate("auto_gf_WarpPrismWaveSpawnUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpPrismWaveSpawnUnits_Trigger, false, false);
}

bool auto_gf_WarpPrismWaveSpawnUnits_TriggerFunc (bool testConds, bool runActions) {
    int lp_pingIndex = auto_gf_WarpPrismWaveSpawnUnits_lp_pingIndex;
    unit lp_prism = auto_gf_WarpPrismWaveSpawnUnits_lp_prism;

    int auto2B6BA040_n;
    int auto2B6BA040_i;
    int auto70F85CAB_n;
    int auto70F85CAB_i;

    // Variable Declarations
    fixed lv_spawnInterval;
    int lv_spawnCount;
    int lv_spawnWaves;
    fixed lv_spawnWaveInterval;
    int lv_sourcePlayer;
    unit lv_sourceGate;
    point lv_prismPosition;

    // Variable Initialization

    // Implementation
    while (!((UnitOrderCount(lp_prism) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(lp_prism) == false)) {
        return true;
    }
    else {
    }
    lv_prismPosition = UnitGetPosition(lp_prism);
    lv_spawnInterval = libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 0.5, 0.5);
    lv_spawnCount = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    lv_spawnWaves = libLotv_gf_DifficultyValueInt2(3, 3, 6, 8);
    lv_spawnWaveInterval = libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 3.0, 3.0);
    if ((UnitGetOwner(lp_prism) == gv_pLAYER_03_TAL_EAST)) {
        lv_sourceGate = UnitFromId(767);
    }
    else {
        lv_sourceGate = UnitFromId(769);
    }
    auto2B6BA040_n = lv_spawnWaves;
    for (auto2B6BA040_i = 1; auto2B6BA040_i <= auto2B6BA040_n; auto2B6BA040_i += 1) {
        auto70F85CAB_n = lv_spawnCount;
        for (auto70F85CAB_i = 1; auto70F85CAB_i <= auto70F85CAB_n; auto70F85CAB_i += 1) {
            if (((UnitIsAlive(lp_prism) == false) || (UnitGetOwner(lp_prism) == gv_pLAYER_01_USER))) {
                return true;
            }
            else {
            }
            UnitIssueOrder(lv_sourceGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionCircle(lv_prismPosition, 3.0))), c_orderQueueReplace);
            Wait(lv_spawnInterval, c_timeAI);
        }
        UnitGroupLoopBegin(UnitGroup("Zealot", gv_pLAYER_03_TAL_EAST, RegionCircle(lv_prismPosition, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            AISetUnitSuicide(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
        Wait(lv_spawnWaveInterval, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    if (((UnitIsAlive(lp_prism) == false) || (UnitGetOwner(lp_prism) == gv_pLAYER_01_USER))) {
        return true;
    }
    else {
        if ((gv_taldarimFleetPing[lp_pingIndex] != c_invalidPingId)) {
            PingDestroy(gv_taldarimFleetPing[lp_pingIndex]);
            gv_taldarimFleetPing[lp_pingIndex] = c_invalidPingId;
        }
        else {
        }
        UnitIssueOrder(lp_prism, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(lp_prism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(612)), c_orderQueueReplace);
    }
    while (!(((UnitOrderCount(lp_prism) == 0) || (UnitIsAlive(lp_prism) == false) || (libVCMI_gf_GameIsOver() == true)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lp_prism) == true) && (libVCMI_gf_GameIsOver() == false)) {
        UnitRemove(lp_prism);
    }
    else {
    }
    return true;
}

trigger auto_gf_AscendantBehaviour_Trigger = null;
unit auto_gf_AscendantBehaviour_lp_ascendant;

void gf_AscendantBehaviour (unit lp_ascendant) {
    auto_gf_AscendantBehaviour_lp_ascendant = lp_ascendant;

    if (auto_gf_AscendantBehaviour_Trigger == null) {
        auto_gf_AscendantBehaviour_Trigger = TriggerCreate("auto_gf_AscendantBehaviour_TriggerFunc");
    }

    TriggerExecute(auto_gf_AscendantBehaviour_Trigger, false, false);
}

bool auto_gf_AscendantBehaviour_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ascendant = auto_gf_AscendantBehaviour_lp_ascendant;

    int auto7FD73E0C_n;
    int auto7FD73E0C_i;

    // Variable Declarations
    unitgroup lv_enemyTargets;
    unit lv_targetUnit;

    // Variable Initialization
    lv_enemyTargets = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_ascendant) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_enemyTargets = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_ascendant), 11.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) >= 1) && (UnitIsAlive(lp_ascendant) == true)) {
            lv_targetUnit = UnitGroupClosestToPoint(lv_enemyTargets, UnitGetPosition(lp_ascendant));
            UnitIssueOrder(lp_ascendant, OrderTargetingUnit(AbilityCommand("ShrineGuardianAntiGrav", 0), lv_targetUnit), c_orderQueueReplace);
            auto7FD73E0C_n = 9;
            for (auto7FD73E0C_i = 1; auto7FD73E0C_i <= auto7FD73E0C_n; auto7FD73E0C_i += 1) {
                if ((UnitIsAlive(lv_targetUnit) == true) && (UnitIsAlive(lp_ascendant) == true)) {
                    Wait(1.0, c_timeAI);
                }
                else {
                    Wait(1.0, c_timeAI);
                    break;
                }
            }
            Wait(libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 2.0, 2.0), c_timeGame);
        }
        else {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PTaldarim01");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_07_VOID_EAST, AbilityCommand("Charge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_08_VOID_SOUTH, AbilityCommand("Charge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_09_VOID_WEST, AbilityCommand("Charge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_10_VOID_NORTH, AbilityCommand("Charge", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_TAL_NORTH, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_TAL_EAST, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_TAL_SOUTH, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TAL_WEST, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_11_MOTHERSHIPS, "DarkProtoss", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_TAL_NORTH);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_03_TAL_EAST);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_04_TAL_SOUTH);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_05_TAL_WEST);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_07_VOID_EAST);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_08_VOID_SOUTH);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_09_VOID_WEST);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_10_VOID_NORTH);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_TAL_WEST, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_VOIDRAY, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_11_MOTHERSHIPS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupLoopBegin(gv_enemyPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 1, true);
        libNtve_gf_SetAlliance(gv_pLAYER_01_USER, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_06_VOIDRAY, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_11_MOTHERSHIPS, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_Neutral);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_TAL_NORTH, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_TAL_EAST, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_TAL_SOUTH, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_TAL_WEST, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_07_VOID_EAST, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_VOID_SOUTH, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_09_VOID_WEST, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_10_VOID_NORTH, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_11_MOTHERSHIPS, "HeroicShieldCleanUp", 1);
    PlayerSetColorIndex(gv_pLAYER_07_VOID_EAST, 1, true);
    PlayerSetColorIndex(gv_pLAYER_08_VOID_SOUTH, 1, true);
    PlayerSetColorIndex(gv_pLAYER_09_VOID_WEST, 1, true);
    PlayerSetColorIndex(gv_pLAYER_10_VOID_NORTH, 1, true);
    PlayerSetColorIndex(gv_pLAYER_11_MOTHERSHIPS, 1, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 250);
    PlayerGroupLoopBegin(gv_enemyPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    }
    PlayerGroupLoopEnd();
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    gv_terrazineActive = false;
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    gv_shrineNorthUnit = UnitFromId(524);
    gv_shrineSouthUnit = UnitFromId(383);
    gv_shrineEastUnit = UnitFromId(286);
    gv_shrineWestUnit = UnitFromId(441);
    UnitGroupLoopBegin(UnitGroup("TerrazineTempleNESW", gv_pLAYER_02_TAL_NORTH, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_shrineGroup, UnitGroupLoopCurrent());
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "GenericDontDie", UnitGroupLoopCurrent(), 1);
        libVCMI_gf_SetUnitInfoTextCampaign(UnitGroupLoopCurrent(), null, StringExternal("Param/Value/422B529B"), null);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TerrazineTempleNWSE", gv_pLAYER_02_TAL_NORTH, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_shrineGroup, UnitGroupLoopCurrent());
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "GenericDontDie", UnitGroupLoopCurrent(), 1);
        libVCMI_gf_SetUnitInfoTextCampaign(UnitGroupLoopCurrent(), null, StringExternal("Param/Value/C0CFF394"), null);
    }
    UnitGroupLoopEnd();
    gv_voidRiftNorth = UnitFromId(29);
    gv_voidRiftSouth = UnitFromId(668);
    gv_voidRiftEast = UnitFromId(30);
    gv_voidRiftWest = UnitFromId(262);
    UnitGroupLoopBegin(UnitGroup("VoidRiftUnselectable", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_voidRiftGroup, UnitGroupLoopCurrent());
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    AIToggleBulliesInRegion(gv_pLAYER_11_MOTHERSHIPS, RegionFromId(6), false);
    AIToggleBulliesInRegion(gv_pLAYER_11_MOTHERSHIPS, RegionFromId(7), false);
    UnitGroupAddUnitGroup(gv_mothershipEscort[1], UnitGroup(null, gv_pLAYER_11_MOTHERSHIPS, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_mothershipEscort[2], UnitGroup(null, gv_pLAYER_11_MOTHERSHIPS, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gv_mothership[1] = UnitFromId(647);
    gv_mothership[2] = UnitFromId(780);
    IntLoopBegin(1, gv_mOTHERSHIP_COUNT);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libVCMI_gf_SetUnitInfoTextCampaign(gv_mothership[IntLoopCurrent()], null, StringExternal("Param/Value/1C2D664B"), null);
    }
    IntLoopEnd();
    gv_ascendantGroup = UnitGroup("ShrineGuardian", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(gv_ascendantGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
    }
    UnitGroupLoopEnd();
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(2525), null, StringExternal("Param/Value/DFA99B75"), StringExternal("Param/Value/5C4B4B0D"));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_TAL_SOUTH, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PTaldarim01_Music_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_cloudRegion;
    string lv_doodadType;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    gf_SendActorMessagetoDoodadsinRegion("SetOpacity", "TerazineVaporCloud", RegionEntireMap());
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(16));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(13));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(2));
    libLbty_gf_AutoRevealRegion(RegionFromId(14), RegionFromId(14), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(11), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(1), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(12), RegionFromId(12), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(18), RegionFromId(18), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(19), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(29), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(20), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(31), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(23), RegionFromId(30), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(24), RegionFromId(25), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_terrazineInitialDelay = 60.0;
    gv_terrazineActiveDuration = 150.0;
    gv_terrazineInactiveDuration = libLotv_gf_DifficultyValueInt2(270, 270, 240, 240);
    IntLoopBegin(1, gv_mOTHERSHIP_COUNT);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitSetPropertyFixed(gv_mothership[IntLoopCurrent()], c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(600.0, 600.0, 800.0, 1000.0));
        UnitSetPropertyFixed(gv_mothership[IntLoopCurrent()], c_unitPropShieldsMax, libLotv_gf_DifficultyValueFixed2(300.0, 300.0, 400.0, 500.0));
        UnitSetPropertyFixed(gv_mothership[IntLoopCurrent()], c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_mothership[IntLoopCurrent()], c_unitPropShieldsPercent, 100.0);
    }
    IntLoopEnd();
    PlayerGroupLoopBegin(gv_enemyPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Charge", 0), true);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShieldWall", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "PunisherGrenades", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleAndShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleAndShipArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        }
        else {
        }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CarrierLaunchSpeedUpgrade", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ClusterWarheads", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ChitinousPlating", 1);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("TerrazineFog");
    libVCMI_gf_AddMissionTipCampaign("VoidRay");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Tempest", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDominatorVoid", false, gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/608E8129"), null, RegionGetCenter(RegionFromId(16)));
    libVCMI_gf_StartingWorkersAutoHarvest(RegionFromId(33), null);
    TriggerExecute(gt_MothershipControllerBottom, true, false);
    TriggerExecute(gt_MothershipControllerTop, true, false);
    TriggerExecute(gt_FirstTerrazineCycle, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSurvivetheFirstNightCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TransmissionFirstTerrazineQ, true, true);
    TriggerExecute(gt_TipReadyQ, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_VoidRayIntro, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Terrazine Cycle
//--------------------------------------------------------------------------------------------------
bool gt_FirstTerrazineCycle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_terrazineTimer, gv_terrazineInitialDelay, false, c_timeAI);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_CreateTerrazineGauge, true, false);
    libNtve_gf_WaitForTimer(gv_terrazineTimer, 5.0, false);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Slayn_TerrazineGeyser", RegionEntireMap());
    gf_SendActorMessagetoDoodadsinRegion(gv_opacityCloudOn, "TerazineVaporCloud", RegionEntireMap());
    GameSetLighting(gv_lightNight, 5.0);
    SoundPlayForPlayer(SoundLink("Tal01_FogRollIn", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_KorhalPlatform", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PTaldarim01_Music_Terrazine", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libNtve_gf_WaitForTimer(gv_terrazineTimer, 2.5, false);
    UnitGroupLoopBegin(gv_voidRiftGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_WaitForTimer(gv_terrazineTimer, 0.0, false);
    UnitGroupLoopBegin(gv_ascendantGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal ChannelStart");
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_terrazineActive = true;
    gv_terrazineNightCount += 1;
    TriggerExecute(gt_TransmissionFirstFogQ, true, false);
    TriggerExecute(gt_TerrazineCycle, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstTerrazineCycle_Init () {
    gt_FirstTerrazineCycle = TriggerCreate("gt_FirstTerrazineCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Terrazine Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstTerrazineQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstTerrazineQ_Init () {
    gt_TransmissionFirstTerrazineQ = TriggerCreate("gt_TransmissionFirstTerrazineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Immortal J'oh Found Q
//--------------------------------------------------------------------------------------------------
bool gt_ImmortalJohFoundQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(UnitFromId(2525), "pMission_Purifier02|Line00136", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImmortalJohFoundQ_Init () {
    gt_ImmortalJohFoundQ = TriggerCreate("gt_ImmortalJohFoundQ_Func");
    TriggerAddEventTimePeriodic(gt_ImmortalJohFoundQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Ray Intro
//--------------------------------------------------------------------------------------------------
bool gt_VoidRayIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidRay01;
    unit lv_voidRay02;
    int lv_voidRayPing1;
    int lv_voidRayPing2;

    // Variable Initialization
    lv_voidRayPing1 = c_invalidPingId;
    lv_voidRayPing2 = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_EnableCampaignTechUnit(true, "Void Ray", gv_pLAYER_01_USER);
    TriggerExecute(gt_TransmissionVoidRayIntroQ, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidRay", 0, gv_pLAYER_01_USER, PointFromId(47));
    UnitSetOwner(UnitLastCreated(), gv_pLAYER_06_VOIDRAY, true);
    lv_voidRay01 = UnitLastCreated();
    UnitSetHeight(lv_voidRay01, 8.0, 0.0);
    UnitSetHeight(lv_voidRay01, 3.75, 3.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidRay", 0, gv_pLAYER_01_USER, PointFromId(35));
    UnitSetOwner(UnitLastCreated(), gv_pLAYER_06_VOIDRAY, true);
    lv_voidRay02 = UnitLastCreated();
    UnitSetHeight(lv_voidRay02, 8.0, 0.0);
    UnitSetHeight(lv_voidRay02, 3.75, 3.0);
    UnitIssueOrder(lv_voidRay01, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(944)), c_orderQueueReplace);
    UnitIssueOrder(lv_voidRay02, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(945)), c_orderQueueReplace);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_voidRay01), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetUnit(PingLastCreated(), lv_voidRay01);
    lv_voidRayPing1 = PingLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_voidRay02), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetUnit(PingLastCreated(), lv_voidRay02);
    lv_voidRayPing2 = PingLastCreated();
    while (!(((DistanceBetweenPoints(UnitGetPosition(lv_voidRay01), PointFromId(944)) <= 1.0) || (DistanceBetweenPoints(UnitGetPosition(lv_voidRay02), PointFromId(945)) <= 1.0)))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_voidRayPing1);
    PingDestroy(lv_voidRayPing2);
    libNtve_gf_RescueUnit(lv_voidRay01, gv_pLAYER_01_USER, true);
    libNtve_gf_RescueUnit(lv_voidRay02, gv_pLAYER_01_USER, true);
    UnitIssueOrder(lv_voidRay01, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(944)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_voidRay02, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(945)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidRayIntro_Init () {
    gt_VoidRayIntro = TriggerCreate("gt_VoidRayIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Ray Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidRayIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00079", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1) && (gv_voidrayOrderIssued == false)) {
        UnitGroupAddUnitGroup(gv_stargateGroup, UnitGroup("Stargate", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_stargateGroup, UnitGroup("StargateWarp", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupLoopBegin(gv_stargateGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/A118C36A"), UnitGroupLoopCurrent(), "Ref_Center");
            libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(UnitGroupLoopCurrent(), 1, TextTagLastCreated());
        }
        UnitGroupLoopEnd();
        if ((UnitGroupCount(gv_stargateGroup, c_unitCountAlive) > 0)) {
            TriggerEnable(gt_StargateSelectedCleanup, true);
            TriggerEnable(gt_StargateDiesCleanup, true);
        }
        else {
        }
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("StargateTrain", 4), true);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("StargateWarpTrain", 4), true);
    }
    else {
    }
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidRayIntroQ_Init () {
    gt_TransmissionVoidRayIntroQ = TriggerCreate("gt_TransmissionVoidRayIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stargate Selected Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_StargateSelectedCleanup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_stargateGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_StargateDiesCleanup, false);
    UnitGroupLoopBegin(gv_stargateGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(UnitGroupLoopCurrent(), 1));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StargateSelectedCleanup_Init () {
    gt_StargateSelectedCleanup = TriggerCreate("gt_StargateSelectedCleanup_Func");
    TriggerEnable(gt_StargateSelectedCleanup, false);
    TriggerAddEventUnitSelected(gt_StargateSelectedCleanup, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stargate Dies Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_StargateDiesCleanup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_stargateGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    if ((libNtve_gf_UnitGroupIsDead(gv_stargateGroup) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_StargateSelectedCleanup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StargateDiesCleanup_Init () {
    gt_StargateDiesCleanup = TriggerCreate("gt_StargateDiesCleanup_Func");
    TriggerEnable(gt_StargateDiesCleanup, false);
    TriggerAddEventUnitDied(gt_StargateDiesCleanup, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Ray Order Issued
//--------------------------------------------------------------------------------------------------
bool gt_VoidRayOrderIssued_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_StargateSelectedCleanup, false);
    TriggerEnable(gt_StargateDiesCleanup, false);
    gv_voidrayOrderIssued = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("StargateTrain", 4), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("StargateWarpTrain", 4), false);
    UnitGroupLoopBegin(gv_stargateGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(UnitGroupLoopCurrent(), 1));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidRayOrderIssued_Init () {
    gt_VoidRayOrderIssued = TriggerCreate("gt_VoidRayOrderIssued_Func");
    TriggerAddEventUnitOrder(gt_VoidRayOrderIssued, null, AbilityCommand("StargateTrain", 4));
    TriggerAddEventUnitOrder(gt_VoidRayOrderIssued, null, AbilityCommand("StargateWarpTrain", 4));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Cycle
//--------------------------------------------------------------------------------------------------
bool gt_TerrazineCycle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        TimerStart(gv_terrazineTimer, gv_terrazineActiveDuration, false, c_timeAI);
        libNtve_gf_WaitForTimer(gv_terrazineTimer, 5.0, false);
        libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Slayn_TerrazineGeyser", RegionEntireMap());
        gf_SendActorMessagetoDoodadsinRegion("SetOpacity 0.000000 5.000000", "TerazineVaporCloud", RegionEntireMap());
        GameSetLighting(gv_lightDay, 5.0);
        SoundPlayForPlayer(SoundLink("Tal01_FogRollIn", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
        libNtve_gf_WaitForTimer(gv_terrazineTimer, 2.5, false);
        UnitGroupLoopBegin(gv_voidRiftGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
        UnitGroupLoopEnd();
        libNtve_gf_WaitForTimer(gv_terrazineTimer, 0.0, false);
        UnitGroupLoopBegin(gv_ascendantGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal ChannelEnd");
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_KorhalPlatform", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
        if ((gv_terrazineNightCount == 1)) {
            TriggerExecute(gt_FirstNightSurvived, true, false);
            TriggerExecute(gt_BonusObjectiveIntro, true, false);
        }
        else {
            TriggerExecute(gt_TransmissionTerrazineFogRecedesQ, true, false);
        }
        gv_terrazineActive = false;
        PlayerGroupLoopBegin(gv_enemyPlayerGroup);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((UnitHasBehavior2(UnitGroupLoopCurrent(), "TerrazineShadow") == true) || (UnitHasBehavior2(UnitGroupLoopCurrent(), "ShadowManifestation") == true))) {
                    UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "SolarCombustion", PlayerGroupLoopCurrent(), 1);
                }
                else {
                }
            }
            UnitGroupLoopEnd();
        }
        PlayerGroupLoopEnd();
        TriggerExecute(gt_SetAIUpgradeLevel, true, false);
        TriggerExecute(gt_TaldarimDayWaves, true, false);
        TimerStart(gv_terrazineTimer, gv_terrazineInactiveDuration, false, c_timeAI);
        libNtve_gf_WaitForTimer(gv_terrazineTimer, 30.0, false);
        if ((gv_shrinesDestroyed < 4)) {
            TriggerExecute(gt_TransmissionTerrazineFogSoonQ, true, false);
        }
        else {
        }
        libNtve_gf_WaitForTimer(gv_terrazineTimer, 5.0, false);
        libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Slayn_TerrazineGeyser", RegionEntireMap());
        gf_SendActorMessagetoDoodadsinRegion(gv_opacityCloudOn, "TerazineVaporCloud", RegionEntireMap());
        GameSetLighting(gv_lightNight, 5.0);
        SoundPlayForPlayer(SoundLink("Tal01_FogRollIn", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Taldarim01_TerrazineFog_Loop", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PTaldarim01_Music_Terrazine", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        libNtve_gf_WaitForTimer(gv_terrazineTimer, 2.5, false);
        UnitGroupLoopBegin(gv_voidRiftGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
        libNtve_gf_WaitForTimer(gv_terrazineTimer, 0.0, false);
        UnitGroupLoopBegin(gv_ascendantGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal ChannelStart");
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        gv_terrazineActive = true;
        gv_terrazineNightCount += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrazineCycle_Init () {
    gt_TerrazineCycle = TriggerCreate("gt_TerrazineCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Fog Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstFogQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstFogQ_Init () {
    gt_TransmissionFirstFogQ = TriggerCreate("gt_TransmissionFirstFogQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Terrazine Gauge
//--------------------------------------------------------------------------------------------------
bool gt_CreateTerrazineGauge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;
    text lv_label;
    int lv_maxProgress;
    int lv_currentProgress;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_title = StringExternal("Param/Value/FB406506");
    TextExpressionSetToken("Param/Expression/77903BB8", "A", FormatDuration(FixedToInt(gv_terrazineInactiveDuration)));
    lv_label = TextExpressionAssemble("Param/Expression/77903BB8");
    lv_maxProgress = FixedToInt(gv_terrazineInactiveDuration);
    lv_currentProgress = FixedToInt(TimerGetRemaining(gv_terrazineTimer));
    libVCUI_gf_DisplayProgressBar(lv_title, 0, lv_maxProgress);
    libVCUI_gf_SetProgressBarColor(Color(50.20, 0.00, 100.00));
    libVCUI_gf_SetProgressBarLabel(lv_label);
    libVCUI_gf_SetProgressBarProgress(lv_currentProgress);
    TriggerExecute(gt_UpdateTerrazineGauge, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTerrazineGauge_Init () {
    gt_CreateTerrazineGauge = TriggerCreate("gt_CreateTerrazineGauge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Terrazine Gauge
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTerrazineGauge_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((gv_terrazineActive == true)) {
            TextExpressionSetToken("Param/Expression/09965B88", "A", FormatDuration(FixedToInt(TimerGetRemaining(gv_terrazineTimer))));
            libVCUI_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/09965B88"));
            libVCUI_gf_SetProgressBarValueRange(0, FixedToInt(gv_terrazineActiveDuration));
            libVCUI_gf_SetProgressBarProgress(FixedToInt(TimerGetRemaining(gv_terrazineTimer)));
        }
        else {
            if ((gv_terrazineNightCount == 0)) {
                TextExpressionSetToken("Param/Expression/F313BE02", "A", FormatDuration(FixedToInt(TimerGetRemaining(gv_terrazineTimer))));
                libVCUI_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/F313BE02"));
                libVCUI_gf_SetProgressBarValueRange(0, FixedToInt(gv_terrazineInactiveDuration));
                libVCUI_gf_SetProgressBarProgress(FixedToInt((TimerGetElapsed(gv_terrazineTimer) + (gv_terrazineInactiveDuration - gv_terrazineInitialDelay))));
            }
            else {
                TextExpressionSetToken("Param/Expression/A57C104A", "A", FormatDuration(FixedToInt(TimerGetRemaining(gv_terrazineTimer))));
                libVCUI_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/A57C104A"));
                libVCUI_gf_SetProgressBarValueRange(0, FixedToInt(gv_terrazineInactiveDuration));
                libVCUI_gf_SetProgressBarProgress(FixedToInt(TimerGetElapsed(gv_terrazineTimer)));
            }
        }
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTerrazineGauge_Init () {
    gt_UpdateTerrazineGauge = TriggerCreate("gt_UpdateTerrazineGauge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Terrazine Fog Soon Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTerrazineFogSoonQ_Func (bool testConds, bool runActions) {
    int auto1F0C081A_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1F0C081A_val = RandomInt(1, 3);
    if (auto1F0C081A_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto1F0C081A_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00117", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto1F0C081A_val == 3) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTerrazineFogSoonQ_Init () {
    gt_TransmissionTerrazineFogSoonQ = TriggerCreate("gt_TransmissionTerrazineFogSoonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Terrazine Fog Recedes Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTerrazineFogRecedesQ_Func (bool testConds, bool runActions) {
    int auto6B3FF2DF_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B3FF2DF_val = RandomInt(1, 3);
    if (auto6B3FF2DF_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto6B3FF2DF_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto6B3FF2DF_val == 3) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00121", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTerrazineFogRecedesQ_Init () {
    gt_TransmissionTerrazineFogRecedesQ = TriggerCreate("gt_TransmissionTerrazineFogRecedesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Night Survived
//--------------------------------------------------------------------------------------------------
bool gt_FirstNightSurvived_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurvivetheFirstNightComplete, true, true);
    ObjectiveShow(gv_objectiveDestroyZergBase5, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveDestroyShrinesCreate, true, false);
    UnitGroupLoopBegin(UnitGroup("TerrazineTempleNESW", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(UnitGroupLoopCurrent()), StringExternal("Param/Value/492257DF"));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        libHots_gf_StorePingForUnit(UnitGroupLoopCurrent(), 1, PingLastCreated());
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 7.0), 0.0625, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TerrazineTempleNWSE", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(UnitGroupLoopCurrent()), StringExternal("Param/Value/424E56C1"));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        libHots_gf_StorePingForUnit(UnitGroupLoopCurrent(), 1, PingLastCreated());
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 7.0), 0.0625, false);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TransmissionDestroytheShrinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstNightSurvived_Init () {
    gt_FirstNightSurvived = TriggerCreate("gt_FirstNightSurvived_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Destroy the Shrines Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDestroytheShrinesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00088", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00089", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDestroytheShrinesQ_Init () {
    gt_TransmissionDestroytheShrinesQ = TriggerCreate("gt_TransmissionDestroytheShrinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Shadow FX
//--------------------------------------------------------------------------------------------------
bool gt_WaveShadowFX_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_07_VOID_EAST) || (UnitGetOwner(EventUnit()) == gv_pLAYER_08_VOID_SOUTH) || (UnitGetOwner(EventUnit()) == gv_pLAYER_09_VOID_WEST) || (UnitGetOwner(EventUnit()) == gv_pLAYER_10_VOID_NORTH)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0)) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "VoidRiftUnselectable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ApplyShadowManifestationFX(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveShadowFX_Init () {
    gt_WaveShadowFX = TriggerCreate("gt_WaveShadowFX_Func");
    TriggerAddEventUnitRegion(gt_WaveShadowFX, null, RegionPlayableMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Intro
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_mothershipEngaged[1] == true) || (gv_mothershipEngaged[2] == true) || (UnitIsAlive(gv_mothership[1]) == false) || (UnitIsAlive(gv_mothership[2]) == false))) {
        gv_bonusObjectiveActivated = true;
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyShipsCreate, true, true);
    }
    else {
        Wait(60.0, c_timeGame);
        if ((gv_bonusObjectiveActivated == false)) {
            gv_bonusObjectiveActivated = true;
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerExecute(gt_ObjectiveDestroyShipsCreate, true, true);
        }
        else {
            return true;
        }
    }
    if (((UnitIsAlive(gv_mothership[1]) == true) || (UnitIsAlive(gv_mothership[2]) == true))) {
        IntLoopBegin(1, gv_mOTHERSHIP_COUNT);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((UnitIsAlive(gv_mothership[IntLoopCurrent()]) == true)) {
                libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_mothership[IntLoopCurrent()]), StringExternal("Param/Value/2DD7D5C6"));
                libHots_gf_StorePingForUnit(gv_mothership[IntLoopCurrent()], 1, PingLastCreated());
                PingSetUnit(PingLastCreated(), gv_mothership[IntLoopCurrent()]);
            }
            else {
            }
        }
        IntLoopEnd();
        TriggerExecute(gt_TransmissionBonusObjectiveIntroQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveIntro_Init () {
    gt_BonusObjectiveIntro = TriggerCreate("gt_BonusObjectiveIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Engaged
//--------------------------------------------------------------------------------------------------
bool gt_MothershipEngaged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mothershipEngaged[1] == false)) {
        UnitGroupLoopBegin(gv_mothershipEscort[1]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0)) {
                gv_mothershipEngaged[1] = true;
                UnitGroupIssueOrder(gv_mothershipEscort[1], OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupLoopCurrent())), c_orderQueueReplace);
                AISetGroupScriptControlled(gv_mothershipEscort[1], false);
                break;
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((gv_mothershipEngaged[2] == false)) {
        UnitGroupLoopBegin(gv_mothershipEscort[2]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0)) {
                gv_mothershipEngaged[2] = true;
                UnitGroupIssueOrder(gv_mothershipEscort[2], OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupLoopCurrent())), c_orderQueueReplace);
                AISetGroupScriptControlled(gv_mothershipEscort[2], false);
                break;
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if (((gv_mothershipEngaged[1] == true) || (gv_mothershipEngaged[2] == true))) {
        TriggerExecute(gt_BonusObjectiveIntro, true, false);
    }
    else {
    }
    if ((gv_mothershipEngaged[1] == true) && (gv_mothershipEngaged[2] == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipEngaged_Init () {
    gt_MothershipEngaged = TriggerCreate("gt_MothershipEngaged_Func");
    TriggerAddEventTimePeriodic(gt_MothershipEngaged, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Controller Bottom
//--------------------------------------------------------------------------------------------------
bool gt_MothershipControllerBottom_Func (bool testConds, bool runActions) {
    int auto99363702_n;
    int auto99363702_i;
    int auto983ACE3F_n;
    int auto983ACE3F_i;
    int auto02FF94DE_n;
    int auto02FF94DE_i;
    int auto8C307F07_n;
    int auto8C307F07_i;

    // Variable Declarations
    fixed lv_reinforceThreshold;
    unitgroup lv_fleetGroup;
    unitgroup lv_enemyGroup14;
    fixed lv_referenceAngle;

    // Variable Initialization
    lv_fleetGroup = UnitGroupEmpty();
    lv_enemyGroup14 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reinforceThreshold = libLotv_gf_DifficultyValueFixed2(65.0, 65.0, 80.0, 90.0);
    UnitGroupAddUnitGroup(lv_fleetGroup, gv_mothershipEscort[1]);
    while ((UnitIsAlive(gv_mothership[1]) == true)) {
        if ((gv_mothershipEngaged[1] == true)) {
            lv_enemyGroup14 = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_mothership[1]), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupLoopBegin(lv_fleetGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((AIIsScriptControlled(UnitGroupLoopCurrent()) == true)) {
                    AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
                }
                else {
                }
            }
            UnitGroupLoopEnd();
            if ((libNtve_gf_UnitGroupIsDead(lv_enemyGroup14) == false)) {
                UnitGroupLoopBegin(lv_fleetGroup);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup14, UnitGetPosition(gv_mothership[1])))));
                }
                UnitGroupLoopEnd();
            }
            else {
                UnitGroupLoopBegin(lv_fleetGroup);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_LeashUnitShieldRestore(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                gv_mothershipEngaged[1] = false;
                TriggerEnable(gt_MothershipEngaged, true);
            }
            if ((UnitIsAlive(gv_mothership[1]) == true) && (UnitGetPropertyFixed(gv_mothership[1], c_unitPropVitalityPercent, c_unitPropCurrent) < lv_reinforceThreshold)) {
                lv_reinforceThreshold = 0.0;
                lv_referenceAngle = UnitGetFacing(gv_mothership[1]);
                auto99363702_n = libLotv_gf_DifficultyValueInt2(2, 2, 1, 2);
                for (auto99363702_i = 1; auto99363702_i <= auto99363702_n; auto99363702_i += 1) {
                    UnitIssueOrder(gv_mothership[1], OrderTargetingPoint(AbilityCommand("FlagshipWarpInPhoenix", 0), PointWithOffsetPolar(UnitGetPosition(gv_mothership[1]), 3.0, ModF((lv_referenceAngle + 90.0), 360.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeAI);
                }
                auto983ACE3F_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
                for (auto983ACE3F_i = 1; auto983ACE3F_i <= auto983ACE3F_n; auto983ACE3F_i += 1) {
                    UnitIssueOrder(gv_mothership[1], OrderTargetingPoint(AbilityCommand("FlagshipWarpInScout", 0), PointWithOffsetPolar(UnitGetPosition(gv_mothership[1]), 3.0, ModF((lv_referenceAngle + 90.0), 360.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeAI);
                }
                auto02FF94DE_n = libLotv_gf_DifficultyValueInt2(2, 2, 1, 2);
                for (auto02FF94DE_i = 1; auto02FF94DE_i <= auto02FF94DE_n; auto02FF94DE_i += 1) {
                    UnitIssueOrder(gv_mothership[1], OrderTargetingPoint(AbilityCommand("FlagshipWarpInPhoenix", 0), PointWithOffsetPolar(UnitGetPosition(gv_mothership[1]), 3.0, ModF((lv_referenceAngle + 270.0), 360.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeAI);
                }
                auto8C307F07_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
                for (auto8C307F07_i = 1; auto8C307F07_i <= auto8C307F07_n; auto8C307F07_i += 1) {
                    UnitIssueOrder(gv_mothership[1], OrderTargetingPoint(AbilityCommand("FlagshipWarpInScout", 0), PointWithOffsetPolar(UnitGetPosition(gv_mothership[1]), 3.0, ModF((lv_referenceAngle + 270.0), 360.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeAI);
                }
                Wait(0.5, c_timeGame);
                AISetUnitScriptControlled(gv_mothership[1], false);
                Wait(0.5, c_timeGame);
                libNtve_gf_AICast(gv_mothership[1], Order(AbilityCommand("FlagshipTimeBomb", 0)));
            }
            else {
            }
        }
        else {
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipControllerBottom_Init () {
    gt_MothershipControllerBottom = TriggerCreate("gt_MothershipControllerBottom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Controller Top
//--------------------------------------------------------------------------------------------------
bool gt_MothershipControllerTop_Func (bool testConds, bool runActions) {
    int autoECA18F03_n;
    int autoECA18F03_i;
    int autoBABDB8DD_n;
    int autoBABDB8DD_i;
    int auto107EC763_n;
    int auto107EC763_i;
    int auto366B39FF_n;
    int auto366B39FF_i;

    // Variable Declarations
    fixed lv_reinforceThreshold;
    unitgroup lv_fleetGroup;
    unitgroup lv_enemyGroup14;
    fixed lv_referenceAngle;

    // Variable Initialization
    lv_fleetGroup = UnitGroupEmpty();
    lv_enemyGroup14 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reinforceThreshold = libLotv_gf_DifficultyValueFixed2(65.0, 65.0, 80.0, 90.0);
    UnitGroupAddUnitGroup(lv_fleetGroup, gv_mothershipEscort[2]);
    while ((UnitIsAlive(gv_mothership[2]) == true)) {
        if ((gv_mothershipEngaged[2] == true)) {
            lv_enemyGroup14 = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_mothership[2]), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupLoopBegin(lv_fleetGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((AIIsScriptControlled(UnitGroupLoopCurrent()) == true)) {
                    AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
                }
                else {
                }
            }
            UnitGroupLoopEnd();
            if ((libNtve_gf_UnitGroupIsDead(lv_enemyGroup14) == false)) {
                UnitGroupLoopBegin(lv_fleetGroup);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup14, UnitGetPosition(gv_mothership[2])))));
                }
                UnitGroupLoopEnd();
            }
            else {
                UnitGroupLoopBegin(lv_fleetGroup);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_LeashUnitShieldRestore(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                gv_mothershipEngaged[2] = false;
                TriggerEnable(gt_MothershipEngaged, true);
            }
            if ((UnitIsAlive(gv_mothership[2]) == true) && (UnitGetPropertyFixed(gv_mothership[2], c_unitPropVitalityPercent, c_unitPropCurrent) < lv_reinforceThreshold)) {
                lv_reinforceThreshold = 0.0;
                lv_referenceAngle = UnitGetFacing(gv_mothership[2]);
                autoECA18F03_n = libLotv_gf_DifficultyValueInt2(2, 2, 1, 2);
                for (autoECA18F03_i = 1; autoECA18F03_i <= autoECA18F03_n; autoECA18F03_i += 1) {
                    UnitIssueOrder(gv_mothership[2], OrderTargetingPoint(AbilityCommand("FlagshipWarpInPhoenix", 0), PointWithOffsetPolar(UnitGetPosition(gv_mothership[2]), 3.0, ModF((lv_referenceAngle + 90.0), 360.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeAI);
                }
                autoBABDB8DD_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
                for (autoBABDB8DD_i = 1; autoBABDB8DD_i <= autoBABDB8DD_n; autoBABDB8DD_i += 1) {
                    UnitIssueOrder(gv_mothership[2], OrderTargetingPoint(AbilityCommand("FlagshipWarpInScout", 0), PointWithOffsetPolar(UnitGetPosition(gv_mothership[2]), 3.0, ModF((lv_referenceAngle + 90.0), 360.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeAI);
                }
                auto107EC763_n = libLotv_gf_DifficultyValueInt2(2, 2, 1, 2);
                for (auto107EC763_i = 1; auto107EC763_i <= auto107EC763_n; auto107EC763_i += 1) {
                    UnitIssueOrder(gv_mothership[2], OrderTargetingPoint(AbilityCommand("FlagshipWarpInPhoenix", 0), PointWithOffsetPolar(UnitGetPosition(gv_mothership[2]), 3.0, ModF((lv_referenceAngle + 270.0), 360.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeAI);
                }
                auto366B39FF_n = libLotv_gf_DifficultyValueInt2(0, 0, 1, 2);
                for (auto366B39FF_i = 1; auto366B39FF_i <= auto366B39FF_n; auto366B39FF_i += 1) {
                    UnitIssueOrder(gv_mothership[2], OrderTargetingPoint(AbilityCommand("FlagshipWarpInScout", 0), PointWithOffsetPolar(UnitGetPosition(gv_mothership[2]), 3.0, ModF((lv_referenceAngle + 270.0), 360.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeAI);
                }
                Wait(0.5, c_timeGame);
                AISetUnitScriptControlled(gv_mothership[2], false);
                Wait(0.5, c_timeGame);
                libNtve_gf_AICast(gv_mothership[2], Order(AbilityCommand("FlagshipCloak", 0)));
            }
            else {
            }
        }
        else {
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipControllerTop_Init () {
    gt_MothershipControllerTop = TriggerCreate("gt_MothershipControllerTop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_MothershipDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mothershipsDestroyed += 1;
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    libNtve_gf_CreateUnitsAtPoint2(1, "RawSolarite", 0, 0, UnitGetPosition(EventUnit()));
    TriggerExecute(gt_ObjectiveDestroyShipsUpdate, true, false);
    if ((gv_mothershipsDestroyed >= gv_mOTHERSHIP_COUNT)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyShipsComplete, true, true);
        TriggerExecute(gt_TransmissionBonusObjectiveUpdateQ, true, false);
        TriggerExecute(gt_TransmissionBonusObjectiveCompleteQ, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionBonusObjectiveUpdateQ, true, false);
    }
    Wait(2.0, c_timeAI);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ObjectiveCollectionBeam", 0, 1);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(UnitLastCreated()), "PTaldarim01Bonus01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipDestroyed_Init () {
    gt_MothershipDestroyed = TriggerCreate("gt_MothershipDestroyed_Func");
    TriggerAddEventUnitDied(gt_MothershipDestroyed, UnitRefFromVariable("gv_mothership[1]"));
    TriggerAddEventUnitDied(gt_MothershipDestroyed, UnitRefFromVariable("gv_mothership[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bonus Objective Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveIntroQ_Init () {
    gt_TransmissionBonusObjectiveIntroQ = TriggerCreate("gt_TransmissionBonusObjectiveIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bonus Objective Update Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveUpdateQ_Func (bool testConds, bool runActions) {
    int auto3E8B3872_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3E8B3872_val = gv_mothershipsDestroyed;
    if (auto3E8B3872_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00099", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto3E8B3872_val == 2) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00106", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveUpdateQ_Init () {
    gt_TransmissionBonusObjectiveUpdateQ = TriggerCreate("gt_TransmissionBonusObjectiveUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bonus Objective Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveCompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00101", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveCompleteQ_Init () {
    gt_TransmissionBonusObjectiveCompleteQ = TriggerCreate("gt_TransmissionBonusObjectiveCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine Attacked
//--------------------------------------------------------------------------------------------------
bool gt_ShrineAttacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == UnitFromId(524)) && (gv_northShrineAttacked == false)) {
        gv_northShrineAttacked = true;
        TriggerExecute(gt_TransmissionShrineAttackedQ, true, false);
        Wait(90.0, c_timeAI);
        gv_northShrineAttacked = false;
    }
    else if ((EventUnit() == UnitFromId(286)) && (gv_eastShrineAttacked == false)) {
        gv_eastShrineAttacked = true;
        TriggerExecute(gt_TransmissionShrineAttackedQ, true, false);
        Wait(90.0, c_timeAI);
        gv_eastShrineAttacked = false;
    }
    else if ((EventUnit() == UnitFromId(383)) && (gv_southShrineAttacked == false)) {
        gv_southShrineAttacked = true;
        TriggerExecute(gt_TransmissionShrineAttackedQ, true, false);
        Wait(90.0, c_timeAI);
        gv_southShrineAttacked = false;
    }
    else if ((EventUnit() == UnitFromId(441)) && (gv_westShrineAttacked == false)) {
        gv_westShrineAttacked = true;
        TriggerExecute(gt_TransmissionShrineAttackedQ, true, false);
        Wait(90.0, c_timeAI);
        gv_westShrineAttacked = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShrineAttacked_Init () {
    gt_ShrineAttacked = TriggerCreate("gt_ShrineAttacked_Func");
    TriggerAddEventUnitDamaged(gt_ShrineAttacked, UnitRefFromUnit(UnitFromId(524)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_ShrineAttacked, UnitRefFromUnit(UnitFromId(286)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_ShrineAttacked, UnitRefFromUnit(UnitFromId(383)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_ShrineAttacked, UnitRefFromUnit(UnitFromId(441)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shrine Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShrineAttackedQ_Func (bool testConds, bool runActions) {
    int autoDF22EBB6_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_shrineAttackedTransmission >= 4)) {
        gv_shrineAttackedTransmission = 1;
    }
    else {
        gv_shrineAttackedTransmission += 1;
    }
    autoDF22EBB6_val = gv_shrineAttackedTransmission;
    if (autoDF22EBB6_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00136", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoDF22EBB6_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00137", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoDF22EBB6_val == 3) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00138", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoDF22EBB6_val == 4) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00139", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00139", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShrineAttackedQ_Init () {
    gt_TransmissionShrineAttackedQ = TriggerCreate("gt_TransmissionShrineAttackedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ShrineDestroyed_Func (bool testConds, bool runActions) {
    unit auto7B42AC61_val;

    // Variable Declarations
    unit lv_ascendant;
    unit lv_shrine;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_shrinesDestroyed += 1;
    if ((gv_shrinesDestroyed <= 3)) {
        UnitKill(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    }
    else {
    }
    Wait(0.0625, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    PingDestroy(libHots_gf_PingStoredForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1));
    if ((gv_shrinesDestroyed == 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_DefeatBaseDead, false);
    }
    else {
    }
    if ((gv_terrazineActive == true)) {
        gv_foggyShrineKills += 1;
        if ((gv_foggyShrineKills >= 1)) {
            TriggerExecute(gt_AchievementShrinesKilledDuringFog, true, false);
        }
        else {
        }
    }
    else {
    }
    TriggerExecute(gt_ShrineReinforcements, true, false);
    TriggerExecute(gt_ObjectiveDestroyShrinesUpdate, true, false);
    if ((gv_shrinesDestroyed == 4)) {
        gv_finalShrineLocation = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
        gv_finalShrine = EventPlayerEffectUsedUnit(c_effectUnitCaster);
        UnitSetState(UnitGroupUnit(gv_ascendantGroup, 1), c_unitStateStunned, true);
        UnitSetState(gv_finalShrine, c_unitStateTargetable, false);
        UnitSetState(gv_finalShrine, c_unitStateInvulnerable, true);
        TriggerExecute(gt_VictorySequence, true, false);
    }
    else {
        auto7B42AC61_val = EventPlayerEffectUsedUnit(c_effectUnitCaster);
        if (auto7B42AC61_val == gv_shrineNorthUnit) {
            lv_ascendant = UnitFromId(147);
        }
        else if (auto7B42AC61_val == gv_shrineSouthUnit) {
            lv_ascendant = UnitFromId(153);
        }
        else if (auto7B42AC61_val == gv_shrineEastUnit) {
            lv_ascendant = UnitFromId(146);
        }
        else if (auto7B42AC61_val == gv_shrineWestUnit) {
            lv_ascendant = UnitFromId(148);
        }
        else {
        }
        AISetUnitScriptControlled(lv_ascendant, true);
        Wait(0.0625, c_timeAI);
        UnitKill(lv_ascendant);
        Wait(2.0, c_timeGame);
        libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
        TriggerExecute(gt_TransmissionShrineDestroyedQ, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShrineDestroyed_Init () {
    gt_ShrineDestroyed = TriggerCreate("gt_ShrineDestroyed_Func");
    TriggerAddEventPlayerEffectUsed(gt_ShrineDestroyed, gv_pLAYER_02_TAL_NORTH, "GenericDontDieDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shrine Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShrineDestroyedQ_Func (bool testConds, bool runActions) {
    int autoF832E6BC_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF832E6BC_val = gv_shrinesDestroyed;
    if (autoF832E6BC_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00090", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoF832E6BC_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00091", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00135", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoF832E6BC_val == 3) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00092", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoF832E6BC_val == 4) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShrineDestroyedQ_Init () {
    gt_TransmissionShrineDestroyedQ = TriggerCreate("gt_TransmissionShrineDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tal'darim Day Waves
//--------------------------------------------------------------------------------------------------
bool gt_TaldarimDayWaves_Func (bool testConds, bool runActions) {
    int init_i;

    int auto7E23D75C_val;

    // Variable Declarations
    unitgroup[6] lv_waveGroup;
    timer lv_waveDelay;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_waveGroup[init_i] = UnitGroupEmpty();
    }
    lv_waveDelay = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    auto7E23D75C_val = gv_terrazineNightCount;
    if (auto7E23D75C_val == 1) {
    }
    else if (auto7E23D75C_val == 2) {
        TimerStart(lv_waveDelay, 30.0, false, c_timeGame);
        libNtve_gf_WaitForTimer(lv_waveDelay, 8.0, false);
        TriggerExecute(gt_TransmissionTaldarimAttackTauntQ, true, false);
        libNtve_gf_WaitForTimer(lv_waveDelay, 0.0, false);
        TriggerExecute(gt_DayTimeDeathFleetNW, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionFirstShipsWarningQ, true, false);
    }
    else if (auto7E23D75C_val == 3) {
        TimerStart(lv_waveDelay, libLotv_gf_DifficultyValueFixed2(45.0, 45.0, 60.0, 60.0), false, c_timeGame);
        libNtve_gf_WaitForTimer(lv_waveDelay, 8.0, false);
        TriggerExecute(gt_TransmissionTaldarimAttackTauntQ, true, false);
        libNtve_gf_WaitForTimer(lv_waveDelay, 0.0, false);
        TriggerExecute(gt_DayTimeDeathFleetNE, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionEnemyShipsWarningQ, true, false);
    }
    else {
        TimerStart(lv_waveDelay, libLotv_gf_DifficultyValueFixed2(60.0, 60.0, 90.0, 90.0), false, c_timeGame);
        libNtve_gf_WaitForTimer(lv_waveDelay, 8.0, false);
        TriggerExecute(gt_TransmissionTaldarimAttackTauntQ, true, false);
        libNtve_gf_WaitForTimer(lv_waveDelay, 0.0, false);
        TriggerExecute(gt_DayTimeDeathFleetNE, true, false);
        Wait(1.0, c_timeGame);
        TriggerExecute(gt_DayTimeDeathFleetNW, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionEnemyShipsWarningQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaldarimDayWaves_Init () {
    gt_TaldarimDayWaves = TriggerCreate("gt_TaldarimDayWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day Time Death Fleet - NW
//--------------------------------------------------------------------------------------------------
bool gt_DayTimeDeathFleetNW_Func (bool testConds, bool runActions) {
    int auto15D59078_val;
    int autoC3D50DE9_val;
    int auto0B817914_val;
    int auto505BF963_val;

    // Variable Declarations
    unitgroup lv_escortGroup;
    unit lv_warpPrism;
    bool lv_enemyTriggered;

    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_03_TAL_EAST, PointFromId(923));
    lv_warpPrism = UnitLastCreated();
    AIAttackWaveSetTargetEscort(gv_pLAYER_03_TAL_EAST, libNtve_gf_ConvertUnitToUnitGroup(lv_warpPrism), 0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(948));
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 4.0, 250.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(926));
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 4.0, 110.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(878));
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.0, 330.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(907));
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.0, 30.0);
    auto15D59078_val = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    if (auto15D59078_val == 1) {
        autoC3D50DE9_val = gv_terrazineNightCount;
        if (autoC3D50DE9_val == 1) {
        }
        else if (autoC3D50DE9_val == 2) {
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(825));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(824));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
        }
    }
    else if (auto15D59078_val == 2) {
        auto0B817914_val = gv_terrazineNightCount;
        if (auto0B817914_val == 1) {
        }
        else if (auto0B817914_val == 2) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(825));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(824));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(825));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(824));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Carrier", 0, gv_pLAYER_03_TAL_EAST, PointFromId(977));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.5, 0.0);
        }
    }
    else if (auto15D59078_val == 3) {
        auto505BF963_val = gv_terrazineNightCount;
        if (auto505BF963_val == 1) {
        }
        else if (auto505BF963_val == 2) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(825));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(824));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Carrier", 0, gv_pLAYER_03_TAL_EAST, PointFromId(977));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.5, 0.0);
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Carrier", 0, gv_pLAYER_03_TAL_EAST, PointFromId(825));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Carrier", 0, gv_pLAYER_03_TAL_EAST, PointFromId(824));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(977));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.5, 0.0);
        }
    }
    else {
    }
    PingCreate(PlayerGroupAll(), "PingCircle", UnitGetPosition(lv_warpPrism), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.35);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7AE14A2E"));
    gv_taldarimFleetPing[1] = PingLastCreated();
    gf_MonitorDeathFleetPing(lv_escortGroup, lv_warpPrism, 1);
    AIAttackWaveSend(gv_pLAYER_03_TAL_EAST, 0, true);
    UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(654)), c_orderQueueReplace);
    while ((libNtve_gf_UnitInRegion(lv_warpPrism, RegionCircle(PointFromId(654), 10.0)) == false) && (UnitIsAlive(lv_warpPrism) == true) && (UnitGetOwner(lv_warpPrism) != gv_pLAYER_01_USER)) {
        if ((UnitCountAlliance(gv_pLAYER_03_TAL_EAST, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_warpPrism), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1) == 1) && (PointPathingPassable(UnitGetPosition(lv_warpPrism)) == true)) {
            lv_enemyTriggered = true;
            UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
            break;
        }
        else {
        }
        if ((UnitOrder(lv_warpPrism, 0) == null)) {
            UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(654)), c_orderQueueReplace);
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    UnitGroupLoopBegin(lv_escortGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIRemoveUnitFromAnyWaves(UnitGroupLoopCurrent());
        if ((UnitGetOwner(UnitGroupLoopCurrent()) != gv_pLAYER_01_USER)) {
            AISetUnitSuicide(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((UnitIsAlive(lv_warpPrism) == true) && (UnitGetOwner(lv_warpPrism) != gv_pLAYER_01_USER)) {
        if ((lv_enemyTriggered == false)) {
            UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(654)), c_orderQueueReplace);
            UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        }
        else {
        }
        gf_WarpPrismWaveSpawnUnits(1, lv_warpPrism);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayTimeDeathFleetNW_Init () {
    gt_DayTimeDeathFleetNW = TriggerCreate("gt_DayTimeDeathFleetNW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day Time Death Fleet - NE
//--------------------------------------------------------------------------------------------------
bool gt_DayTimeDeathFleetNE_Func (bool testConds, bool runActions) {
    int auto12976EEA_val;
    int autoCCDD504A_val;
    int auto40CA87F7_val;
    int autoFAD67663_val;

    // Variable Declarations
    unitgroup lv_escortGroup;
    unit lv_warpPrism;
    bool lv_enemyTriggered;

    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_03_TAL_EAST, PointFromId(651));
    lv_warpPrism = UnitLastCreated();
    AIAttackWaveSetTargetEscort(gv_pLAYER_03_TAL_EAST, libNtve_gf_ConvertUnitToUnitGroup(lv_warpPrism), 0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(648));
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 4.0, 250.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(650));
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 4.0, 110.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(652));
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.0, 330.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(653));
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.0, 30.0);
    auto12976EEA_val = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    if (auto12976EEA_val == 1) {
        autoCCDD504A_val = gv_terrazineNightCount;
        if (autoCCDD504A_val == 1) {
        }
        else if (autoCCDD504A_val == 2) {
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(826));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(827));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
        }
    }
    else if (auto12976EEA_val == 2) {
        auto40CA87F7_val = gv_terrazineNightCount;
        if (auto40CA87F7_val == 1) {
        }
        else if (auto40CA87F7_val == 2) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(826));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(827));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(826));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(827));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Carrier", 0, gv_pLAYER_03_TAL_EAST, PointFromId(655));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.5, 0.0);
        }
    }
    else if (auto12976EEA_val == 3) {
        autoFAD67663_val = gv_terrazineNightCount;
        if (autoFAD67663_val == 1) {
        }
        else if (autoFAD67663_val == 2) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(826));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(827));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Carrier", 0, gv_pLAYER_03_TAL_EAST, PointFromId(655));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.5, 0.0);
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Carrier", 0, gv_pLAYER_03_TAL_EAST, PointFromId(826));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 290.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Carrier", 0, gv_pLAYER_03_TAL_EAST, PointFromId(827));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 7.0, 70.0);
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER_03_TAL_EAST, PointFromId(655));
            UnitGroupAdd(lv_escortGroup, UnitLastCreated());
            AIAttackWaveAddEscortUnit(gv_pLAYER_03_TAL_EAST, UnitLastCreated(), lv_warpPrism, 5.5, 0.0);
        }
    }
    else {
    }
    PingCreate(PlayerGroupAll(), "PingCircle", UnitGetPosition(lv_warpPrism), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.35);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EBA1841B"));
    gv_taldarimFleetPing[2] = PingLastCreated();
    gf_MonitorDeathFleetPing(lv_escortGroup, lv_warpPrism, 2);
    AIAttackWaveSend(gv_pLAYER_03_TAL_EAST, 0, true);
    UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(656)), c_orderQueueReplace);
    while ((libNtve_gf_UnitInRegion(lv_warpPrism, RegionCircle(PointFromId(656), 10.0)) == false) && (UnitIsAlive(lv_warpPrism) == true) && (UnitGetOwner(lv_warpPrism) != gv_pLAYER_01_USER)) {
        if ((UnitCountAlliance(gv_pLAYER_03_TAL_EAST, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_warpPrism), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1) == 1) && (PointPathingPassable(UnitGetPosition(lv_warpPrism)) == true)) {
            lv_enemyTriggered = true;
            UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
            break;
        }
        else {
        }
        if ((UnitOrder(lv_warpPrism, 0) == null)) {
            UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(656)), c_orderQueueReplace);
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    UnitGroupLoopBegin(lv_escortGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIRemoveUnitFromAnyWaves(UnitGroupLoopCurrent());
        if ((UnitGetOwner(UnitGroupLoopCurrent()) != gv_pLAYER_01_USER)) {
            AISetUnitSuicide(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((UnitIsAlive(lv_warpPrism) == true) && (UnitGetOwner(lv_warpPrism) != gv_pLAYER_01_USER)) {
        if ((lv_enemyTriggered == false)) {
            UnitIssueOrder(lv_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(656)), c_orderQueueReplace);
            UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        }
        else {
        }
        gf_WarpPrismWaveSpawnUnits(2, lv_warpPrism);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayTimeDeathFleetNE_Init () {
    gt_DayTimeDeathFleetNE = TriggerCreate("gt_DayTimeDeathFleetNE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tal'darim Attack Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTaldarimAttackTauntQ_Func (bool testConds, bool runActions) {
    int auto2A84F6EE_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2A84F6EE_val = ModI(gv_terrazineNightCount, 3);
    if (auto2A84F6EE_val == 0) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00062", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto2A84F6EE_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00082", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto2A84F6EE_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00081", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTaldarimAttackTauntQ_Init () {
    gt_TransmissionTaldarimAttackTauntQ = TriggerCreate("gt_TransmissionTaldarimAttackTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Ships Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstShipsWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstShipsWarningQ_Init () {
    gt_TransmissionFirstShipsWarningQ = TriggerCreate("gt_TransmissionFirstShipsWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy Ships Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemyShipsWarningQ_Func (bool testConds, bool runActions) {
    int auto27F5BB2F_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto27F5BB2F_val = ModI(gv_terrazineNightCount, 2);
    if (auto27F5BB2F_val == 0) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto27F5BB2F_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemyShipsWarningQ_Init () {
    gt_TransmissionEnemyShipsWarningQ = TriggerCreate("gt_TransmissionEnemyShipsWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    AISetDefenseRadii(gv_pLAYER_02_TAL_NORTH, 6.0, 6.0, 6.0);
    UnitGroupLoopBegin(gv_ascendantGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_AscendantBehaviour(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_enemyPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 10000);
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_11_MOTHERSHIPS, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_11_MOTHERSHIPS, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set AI Upgrade Level
//--------------------------------------------------------------------------------------------------
bool gt_SetAIUpgradeLevel_Func (bool testConds, bool runActions) {
    int autoC94F3266_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC94F3266_val = gv_terrazineNightCount;
    if (autoC94F3266_val == 1) {
    }
    else if (autoC94F3266_val == 2) {
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            PlayerGroupLoopBegin(gv_enemyPlayerGroup);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleAndShipWeaponsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
        }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            PlayerGroupLoopBegin(gv_enemyPlayerGroup);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleAndShipArmorsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
        }
    }
    else if (autoC94F3266_val == 3) {
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            PlayerGroupLoopBegin(gv_enemyPlayerGroup);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleAndShipWeaponsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
        }
    }
    else if (autoC94F3266_val == 4) {
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            PlayerGroupLoopBegin(gv_enemyPlayerGroup);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirArmorsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleAndShipArmorsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
        }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            PlayerGroupLoopBegin(gv_enemyPlayerGroup);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel3", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossAirWeaponsLevel3", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel3", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleAndShipWeaponsLevel3", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel3", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel3", 1);
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel3", 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetAIUpgradeLevel_Init () {
    gt_SetAIUpgradeLevel = TriggerCreate("gt_SetAIUpgradeLevel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_ShrineReinforcements_Func (bool testConds, bool runActions) {
    int auto7855DE07_val;
    int autoD01347B1_val;
    int auto6B9946EE_val;

    // Variable Declarations
    int lv_reinforcementLevel;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_shrineSouthUnit) == true)) {
        lv_reinforcementLevel = gv_shrinesDestroyed;
    }
    else {
        lv_reinforcementLevel = (gv_shrinesDestroyed - 1);
    }
    if (((lv_reinforcementLevel == 0) || (lv_reinforcementLevel >= 3))) {
        return true;
    }
    else {
    }
    if ((UnitIsAlive(gv_shrineEastUnit) == true)) {
        auto7855DE07_val = lv_reinforcementLevel;
        if (auto7855DE07_val == 1) {
            UnitIssueOrder(UnitFromId(767), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), PointFromId(48)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(767), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), PointFromId(554)), c_orderQueueReplace);
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_03_TAL_EAST, PointFromId(553));
                gf_HybridSpawnFX(UnitLastCreated());
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_03_TAL_EAST, PointFromId(48));
                gf_HybridSpawnFX(UnitLastCreated());
            }
            else {
            }
        }
        else if (auto7855DE07_val == 2) {
            if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_03_TAL_EAST, PointFromId(553));
                gf_HybridSpawnFX(UnitLastCreated());
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_03_TAL_EAST, PointFromId(686));
                gf_HybridSpawnFX(UnitLastCreated());
            }
            else {
            }
            if (true) {
                UnitIssueOrder(UnitFromId(767), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), PointFromId(638)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(767), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), PointFromId(693)), c_orderQueueReplace);
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_03_TAL_EAST, PointFromId(686));
                gf_HybridSpawnFX(UnitLastCreated());
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_03_TAL_EAST, PointFromId(553));
                gf_HybridSpawnFX(UnitLastCreated());
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_03_TAL_EAST, PointFromId(541));
                gf_HybridSpawnFX(UnitLastCreated());
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_03_TAL_EAST, PointFromId(543));
                gf_HybridSpawnFX(UnitLastCreated());
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((UnitIsAlive(gv_shrineWestUnit) == true)) {
        autoD01347B1_val = lv_reinforcementLevel;
        if (autoD01347B1_val == 1) {
            if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_05_TAL_WEST, PointFromId(723));
                gf_HybridSpawnFX(UnitLastCreated());
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_05_TAL_WEST, PointFromId(698));
                gf_HybridSpawnFX(UnitLastCreated());
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_05_TAL_WEST, PointFromId(723));
                gf_HybridSpawnFX(UnitLastCreated());
                UnitIssueOrder(UnitFromId(770), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 0), PointFromId(758)), c_orderQueueReplace);
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_05_TAL_WEST, PointFromId(723));
                gf_HybridSpawnFX(UnitLastCreated());
                UnitIssueOrder(UnitFromId(770), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 0), PointFromId(732)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(770), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 0), PointFromId(737)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(770), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 0), PointFromId(758)), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (autoD01347B1_val == 2) {
            if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
                UnitIssueOrder(UnitFromId(770), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 0), PointFromId(758)), c_orderQueueReplace);
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_05_TAL_WEST, PointFromId(701));
                gf_HybridSpawnFX(UnitLastCreated());
                UnitIssueOrder(UnitFromId(770), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 0), PointFromId(732)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(770), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 0), PointFromId(737)), c_orderQueueReplace);
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_05_TAL_WEST, PointFromId(698));
                gf_HybridSpawnFX(UnitLastCreated());
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_05_TAL_WEST, PointFromId(8));
                gf_HybridSpawnFX(UnitLastCreated());
                libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_05_TAL_WEST, PointFromId(269));
                gf_HybridSpawnFX(UnitLastCreated());
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((UnitIsAlive(gv_shrineNorthUnit) == true)) {
        auto6B9946EE_val = lv_reinforcementLevel;
        if (auto6B9946EE_val == 1) {
            if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(759)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(760)), c_orderQueueReplace);
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(761)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(762)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(763)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(764)), c_orderQueueReplace);
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(759)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(760)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(761)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(762)), c_orderQueueReplace);
            }
            else {
            }
        }
        else if (auto6B9946EE_val == 2) {
            if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), PointFromId(761)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), PointFromId(762)), c_orderQueueReplace);
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(759)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(760)), c_orderQueueReplace);
            }
            else {
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(763)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(764)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(765)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(615), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(766)), c_orderQueueReplace);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShrineReinforcements_Init () {
    gt_ShrineReinforcements = TriggerCreate("gt_ShrineReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Bully and Wave Status
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBullyandWaveStatus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_shrineSouthUnit) == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_04_TAL_SOUTH, RegionFromId(52), false);
    }
    else {
    }
    if ((UnitIsAlive(gv_shrineEastUnit) == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_TAL_EAST, RegionFromId(53), false);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(248)) == false) && (UnitIsAlive(UnitFromId(608)) == false) && (UnitIsAlive(UnitFromId(418)) == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_TAL_EAST, RegionFromId(46), false);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(715)) == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_TAL_EAST, RegionFromId(65), false);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(803)) == false) && (UnitIsAlive(UnitFromId(753)) == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_04_TAL_SOUTH, RegionFromId(66), false);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(341)) == false) && (UnitIsAlive(UnitFromId(340)) == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_TAL_WEST, RegionFromId(51), false);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(360)) == false) && (UnitIsAlive(UnitFromId(361)) == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_02_TAL_NORTH, RegionFromId(48), false);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(352)) == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_02_TAL_NORTH, RegionFromId(49), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateBullyandWaveStatus_Init () {
    gt_UpdateBullyandWaveStatus = TriggerCreate("gt_UpdateBullyandWaveStatus_Func");
    TriggerAddEventTimePeriodic(gt_UpdateBullyandWaveStatus, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/C68E8C78"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_talCommander;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyShrinesComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PTaldarim01_1", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_terrazineNightCount < 4)) {
        libVoiC_gf_CampaignAwardAchievement("PTaldarim01_3", gv_pLAYER_01_USER);
    }
    else {
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_taldarimKilled == 0)) {
        libVoiC_gf_CampaignAwardAchievement("Mastery_Taldarim01", gv_pLAYER_01_USER);
    }
    else {
    }
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/37ECF080"), IntToText(gv_terrazineNightCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/033AF48A"), IntToText(gv_voidShadesKilled));
    libVoiC_gf_PauseAITimeCampaign(true);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Enemy Unit Killed
//--------------------------------------------------------------------------------------------------
bool gt_StatEnemyUnitKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == gv_pLAYER_07_VOID_EAST) || (UnitGetOwner(EventUnit()) == gv_pLAYER_08_VOID_SOUTH) || (UnitGetOwner(EventUnit()) == gv_pLAYER_09_VOID_WEST) || (UnitGetOwner(EventUnit()) == gv_pLAYER_10_VOID_NORTH))) {
        gv_voidShadesKilled += 1;
        return true;
    }
    else {
    }
    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false) && ((UnitGetOwner(EventUnit()) == gv_pLAYER_02_TAL_NORTH) || (UnitGetOwner(EventUnit()) == gv_pLAYER_03_TAL_EAST) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_TAL_SOUTH) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_TAL_WEST) || (UnitGetOwner(EventUnit()) == gv_pLAYER_11_MOTHERSHIPS))) {
        gv_taldarimKilled += 1;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatEnemyUnitKilled_Init () {
    gt_StatEnemyUnitKilled = TriggerCreate("gt_StatEnemyUnitKilled_Func");
    TriggerAddEventUnitDied(gt_StatEnemyUnitKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Shrines Killed During Fog
//--------------------------------------------------------------------------------------------------
bool gt_AchievementShrinesKilledDuringFog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PTaldarim01_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementShrinesKilledDuringFog_Init () {
    gt_AchievementShrinesKilledDuringFog = TriggerCreate("gt_AchievementShrinesKilledDuringFog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Survive the First Night Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurvivetheFirstNightCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PTaldarim01Primary01");
    gv_objectiveDestroyZergBase5 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurvivetheFirstNightCreate_Init () {
    gt_ObjectiveSurvivetheFirstNightCreate = TriggerCreate("gt_ObjectiveSurvivetheFirstNightCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Survive the First Night Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurvivetheFirstNightComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSurvivetheFirstNightCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim01Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurvivetheFirstNightComplete_Init () {
    gt_ObjectiveSurvivetheFirstNightComplete = TriggerCreate("gt_ObjectiveSurvivetheFirstNightComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Survive the First Night Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurvivetheFirstNightFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSurvivetheFirstNightCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim01Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurvivetheFirstNightFailed_Init () {
    gt_ObjectiveSurvivetheFirstNightFailed = TriggerCreate("gt_ObjectiveSurvivetheFirstNightFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Shrines Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShrinesCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PTaldarim01Primary02");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PTaldarim01Primary02", gv_shrinesDestroyed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShrinesCreate_Init () {
    gt_ObjectiveDestroyShrinesCreate = TriggerCreate("gt_ObjectiveDestroyShrinesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Shrines Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShrinesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyShrinesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim01Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShrinesComplete_Init () {
    gt_ObjectiveDestroyShrinesComplete = TriggerCreate("gt_ObjectiveDestroyShrinesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Shrines Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShrinesUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyShrinesCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PTaldarim01Primary02", gv_shrinesDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShrinesUpdate_Init () {
    gt_ObjectiveDestroyShrinesUpdate = TriggerCreate("gt_ObjectiveDestroyShrinesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Shrines Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShrinesFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyShrinesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim01Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShrinesFailed_Init () {
    gt_ObjectiveDestroyShrinesFailed = TriggerCreate("gt_ObjectiveDestroyShrinesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Ships Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShipsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PTaldarim01Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PTaldarim01Bonus01", gv_mothershipsDestroyed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShipsCreate_Init () {
    gt_ObjectiveDestroyShipsCreate = TriggerCreate("gt_ObjectiveDestroyShipsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Ships Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShipsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyShipsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim01Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShipsComplete_Init () {
    gt_ObjectiveDestroyShipsComplete = TriggerCreate("gt_ObjectiveDestroyShipsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Ships Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShipsUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyShipsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PTaldarim01Bonus01", gv_mothershipsDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShipsUpdate_Init () {
    gt_ObjectiveDestroyShipsUpdate = TriggerCreate("gt_ObjectiveDestroyShipsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Ships Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShipsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyShipsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim01Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShipsFailed_Init () {
    gt_ObjectiveDestroyShipsFailed = TriggerCreate("gt_ObjectiveDestroyShipsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitSetPropertyFixed(UnitFromId(23), c_unitPropEnergyPercent, 0.0);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_introPlayerSquad, UnitGroupLoopCurrent());
        libHots_gf_StorePointForUnit(UnitGroupLoopCurrent(), 1, UnitGetPosition(UnitGroupLoopCurrent()));
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_introPlayerSquad);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    int autoBEF835BB_n;
    int autoBEF835BB_i;
    int auto17762368_n;
    int auto17762368_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(11), 0.0, -1, 10, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(16), gv_pLAYER_01_USER);
    gv_introMinerals[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introMinerals[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(643), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[2] = FixedToInt(UnitGetPropertyFixed(UnitFromId(644), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[3] = FixedToInt(UnitGetPropertyFixed(UnitFromId(676), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[4] = FixedToInt(UnitGetPropertyFixed(UnitFromId(675), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[5] = FixedToInt(UnitGetPropertyFixed(UnitFromId(663), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[6] = FixedToInt(UnitGetPropertyFixed(UnitFromId(646), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[7] = FixedToInt(UnitGetPropertyFixed(UnitFromId(645), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[8] = FixedToInt(UnitGetPropertyFixed(UnitFromId(683), c_unitPropResources, c_unitPropCurrent));
    gv_introGas[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    gv_introGas[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(91), c_unitPropResources, c_unitPropCurrent));
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(902), (4.0 + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00067", true), c_soundIndexAny))), -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00067", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00068", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(3.0, c_timeReal);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(925), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeReal);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Slayn_TerrazineGeyser", RegionEntireMap());
    gf_SendActorMessagetoDoodadsinRegion(gv_opacityCloudOn, "TerazineVaporCloud", RegionEntireMap());
    GameSetLighting(gv_lightNight, 5.0);
    SoundPlayForPlayer(SoundLink("Taldarim01_GeyserErupt_St", -1), c_maxPlayers, PlayerGroupAll(), 94.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Taldarim01_TerrazineFog_Loop", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "PTaldarim01_Ambience_TerrazineGeysers", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00069", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(999), (3.0 + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00070", true), c_soundIndexAny))), -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(30)), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(UnitFromId(30), true);
    gv_terrazineActive = true;
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00070", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00068", true), c_soundIndexAny)) / 2.0));
    autoBEF835BB_n = 4;
    for (autoBEF835BB_i = 1; autoBEF835BB_i <= autoBEF835BB_n; autoBEF835BB_i += 1) {
        UnitCreate(1, "Zealot", 0, gv_pLAYER_07_VOID_EAST, RegionRandomPoint(RegionFromId(8)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_introEnemies, UnitLastCreated());
        gf_ApplyShadowManifestationFX(UnitLastCreated());
        Wait(0.5, c_timeReal);
    }
    Wait(1.0, c_timeGame);
    auto17762368_n = 2;
    for (auto17762368_i = 1; auto17762368_i <= auto17762368_n; auto17762368_i += 1) {
        UnitCreate(1, "InfestedAbomination", 0, gv_pLAYER_07_VOID_EAST, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_introEnemies, UnitLastCreated());
        gf_ApplyShadowManifestationFX(UnitLastCreated());
        Wait(0.5, c_timeReal);
    }
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_introEnemies);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(193), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00102", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00162", true), c_soundIndexAny))), -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 1.0);
    UnitGroupLoopBegin(gv_introEnemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(145)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(980)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2417)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(gv_introPlayerSquad, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00162", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("Amb_ZergHordeQuad_Low", -1), c_maxPlayers, PlayerGroupAll(), 30.0, 0.0);
    Wait(1.5, c_timeReal);
    libNtve_gf_SendActorMessageToUnit(gv_introGuardian, "Signal ChannelStart");
    Wait(1.0, c_timeReal);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00102", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    Wait(1.5, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00108", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_IntroTaldarimAttack, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2415), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00110", true), c_soundIndexAny)), -1, 10, true);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Slayn_TerrazineGeyser", RegionEntireMap());
    gf_SendActorMessagetoDoodadsinRegion("SetOpacity 0.000000 5.000000", "TerazineVaporCloud", RegionEntireMap());
    GameSetLighting(gv_lightDay, 5.0);
    SoundPlayForPlayer(SoundLink("Tal01_FogRollIn", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_KorhalPlatform", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    if ((gv_cinematicCompleted == false)) {
        UnitGroupLoopBegin(gv_introPlayerSquad);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), libHots_gf_PointStoredForUnit(UnitGroupLoopCurrent(), 1), false);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    UnitGroupLoopBegin(gv_introPlayerSquad);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitSetPropertyFixed(UnitFromId(23), c_unitPropEnergyPercent, 0.0);
    UnitSetPropertyFixed(UnitFromId(643), c_unitPropResources, gv_introMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(644), c_unitPropResources, gv_introMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(676), c_unitPropResources, gv_introMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(675), c_unitPropResources, gv_introMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(663), c_unitPropResources, gv_introMinerals[5]);
    UnitSetPropertyFixed(UnitFromId(646), c_unitPropResources, gv_introMinerals[6]);
    UnitSetPropertyFixed(UnitFromId(645), c_unitPropResources, gv_introMinerals[7]);
    UnitSetPropertyFixed(UnitFromId(683), c_unitPropResources, gv_introMinerals[8]);
    UnitSetPropertyFixed(UnitFromId(91), c_unitPropResources, gv_introGas[1]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals[0]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas[0]);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(15), true, false);
    libNtve_gf_ShowHideUnit(UnitFromId(30), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_KorhalPlatform", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    GameSetLighting(gv_lightDay, 0.0);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Slayn_TerrazineGeyser", RegionEntireMap());
    gf_SendActorMessagetoDoodadsinRegion("SetOpacity", "TerazineVaporCloud", RegionEntireMap());
    gv_terrazineActive = false;
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_shrineEastUnit, 1));
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2416), lv_fadeDuration, -1, 10, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(2416)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Tal'darim Attack
//--------------------------------------------------------------------------------------------------
bool gt_IntroTaldarimAttack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (((UnitGroupCount(gv_introEnemies, c_unitCountAlive) > 0) || (libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(gv_introPlayerSquad);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_introEnemies, UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    UnitGroupLoopBegin(gv_introPlayerSquad);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), libHots_gf_PointStoredForUnit(UnitGroupLoopCurrent(), 1)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2417)), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroTaldarimAttack_Init () {
    gt_IntroTaldarimAttack = TriggerCreate("gt_IntroTaldarimAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PTaldarim01_Music_Intro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    unit auto14A4BD2D_val;

    // Variable Declarations
    unitgroup lv_immuneStructures;
    unit lv_shrine;

    // Variable Initialization
    lv_immuneStructures = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    PlayerGroupLoopBegin(gv_enemyPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(1, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_Neutral);
    }
    PlayerGroupLoopEnd();
    if ((gv_finalShrine == null)) {
        gv_finalShrine = gv_shrineSouthUnit;
        gv_finalShrineLocation = UnitGetPosition(gv_shrineSouthUnit);
    }
    else {
    }
    auto14A4BD2D_val = gv_finalShrine;
    if (auto14A4BD2D_val == gv_shrineNorthUnit) {
        gv_shrineCamera[1] = CameraInfoFromId(2419);
        gv_shrineCamera[2] = CameraInfoFromId(2429);
        gv_shrineCamera[3] = CameraInfoFromId(2432);
        gv_victoryZoomFocus = PointFromId(2436);
        gv_victoryAlarakSpawnPoint = PointFromId(2424);
    }
    else if (auto14A4BD2D_val == gv_shrineEastUnit) {
        gv_shrineCamera[1] = CameraInfoFromId(2420);
        gv_shrineCamera[2] = CameraInfoFromId(2428);
        gv_shrineCamera[3] = CameraInfoFromId(2431);
        gv_victoryZoomFocus = PointFromId(2435);
        gv_victoryAlarakSpawnPoint = PointFromId(2425);
    }
    else if (auto14A4BD2D_val == gv_shrineSouthUnit) {
        gv_shrineCamera[1] = CameraInfoFromId(2421);
        gv_shrineCamera[2] = CameraInfoFromId(2427);
        gv_shrineCamera[3] = CameraInfoFromId(2433);
        gv_victoryZoomFocus = PointFromId(2437);
        gv_victoryAlarakSpawnPoint = PointFromId(2426);
    }
    else if (auto14A4BD2D_val == gv_shrineWestUnit) {
        gv_shrineCamera[1] = CameraInfoFromId(2422);
        gv_shrineCamera[2] = CameraInfoFromId(2430);
        gv_shrineCamera[3] = CameraInfoFromId(2434);
        gv_victoryZoomFocus = PointFromId(2438);
        gv_victoryAlarakSpawnPoint = PointFromId(2423);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(gv_finalShrineLocation, 15.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_immuneStructures, UnitGroupLoopCurrent());
        if (((UnitGetType(UnitGroupLoopCurrent()) == "TerrazineTempleNWSE") || (UnitGetType(UnitGroupLoopCurrent()) == "TerrazineTempleNESW"))) {
            lv_shrine = UnitGroupLoopCurrent();
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupHasUnit(lv_immuneStructures, UnitGroupLoopCurrent()) == true)) {
            UnitGroupRemove(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        }
        else {
            UnitRemove(UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "AlarakChampion", 0, gv_pLAYER_01_USER, gv_victoryAlarakSpawnPoint);
    gv_victoryAlarak = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateTurnSuppressed, true);
    UnitBehaviorRemovePlayer(gv_victoryAlarak, "PitAlarakShieldRegenAura", gv_pLAYER_01_USER, 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "ShrineGuardian", 0, gv_pLAYER_02_TAL_NORTH, gv_finalShrineLocation);
    libNtve_gf_ChangeUnitDamage(gv_victoryGuardian, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    gv_victoryGuardian = UnitLastCreated();
    libNtve_gf_MakeUnitFacePoint(gv_victoryAlarak, UnitGetPosition(gv_victoryGuardian), 0.0);
    libNtve_gf_MakeUnitFacePoint(gv_victoryGuardian, UnitGetPosition(gv_victoryAlarak), 0.0);
    UnitGroupLoopBegin(lv_immuneStructures);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "VoidShrine") || (UnitGetType(UnitGroupLoopCurrent()) == "TerrazineTempleNESW") || (UnitGetType(UnitGroupLoopCurrent()) == "TerrazineTempleNWSE"))) {
            gv_finalShrine = UnitGroupLoopCurrent();
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Slayn_TerrazineGeyser", RegionEntireMap());
    gf_SendActorMessagetoDoodadsinRegion("SetOpacity", "TerazineVaporCloud", RegionEntireMap());
    GameSetLighting(gv_lightDay, 0.0);
    TriggerStop(gt_TerrazineCycle);
    TriggerStop(gt_FirstTerrazineCycle);
    Wait(0.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_crystalSpawn;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, gv_shrineCamera[1], 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_shrineCamera[2], (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00094", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00095", true), c_soundIndexAny))), -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    UnitIssueOrder(gv_victoryAlarak, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_victoryAlarak), 2.0, gv_finalShrineLocation)), c_orderQueueReplace);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryGuardian, "pMission_Taldarim01|Line00094", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryAlarak, "pMission_Taldarim01|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_VictoryMusic, true, false);
    UnitIssueOrder(gv_victoryAlarak, OrderTargetingPoint(AbilityCommand("DestructionWaveNoOffset", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_victoryAlarak), 3.0, gv_finalShrineLocation)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("Event_Tal01Victory_Alarak_QWaveImpact", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.6, c_timeGame);
    UnitKill(gv_victoryGuardian);
    SoundPlayForPlayer(SoundLink("Event_Tal01Victory_Alarak_QWaveLaunch", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Void_Thrasher_Death_Vox", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    SoundPlayForPlayer(SoundLink("HighTemplar_Death", -1), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Taldarim01_Intro_GeyserErupt_6Ch", -1), c_maxPlayers, PlayerGroupAll(), 25.0, 0.0);
    Wait(4.0, c_timeGame);
    UnitKill(gv_finalShrine);
    SoundPlayForPlayer(SoundLink("Event_Taldarim01_Intro_TempleDeath_Implode_6Ch", -1), c_maxPlayers, PlayerGroupAll(), 30.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Tal01_Victory_TempleRockDebris", -1), c_maxPlayers, PlayerGroupAll(), 30.0, 0.0);
    Wait(1.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim01|Line00123", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_shrineCamera[3], SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim01|Line00156", true), c_soundIndexAny)), -1, 10, true);
    libNtve_gf_MakeUnitFacePoint(gv_victoryAlarak, gv_victoryZoomFocus, 1.0);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryAlarak, "pMission_Taldarim01|Line00156", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitSetPosition(gv_victoryAlarak, PointFromId(1027), false);
    libNtve_gf_MakeUnitFacePoint(gv_victoryAlarak, PointFromId(1028), 0.0);
    UnitIssueOrder(gv_victoryAlarak, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2418)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1029), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1030), 10.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryAlarak, "pMission_Taldarim01|Line00157", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_UnitCreateFacingPoint(1, "PitMalash", 0, 0, PointFromId(1028), UnitGetPosition(gv_victoryAlarak));
    gv_victoryMalash = UnitLastCreated();
    UnitSetPropertyFixed(gv_victoryMalash, c_unitPropHeight, 1.0);
    UnitSetState(gv_victoryMalash, c_unitStateTurnSuppressed, true);
    libNtve_gf_MakeUnitFacePoint(gv_victoryMalash, UnitGetPosition(gv_victoryAlarak), 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_victoryMalash, "AnimPlay Birth Birth 0 0.000000");
    SoundPlayAtPointForPlayer(SoundLink("Event_Taldarim01_End_Malash_WarpIn_6Ch", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1028), 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Hybrid_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1028), 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Event_Taldarim01_End_Cine_SlapFx_6Ch", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1028), 0.0, 100.0, 0.0);
    Wait(3.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryMalash, "pMission_Taldarim01|Line00052", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.667, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PTaldarim01_Music_Outro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGameQ_Init();
    gt_FirstTerrazineCycle_Init();
    gt_TransmissionFirstTerrazineQ_Init();
    gt_ImmortalJohFoundQ_Init();
    gt_VoidRayIntro_Init();
    gt_TransmissionVoidRayIntroQ_Init();
    gt_StargateSelectedCleanup_Init();
    gt_StargateDiesCleanup_Init();
    gt_VoidRayOrderIssued_Init();
    gt_TerrazineCycle_Init();
    gt_TransmissionFirstFogQ_Init();
    gt_CreateTerrazineGauge_Init();
    gt_UpdateTerrazineGauge_Init();
    gt_TransmissionTerrazineFogSoonQ_Init();
    gt_TransmissionTerrazineFogRecedesQ_Init();
    gt_FirstNightSurvived_Init();
    gt_TransmissionDestroytheShrinesQ_Init();
    gt_WaveShadowFX_Init();
    gt_BonusObjectiveIntro_Init();
    gt_MothershipEngaged_Init();
    gt_MothershipControllerBottom_Init();
    gt_MothershipControllerTop_Init();
    gt_MothershipDestroyed_Init();
    gt_TransmissionBonusObjectiveIntroQ_Init();
    gt_TransmissionBonusObjectiveUpdateQ_Init();
    gt_TransmissionBonusObjectiveCompleteQ_Init();
    gt_ShrineAttacked_Init();
    gt_TransmissionShrineAttackedQ_Init();
    gt_ShrineDestroyed_Init();
    gt_TransmissionShrineDestroyedQ_Init();
    gt_TaldarimDayWaves_Init();
    gt_DayTimeDeathFleetNW_Init();
    gt_DayTimeDeathFleetNE_Init();
    gt_TransmissionTaldarimAttackTauntQ_Init();
    gt_TransmissionFirstShipsWarningQ_Init();
    gt_TransmissionEnemyShipsWarningQ_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_SetAIUpgradeLevel_Init();
    gt_ShrineReinforcements_Init();
    gt_UpdateBullyandWaveStatus_Init();
    gt_DefeatBaseDead_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipReadyQ_Init();
    gt_StatEnemyUnitKilled_Init();
    gt_AchievementShrinesKilledDuringFog_Init();
    gt_ObjectiveSurvivetheFirstNightCreate_Init();
    gt_ObjectiveSurvivetheFirstNightComplete_Init();
    gt_ObjectiveSurvivetheFirstNightFailed_Init();
    gt_ObjectiveDestroyShrinesCreate_Init();
    gt_ObjectiveDestroyShrinesComplete_Init();
    gt_ObjectiveDestroyShrinesUpdate_Init();
    gt_ObjectiveDestroyShrinesFailed_Init();
    gt_ObjectiveDestroyShipsCreate_Init();
    gt_ObjectiveDestroyShipsComplete_Init();
    gt_ObjectiveDestroyShipsUpdate_Init();
    gt_ObjectiveDestroyShipsFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroTaldarimAttack_Init();
    gt_IntroMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
