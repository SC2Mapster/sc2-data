//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Shatter the Sky
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_P01_USER = 1;
const int gv_pLAYER_P02_COOLANT_TOWERS = 2;
const int gv_pLAYER_P03_ZERG_BR = 3;
const int gv_pLAYER_P04_ZERG_BL = 4;
const int gv_pLAYER_P05_ZERG_TL = 5;
const int gv_pLAYER_P06_ZERG_TR = 6;
const int gv_pLAYER_P07_ZERG_EXP = 7;
const int gv_pLAYER_P08_MUTALISK_TOWERS = 8;
const int gv_pLAYER_P09_HORNER = 9;
const int gv_pLAYER_P10_LEVIATHAN = 10;
const int gv_pLAYER_P11_PLATFORM_PIECES = 11;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_UnitArea01 {
    string lv_unitType;
    int lv_player;
    point lv_position;
    fixed lv_facing;
};

struct gs_RECORD_UnitArea02 {
    string lv_unitType;
    int lv_player;
    point lv_position;
    fixed lv_facing;
};

struct gs_RECORD_UnitArea03 {
    string lv_unitType;
    int lv_player;
    point lv_position;
    fixed lv_facing;
};

struct gs_RECORD_UnitArea04 {
    string lv_unitType;
    int lv_player;
    point lv_position;
    fixed lv_facing;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
revealer gv_startingMapRevealer;
unitgroup gv_hiddenUnits;
unitgroup gv_pATHINGBLOCKERAREA01;
unitgroup gv_pATHINGBLOCKERAREA02;
unitgroup gv_pATHINGBLOCKERAREA03;
unitgroup gv_pATHINGBLOCKERAREA04;
bool gv_midCinePlayed;
int gv_fleetLinesGiven;
int gv_objectiveLeviathanPing;
fixed gv_leviathanMaxLife;
fixed gv_leviathanMaxEnergy;
playergroup gv_zergPlayers;
timer gv_platformDelayTimer;
timer gv_achievementHardTimer;
gs_RECORD_UnitArea01[101] gv_unitsArea01;
gs_RECORD_UnitArea02[101] gv_unitsArea02;
gs_RECORD_UnitArea03[101] gv_unitsArea03;
gs_RECORD_UnitArea04[101] gv_unitsArea04;
int gv_numberOfUnitsArea01;
int gv_numberOfUnitsArea02;
int gv_numberOfUnitsArea03;
int gv_numberOfUnitsArea04;
int gv_inCombatIndicator;
region gv_ground0;
region gv_ground1;
region gv_ground2;
region gv_ground3;
region gv_ground4;
region gv_ground5;
region gv_ground6;
region gv_ground7;
region gv_ground8;
region gv_ground9;
region gv_ground10;
region gv_ground11;
point gv_leviathanGuardArea;
region gv_leviathanSpawnRegion;
int gv_cinematicNumber;
timer gv_platformBlowsTimerArea01;
timer gv_platformBlowsTimerArea02;
timer gv_platformBlowsTimerArea03;
timer gv_platformBlowsTimerArea04;
unit gv_leviathan;
unitgroup gv_leviathanMutaGroup;
bool gv_timerReadytoBlowArea01;
bool gv_timerReadytoBlowArea02;
bool gv_timerReadytoBlowArea03;
bool gv_timerReadytoBlowArea04;
fixed gv_cMutaRadiusCheckFast;
int gv_cMutaSpewSizeSlow;
int gv_cMutaSpewSizeFast;
unitgroup[51] gv_mutaDefenders;
fixed gv_cMutaRadiusCheckSlow;
fixed gv_cMutaSpawnPeriodFast;
fixed gv_cMutaSpawnPeriodSlow;
int gv_mutaSpawnMax;
int gv_ventPing01;
unit gv_firstMutaSpawner;
bool gv_alternateLastWave;
int gv_stat_PlayerUnitsLostToPlatform;
int gv_stat_ZergKilledByPlatform;
int gv_stat_UnitsLostToEnemies;
actor gv_objectivePlatformsActor01;
actor gv_objectivePlatformsActor02;
actor gv_objectivePlatformsActor03;
actor gv_objectivePlatformsActor04;
int gv_objectivePlatformsPing01;
int gv_objectivePlatformsPing02;
int gv_objectivePlatformsPing03;
int gv_objectivePlatformsPing04;
int gv_objectiveKillLeviathan;
int gv_objectiveDestroyCoolantTowers;
int gv_objectiveDestroyCoolantTowersTotal;
int gv_objectiveDestroyCoolantTowerProgress;
actor gv_briefingTargetingCursor;
bool gv_midCinematicIsBusy;
bool gv_midPlatformsCinematicCompleted;
unitgroup gv_midPlatformsHiddenUnitGroup;
revealer gv_midPlatformsRevealer;
int gv_midCinematicCount;
bool gv_midLeviathanCinematicCompleted;
unitgroup gv_midLeviathanHiddenUnitGroup;
unit gv_leviathanCINE;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;
revealer gv_victoryRevealer;

void InitGlobals () {
    int init_i;

    gv_gameOver = false;
    gv_inCinematic = false;
    gv_startingMapRevealer = null;
    gv_hiddenUnits = UnitGroupEmpty();
    gv_pATHINGBLOCKERAREA01 = UnitGroupEmpty();
    gv_pATHINGBLOCKERAREA02 = UnitGroupEmpty();
    gv_pATHINGBLOCKERAREA03 = UnitGroupEmpty();
    gv_pATHINGBLOCKERAREA04 = UnitGroupEmpty();
    gv_midCinePlayed = false;
    gv_fleetLinesGiven = 0;
    gv_leviathanMaxLife = 0.0;
    gv_leviathanMaxEnergy = 0.0;
    gv_zergPlayers = PlayerGroupEmpty();
    gv_platformDelayTimer = TimerCreate();
    gv_achievementHardTimer = TimerCreate();
    init_i = 0;
    while (init_i <= 100) {
        gv_unitsArea01[init_i].lv_unitType = null;
        gv_unitsArea01[init_i].lv_player = 0;
        gv_unitsArea01[init_i].lv_position = null;
        gv_unitsArea01[init_i].lv_facing = 0.0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_unitsArea02[init_i].lv_unitType = null;
        gv_unitsArea02[init_i].lv_player = 0;
        gv_unitsArea02[init_i].lv_position = null;
        gv_unitsArea02[init_i].lv_facing = 0.0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_unitsArea03[init_i].lv_unitType = null;
        gv_unitsArea03[init_i].lv_player = 0;
        gv_unitsArea03[init_i].lv_position = null;
        gv_unitsArea03[init_i].lv_facing = 0.0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_unitsArea04[init_i].lv_unitType = null;
        gv_unitsArea04[init_i].lv_player = 0;
        gv_unitsArea04[init_i].lv_position = null;
        gv_unitsArea04[init_i].lv_facing = 0.0;
        init_i = init_i + 1;
    }
    gv_numberOfUnitsArea01 = 0;
    gv_numberOfUnitsArea02 = 0;
    gv_numberOfUnitsArea03 = 0;
    gv_numberOfUnitsArea04 = 0;
    gv_inCombatIndicator = 0;
    gv_ground0 = null;
    gv_ground1 = null;
    gv_ground2 = null;
    gv_ground3 = null;
    gv_ground4 = null;
    gv_ground5 = null;
    gv_ground6 = null;
    gv_ground7 = null;
    gv_ground8 = null;
    gv_ground9 = null;
    gv_ground10 = null;
    gv_ground11 = null;
    gv_leviathanGuardArea = null;
    gv_leviathanSpawnRegion = null;
    gv_cinematicNumber = 0;
    gv_platformBlowsTimerArea01 = TimerCreate();
    gv_platformBlowsTimerArea02 = TimerCreate();
    gv_platformBlowsTimerArea03 = TimerCreate();
    gv_platformBlowsTimerArea04 = TimerCreate();
    gv_leviathan = null;
    gv_leviathanMutaGroup = UnitGroupEmpty();
    gv_timerReadytoBlowArea01 = false;
    gv_timerReadytoBlowArea02 = false;
    gv_timerReadytoBlowArea03 = false;
    gv_timerReadytoBlowArea04 = false;
    gv_cMutaRadiusCheckFast = 0.0;
    gv_cMutaSpewSizeSlow = 0;
    gv_cMutaSpewSizeFast = 0;
    init_i = 0;
    while (init_i <= 50) {
        gv_mutaDefenders[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    gv_cMutaRadiusCheckSlow = 0.0;
    gv_cMutaSpawnPeriodFast = 0.0;
    gv_cMutaSpawnPeriodSlow = 0.0;
    gv_mutaSpawnMax = 0;
    gv_firstMutaSpawner = null;
    gv_alternateLastWave = false;
    gv_stat_PlayerUnitsLostToPlatform = 0;
    gv_stat_ZergKilledByPlatform = 0;
    gv_stat_UnitsLostToEnemies = 0;
    gv_objectiveKillLeviathan = c_invalidObjectiveId;
    gv_objectiveDestroyCoolantTowers = c_invalidObjectiveId;
    gv_objectiveDestroyCoolantTowersTotal = 0;
    gv_objectiveDestroyCoolantTowerProgress = 0;
    gv_briefingTargetingCursor = null;
    gv_midCinematicIsBusy = false;
    gv_midPlatformsCinematicCompleted = false;
    gv_midPlatformsHiddenUnitGroup = UnitGroupEmpty();
    gv_midPlatformsRevealer = null;
    gv_midCinematicCount = 0;
    gv_midLeviathanCinematicCompleted = false;
    gv_midLeviathanHiddenUnitGroup = UnitGroupEmpty();
    gv_leviathanCINE = null;
    gv_victoryCinematicCompleted = false;
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryRevealer = null;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
void gf_BlowingUp (unit lp_victim);
void gf_RemovingUnits (unit lp_victim);
void gf_HideGround (region lp_rEGION, unitgroup lp_gROUP);
void gf_MutaSpawnerBehavior (unit lp_spawner, unit lp_coolantTower);
bool gf_PlayerCanAttack (int lp_player);
void gf_AddUpgradeLevelforZergPlayerGroup (string lp_upgrade);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_SpawnLeviathan;
trigger gt_LeviathanPing;
trigger gt_LeviathanPatrolAI;
trigger gt_LeviathanDies;
trigger gt_LeviathanSpawnsMutas;
trigger gt_LeviathanMutaCatcher;
trigger gt_LeviathanMutaAI;
trigger gt_RemovetheCoolantTowerPing;
trigger gt_Area01CoolantTowerKilledRedSouthEastQ;
trigger gt_Area02CoolantTowerKilledGreenSouthWestQ;
trigger gt_Area03CoolantTowerKilledPurpleNorthWestQ;
trigger gt_Area04CoolantTowerKilledWhiteCentralQ;
trigger gt_Area01Kaboom;
trigger gt_Area02Kaboom;
trigger gt_Area03Kaboom;
trigger gt_Area04Kaboom;
trigger gt_Area01MoneyPickUps;
trigger gt_Area02MoneyPickUps;
trigger gt_Area03MoneyPickUps;
trigger gt_Area04MoneyPickUps;
trigger gt_CreateBlockersArea01;
trigger gt_CreateBlockersArea02;
trigger gt_CreateBlockersArea03;
trigger gt_CreateBlockersArea04;
trigger gt_StartMutaSpawners;
trigger gt_CatchtheMutaPart1;
trigger gt_CatchtheMutaPart2;
trigger gt_MutaSpawnersN3;
trigger gt_MutaSpawnersN7;
trigger gt_MutaSpawnersN16;
trigger gt_MutaSpawnersN18;
trigger gt_MutaSpawnersN20;
trigger gt_MutaSpawnersH1;
trigger gt_MutaSpawnersH2;
trigger gt_MutaSpawnersI5;
trigger gt_MutaSpawnersI6;
trigger gt_MutaSpawnersN6;
trigger gt_MutaSpawnersN12;
trigger gt_MutaSpawnersN15;
trigger gt_MutaSpawnersN17;
trigger gt_MutaSpawnersI1;
trigger gt_MutaSpawnersI4;
trigger gt_MutaSpawnersN5;
trigger gt_MutaSpawnersN9;
trigger gt_MutaSpawnersN10;
trigger gt_MutaSpawnersN14;
trigger gt_MutaSpawnersN23;
trigger gt_MutaSpawnersI2;
trigger gt_MutaSpawnersI3;
trigger gt_ResourcePickups;
trigger gt_PlatformLinesFirstTowerQ;
trigger gt_PlatformLinesBRAQ;
trigger gt_PlatformLinesBRBQ;
trigger gt_PlatformLinesBLAQ;
trigger gt_PlatformLinesBLBQ;
trigger gt_PlatformLinesTLAQ;
trigger gt_PlatformLinesTLBQ;
trigger gt_PlatformLinesTRAQ;
trigger gt_PlatformLinesTRBQ;
trigger gt_PlatformInfestedLineQ;
trigger gt_ComsatStationQ;
trigger gt_ComsatStationQ2;
trigger gt_ComsatStationQ3;
trigger gt_ShowPingCoolantTowers;
trigger gt_AutoSaves;
trigger gt_PlatformInfoSafetyDelay;
trigger gt_StartAI;
trigger gt_StartUpgradesH;
trigger gt_StartUpgradesI;
trigger gt_CombinedAttackWaves;
trigger gt_CombinedAttackWaves01;
trigger gt_CombinedAttackWaves02;
trigger gt_CombinedAttackWaves03;
trigger gt_CombinedAttackWavesLoop;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_TipCampaignTipsQ;
trigger gt_TipCoolantTowersQ;
trigger gt_TipEscapingtheExplosionQ;
trigger gt_TipLeviathanQ;
trigger gt_StatUnitsLosttoEnemies;
trigger gt_VictoryDestroySpacePlatformsCompleted;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDestroyCoolantTowersCreateQ;
trigger gt_ObjectiveDestroyCoolantTowersUpdate;
trigger gt_ObjectiveDestroyCoolantTowersComplete;
trigger gt_ObjectiveDestroyCoolantTowersFailed;
trigger gt_ObjectiveKillLeviathanCreateQ;
trigger gt_ObjectiveKillLeviathanComplete;
trigger gt_ObjectiveKillLeviathanFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingScene04;
trigger gt_MidPlatformsQ;
trigger gt_MidPlatformsSetup;
trigger gt_MidPlatformsCinematic;
trigger gt_MidPlatformsCinematicEnd;
trigger gt_MidPlatformsCleanup;
trigger gt_CreepArea01BR;
trigger gt_CreepArea02BL;
trigger gt_CreepArea03TL;
trigger gt_CreepArea04TR;
trigger gt_FinalCinematicPlatformLinesBR;
trigger gt_FinalCinematicPlatformLinesBL;
trigger gt_FinalCinematicPlatformLinesTL;
trigger gt_FinalCinematicPlatformLinesTR;
trigger gt_MidLeviathanQ;
trigger gt_MidLeviathanSetup;
trigger gt_MidLeviathanCinematic;
trigger gt_MidLeviathanCinematicEnd;
trigger gt_MidLeviathanCleanup;
trigger gt_RemoveUnits;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_BlowingUp (unit lp_victim) {
    // Implementation
    if ((UnitGetOwner(lp_victim) == gv_pLAYER_P11_PLATFORM_PIECES)) {
        return ;
    }
    else {
    }
    if ((UnitGetOwner(lp_victim) == gv_pLAYER_P01_USER)) {
        gv_stat_PlayerUnitsLostToPlatform += 1;
        gv_stat_PlayerUnitsLostToPlatform += UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount);
    }
    else {
    }
    if ((PlayerRace(UnitGetOwner(lp_victim)) == "Zerg")) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies6", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies9", 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ZergGenericDeath", UnitGroupLoopCurrent(), 1);
        gv_stat_ZergKilledByPlatform += 1;
        gv_stat_ZergKilledByPlatform = (gv_stat_ZergKilledByPlatform + UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount));
    }
    else {
    }
    UnitKill(lp_victim);
}

void gf_RemovingUnits (unit lp_victim) {
    // Implementation
    if ((UnitGetOwner(lp_victim) == gv_pLAYER_P11_PLATFORM_PIECES)) {
        return ;
    }
    else {
    }
    if ((UnitGetOwner(lp_victim) == gv_pLAYER_P01_USER)) {
        gv_stat_PlayerUnitsLostToPlatform += 1;
        gv_stat_PlayerUnitsLostToPlatform += UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount);
    }
    else {
    }
    if (((UnitGetType(lp_victim) == "MineralCrystal") || (UnitGetType(lp_victim) == "NaturalGas"))) {
        return ;
    }
    else {
    }
    if ((PlayerRace(UnitGetOwner(lp_victim)) == "Zerg")) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies6", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies9", 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ZergGenericDeath", UnitGroupLoopCurrent(), 1);
        gv_stat_ZergKilledByPlatform += 1;
        gv_stat_ZergKilledByPlatform = (gv_stat_ZergKilledByPlatform + UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount));
    }
    else {
    }
    UnitRemove(lp_victim);
}

void gf_HideGround (region lp_rEGION, unitgroup lp_gROUP) {
    // Implementation
    UnitGroupLoopBegin(UnitGroupFilterRegion(lp_gROUP, lp_rEGION, 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpacePlatformDestructibleSmallBlocker")) {
            RegionSetCenter(RegionFromId(18), UnitGetPosition(UnitGroupLoopCurrent()));
            CreepModify(RegionGetCenter(RegionFromId(18)), 2.0, false, false);
            UnitKill(UnitGroupLoopCurrent());
            TerrainShowRegion(RegionFromId(18), false);
        }
        else {
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpacePlatformDestructibleMediumBlocker")) {
            RegionSetCenter(RegionFromId(19), UnitGetPosition(UnitGroupLoopCurrent()));
            CreepModify(RegionGetCenter(RegionFromId(19)), 3.0, false, false);
            UnitKill(UnitGroupLoopCurrent());
            TerrainShowRegion(RegionFromId(19), false);
        }
        else {
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpacePlatformDestructibleLargeBlocker")) {
            RegionSetCenter(RegionFromId(17), UnitGetPosition(UnitGroupLoopCurrent()));
            CreepModify(RegionGetCenter(RegionFromId(17)), 4.0, false, false);
            UnitKill(UnitGroupLoopCurrent());
            TerrainShowRegion(RegionFromId(17), false);
        }
        else {
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpacePlatformDestructibleJumboBlocker")) {
            RegionSetCenter(RegionFromId(20), UnitGetPosition(UnitGroupLoopCurrent()));
            CreepModify(RegionGetCenter(RegionFromId(20)), 8.0, false, false);
            UnitKill(UnitGroupLoopCurrent());
            TerrainShowRegion(RegionFromId(20), false);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

void gf_MutaSpawnerBehavior (unit lp_spawner, unit lp_coolantTower) {
    int auto628E72CC_n;
    int auto628E72CC_i;
    unitgroup auto98F04F6A_g;
    int auto98F04F6A_u;

    // Variable Declarations
    unitgroup lv_nearbyEnemies;
    timer lv_cooldownTimer;
    unit lv_defender;
    int lv_cycle;
    fixed lv_mutaRadius;
    fixed lv_mutaSpawnPeriod;
    int lv_mutaSpewSize;

    // Variable Initialization
    lv_nearbyEnemies = UnitGroupEmpty();
    lv_cooldownTimer = TimerCreate();
    lv_defender = null;
    lv_cycle = 0;
    lv_mutaRadius = 0.0;
    lv_mutaSpawnPeriod = 0.0;
    lv_mutaSpewSize = 0;

    // Implementation
    while (true) {
        if (((gv_gameOver == true) || (UnitIsAlive(lp_spawner) == false))) {
            return ;
        }
        else {
        }
        if ((UnitIsAlive(lp_coolantTower) == true)) {
            lv_mutaSpawnPeriod = gv_cMutaSpawnPeriodSlow;
            lv_mutaRadius = gv_cMutaRadiusCheckSlow;
            lv_mutaSpewSize = gv_cMutaSpewSizeSlow;
        }
        else {
            lv_mutaSpawnPeriod = gv_cMutaSpawnPeriodFast;
            lv_mutaRadius = gv_cMutaRadiusCheckFast;
            lv_mutaSpewSize = gv_cMutaSpewSizeFast;
            if ((TimerGetRemaining(lv_cooldownTimer) > 0.0)) {
                TimerStart(lv_cooldownTimer, MinF(TimerGetRemaining(lv_cooldownTimer), lv_mutaSpawnPeriod), false, c_timeAI);
            }
            else {
            }
        }
        lv_nearbyEnemies = UnitGroup(null, gv_pLAYER_P01_USER, RegionCircle(UnitGetPosition(lp_spawner), lv_mutaRadius), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupLoopBegin(lv_nearbyEnemies);
        while (!UnitGroupLoopDone()) {
            if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), gv_pLAYER_P07_ZERG_EXP) == false)) {
                UnitGroupRemove(lv_nearbyEnemies, UnitGroupLoopCurrent());
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if ((gv_inCinematic == false) && (TimerGetRemaining(lv_cooldownTimer) <= 0.0) && (UnitGroupCount(gv_mutaDefenders[FixedToInt(UnitGetCustomValue(lp_spawner, 0))], c_unitCountAlive) < gv_mutaSpawnMax) && (UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
            gv_firstMutaSpawner = lp_spawner;
            TriggerExecute(gt_PlatformInfestedLineQ, true, false);
            UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/07DB1EB1"), null, UnitGetPosition(gv_firstMutaSpawner));
            TimerStart(lv_cooldownTimer, lv_mutaSpawnPeriod, false, c_timeAI);
            auto628E72CC_n = lv_mutaSpewSize;
            auto628E72CC_i = 1;
            while (auto628E72CC_i <= auto628E72CC_n) {
                UnitIssueOrder(lp_spawner, Order(AbilityCommand("InfestedVentSpawnMutalisk", 0)), c_orderQueueReplace);
                auto628E72CC_i = auto628E72CC_i + 1;
            }
        }
        else {
        }
        auto98F04F6A_g = gv_mutaDefenders[FixedToInt(UnitGetCustomValue(lp_spawner, 0))];
        auto98F04F6A_u = 1;
        while (auto98F04F6A_u <= UnitGroupCount(auto98F04F6A_g, c_unitCountAll)) {
            lv_defender = UnitGroupUnit(auto98F04F6A_g, auto98F04F6A_u);
            if ((DistanceBetweenPoints(UnitGetPosition(lv_defender), UnitGetPosition(lp_spawner)) > (lv_mutaRadius + 2.0)) && (UnitGetOwner(lv_defender) == gv_pLAYER_P08_MUTALISK_TOWERS)) {
                UnitIssueOrder(lv_defender, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lp_spawner)), c_orderQueueReplace);
            }
            else {
                if ((OrderGetAbilityCommand(UnitOrder(lv_defender, 0)) != AbilityCommand("attack", 0)) && (OrderGetAbilityCommand(UnitOrder(lv_defender, 0)) != AbilityCommand("move", 3)) && (OrderGetAbilityCommand(UnitOrder(lv_defender, 0)) != AbilityCommand("move", 0)) && (UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0) && (UnitGetOwner(lv_defender) == gv_pLAYER_P08_MUTALISK_TOWERS)) {
                    UnitIssueOrder(lv_defender, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lv_nearbyEnemies, c_unitCountAlive))), c_orderQueueReplace);
                }
                else {
                }
            }
            if (lv_defender == UnitGroupUnit(auto98F04F6A_g, auto98F04F6A_u)) {
                auto98F04F6A_u = auto98F04F6A_u + 1;
            }
        }
        Wait(1.0, c_timeAI);
    }
}

bool gf_PlayerCanAttack (int lp_player) {
    // Implementation
    if ((lp_player == 0)) {
        return false;
    }
    else {
    }
    if ((TechTreeUnitCount(lp_player, "Hatchery", c_techCountCompleteOnly) == 0) && (TechTreeUnitCount(lp_player, "Lair", c_techCountCompleteOnly) == 0) && (TechTreeUnitCount(lp_player, "Hive", c_techCountCompleteOnly) == 0)) {
        return false;
    }
    else {
    }
    if ((TechTreeUnitCount(lp_player, "RoachWarren", c_techCountCompleteOnly) == 0) && (TechTreeUnitCount(lp_player, "UltraliskCavern", c_techCountCompleteOnly) == 0) && (lp_player == gv_pLAYER_P05_ZERG_TL)) {
        return false;
    }
    else {
    }
    if ((TechTreeUnitCount(lp_player, "Spire", c_techCountCompleteOnly) == 0) && (TechTreeUnitCount(lp_player, "GreaterSpire", c_techCountCompleteOnly) == 0) && ((lp_player == gv_pLAYER_P03_ZERG_BR) || (lp_player == gv_pLAYER_P04_ZERG_BL) || (lp_player == gv_pLAYER_P06_ZERG_TR))) {
        return false;
    }
    else {
    }
    return true;
}

void gf_AddUpgradeLevelforZergPlayerGroup (string lp_upgrade) {
    // Implementation
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), lp_upgrade, 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(28);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAllow(gv_pLAYER_P09_HORNER, "OrbitalRelay", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_P09_HORNER, "OrbitalRelay", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P02_COOLANT_TOWERS, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P03_ZERG_BR, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P04_ZERG_BL, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P05_ZERG_TL, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P06_ZERG_TR, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P07_ZERG_EXP, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P08_MUTALISK_TOWERS, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P09_HORNER, 1);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P10_LEVIATHAN, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_P01_USER, gv_pLAYER_P11_PLATFORM_PIECES, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_P02_COOLANT_TOWERS, gv_pLAYER_P03_ZERG_BR, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P02_COOLANT_TOWERS, gv_pLAYER_P04_ZERG_BL, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P02_COOLANT_TOWERS, gv_pLAYER_P05_ZERG_TL, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P02_COOLANT_TOWERS, gv_pLAYER_P06_ZERG_TR, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P02_COOLANT_TOWERS, gv_pLAYER_P07_ZERG_EXP, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P02_COOLANT_TOWERS, gv_pLAYER_P08_MUTALISK_TOWERS, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P02_COOLANT_TOWERS, gv_pLAYER_P09_HORNER, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_P02_COOLANT_TOWERS, gv_pLAYER_P10_LEVIATHAN, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P03_ZERG_BR, gv_pLAYER_P04_ZERG_BL, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P03_ZERG_BR, gv_pLAYER_P05_ZERG_TL, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P03_ZERG_BR, gv_pLAYER_P06_ZERG_TR, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P03_ZERG_BR, gv_pLAYER_P07_ZERG_EXP, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P03_ZERG_BR, gv_pLAYER_P08_MUTALISK_TOWERS, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P03_ZERG_BR, gv_pLAYER_P09_HORNER, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_P03_ZERG_BR, gv_pLAYER_P10_LEVIATHAN, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P04_ZERG_BL, gv_pLAYER_P05_ZERG_TL, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P04_ZERG_BL, gv_pLAYER_P06_ZERG_TR, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P04_ZERG_BL, gv_pLAYER_P07_ZERG_EXP, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P04_ZERG_BL, gv_pLAYER_P08_MUTALISK_TOWERS, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P04_ZERG_BL, gv_pLAYER_P10_LEVIATHAN, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P05_ZERG_TL, gv_pLAYER_P06_ZERG_TR, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P05_ZERG_TL, gv_pLAYER_P07_ZERG_EXP, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P05_ZERG_TL, gv_pLAYER_P08_MUTALISK_TOWERS, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P05_ZERG_TL, gv_pLAYER_P09_HORNER, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_P05_ZERG_TL, gv_pLAYER_P10_LEVIATHAN, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P06_ZERG_TR, gv_pLAYER_P07_ZERG_EXP, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P06_ZERG_TR, gv_pLAYER_P08_MUTALISK_TOWERS, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P06_ZERG_TR, gv_pLAYER_P09_HORNER, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_P06_ZERG_TR, gv_pLAYER_P10_LEVIATHAN, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P07_ZERG_EXP, gv_pLAYER_P08_MUTALISK_TOWERS, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P07_ZERG_EXP, gv_pLAYER_P09_HORNER, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_P07_ZERG_EXP, gv_pLAYER_P10_LEVIATHAN, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_P08_MUTALISK_TOWERS, gv_pLAYER_P10_LEVIATHAN, 2);
    PlayerModifyPropertyInt(gv_pLAYER_P01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 350);
    PlayerModifyPropertyInt(gv_pLAYER_P01_USER, c_playerPropVespene, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_P03_ZERG_BR, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P03_ZERG_BR, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P04_ZERG_BL, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P04_ZERG_BL, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P05_ZERG_TL, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P05_ZERG_TL, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P06_ZERG_TR, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P06_ZERG_TR, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P07_ZERG_EXP, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_P08_MUTALISK_TOWERS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_pLAYER_P03_ZERG_BR, 4, true);
    PlayerSetColorIndex(gv_pLAYER_P04_ZERG_BL, 4, true);
    PlayerSetColorIndex(gv_pLAYER_P05_ZERG_TL, 4, true);
    PlayerSetColorIndex(gv_pLAYER_P06_ZERG_TR, 4, true);
    PlayerSetColorIndex(gv_pLAYER_P07_ZERG_EXP, 4, true);
    PlayerSetColorIndex(gv_pLAYER_P08_MUTALISK_TOWERS, 4, true);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_P03_ZERG_BR);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_P04_ZERG_BL);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_P05_ZERG_TL);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_P06_ZERG_TR);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_P07_ZERG_EXP);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_P08_MUTALISK_TOWERS);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_P10_LEVIATHAN);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerHasMercTech;
    int lv_merc;
    int lv_i;

    // Variable Initialization
    lv_playerHasMercTech = false;
    lv_merc = 0;
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("PlatformConnector", gv_pLAYER_P02_COOLANT_TOWERS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/C75FDDE3"), StringExternal("Param/Value/9B53B6F0"), StringExternal("Param/Value/FDC2FAE5"));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPropertyFixed(UnitFromId(1), c_unitPropEnergy, 50.0);
    UnitSetPropertyFixed(UnitFromId(1089), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(1088), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(262), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(75), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(264), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(511), c_unitPropEnergyPercent, 100.0);
    UnitGroupLoopBegin(UnitGroup("SpacePlatformVentsUnit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, IntToFixed(lv_i));
        lv_i += 1;
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpacePlatformVentsUnit", gv_pLAYER_P08_MUTALISK_TOWERS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/EBA46453"), StringExternal("Param/Value/45CC2087"), StringExternal("Param/Value/F74232D8"));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P11_PLATFORM_PIECES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_numberOfUnitsArea01 += 1;
        gv_unitsArea01[gv_numberOfUnitsArea01].lv_unitType = UnitGetType(UnitGroupLoopCurrent());
        gv_unitsArea01[gv_numberOfUnitsArea01].lv_player = UnitGetOwner(UnitGroupLoopCurrent());
        gv_unitsArea01[gv_numberOfUnitsArea01].lv_position = UnitGetPosition(UnitGroupLoopCurrent());
        gv_unitsArea01[gv_numberOfUnitsArea01].lv_facing = UnitGetFacing(UnitGroupLoopCurrent());
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P11_PLATFORM_PIECES, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_numberOfUnitsArea02 += 1;
        gv_unitsArea02[gv_numberOfUnitsArea02].lv_unitType = UnitGetType(UnitGroupLoopCurrent());
        gv_unitsArea02[gv_numberOfUnitsArea02].lv_player = UnitGetOwner(UnitGroupLoopCurrent());
        gv_unitsArea02[gv_numberOfUnitsArea02].lv_position = UnitGetPosition(UnitGroupLoopCurrent());
        gv_unitsArea02[gv_numberOfUnitsArea02].lv_facing = UnitGetFacing(UnitGroupLoopCurrent());
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P11_PLATFORM_PIECES, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_numberOfUnitsArea03 += 1;
        gv_unitsArea03[gv_numberOfUnitsArea03].lv_unitType = UnitGetType(UnitGroupLoopCurrent());
        gv_unitsArea03[gv_numberOfUnitsArea03].lv_player = UnitGetOwner(UnitGroupLoopCurrent());
        gv_unitsArea03[gv_numberOfUnitsArea03].lv_position = UnitGetPosition(UnitGroupLoopCurrent());
        gv_unitsArea03[gv_numberOfUnitsArea03].lv_facing = UnitGetFacing(UnitGroupLoopCurrent());
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P11_PLATFORM_PIECES, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_numberOfUnitsArea04 += 1;
        gv_unitsArea04[gv_numberOfUnitsArea04].lv_unitType = UnitGetType(UnitGroupLoopCurrent());
        gv_unitsArea04[gv_numberOfUnitsArea04].lv_player = UnitGetOwner(UnitGroupLoopCurrent());
        gv_unitsArea04[gv_numberOfUnitsArea04].lv_position = UnitGetPosition(UnitGroupLoopCurrent());
        gv_unitsArea04[gv_numberOfUnitsArea04].lv_facing = UnitGetFacing(UnitGroupLoopCurrent());
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(PointFromId(1767), 10.0, true, true);
    CreepModify(PointFromId(1870), 10.0, true, true);
    CreepModify(PointFromId(1889), 10.0, true, true);
    CreepModify(PointFromId(1890), 10.0, true, true);
    CreepModify(PointFromId(1891), 10.0, true, true);
    CreepModify(PointFromId(1892), 10.0, true, true);
    CreepModify(PointFromId(1893), 10.0, true, true);
    CreepModify(PointFromId(1902), 10.0, true, true);
    CreepModify(PointFromId(1906), 10.0, true, true);
    CreepModify(PointFromId(1907), 10.0, true, true);
    CreepModify(PointFromId(1908), 10.0, true, true);
    CreepModify(PointFromId(1909), 10.0, true, true);
    CreepModify(PointFromId(1871), 10.0, true, true);
    CreepModify(PointFromId(1910), 10.0, true, true);
    CreepModify(PointFromId(1916), 10.0, true, true);
    CreepModify(PointFromId(1926), 10.0, true, true);
    CreepModify(PointFromId(1927), 10.0, true, true);
    CreepModify(PointFromId(1928), 10.0, true, true);
    CreepModify(PointFromId(1929), 10.0, true, true);
    CreepModify(PointFromId(1930), 10.0, true, true);
    CreepModify(PointFromId(1931), 10.0, true, true);
    CreepModify(PointFromId(1932), 10.0, true, true);
    CreepModify(PointFromId(1933), 10.0, true, true);
    CreepModify(PointFromId(1872), 10.0, true, true);
    CreepModify(PointFromId(1934), 10.0, true, true);
    CreepModify(PointFromId(1935), 10.0, true, true);
    CreepModify(PointFromId(1936), 10.0, true, true);
    CreepModify(PointFromId(1937), 10.0, true, true);
    CreepModify(PointFromId(1938), 10.0, true, true);
    CreepModify(PointFromId(1939), 10.0, true, true);
    CreepModify(PointFromId(1940), 10.0, true, true);
    CreepModify(PointFromId(1941), 10.0, true, true);
    CreepModify(PointFromId(1942), 10.0, true, true);
    CreepModify(PointFromId(1943), 10.0, true, true);
    CreepModify(PointFromId(1873), 10.0, true, true);
    CreepModify(PointFromId(1874), 10.0, true, true);
    CreepModify(PointFromId(1877), 10.0, true, true);
    CreepModify(PointFromId(1878), 10.0, true, true);
    CreepModify(PointFromId(1887), 10.0, true, true);
    CreepModify(PointFromId(1888), 10.0, true, true);
    CreepModify(PointFromId(1944), 10.0, true, true);
    CreepModify(PointFromId(1945), 10.0, true, true);
    CreepModify(PointFromId(1946), 10.0, true, true);
    CreepModify(PointFromId(1947), 10.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02BMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(22));
    gv_startingMapRevealer = VisRevealerLastCreated();
    CreepSetSpeed(c_creepSpeedDecay, 500.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_pLAYER_P01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER_P03_ZERG_BR, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_P04_ZERG_BL, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_P05_ZERG_TL, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_P06_ZERG_TR, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_P07_ZERG_EXP, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_P08_MUTALISK_TOWERS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("PlatformConnector", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(500.0, 1000.0, 1500.0, 2000.0));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpacePlatformVentsUnit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(700.0, 700.0, 1250.0, 1500.0));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        UnitSetPosition(UnitFromId(90), PointFromId(1869), false);
    }
    else {
    }
    gv_leviathanMaxLife = libNtve_gf_DifficultyValueFixed(1500.0, 2500.0, 3000.0, 4000.0);
    gv_leviathanMaxEnergy = libNtve_gf_DifficultyValueFixed(500.0, 500.0, 750.0, 1000.0);
    gv_cMutaSpawnPeriodSlow = libNtve_gf_DifficultyValueFixed(60.0, 50.0, 45.0, 40.0);
    gv_cMutaSpawnPeriodFast = libNtve_gf_DifficultyValueFixed(15.0, 12.0, 9.0, 8.0);
    gv_mutaSpawnMax = libNtve_gf_DifficultyValueInt(3, 4, 4, 6);
    gv_cMutaRadiusCheckFast = 24.0;
    gv_cMutaRadiusCheckSlow = 12.0;
    gv_cMutaSpewSizeSlow = 2;
    gv_cMutaSpewSizeFast = 1;
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "zerglingmovementspeed", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CentrificalHooks", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "hydraliskspeed", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Corruptor", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scourge", false, gv_pLAYER_P01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Leviathan", false, gv_pLAYER_P01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_P01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_P01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 4;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitStartedAttack(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeReal);
    TriggerExecute(gt_StartMutaSpawners, true, false);
    UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/78CF50B7"), null, PointFromId(37));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_P01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(353)), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TimerStart(gv_achievementHardTimer, 1500.0, false, c_timeAI);
    }
    else {
    }
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyCoolantTowersCreateQ, true, false);
    TriggerExecute(gt_ComsatStationQ, true, false);
    TriggerEnable(gt_PlatformInfestedLineQ, true);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_TipCampaignTipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Leviathan
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLeviathan_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_leviathan == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_leviathanSpawnRegion = RegionFromId(104);
    gv_leviathanGuardArea = PointFromId(1662);
    libNtve_gf_CreateUnitsAtPoint2(1, "Leviathan", 0, gv_pLAYER_P10_LEVIATHAN, RegionRandomPoint(gv_leviathanSpawnRegion));
    gv_leviathan = UnitLastCreated();
    UnitSetPropertyFixed(gv_leviathan, c_unitPropLifeMax, gv_leviathanMaxLife);
    UnitSetPropertyFixed(gv_leviathan, c_unitPropEnergyMax, gv_leviathanMaxEnergy);
    UnitSetPropertyFixed(gv_leviathan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_leviathan, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_P01_USER);
    TriggerEnable(gt_LeviathanDies, true);
    TriggerEnable(gt_LeviathanMutaCatcher, true);
    TriggerExecute(gt_LeviathanPing, true, false);
    TriggerExecute(gt_TipLeviathanQ, true, false);
    TriggerExecute(gt_LeviathanPatrolAI, true, false);
    TriggerEnable(gt_LeviathanSpawnsMutas, true);
    TriggerEnable(gt_LeviathanMutaAI, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLeviathan_Init () {
    gt_SpawnLeviathan = TriggerCreate("gt_SpawnLeviathan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Ping
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanPing_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/36BCAB71"), null, UnitGetPosition(gv_leviathan));
    PingCreate(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_leviathan), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    gv_objectiveLeviathanPing = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_leviathan);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5F50BFF5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanPing_Init () {
    gt_LeviathanPing = TriggerCreate("gt_LeviathanPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Patrol AI
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanPatrolAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(gv_leviathan, false);
    AIAttackWaveUseUnit(gv_pLAYER_P10_LEVIATHAN, gv_leviathan);
    AIAttackWaveSetGatherPoint(gv_pLAYER_P10_LEVIATHAN, UnitGetPosition(gv_leviathan));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_P10_LEVIATHAN, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1473), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1474), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1475), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1476), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1477), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1478), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1479), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1480), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1481), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1482), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_P10_LEVIATHAN, PointFromId(1483), false);
    AIAttackWaveUseUnit(gv_pLAYER_P10_LEVIATHAN, gv_leviathan);
    AIAttackWaveSend(gv_pLAYER_P10_LEVIATHAN, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanPatrolAI_Init () {
    gt_LeviathanPatrolAI = TriggerCreate("gt_LeviathanPatrolAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Dies
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_leviathan == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_objectiveLeviathanPing);
    TriggerExecute(gt_ObjectiveKillLeviathanComplete, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanDies_Init () {
    gt_LeviathanDies = TriggerCreate("gt_LeviathanDies_Func");
    TriggerEnable(gt_LeviathanDies, false);
    TriggerAddEventUnitDied(gt_LeviathanDies, UnitRefFromVariable("gv_leviathan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Spawns Mutas
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanSpawnsMutas_Func (bool testConds, bool runActions) {
    int autoD38025F2_n;
    int autoD38025F2_i;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_leviathan) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_P01_USER, RegionCircle(UnitGetPosition(gv_leviathan), 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIRemoveUnitFromAnyWaves(gv_leviathan);
    UnitIssueOrder(gv_leviathan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    autoD38025F2_n = libNtve_gf_DifficultyValueInt(3, 4, 4, 5);
    autoD38025F2_i = 1;
    while (autoD38025F2_i <= autoD38025F2_n) {
        if ((UnitIsAlive(gv_leviathan) == false)) {
            return true;
        }
        else {
        }
        if ((UnitGroupCount(gv_leviathanMutaGroup, c_unitCountAlive) < libNtve_gf_DifficultyValueInt(4, 4, 5, 6))) {
            UnitIssueOrder(gv_leviathan, Order(AbilityCommand("LeviathanSpawnMutalisk", 0)), c_orderQueueReplace);
        }
        else {
        }
        Wait(libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 0.75), c_timeGame);
        autoD38025F2_i = autoD38025F2_i + 1;
    }
    AISetUnitScriptControlled(gv_leviathan, false);
    TriggerExecute(gt_LeviathanPatrolAI, true, false);
    Wait(libNtve_gf_DifficultyValueFixed(13.5, 12.0, 11.0, 10.25), c_timeGame);
    TriggerEnable(gt_LeviathanSpawnsMutas, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanSpawnsMutas_Init () {
    gt_LeviathanSpawnsMutas = TriggerCreate("gt_LeviathanSpawnsMutas_Func");
    TriggerEnable(gt_LeviathanSpawnsMutas, false);
    TriggerAddEventTimePeriodic(gt_LeviathanSpawnsMutas, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Muta Catcher
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanMutaCatcher_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Mutalisk"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_P10_LEVIATHAN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_leviathanMutaGroup, EventUnit());
    UnitBehaviorAdd(EventUnit(), "ScanRangeBonus", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanMutaCatcher_Init () {
    gt_LeviathanMutaCatcher = TriggerCreate("gt_LeviathanMutaCatcher_Func");
    TriggerEnable(gt_LeviathanMutaCatcher, false);
    TriggerAddEventUnitRegion(gt_LeviathanMutaCatcher, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Muta AI
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanMutaAI_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_leviathanMutaGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetPosition(gv_leviathan), 8.0)), 8.0, UnitGetFacing(gv_leviathan))));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((UnitIsAlive(gv_leviathan) == false)) {
        UnitGroupLoopBegin(gv_leviathanMutaGroup);
        while (!UnitGroupLoopDone()) {
            AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
            AISetUnitSuicide(UnitGroupLoopCurrent(), true);
            UnitGroupRemove(gv_leviathanMutaGroup, UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanMutaAI_Init () {
    gt_LeviathanMutaAI = TriggerCreate("gt_LeviathanMutaAI_Func");
    TriggerEnable(gt_LeviathanMutaAI, false);
    TriggerAddEventTimePeriodic(gt_LeviathanMutaAI, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove the Coolant Tower Ping
//--------------------------------------------------------------------------------------------------
bool gt_RemovetheCoolantTowerPing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == UnitFromId(96)) || (EventUnit() == UnitFromId(90)) || (EventUnit() == UnitFromId(108)) || (EventUnit() == UnitFromId(29))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(UnitFromId(29), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
        libNtve_gf_KillModel(gv_objectivePlatformsActor01);
    }
    else {
    }
    if ((UnitGetPropertyFixed(UnitFromId(96), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
        libNtve_gf_KillModel(gv_objectivePlatformsActor02);
    }
    else {
    }
    if ((UnitGetPropertyFixed(UnitFromId(108), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
        libNtve_gf_KillModel(gv_objectivePlatformsActor03);
    }
    else {
    }
    if ((UnitGetPropertyFixed(UnitFromId(90), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
        libNtve_gf_KillModel(gv_objectivePlatformsActor04);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemovetheCoolantTowerPing_Init () {
    gt_RemovetheCoolantTowerPing = TriggerCreate("gt_RemovetheCoolantTowerPing_Func");
    TriggerAddEventUnitAttacked(gt_RemovetheCoolantTowerPing, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 01 - Coolant Tower Killed - Red (South East) Q
//--------------------------------------------------------------------------------------------------
bool gt_Area01CoolantTowerKilledRedSouthEastQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_revealer;

    // Variable Initialization
    lv_revealer = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_objectivePlatformsPing03);
    TriggerExecute(gt_ObjectiveDestroyCoolantTowersUpdate, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(1069)), "Signal OneTower");
    VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(1));
    lv_revealer = VisRevealerLastCreated();
    if ((gv_objectiveDestroyCoolantTowerProgress == 4)) {
        TriggerExecute(gt_VictoryDestroySpacePlatformsCompleted, true, false);
        while (gv_midCinematicIsBusy) {
            Wait(1.0, c_timeGame);
        }
        gv_midCinematicIsBusy = true;
        gv_cinematicNumber = 1;
        return true;
        gv_midCinematicIsBusy = false;
    }
    else {
    }
    TriggerExecute(gt_PlatformLinesBRAQ, true, false);
    TimerStart(gv_platformBlowsTimerArea01, 45.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/4C8584A2"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    if ((gv_inCinematic == true)) {
        TimerPause(TimerLastStarted(), true);
    }
    else {
    }
    libNtve_gf_WaitForTimer(gv_platformBlowsTimerArea01, 15.0, false);
    TriggerExecute(gt_PlatformLinesBRBQ, true, false);
    gv_timerReadytoBlowArea01 = true;
    libNtve_gf_WaitForTimer(gv_platformBlowsTimerArea01, 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    while (gv_midCinematicIsBusy) {
        Wait(1.0, c_timeGame);
    }
    gv_midCinematicIsBusy = true;
    gv_cinematicNumber = 1;
    gv_midCinematicCount = (gv_midCinematicCount + 1);
    TriggerExecute(gt_MidPlatformsQ, true, true);
    gv_midCinematicIsBusy = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area01CoolantTowerKilledRedSouthEastQ_Init () {
    gt_Area01CoolantTowerKilledRedSouthEastQ = TriggerCreate("gt_Area01CoolantTowerKilledRedSouthEastQ_Func");
    TriggerAddEventUnitDied(gt_Area01CoolantTowerKilledRedSouthEastQ, UnitRefFromUnit(UnitFromId(108)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 02 - Coolant Tower Killed - Green (South West) Q
//--------------------------------------------------------------------------------------------------
bool gt_Area02CoolantTowerKilledGreenSouthWestQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_revealer;

    // Variable Initialization
    lv_revealer = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_objectivePlatformsPing04);
    TriggerExecute(gt_ObjectiveDestroyCoolantTowersUpdate, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(1085)), "Signal OneTower");
    VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(2));
    lv_revealer = VisRevealerLastCreated();
    if ((gv_objectiveDestroyCoolantTowerProgress == 4)) {
        TriggerExecute(gt_VictoryDestroySpacePlatformsCompleted, true, false);
        while (gv_midCinematicIsBusy) {
            Wait(1.0, c_timeGame);
        }
        gv_midCinematicIsBusy = true;
        gv_cinematicNumber = 2;
        return true;
        gv_midCinematicIsBusy = false;
    }
    else {
    }
    TriggerExecute(gt_PlatformLinesBLAQ, true, false);
    TimerStart(gv_platformBlowsTimerArea02, 45.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/6A242E34"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    if ((gv_inCinematic == true)) {
        TimerPause(TimerLastStarted(), true);
    }
    else {
    }
    libNtve_gf_WaitForTimer(gv_platformBlowsTimerArea02, 15.0, false);
    TriggerExecute(gt_PlatformLinesBLBQ, true, false);
    gv_timerReadytoBlowArea02 = true;
    libNtve_gf_WaitForTimer(gv_platformBlowsTimerArea02, 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    while (gv_midCinematicIsBusy) {
        Wait(1.0, c_timeGame);
    }
    gv_midCinematicIsBusy = true;
    gv_cinematicNumber = 2;
    gv_midCinematicCount = (gv_midCinematicCount + 1);
    TriggerExecute(gt_MidPlatformsQ, true, true);
    gv_midCinematicIsBusy = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area02CoolantTowerKilledGreenSouthWestQ_Init () {
    gt_Area02CoolantTowerKilledGreenSouthWestQ = TriggerCreate("gt_Area02CoolantTowerKilledGreenSouthWestQ_Func");
    TriggerAddEventUnitDied(gt_Area02CoolantTowerKilledGreenSouthWestQ, UnitRefFromUnit(UnitFromId(90)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 03 - Coolant Tower Killed - Purple (North West) Q
//--------------------------------------------------------------------------------------------------
bool gt_Area03CoolantTowerKilledPurpleNorthWestQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_revealer;

    // Variable Initialization
    lv_revealer = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_objectivePlatformsPing02);
    TriggerExecute(gt_ObjectiveDestroyCoolantTowersUpdate, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(554)), "Signal OneTower");
    VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(3));
    lv_revealer = VisRevealerLastCreated();
    if ((gv_objectiveDestroyCoolantTowerProgress == 4)) {
        TriggerExecute(gt_VictoryDestroySpacePlatformsCompleted, true, false);
        while (gv_midCinematicIsBusy) {
            Wait(1.0, c_timeGame);
        }
        gv_midCinematicIsBusy = true;
        gv_cinematicNumber = 3;
        return true;
        gv_midCinematicIsBusy = false;
    }
    else {
    }
    TriggerExecute(gt_PlatformLinesTLAQ, true, false);
    TimerStart(gv_platformBlowsTimerArea03, 45.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/2F9B939E"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    if ((gv_inCinematic == true)) {
        TimerPause(TimerLastStarted(), true);
    }
    else {
    }
    libNtve_gf_WaitForTimer(gv_platformBlowsTimerArea03, 15.0, false);
    TriggerExecute(gt_PlatformLinesTLBQ, true, false);
    gv_timerReadytoBlowArea03 = true;
    libNtve_gf_WaitForTimer(gv_platformBlowsTimerArea03, 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    while (gv_midCinematicIsBusy) {
        Wait(1.0, c_timeGame);
    }
    gv_midCinematicIsBusy = true;
    gv_cinematicNumber = 3;
    gv_midCinematicCount = (gv_midCinematicCount + 1);
    TriggerExecute(gt_MidPlatformsQ, true, true);
    gv_midCinematicIsBusy = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area03CoolantTowerKilledPurpleNorthWestQ_Init () {
    gt_Area03CoolantTowerKilledPurpleNorthWestQ = TriggerCreate("gt_Area03CoolantTowerKilledPurpleNorthWestQ_Func");
    TriggerAddEventUnitDied(gt_Area03CoolantTowerKilledPurpleNorthWestQ, UnitRefFromUnit(UnitFromId(96)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 04 - Coolant Tower Killed - White (Central) Q
//--------------------------------------------------------------------------------------------------
bool gt_Area04CoolantTowerKilledWhiteCentralQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_revealer;

    // Variable Initialization
    lv_revealer = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_objectivePlatformsPing01);
    TriggerExecute(gt_ObjectiveDestroyCoolantTowersUpdate, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(1533)), "Signal OneTower");
    VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(4));
    lv_revealer = VisRevealerLastCreated();
    if ((gv_objectiveDestroyCoolantTowerProgress == 4)) {
        TriggerExecute(gt_VictoryDestroySpacePlatformsCompleted, true, false);
        while (gv_midCinematicIsBusy) {
            Wait(1.0, c_timeGame);
        }
        gv_midCinematicIsBusy = true;
        gv_cinematicNumber = 4;
        return true;
        gv_midCinematicIsBusy = false;
    }
    else {
    }
    TriggerExecute(gt_PlatformLinesTRAQ, true, false);
    TimerStart(gv_platformBlowsTimerArea04, 45.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/AD56BF00"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    if ((gv_inCinematic == true)) {
        TimerPause(TimerLastStarted(), true);
    }
    else {
    }
    libNtve_gf_WaitForTimer(gv_platformBlowsTimerArea04, 15.0, false);
    TriggerExecute(gt_PlatformLinesTRBQ, true, false);
    gv_timerReadytoBlowArea04 = true;
    libNtve_gf_WaitForTimer(gv_platformBlowsTimerArea04, 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    while (gv_midCinematicIsBusy) {
        Wait(1.0, c_timeGame);
    }
    gv_midCinematicIsBusy = true;
    gv_cinematicNumber = 4;
    gv_midCinematicCount = (gv_midCinematicCount + 1);
    TriggerExecute(gt_MidPlatformsQ, true, true);
    gv_midCinematicIsBusy = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area04CoolantTowerKilledWhiteCentralQ_Init () {
    gt_Area04CoolantTowerKilledWhiteCentralQ = TriggerCreate("gt_Area04CoolantTowerKilledWhiteCentralQ_Func");
    TriggerAddEventUnitDied(gt_Area04CoolantTowerKilledWhiteCentralQ, UnitRefFromUnit(UnitFromId(29)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 01 - Kaboom!
//--------------------------------------------------------------------------------------------------
bool gt_Area01Kaboom_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateBlockersArea01, true, false);
    libNtve_gf_SendActorMessageToGameRegion(gv_ground0, "Signal DoodadDeath");
    gf_HideGround(gv_ground0, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground1, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground2, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground3, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground3, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground4, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground4, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground5, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground5, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground6, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground6, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground7, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground7, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground8, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground8, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground9, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground9, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground10, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground10, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground11, gv_pATHINGBLOCKERAREA01);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground11, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    TriggerExecute(gt_Area01MoneyPickUps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area01Kaboom_Init () {
    gt_Area01Kaboom = TriggerCreate("gt_Area01Kaboom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 02 - Kaboom!
//--------------------------------------------------------------------------------------------------
bool gt_Area02Kaboom_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateBlockersArea02, true, false);
    libNtve_gf_SendActorMessageToGameRegion(gv_ground0, "Signal DoodadDeath");
    gf_HideGround(gv_ground0, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground1, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground2, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground3, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground3, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground4, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground4, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground5, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground5, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground6, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground6, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground7, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground7, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground8, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground8, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground9, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground9, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground10, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground10, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground11, gv_pATHINGBLOCKERAREA02);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground11, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    TriggerExecute(gt_Area02MoneyPickUps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area02Kaboom_Init () {
    gt_Area02Kaboom = TriggerCreate("gt_Area02Kaboom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 03 - Kaboom!
//--------------------------------------------------------------------------------------------------
bool gt_Area03Kaboom_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateBlockersArea03, true, false);
    libNtve_gf_SendActorMessageToGameRegion(gv_ground0, "Signal DoodadDeath");
    gf_HideGround(gv_ground0, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground1, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground2, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground3, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground3, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground4, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground4, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground5, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground5, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground6, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground6, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground7, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground7, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground8, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground8, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground9, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground9, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground10, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground10, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground11, gv_pATHINGBLOCKERAREA03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground11, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    TriggerExecute(gt_Area03MoneyPickUps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area03Kaboom_Init () {
    gt_Area03Kaboom = TriggerCreate("gt_Area03Kaboom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 04 - Kaboom!
//--------------------------------------------------------------------------------------------------
bool gt_Area04Kaboom_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateBlockersArea04, true, false);
    libNtve_gf_SendActorMessageToGameRegion(gv_ground0, "Signal DoodadDeath");
    gf_HideGround(gv_ground0, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground1, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground2, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground3, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground3, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground4, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground4, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground5, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground5, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground6, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground6, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground7, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground7, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground8, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground8, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground9, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground9, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground10, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground10, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    gf_HideGround(gv_ground11, gv_pATHINGBLOCKERAREA04);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground11, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_BlowingUp(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    TriggerExecute(gt_Area04MoneyPickUps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area04Kaboom_Init () {
    gt_Area04Kaboom = TriggerCreate("gt_Area04Kaboom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 01 Money Pick Ups
//--------------------------------------------------------------------------------------------------
bool gt_Area01MoneyPickUps_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(201));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(204));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(217));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(218));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(224));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(87));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(89));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(91));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(93));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(98));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area01MoneyPickUps_Init () {
    gt_Area01MoneyPickUps = TriggerCreate("gt_Area01MoneyPickUps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 02 Money Pick Ups
//--------------------------------------------------------------------------------------------------
bool gt_Area02MoneyPickUps_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(236));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(238));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(304));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(308));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(312));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(328));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(343));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(344));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(356));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(361));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(363));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(426));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(509));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(526));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(773));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(776));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(937));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(940));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(947));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area02MoneyPickUps_Init () {
    gt_Area02MoneyPickUps = TriggerCreate("gt_Area02MoneyPickUps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 03 Money Pick Ups
//--------------------------------------------------------------------------------------------------
bool gt_Area03MoneyPickUps_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(959));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(960));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(1002));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(1003));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(1155));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1156));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1159));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1164));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1167));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area03MoneyPickUps_Init () {
    gt_Area03MoneyPickUps = TriggerCreate("gt_Area03MoneyPickUps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area 04 Money Pick Ups
//--------------------------------------------------------------------------------------------------
bool gt_Area04MoneyPickUps_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(2));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(19));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(21));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralCrystal", 0, 0, PointFromId(38));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(40));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(42));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(45));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(46));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Area04MoneyPickUps_Init () {
    gt_Area04MoneyPickUps = TriggerCreate("gt_Area04MoneyPickUps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateBlockersArea01
//--------------------------------------------------------------------------------------------------
bool gt_CreateBlockersArea01_Func (bool testConds, bool runActions) {
    int autoE55EFECC_ae;
    int autoE55EFECC_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE55EFECC_ae = gv_numberOfUnitsArea01;
    autoE55EFECC_ai = 1;
    lv_i = 1;
    while ((autoE55EFECC_ai >= 0 && lv_i <= autoE55EFECC_ae) || (autoE55EFECC_ai <= 0 && lv_i >= autoE55EFECC_ae)) {
        UnitCreate(1, gv_unitsArea01[lv_i].lv_unitType, 0, gv_unitsArea01[lv_i].lv_player, gv_unitsArea01[lv_i].lv_position, gv_unitsArea01[lv_i].lv_facing);
        UnitSetPosition(UnitLastCreated(), gv_unitsArea01[lv_i].lv_position, false);
        UnitGroupAdd(gv_pATHINGBLOCKERAREA01, UnitLastCreated());
        if (lv_i == autoE55EFECC_ae) {
            break;
        }
        lv_i = lv_i + autoE55EFECC_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBlockersArea01_Init () {
    gt_CreateBlockersArea01 = TriggerCreate("gt_CreateBlockersArea01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateBlockersArea02
//--------------------------------------------------------------------------------------------------
bool gt_CreateBlockersArea02_Func (bool testConds, bool runActions) {
    int auto6DAF0FAC_ae;
    int auto6DAF0FAC_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6DAF0FAC_ae = gv_numberOfUnitsArea02;
    auto6DAF0FAC_ai = 1;
    lv_i = 1;
    while ((auto6DAF0FAC_ai >= 0 && lv_i <= auto6DAF0FAC_ae) || (auto6DAF0FAC_ai <= 0 && lv_i >= auto6DAF0FAC_ae)) {
        UnitCreate(1, gv_unitsArea02[lv_i].lv_unitType, 0, gv_unitsArea02[lv_i].lv_player, gv_unitsArea02[lv_i].lv_position, gv_unitsArea02[lv_i].lv_facing);
        UnitSetPosition(UnitLastCreated(), gv_unitsArea02[lv_i].lv_position, false);
        UnitGroupAdd(gv_pATHINGBLOCKERAREA02, UnitLastCreated());
        if (lv_i == auto6DAF0FAC_ae) {
            break;
        }
        lv_i = lv_i + auto6DAF0FAC_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBlockersArea02_Init () {
    gt_CreateBlockersArea02 = TriggerCreate("gt_CreateBlockersArea02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateBlockersArea03
//--------------------------------------------------------------------------------------------------
bool gt_CreateBlockersArea03_Func (bool testConds, bool runActions) {
    int autoAA7BDA45_ae;
    int autoAA7BDA45_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA7BDA45_ae = gv_numberOfUnitsArea03;
    autoAA7BDA45_ai = 1;
    lv_i = 1;
    while ((autoAA7BDA45_ai >= 0 && lv_i <= autoAA7BDA45_ae) || (autoAA7BDA45_ai <= 0 && lv_i >= autoAA7BDA45_ae)) {
        UnitCreate(1, gv_unitsArea03[lv_i].lv_unitType, 0, gv_unitsArea03[lv_i].lv_player, gv_unitsArea03[lv_i].lv_position, gv_unitsArea03[lv_i].lv_facing);
        UnitSetPosition(UnitLastCreated(), gv_unitsArea03[lv_i].lv_position, false);
        UnitGroupAdd(gv_pATHINGBLOCKERAREA03, UnitLastCreated());
        if (lv_i == autoAA7BDA45_ae) {
            break;
        }
        lv_i = lv_i + autoAA7BDA45_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBlockersArea03_Init () {
    gt_CreateBlockersArea03 = TriggerCreate("gt_CreateBlockersArea03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateBlockersArea04
//--------------------------------------------------------------------------------------------------
bool gt_CreateBlockersArea04_Func (bool testConds, bool runActions) {
    int auto38E900CA_ae;
    int auto38E900CA_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto38E900CA_ae = gv_numberOfUnitsArea04;
    auto38E900CA_ai = 1;
    lv_i = 1;
    while ((auto38E900CA_ai >= 0 && lv_i <= auto38E900CA_ae) || (auto38E900CA_ai <= 0 && lv_i >= auto38E900CA_ae)) {
        UnitCreate(1, gv_unitsArea04[lv_i].lv_unitType, 0, gv_unitsArea04[lv_i].lv_player, gv_unitsArea04[lv_i].lv_position, gv_unitsArea04[lv_i].lv_facing);
        UnitSetPosition(UnitLastCreated(), gv_unitsArea04[lv_i].lv_position, false);
        UnitGroupAdd(gv_pATHINGBLOCKERAREA04, UnitLastCreated());
        if (lv_i == auto38E900CA_ae) {
            break;
        }
        lv_i = lv_i + auto38E900CA_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBlockersArea04_Init () {
    gt_CreateBlockersArea04 = TriggerCreate("gt_CreateBlockersArea04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Muta Spawners
//--------------------------------------------------------------------------------------------------
bool gt_StartMutaSpawners_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MutaSpawnersI4, true, false);
    TriggerExecute(gt_MutaSpawnersN3, true, false);
    TriggerExecute(gt_MutaSpawnersN5, true, false);
    TriggerExecute(gt_MutaSpawnersN6, true, false);
    Wait(0.25, c_timeAI);
    TriggerExecute(gt_MutaSpawnersN7, true, false);
    TriggerExecute(gt_MutaSpawnersN9, true, false);
    TriggerExecute(gt_MutaSpawnersN10, true, false);
    TriggerExecute(gt_MutaSpawnersN12, true, false);
    Wait(0.25, c_timeAI);
    TriggerExecute(gt_MutaSpawnersN14, true, false);
    TriggerExecute(gt_MutaSpawnersN15, true, false);
    TriggerExecute(gt_MutaSpawnersN16, true, false);
    TriggerExecute(gt_MutaSpawnersN17, true, false);
    TriggerExecute(gt_MutaSpawnersN18, true, false);
    Wait(0.25, c_timeAI);
    TriggerExecute(gt_MutaSpawnersH2, true, false);
    TriggerExecute(gt_MutaSpawnersN20, true, false);
    TriggerExecute(gt_MutaSpawnersH1, true, false);
    TriggerExecute(gt_MutaSpawnersN23, true, false);
    Wait(0.1, c_timeAI);
    TriggerExecute(gt_MutaSpawnersI6, true, false);
    TriggerExecute(gt_MutaSpawnersI5, true, false);
    TriggerExecute(gt_MutaSpawnersI1, true, false);
    TriggerExecute(gt_MutaSpawnersI2, true, false);
    TriggerExecute(gt_MutaSpawnersI3, true, false);
    TriggerEnable(gt_CatchtheMutaPart1, true);
    TriggerEnable(gt_CatchtheMutaPart2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartMutaSpawners_Init () {
    gt_StartMutaSpawners = TriggerCreate("gt_StartMutaSpawners_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Catch the Muta, Part 1
//--------------------------------------------------------------------------------------------------
bool gt_CatchtheMutaPart1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_P08_MUTALISK_TOWERS))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_mutaDefenders[FixedToInt(UnitGetCustomValue(EventUnit(), 0))], EventUnitCreatedUnit());
    UnitSetCustomValue(EventUnitCreatedUnit(), 0, UnitGetCustomValue(EventUnit(), 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CatchtheMutaPart1_Init () {
    gt_CatchtheMutaPart1 = TriggerCreate("gt_CatchtheMutaPart1_Func");
    TriggerEnable(gt_CatchtheMutaPart1, false);
    TriggerAddEventUnitCreated(gt_CatchtheMutaPart1, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Catch the Muta, Part 2
//--------------------------------------------------------------------------------------------------
bool gt_CatchtheMutaPart2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "SpacePlatformVentsUnit"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_P08_MUTALISK_TOWERS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Mutalisk"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), gv_pLAYER_P07_ZERG_EXP, true);
    AISetUnitScriptControlled(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CatchtheMutaPart2_Init () {
    gt_CatchtheMutaPart2 = TriggerCreate("gt_CatchtheMutaPart2_Func");
    TriggerEnable(gt_CatchtheMutaPart2, false);
    TriggerAddEventUnitRegion(gt_CatchtheMutaPart2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N3
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(334), UnitFromId(29));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN3_Init () {
    gt_MutaSpawnersN3 = TriggerCreate("gt_MutaSpawnersN3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N7
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN7_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1665), UnitFromId(29));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN7_Init () {
    gt_MutaSpawnersN7 = TriggerCreate("gt_MutaSpawnersN7_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N16
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN16_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1265), UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN16_Init () {
    gt_MutaSpawnersN16 = TriggerCreate("gt_MutaSpawnersN16_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N18
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN18_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1263), UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN18_Init () {
    gt_MutaSpawnersN18 = TriggerCreate("gt_MutaSpawnersN18_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N20
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN20_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1262), UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN20_Init () {
    gt_MutaSpawnersN20 = TriggerCreate("gt_MutaSpawnersN20_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners H1
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersH1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(557), UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersH1_Init () {
    gt_MutaSpawnersH1 = TriggerCreate("gt_MutaSpawnersH1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners H2
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersH2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1261), UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersH2_Init () {
    gt_MutaSpawnersH2 = TriggerCreate("gt_MutaSpawnersH2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners I5
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersI5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1015), UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersI5_Init () {
    gt_MutaSpawnersI5 = TriggerCreate("gt_MutaSpawnersI5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners I6
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersI6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1124), UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersI6_Init () {
    gt_MutaSpawnersI6 = TriggerCreate("gt_MutaSpawnersI6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N6
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(2324), UnitFromId(108));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN6_Init () {
    gt_MutaSpawnersN6 = TriggerCreate("gt_MutaSpawnersN6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N12
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN12_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(298), UnitFromId(108));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN12_Init () {
    gt_MutaSpawnersN12 = TriggerCreate("gt_MutaSpawnersN12_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N15
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN15_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1271), UnitFromId(108));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN15_Init () {
    gt_MutaSpawnersN15 = TriggerCreate("gt_MutaSpawnersN15_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N17
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN17_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1270), UnitFromId(108));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN17_Init () {
    gt_MutaSpawnersN17 = TriggerCreate("gt_MutaSpawnersN17_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners I1
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersI1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1260), UnitFromId(108));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersI1_Init () {
    gt_MutaSpawnersI1 = TriggerCreate("gt_MutaSpawnersI1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners I4
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersI4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(302), UnitFromId(108));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersI4_Init () {
    gt_MutaSpawnersI4 = TriggerCreate("gt_MutaSpawnersI4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N5
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(2329), UnitFromId(90));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN5_Init () {
    gt_MutaSpawnersN5 = TriggerCreate("gt_MutaSpawnersN5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N9
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN9_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(243), UnitFromId(90));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN9_Init () {
    gt_MutaSpawnersN9 = TriggerCreate("gt_MutaSpawnersN9_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N10
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN10_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(360), UnitFromId(90));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN10_Init () {
    gt_MutaSpawnersN10 = TriggerCreate("gt_MutaSpawnersN10_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N14
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN14_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1016), UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN14_Init () {
    gt_MutaSpawnersN14 = TriggerCreate("gt_MutaSpawnersN14_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners N23
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersN23_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(2328), UnitFromId(90));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersN23_Init () {
    gt_MutaSpawnersN23 = TriggerCreate("gt_MutaSpawnersN23_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners I2
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersI2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1266), UnitFromId(90));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersI2_Init () {
    gt_MutaSpawnersI2 = TriggerCreate("gt_MutaSpawnersI2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muta Spawners I3
//--------------------------------------------------------------------------------------------------
bool gt_MutaSpawnersI3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MutaSpawnerBehavior(UnitFromId(1264), UnitFromId(90));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaSpawnersI3_Init () {
    gt_MutaSpawnersI3 = TriggerCreate("gt_MutaSpawnersI3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickups_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "MineralCrystal")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "NaturalGas")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickups_Init () {
    gt_ResourcePickups = TriggerCreate("gt_ResourcePickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines First Tower Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesFirstTowerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BRaynor00010", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00010", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TipEscapingtheExplosionQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesFirstTowerQ_Init () {
    gt_PlatformLinesFirstTowerQ = TriggerCreate("gt_PlatformLinesFirstTowerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines BR - A Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesBRAQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BHorner00019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00019", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesBRAQ_Init () {
    gt_PlatformLinesBRAQ = TriggerCreate("gt_PlatformLinesBRAQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines BR - B Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesBRBQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_P01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BRaynor00020", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00020", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesBRBQ_Init () {
    gt_PlatformLinesBRBQ = TriggerCreate("gt_PlatformLinesBRBQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines BL - A Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesBLAQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BHorner00021", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00021", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesBLAQ_Init () {
    gt_PlatformLinesBLAQ = TriggerCreate("gt_PlatformLinesBLAQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines BL - B Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesBLBQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_P01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BRaynor00022", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00022", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesBLBQ_Init () {
    gt_PlatformLinesBLBQ = TriggerCreate("gt_PlatformLinesBLBQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines TL - A Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesTLAQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BHorner00021", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00021", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesTLAQ_Init () {
    gt_PlatformLinesTLAQ = TriggerCreate("gt_PlatformLinesTLAQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines TL - B Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesTLBQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_P01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BRaynor00010", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00010", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesTLBQ_Init () {
    gt_PlatformLinesTLBQ = TriggerCreate("gt_PlatformLinesTLBQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines TR - A Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesTRAQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BHorner00019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00019", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesTRAQ_Init () {
    gt_PlatformLinesTRAQ = TriggerCreate("gt_PlatformLinesTRAQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Lines TR - B Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformLinesTRBQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_P01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BRaynor00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00011", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformLinesTRBQ_Init () {
    gt_PlatformLinesTRBQ = TriggerCreate("gt_PlatformLinesTRBQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Infested Line Q
//--------------------------------------------------------------------------------------------------
bool gt_PlatformInfestedLineQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    PingCreate(PlayerGroupAll(), "PingSimple", UnitGetPosition(gv_firstMutaSpawner), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_ventPing01 = PingLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BHorner00006", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00006", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    PingDestroy(gv_ventPing01);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformInfestedLineQ_Init () {
    gt_PlatformInfestedLineQ = TriggerCreate("gt_PlatformInfestedLineQ_Func");
    TriggerEnable(gt_PlatformInfestedLineQ, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Comsat Station Q
//--------------------------------------------------------------------------------------------------
bool gt_ComsatStationQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hiddenCommandCenter;

    // Variable Initialization
    lv_hiddenCommandCenter = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreateUnitsAtPoint2(1, "OrbitalCommand", 0, gv_pLAYER_P09_HORNER, PointFromId(1468));
    lv_hiddenCommandCenter = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_hiddenCommandCenter, false);
    Wait(3.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02BHorner00027", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00027", -1), c_transmissionDurationAdd, 0.0, true);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(97)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(104)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(477)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(488)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(508)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(514)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(517)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(532)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(538)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(543)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_hiddenCommandCenter);
    TriggerExecute(gt_ShowPingCoolantTowers, true, false);
    // Transmission - SoundLink("TValerian02BHorner00028", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00028", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(5.0, c_timeGame);
    // Transmission - SoundLink("TValerian02BTychus00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BTychus00003", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02BRaynor00004", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00004", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    TriggerExecute(gt_TipCoolantTowersQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComsatStationQ_Init () {
    gt_ComsatStationQ = TriggerCreate("gt_ComsatStationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Comsat Station Q 2
//--------------------------------------------------------------------------------------------------
bool gt_ComsatStationQ2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hiddenCommandCenter;

    // Variable Initialization
    lv_hiddenCommandCenter = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_P01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_P01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_PlayerIsInCombat(gv_pLAYER_P01_USER) == false) && ((gv_timerReadytoBlowArea01 == false) && (gv_timerReadytoBlowArea02 == false) && (gv_timerReadytoBlowArea03 == false) && (gv_timerReadytoBlowArea04 == false)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(UnitFromId(108)) == true)) {
        TriggerQueueEnter();
        libNtve_gf_CreateUnitsAtPoint2(1, "OrbitalCommand", 0, gv_pLAYER_P09_HORNER, PointFromId(1468));
        lv_hiddenCommandCenter = UnitLastCreated();
        libNtve_gf_ShowHideUnit(lv_hiddenCommandCenter, false);
        Wait(3.0, c_timeGame);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        Wait(0.1, c_timeGame);
        // Transmission - SoundLink("TValerian02BHorner00008", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00008", -1), c_transmissionDurationAdd, 0.0, false);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(556)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(602)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(605)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(613)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(622)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(633)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(634)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(642)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(664)), c_orderQueueReplace);
        UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/FF589C01"), null, PointFromId(5));
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(199), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(202), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(299), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(342), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(470), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(531), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        TransmissionWait(TransmissionLastSent(), 0.0);
        Wait(2.0, c_timeGame);
        UnitRemove(lv_hiddenCommandCenter);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    Wait(30.0, c_timeGame);
    if ((TriggerIsEnabled(gt_ComsatStationQ3) == true)) {
        TriggerExecute(gt_ComsatStationQ3, false, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComsatStationQ2_Init () {
    gt_ComsatStationQ2 = TriggerCreate("gt_ComsatStationQ2_Func");
    TriggerAddEventUnitRegion(gt_ComsatStationQ2, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Comsat Station Q 3
//--------------------------------------------------------------------------------------------------
bool gt_ComsatStationQ3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hiddenCommandCenter;

    // Variable Initialization
    lv_hiddenCommandCenter = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_P01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_P01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_PlayerIsInCombat(gv_pLAYER_P01_USER) == false) && ((gv_timerReadytoBlowArea01 == false) && (gv_timerReadytoBlowArea02 == false) && (gv_timerReadytoBlowArea03 == false) && (gv_timerReadytoBlowArea04 == false)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(UnitFromId(96)) == true)) {
        TriggerQueueEnter();
        libNtve_gf_CreateUnitsAtPoint2(1, "OrbitalCommand", 0, gv_pLAYER_P09_HORNER, PointFromId(1468));
        lv_hiddenCommandCenter = UnitLastCreated();
        libNtve_gf_ShowHideUnit(lv_hiddenCommandCenter, false);
        Wait(3.0, c_timeGame);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        Wait(0.1, c_timeGame);
        // Transmission - SoundLink("TValerian02BHorner00007", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BHorner00007", -1), c_transmissionDurationAdd, 0.0, false);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(682)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(686)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(689)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(691)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(711)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(716)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(717)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_hiddenCommandCenter, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), PointFromId(718)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_hiddenCommandCenter, c_unitPropEnergyPercent, 100.0);
        UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/35D8F648"), null, PointFromId(64));
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(116), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(138), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(170), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(174), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(178), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        PingCreate(PlayerGroupAll(), "PingAlert", PointFromId(189), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 4.0);
        TransmissionWait(TransmissionLastSent(), 0.0);
        UnitRemove(lv_hiddenCommandCenter);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComsatStationQ3_Init () {
    gt_ComsatStationQ3 = TriggerCreate("gt_ComsatStationQ3_Func");
    TriggerAddEventUnitRegion(gt_ComsatStationQ3, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show & Ping Coolant Towers
//--------------------------------------------------------------------------------------------------
bool gt_ShowPingCoolantTowers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(108)) == true)) {
        libNtve_gf_ShareVisionofUnit(UnitFromId(108), true, gv_pLAYER_P01_USER);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(108)), 2.0, Color(0.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/BE0DAE7D"), null, UnitGetPosition(UnitFromId(108)));
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(90)) == true)) {
        libNtve_gf_ShareVisionofUnit(UnitFromId(90), true, gv_pLAYER_P01_USER);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(90)), 2.0, Color(0.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/0D402B82"), null, UnitGetPosition(UnitFromId(90)));
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(96)) == true)) {
        libNtve_gf_ShareVisionofUnit(UnitFromId(96), true, gv_pLAYER_P01_USER);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(96)), 2.0, Color(0.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/ED291930"), null, UnitGetPosition(UnitFromId(96)));
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(29)) == true)) {
        libNtve_gf_ShareVisionofUnit(UnitFromId(29), true, gv_pLAYER_P01_USER);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(29)), 2.0, Color(0.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_P01_USER, StringExternal("Param/Value/75D55A97"), null, UnitGetPosition(UnitFromId(29)));
    }
    else {
    }
    PingCreate(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(29)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_objectivePlatformsPing01 = PingLastCreated();
    PingSetTooltip(gv_objectivePlatformsPing01, StringExternal("Param/Value/F02592E2"));
    libNtve_gf_AttachModelToUnit(UnitFromId(29), "BriefingUnitSelectLargeRed", "Origin");
    gv_objectivePlatformsActor01 = libNtve_gf_ActorLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(96)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_objectivePlatformsPing02 = PingLastCreated();
    PingSetTooltip(gv_objectivePlatformsPing02, StringExternal("Param/Value/A85A90A1"));
    libNtve_gf_AttachModelToUnit(UnitFromId(96), "BriefingUnitSelectLargeRed", "Origin");
    gv_objectivePlatformsActor02 = libNtve_gf_ActorLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(108)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_objectivePlatformsPing03 = PingLastCreated();
    PingSetTooltip(gv_objectivePlatformsPing03, StringExternal("Param/Value/A9E6264B"));
    libNtve_gf_AttachModelToUnit(UnitFromId(108), "BriefingUnitSelectLargeRed", "Origin");
    gv_objectivePlatformsActor03 = libNtve_gf_ActorLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(90)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_objectivePlatformsPing04 = PingLastCreated();
    PingSetTooltip(gv_objectivePlatformsPing04, StringExternal("Param/Value/2D444915"));
    libNtve_gf_AttachModelToUnit(UnitFromId(90), "BriefingUnitSelectLargeRed", "Origin");
    gv_objectivePlatformsActor04 = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPingCoolantTowers_Init () {
    gt_ShowPingCoolantTowers = TriggerCreate("gt_ShowPingCoolantTowers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Saves
//--------------------------------------------------------------------------------------------------
bool gt_AutoSaves_Func (bool testConds, bool runActions) {
    int auto82872333_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    auto82872333_val = gv_midCinematicCount;
    if (auto82872333_val == 1) {
        libCamp_gf_CreateMissionAutosavePoint((StringExternal("Param/Value/1504CE50")));
    }
    else if (auto82872333_val == 2) {
        libCamp_gf_CreateMissionAutosavePoint((StringExternal("Param/Value/546942F9")));
    }
    else if (auto82872333_val == 3) {
        libCamp_gf_CreateMissionAutosavePoint((StringExternal("Param/Value/6F4200A1")));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSaves_Init () {
    gt_AutoSaves = TriggerCreate("gt_AutoSaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Info Safety Delay
//--------------------------------------------------------------------------------------------------
bool gt_PlatformInfoSafetyDelay_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_WaitForTimer(gv_platformDelayTimer, 0.0, false);
    if ((TriggerIsEnabled(gt_ComsatStationQ2) == true)) {
        TriggerExecute(gt_ComsatStationQ2, false, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformInfoSafetyDelay_Init () {
    gt_PlatformInfoSafetyDelay = TriggerCreate("gt_PlatformInfoSafetyDelay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_P03_ZERG_BR);
    AICampaignStart(gv_pLAYER_P04_ZERG_BL);
    AICampaignStart(gv_pLAYER_P05_ZERG_TL);
    AICampaignStart(gv_pLAYER_P06_ZERG_TR);
    AICampaignStart(gv_pLAYER_P07_ZERG_EXP);
    AICampaignStart(gv_pLAYER_P10_LEVIATHAN);
    AIClearAllBullies(gv_pLAYER_P06_ZERG_TR);
    AINearestTownBullyRebuild(gv_pLAYER_P07_ZERG_EXP, true);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_P03_ZERG_BR, PlayerGroupSingle(gv_pLAYER_P01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_P04_ZERG_BL, PlayerGroupSingle(gv_pLAYER_P01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_P05_ZERG_TL, PlayerGroupSingle(gv_pLAYER_P01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_P06_ZERG_TR, PlayerGroupSingle(gv_pLAYER_P01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_P03_ZERG_BR, PointFromId(369));
    AIAttackWaveSetGatherPoint(gv_pLAYER_P04_ZERG_BL, PointFromId(370));
    AIAttackWaveSetGatherPoint(gv_pLAYER_P05_ZERG_TL, PointFromId(371));
    AIAttackWaveSetGatherPoint(gv_pLAYER_P06_ZERG_TR, PointFromId(372));
    TriggerExecute(gt_CombinedAttackWaves, true, false);
    TriggerExecute(gt_StartUpgradesH, true, false);
    TriggerExecute(gt_StartUpgradesI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades H
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(400.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("zerglingmovementspeed");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerArmorsLevel1");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergGroundArmorsLevel1");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerWeaponsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("hydraliskspeed");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergMissileWeaponsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("CentrificalHooks");
    gf_AddUpgradeLevelforZergPlayerGroup("ZergMeleeWeaponsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergGroundArmorsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerArmorsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergMeleeWeaponsLevel3");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("OrganicCarapace");
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerArmorsLevel3");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergMissileWeaponsLevel3");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergGroundArmorsLevel3");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerArmorsLevel3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesH_Init () {
    gt_StartUpgradesH = TriggerCreate("gt_StartUpgradesH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades I
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesI_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(400.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerWeaponsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergMissileWeaponsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergMeleeWeaponsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergGroundArmorsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerArmorsLevel2");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergMeleeWeaponsLevel3");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("OrganicCarapace");
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerArmorsLevel3");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergMissileWeaponsLevel3");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergGroundArmorsLevel3");
    Wait(200.0, c_timeAI);
    gf_AddUpgradeLevelforZergPlayerGroup("ZergFlyerArmorsLevel3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesI_Init () {
    gt_StartUpgradesI = TriggerCreate("gt_StartUpgradesI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combined Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_CombinedAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CombinedAttackWaves01, true, true);
    TriggerExecute(gt_CombinedAttackWaves02, true, true);
    TriggerExecute(gt_CombinedAttackWaves03, true, true);
    while (true) {
        TriggerExecute(gt_CombinedAttackWavesLoop, true, true);
        if ((gv_alternateLastWave == false)) {
            gv_alternateLastWave = true;
        }
        else {
            gv_alternateLastWave = false;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CombinedAttackWaves_Init () {
    gt_CombinedAttackWaves = TriggerCreate("gt_CombinedAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combined Attack Waves 01
//--------------------------------------------------------------------------------------------------
bool gt_CombinedAttackWaves01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attacker;

    // Variable Initialization
    lv_attacker = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    Wait(20.0, c_timeAI);
    lv_attacker = gv_pLAYER_P06_ZERG_TR;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(4, 4, 6, 10, "Zergling");
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Mutalisk");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Roach");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
        AIAttackWaveSend(lv_attacker, 160, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P03_ZERG_BR;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(0, 0, 6, 3, "Zergling");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Hydralisk");
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Mutalisk");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Ultralisk");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        AIAttackWaveSend(lv_attacker, 180, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P05_ZERG_TL;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(4, 4, 12, 16, "Zergling");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Roach");
        AIAttackWaveAddUnits4(3, 3, 4, 5, "Baneling");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(250), false);
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
        AIAttackWaveSend(lv_attacker, 180, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P04_ZERG_BL;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Hydralisk");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Infestor");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
        AIAttackWaveSend(lv_attacker, 140, false);
        AIAttackWaveAddUnits4(2, 2, 2, 4, "Mutalisk");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "BroodLord");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        }
        else {
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(2339), false);
        }
        AIAttackWaveSend(lv_attacker, 200, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CombinedAttackWaves01_Init () {
    gt_CombinedAttackWaves01 = TriggerCreate("gt_CombinedAttackWaves01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combined Attack Waves 02
//--------------------------------------------------------------------------------------------------
bool gt_CombinedAttackWaves02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attacker;

    // Variable Initialization
    lv_attacker = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attacker = gv_pLAYER_P06_ZERG_TR;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(5, 5, 7, 9, "Mutalisk");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1743), false);
        }
        else {
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(2340), false);
        }
        AIAttackWaveSend(lv_attacker, 160, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P03_ZERG_BR;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        Wait(40.0, c_timeAI);
        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
            AIAttackWaveAddUnits4(0, 0, 5, 6, "Mutalisk");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1743), false);
            AIAttackWaveSend(lv_attacker, 140, false);
        }
        else {
        }
        AIAttackWaveAddUnits4(2, 2, 4, 5, "Hydralisk");
        AIAttackWaveAddUnits4(3, 3, 0, 0, "Mutalisk");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        AIAttackWaveSend(lv_attacker, 140, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P05_ZERG_TL;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(2, 2, 2, 6, "Roach");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Hydralisk");
        AIAttackWaveAddUnits4(1, 1, 2, 1, "Ultralisk");
        AIAttackWaveAddUnits4(0, 0, 3, 6, "Baneling");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(250), false);
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
        AIAttackWaveSend(lv_attacker, 180, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P04_ZERG_BL;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
            AIAttackWaveAddUnits4(0, 0, 2, 3, "Hydralisk");
            AIAttackWaveAddUnits4(0, 0, 1, 1, "Infestor");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
            AIAttackWaveSend(lv_attacker, 200, false);
        }
        else {
        }
        AIAttackWaveAddUnits4(3, 3, 4, 6, "Mutalisk");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "BroodLord");
        AIAttackWaveAddUnits4(0, 1, 1, 1, "Overseer");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        }
        else {
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(2340), false);
        }
        AIAttackWaveSend(lv_attacker, 200, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CombinedAttackWaves02_Init () {
    gt_CombinedAttackWaves02 = TriggerCreate("gt_CombinedAttackWaves02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combined Attack Waves 03
//--------------------------------------------------------------------------------------------------
bool gt_CombinedAttackWaves03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attacker;

    // Variable Initialization
    lv_attacker = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attacker = gv_pLAYER_P06_ZERG_TR;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(8, 8, 10, 12, "Zergling");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Roach");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
        AIAttackWaveSend(lv_attacker, 120, false);
        AIAttackWaveAddUnits4(4, 4, 5, 7, "Mutalisk");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1743), false);
        AIAttackWaveSend(lv_attacker, 160, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P03_ZERG_BR;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(2, 2, 3, 0, "Hydralisk");
        AIAttackWaveAddUnits4(3, 3, 5, 13, "Mutalisk");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Corruptor");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        AIAttackWaveSend(lv_attacker, 180, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P05_ZERG_TL;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(14, 14, 20, 12, "Zergling");
        AIAttackWaveAddUnits4(0, 0, 1, 0, "Roach");
        AIAttackWaveAddUnits4(2, 2, 3, 5, "Hydralisk");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Ultralisk");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(250), false);
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
        AIAttackWaveSend(lv_attacker, 180, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P04_ZERG_BL;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        AIAttackWaveAddUnits4(2, 2, 4, 3, "Mutalisk");
        AIAttackWaveAddUnits4(2, 2, 3, 5, "BroodLord");
        AIAttackWaveAddUnits4(0, 0, 0, 2, "Corruptor");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Infestor");
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
        AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        AIAttackWaveSend(lv_attacker, 190, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CombinedAttackWaves03_Init () {
    gt_CombinedAttackWaves03 = TriggerCreate("gt_CombinedAttackWaves03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combined Attack Waves Loop
//--------------------------------------------------------------------------------------------------
bool gt_CombinedAttackWavesLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attacker;

    // Variable Initialization
    lv_attacker = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attacker = gv_pLAYER_P06_ZERG_TR;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        if ((gv_alternateLastWave == false)) {
            AIAttackWaveAddUnits4(8, 8, 12, 26, "Zergling");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
            AIAttackWaveSend(lv_attacker, 140, false);
            AIAttackWaveAddUnits4(6, 6, 8, 6, "Mutalisk");
            AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1743), false);
        }
        else {
            AIAttackWaveAddUnits4(3, 3, 6, 9, "Hydralisk");
            AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        }
        AIAttackWaveSend(lv_attacker, 180, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P03_ZERG_BR;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        if ((gv_alternateLastWave == false)) {
            AIAttackWaveAddUnits4(3, 3, 5, 8, "Hydralisk");
            AIAttackWaveAddUnits4(4, 4, 5, 3, "Mutalisk");
            AIAttackWaveAddUnits4(1, 1, 2, 2, "Corruptor");
            AIAttackWaveAddUnits4(0, 1, 1, 2, "Overseer");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        }
        else {
            AIAttackWaveAddUnits4(1, 1, 2, 3, "Ultralisk");
            AIAttackWaveAddUnits4(4, 4, 7, 6, "Mutalisk");
            AIAttackWaveAddUnits4(0, 1, 1, 2, "Overseer");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
        }
        AIAttackWaveSend(lv_attacker, 180, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P05_ZERG_TL;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        if ((gv_alternateLastWave == false)) {
            AIAttackWaveAddUnits4(8, 8, 12, 18, "Zergling");
            AIAttackWaveAddUnits4(2, 2, 3, 0, "Roach");
            AIAttackWaveAddUnits4(2, 2, 3, 5, "Hydralisk");
            AIAttackWaveAddUnits4(1, 1, 2, 3, "Ultralisk");
            AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(250), false);
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
        }
        else {
            AIAttackWaveAddUnits4(8, 8, 12, 32, "Zergling");
            AIAttackWaveAddUnits4(0, 0, 3, 8, "Baneling");
            AIAttackWaveAddUnits4(0, 0, 1, 0, "Ultralisk");
            AIAttackWaveAddUnits4(3, 3, 0, 0, "Roach");
            AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(250), false);
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1009), false);
        }
        AIAttackWaveSend(lv_attacker, 180, true);
    }
    else {
    }
    lv_attacker = gv_pLAYER_P04_ZERG_BL;
    if ((gf_PlayerCanAttack(lv_attacker) == true)) {
        if ((gv_alternateLastWave == false)) {
            AIAttackWaveAddUnits4(5, 5, 7, 10, "Mutalisk");
            AIAttackWaveAddUnits4(1, 1, 2, 3, "BroodLord");
            AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        }
        else {
            AIAttackWaveAddUnits4(4, 8, 16, 20, "Zergling");
            AIAttackWaveAddUnits4(2, 2, 3, 5, "Hydralisk");
            AIAttackWaveAddUnits4(1, 1, 2, 3, "Ultralisk");
            AIAttackWaveAddUnits4(1, 1, 1, 2, "Overseer");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "Infestor");
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(890), false);
            AIAttackWaveAddWaypoint(lv_attacker, PointFromId(1725), false);
        }
        AIAttackWaveSend(lv_attacker, 170, true);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CombinedAttackWavesLoop_Init () {
    gt_CombinedAttackWavesLoop = TriggerCreate("gt_CombinedAttackWavesLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_P03_ZERG_BR, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_P04_ZERG_BL, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_P05_ZERG_TL, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_P06_ZERG_TR, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_P07_ZERG_EXP, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_P03_ZERG_BR, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_P04_ZERG_BL, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_P05_ZERG_TL, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_P06_ZERG_TR, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_P07_ZERG_EXP, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_TipCampaignTipsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipCampaignTipsQ_Init () {
    gt_TipCampaignTipsQ = TriggerCreate("gt_TipCampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Coolant Towers Q
//--------------------------------------------------------------------------------------------------
bool gt_TipCoolantTowersQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian02b_CoolantTowers", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipCoolantTowersQ_Init () {
    gt_TipCoolantTowersQ = TriggerCreate("gt_TipCoolantTowersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Escaping the Explosion Q
//--------------------------------------------------------------------------------------------------
bool gt_TipEscapingtheExplosionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian02b_Explosion", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipEscapingtheExplosionQ_Init () {
    gt_TipEscapingtheExplosionQ = TriggerCreate("gt_TipEscapingtheExplosionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Leviathan Q
//--------------------------------------------------------------------------------------------------
bool gt_TipLeviathanQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian02b_Leviathan", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipLeviathanQ_Init () {
    gt_TipLeviathanQ = TriggerCreate("gt_TipLeviathanQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Units Lost to Enemies
//--------------------------------------------------------------------------------------------------
bool gt_StatUnitsLosttoEnemies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_P01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_P01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_P03_ZERG_BR) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_P04_ZERG_BL) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_P05_ZERG_TL) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_P06_ZERG_TR) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_P07_ZERG_EXP) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_P08_MUTALISK_TOWERS) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_P10_LEVIATHAN)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stat_UnitsLostToEnemies += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatUnitsLosttoEnemies_Init () {
    gt_StatUnitsLosttoEnemies = TriggerCreate("gt_StatUnitsLosttoEnemies_Func");
    TriggerAddEventUnitDied(gt_StatUnitsLosttoEnemies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Space Platforms Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroySpacePlatformsCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerExecute(gt_ObjectiveDestroyCoolantTowersComplete, true, false);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroySpacePlatformsCompleted_Init () {
    gt_VictoryDestroySpacePlatformsCompleted = TriggerCreate("gt_VictoryDestroySpacePlatformsCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveDestroyCoolantTowers) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveKillLeviathan) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER_P01_USER, "TValerian02B_1");
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_stat_PlayerUnitsLostToPlatform == 0)) {
        AchievementAward(gv_pLAYER_P01_USER, "TValerian02B_2");
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_achievementHardTimer) != 0.0)) {
        AchievementAward(gv_pLAYER_P01_USER, "TValerian02B_3");
    }
    else {
    }
    VictoryPanelAddAchievement("TValerian02B_1");
    VictoryPanelAddAchievement("TValerian02B_2");
    VictoryPanelAddAchievement("TValerian02B_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/54A6DD26"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_P01_USER, "UnitsLostCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/FEE5CD49"), StringExternal("Param/Value/CDAD72B4"));
    VictoryPanelAddTrackedStatistic("MineralsCollected");
    VictoryPanelAddTrackedStatistic("UnitsPeakCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/C4B1EEB0"), StringExternal("Param/Value/37D1D46B"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6856AC4A"), IntToText(gv_stat_ZergKilledByPlatform));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/C048D02E"), IntToText(gv_stat_PlayerUnitsLostToPlatform));
    libCamp_gf_EndCampaignMission(gv_pLAYER_P01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_P01_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/E7BF8BDE"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_pLAYER_P01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_P01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_P01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Coolant Towers Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCoolantTowersCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_objectiveDestroyCoolantTowersTotal = 4;
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/074A3321") + IntToText(gv_objectiveDestroyCoolantTowerProgress) + StringExternal("Param/Value/3C3FF16F") + IntToText(gv_objectiveDestroyCoolantTowersTotal) + StringExternal("Param/Value/0C759493")), StringExternal("Param/Value/06F1D37B"), c_objectiveStateActive, true);
    gv_objectiveDestroyCoolantTowers = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(93, ObjectiveLastCreated(), StringExternal("Param/Value/09462CD7"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCoolantTowersCreateQ_Init () {
    gt_ObjectiveDestroyCoolantTowersCreateQ = TriggerCreate("gt_ObjectiveDestroyCoolantTowersCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Coolant Towers Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCoolantTowersUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveDestroyCoolantTowerProgress += 1;
    ObjectiveSetName(gv_objectiveDestroyCoolantTowers, (StringExternal("Param/Value/4A3AE9EE") + IntToText(gv_objectiveDestroyCoolantTowerProgress) + StringExternal("Param/Value/93348B29") + IntToText(gv_objectiveDestroyCoolantTowersTotal) + StringExternal("Param/Value/7D0B2B5E")));
    if ((gv_objectiveDestroyCoolantTowerProgress == 1)) {
        TriggerExecute(gt_PlatformLinesFirstTowerQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCoolantTowersUpdate_Init () {
    gt_ObjectiveDestroyCoolantTowersUpdate = TriggerCreate("gt_ObjectiveDestroyCoolantTowersUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Coolant Towers Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCoolantTowersComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyCoolantTowersCreateQ, true, false);
    ObjectiveSetState(gv_objectiveDestroyCoolantTowers, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCoolantTowersComplete_Init () {
    gt_ObjectiveDestroyCoolantTowersComplete = TriggerCreate("gt_ObjectiveDestroyCoolantTowersComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Coolant Towers Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCoolantTowersFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyCoolantTowersCreateQ, true, false);
    ObjectiveSetState(gv_objectiveDestroyCoolantTowers, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCoolantTowersFailed_Init () {
    gt_ObjectiveDestroyCoolantTowersFailed = TriggerCreate("gt_ObjectiveDestroyCoolantTowersFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Leviathan Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillLeviathanCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/739C328F")), StringExternal("Param/Value/0BCA1AE6"), c_objectiveStateActive, false);
    gv_objectiveKillLeviathan = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(94, ObjectiveLastCreated(), StringExternal("Param/Value/B8769560"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillLeviathanCreateQ_Init () {
    gt_ObjectiveKillLeviathanCreateQ = TriggerCreate("gt_ObjectiveKillLeviathanCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Leviathan Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillLeviathanComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillLeviathanCreateQ, true, false);
    ObjectiveSetState(gv_objectiveKillLeviathan, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillLeviathanComplete_Init () {
    gt_ObjectiveKillLeviathanComplete = TriggerCreate("gt_ObjectiveKillLeviathanComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Leviathan Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillLeviathanFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillLeviathanCreateQ, true, false);
    ObjectiveSetState(gv_objectiveKillLeviathan, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillLeviathanFailed_Init () {
    gt_ObjectiveKillLeviathanFailed = TriggerCreate("gt_ObjectiveKillLeviathanFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    TriggerExecute(gt_BriefingScene04, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_P03_ZERG_BR);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_P04_ZERG_BL);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_P05_ZERG_TL);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_P06_ZERG_TR);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1419), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1420), (SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00001", -1)) + SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00008", -1))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian02B_00");
    SoundPlay(SoundLink("TValerian02BBriefingWarfield00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00001", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian02BBriefingWarfield00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00001", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00008", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1421), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1422), (SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00002", -1)) + 0.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian02B_01");
    SoundPlay(SoundLink("TValerian02BBriefingWarfield00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00002", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian02BBriefingRaynor00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00003", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02BBriefingWarfield00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00003", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1425), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1426), ((SoundLengthSync(SoundLink("TValerian02BBriefingAdjutant00004", -1)) + 0.0) - 0.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian02B_02");
    SoundPlay(SoundLink("TValerian02BBriefingAdjutant00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02BBriefingAdjutant00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02BBriefingAdjutant00004", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1075), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1127), ((SoundLengthSync(SoundLink("TValerian02BBriefingAdjutant00011", -1)) + 0.0) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian02B_03");
    SoundPlay(SoundLink("TValerian02BBriefingAdjutant00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.3 * SoundLengthSync(SoundLink("TValerian02BBriefingAdjutant00011", -1))), c_timeReal);
    libNtve_gf_AttachModelToUnit(UnitFromId(29), "BriefingUnitSelectLargeRed", "Center");
    gv_briefingTargetingCursor = libNtve_gf_ActorLastCreated();
    Wait((0.7 * SoundLengthSync(SoundLink("TValerian02BBriefingAdjutant00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02BBriefingAdjutant00011", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_briefingTargetingCursor);
    Wait(2.0, c_timeGame);
    UnitRemove(UnitFromId(504));
    UnitRemove(UnitFromId(513));
    UnitRemove(UnitFromId(286));
    libNtve_gf_ChangeUnitDamage(UnitFromId(29), 0, 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "Banshee", 0, gv_pLAYER_P01_USER, PointFromId(1138));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1181)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(29)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Banshee", 0, gv_pLAYER_P01_USER, PointFromId(1140));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1183)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(29)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Banshee", 0, gv_pLAYER_P01_USER, PointFromId(1210));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1184)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(29)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1120), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1125), ((SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00009", -1)) + SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00005", -1))) - 0.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian02B_04");
    SoundPlay(SoundLink("TValerian02BBriefingRaynor00005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.4 * SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00005", -1))), c_timeReal);
    UnitIssueOrder(UnitFromId(492), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1176)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(581), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1176)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(493), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1178)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(494), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1179)), c_orderQueueReplace);
    Wait((0.6 * SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00005", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian02BBriefingRaynor00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00005", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02BBriefingRaynor00009", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04_Init () {
    gt_BriefingScene04 = TriggerCreate("gt_BriefingScene04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Platforms Q
//--------------------------------------------------------------------------------------------------
bool gt_MidPlatformsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidPlatformsSetup, true, true);
    TriggerExecute(gt_MidPlatformsCinematic, true, true);
    TriggerExecute(gt_MidPlatformsCinematicEnd, true, true);
    TriggerExecute(gt_MidPlatformsCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlatformsQ_Init () {
    gt_MidPlatformsQ = TriggerCreate("gt_MidPlatformsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Platforms Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidPlatformsSetup_Func (bool testConds, bool runActions) {
    int auto5989EE34_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TriggerEnable(gt_DefeatBaseDead, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    TimerPause(gv_platformBlowsTimerArea01, true);
    TimerPause(gv_platformBlowsTimerArea02, true);
    TimerPause(gv_platformBlowsTimerArea03, true);
    TimerPause(gv_platformBlowsTimerArea04, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_P01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_P01_USER, 0);
    PlayerSetState(gv_pLAYER_P01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    AITimePause(true);
    auto5989EE34_val = gv_cinematicNumber;
    if (auto5989EE34_val == 1) {
        gv_ground0 = RegionFromId(97);
        gv_ground1 = RegionFromId(101);
        gv_ground2 = RegionFromId(102);
        gv_ground3 = RegionFromId(33);
        gv_ground4 = RegionFromId(34);
        gv_ground5 = RegionFromId(35);
        gv_ground6 = RegionFromId(36);
        gv_ground7 = RegionFromId(37);
        gv_ground8 = RegionFromId(38);
        gv_ground9 = RegionFromId(39);
        gv_ground10 = RegionFromId(40);
        gv_ground11 = RegionFromId(1);
        gv_timerReadytoBlowArea01 = false;
        TriggerExecute(gt_CreepArea01BR, true, false);
    }
    else if (auto5989EE34_val == 2) {
        gv_ground0 = RegionFromId(99);
        gv_ground1 = RegionFromId(103);
        gv_ground2 = RegionFromId(106);
        gv_ground3 = RegionFromId(25);
        gv_ground4 = RegionFromId(26);
        gv_ground5 = RegionFromId(27);
        gv_ground6 = RegionFromId(28);
        gv_ground7 = RegionFromId(29);
        gv_ground8 = RegionFromId(30);
        gv_ground9 = RegionFromId(31);
        gv_ground10 = RegionFromId(32);
        gv_ground11 = RegionFromId(2);
        gv_timerReadytoBlowArea02 = false;
        TriggerExecute(gt_CreepArea02BL, true, false);
    }
    else if (auto5989EE34_val == 3) {
        gv_ground0 = RegionFromId(95);
        gv_ground1 = RegionFromId(96);
        gv_ground2 = RegionFromId(98);
        gv_ground3 = RegionFromId(9);
        gv_ground4 = RegionFromId(10);
        gv_ground5 = RegionFromId(11);
        gv_ground6 = RegionFromId(15);
        gv_ground7 = RegionFromId(16);
        gv_ground8 = RegionFromId(21);
        gv_ground9 = RegionFromId(23);
        gv_ground10 = RegionFromId(24);
        gv_ground11 = RegionFromId(3);
        gv_timerReadytoBlowArea03 = false;
        TriggerExecute(gt_CreepArea03TL, true, false);
    }
    else if (auto5989EE34_val == 4) {
        gv_ground0 = RegionFromId(91);
        gv_ground1 = RegionFromId(92);
        gv_ground2 = RegionFromId(93);
        gv_ground3 = RegionFromId(41);
        gv_ground4 = RegionFromId(42);
        gv_ground5 = RegionFromId(43);
        gv_ground6 = RegionFromId(44);
        gv_ground7 = RegionFromId(45);
        gv_ground8 = RegionFromId(46);
        gv_ground9 = RegionFromId(47);
        gv_ground10 = RegionFromId(48);
        gv_ground11 = RegionFromId(4);
        gv_timerReadytoBlowArea04 = false;
        TriggerExecute(gt_CreepArea04TR, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlatformsSetup_Init () {
    gt_MidPlatformsSetup = TriggerCreate("gt_MidPlatformsSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Platforms Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidPlatformsCinematic_Func (bool testConds, bool runActions) {
    int autoE63AB445_val;
    int autoF6F6E625_val;
    int auto9B9CF7D2_val;
    int auto1B91599C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE63AB445_val = gv_cinematicNumber;
    if (autoE63AB445_val == 1) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(55), 0.0, -1, 10, true);
    }
    else if (autoE63AB445_val == 2) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(56), 0.0, -1, 10, true);
    }
    else if (autoE63AB445_val == 3) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(16), 0.0, -1, 10, true);
    }
    else if (autoE63AB445_val == 4) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1008), 0.0, -1, 10, true);
    }
    else {
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02BMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_midPlatformsCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    autoF6F6E625_val = gv_midCinematicCount;
    if (autoF6F6E625_val == 1) {
        // Transmission - SoundLink("TValerian02BRaynor00022", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00022", -1), c_transmissionDurationAdd, 0.0, true);
        CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 4.0);
    }
    else if (autoF6F6E625_val == 2) {
        // Transmission - SoundLink("TValerian01Raynor00055", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00055", -1), c_transmissionDurationAdd, 0.0, true);
        CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 4.0);
    }
    else if (autoF6F6E625_val == 3) {
        // Transmission - SoundLink("TValerian02BRaynor00018", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00018", -1), c_transmissionDurationAdd, 0.0, false);
        TransmissionWait(TransmissionLastSent(), 3.0);
        CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 6.0);
    }
    else if (autoF6F6E625_val == 4) {
        CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 3.0);
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    auto9B9CF7D2_val = gv_cinematicNumber;
    if (auto9B9CF7D2_val == 1) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(57), 6.0, -1, 10, true);
        VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(1));
        gv_midPlatformsRevealer = VisRevealerLastCreated();
        TriggerExecute(gt_Area01Kaboom, true, true);
    }
    else if (auto9B9CF7D2_val == 2) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(61), 6.0, -1, 10, true);
        VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(2));
        gv_midPlatformsRevealer = VisRevealerLastCreated();
        TriggerExecute(gt_Area02Kaboom, true, true);
    }
    else if (auto9B9CF7D2_val == 3) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(58), 6.0, -1, 10, true);
        VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(3));
        gv_midPlatformsRevealer = VisRevealerLastCreated();
        TriggerExecute(gt_Area03Kaboom, true, true);
    }
    else if (auto9B9CF7D2_val == 4) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(255), 6.0, -1, 10, true);
        VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(4));
        gv_midPlatformsRevealer = VisRevealerLastCreated();
        TriggerExecute(gt_Area04Kaboom, true, true);
    }
    else {
    }
    auto1B91599C_val = gv_midCinematicCount;
    if (auto1B91599C_val == 1) {
        TriggerExecute(gt_FinalCinematicPlatformLinesTR, true, true);
    }
    else if (auto1B91599C_val == 2) {
        TriggerExecute(gt_FinalCinematicPlatformLinesBL, true, true);
    }
    else if (auto1B91599C_val == 3) {
        TriggerExecute(gt_FinalCinematicPlatformLinesTL, true, true);
    }
    else if (auto1B91599C_val == 4) {
        TriggerExecute(gt_FinalCinematicPlatformLinesBR, true, true);
    }
    else {
    }
    if ((gv_midCinematicCount >= 2) && (TriggerIsEnabled(gt_MidLeviathanQ) == true)) {
        TriggerEnable(gt_MidLeviathanQ, false);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeReal);
        CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        Wait(1.0, c_timeReal);
        TriggerEnable(gt_RemoveUnits, true);
        TriggerExecute(gt_MidLeviathanCinematic, true, true);
    }
    else {
    }
    gv_midPlatformsCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlatformsCinematic_Init () {
    gt_MidPlatformsCinematic = TriggerCreate("gt_MidPlatformsCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Platforms Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidPlatformsCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midPlatformsCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlatformsCinematicEnd_Init () {
    gt_MidPlatformsCinematicEnd = TriggerCreate("gt_MidPlatformsCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Platforms Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidPlatformsCleanup_Func (bool testConds, bool runActions) {
    int auto4E6C7F68_val;

    // Variable Declarations
    fixed lv_fadeDuration;
    region lv_pickedArea;

    // Variable Initialization
    lv_fadeDuration = 0.0;
    lv_pickedArea = null;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_P01_USER);
    UnitGroupLoopBegin(gv_midLeviathanHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_P01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_P01_USER);
    CameraRestore(gv_pLAYER_P01_USER, 0.0, -1, 10);
    auto4E6C7F68_val = gv_cinematicNumber;
    if (auto4E6C7F68_val == 1) {
        lv_pickedArea = RegionFromId(1);
        TriggerStop(gt_Area01Kaboom);
        TriggerExecute(gt_CreateBlockersArea01, true, false);
        gf_HideGround(gv_ground11, gv_pATHINGBLOCKERAREA01);
        TriggerExecute(gt_Area01MoneyPickUps, true, false);
    }
    else if (auto4E6C7F68_val == 2) {
        lv_pickedArea = RegionFromId(2);
        TriggerStop(gt_Area02Kaboom);
        TriggerExecute(gt_CreateBlockersArea02, true, false);
        gf_HideGround(gv_ground11, gv_pATHINGBLOCKERAREA02);
        TriggerExecute(gt_Area02MoneyPickUps, true, false);
    }
    else if (auto4E6C7F68_val == 3) {
        lv_pickedArea = RegionFromId(3);
        TriggerStop(gt_Area03Kaboom);
        TriggerExecute(gt_CreateBlockersArea03, true, false);
        gf_HideGround(gv_ground11, gv_pATHINGBLOCKERAREA03);
        TriggerExecute(gt_Area03MoneyPickUps, true, false);
    }
    else if (auto4E6C7F68_val == 4) {
        lv_pickedArea = RegionFromId(4);
        TriggerStop(gt_Area04Kaboom);
        TriggerExecute(gt_CreateBlockersArea04, true, false);
        gf_HideGround(gv_ground11, gv_pATHINGBLOCKERAREA04);
        TriggerExecute(gt_Area04MoneyPickUps, true, false);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ground11, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_RemovingUnits(UnitGroupLoopCurrent());
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "DestroyParticles");
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "DestroyRibbons");
        if ((gv_leviathan == UnitGroupLoopCurrent())) {
            TriggerExecute(gt_LeviathanDies, false, false);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_SendActorMessageToGameRegion(gv_ground11, "Signal DoodadDeath");
    libNtve_gf_SendActorMessageToGameRegion(gv_ground11, "Signal DoodadDead");
    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_midCinematicCount >= 2)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P10_LEVIATHAN, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    TimerStart(gv_platformDelayTimer, 30.0, false, c_timeGame);
    TriggerExecute(gt_PlatformInfoSafetyDelay, true, false);
    UnitGroupLoopBegin(gv_hiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_midPlatformsCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TimerPause(gv_platformBlowsTimerArea01, false);
    TimerPause(gv_platformBlowsTimerArea02, false);
    TimerPause(gv_platformBlowsTimerArea03, false);
    TimerPause(gv_platformBlowsTimerArea04, false);
    if ((gv_midCinematicCount >= 2) && (TriggerIsEnabled(gt_SpawnLeviathan) == true)) {
        TriggerEnable(gt_RemoveUnits, false);
        TriggerEnable(gt_MidLeviathanQ, false);
        TriggerExecute(gt_ObjectiveKillLeviathanCreateQ, true, false);
        TriggerExecute(gt_SpawnLeviathan, true, false);
    }
    else {
    }
    TriggerEnable(gt_DefeatBaseDead, true);
    gv_inCinematic = false;
    TriggerExecute(gt_AutoSaves, true, true);
    gv_cinematicNumber = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlatformsCleanup_Init () {
    gt_MidPlatformsCleanup = TriggerCreate("gt_MidPlatformsCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Area 01 - BR
//--------------------------------------------------------------------------------------------------
bool gt_CreepArea01BR_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CreepModify(PointFromId(1906), 10.0, false, true);
    CreepModify(PointFromId(1907), 10.0, false, true);
    CreepModify(PointFromId(1908), 10.0, false, true);
    CreepModify(PointFromId(1909), 10.0, false, true);
    CreepModify(PointFromId(1910), 10.0, false, true);
    CreepModify(PointFromId(1916), 10.0, false, true);
    CreepModify(PointFromId(1926), 10.0, false, true);
    CreepModify(PointFromId(1927), 10.0, false, true);
    CreepModify(PointFromId(1928), 10.0, false, true);
    CreepModify(PointFromId(1929), 10.0, false, true);
    CreepModify(PointFromId(1930), 10.0, false, true);
    CreepModify(PointFromId(1946), 10.0, false, true);
    UnitGroupLoopBegin(UnitGroup("Hatchery", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lair", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(PointFromId(1906), 10.0, true, false);
    CreepModify(PointFromId(1907), 10.0, true, false);
    CreepModify(PointFromId(1908), 10.0, true, false);
    CreepModify(PointFromId(1909), 10.0, true, false);
    CreepModify(PointFromId(1910), 10.0, true, false);
    CreepModify(PointFromId(1916), 10.0, true, false);
    CreepModify(PointFromId(1926), 10.0, true, false);
    CreepModify(PointFromId(1927), 10.0, true, false);
    CreepModify(PointFromId(1928), 10.0, true, false);
    CreepModify(PointFromId(1929), 10.0, true, false);
    CreepModify(PointFromId(1930), 10.0, true, false);
    CreepModify(PointFromId(1946), 10.0, true, false);
    UnitGroupLoopBegin(UnitGroup("Hatchery", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lair", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepArea01BR_Init () {
    gt_CreepArea01BR = TriggerCreate("gt_CreepArea01BR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Area 02 - BL
//--------------------------------------------------------------------------------------------------
bool gt_CreepArea02BL_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CreepModify(PointFromId(1931), 10.0, false, true);
    CreepModify(PointFromId(1932), 10.0, false, true);
    CreepModify(PointFromId(1933), 10.0, false, true);
    CreepModify(PointFromId(1934), 10.0, false, true);
    CreepModify(PointFromId(1935), 10.0, false, true);
    CreepModify(PointFromId(1936), 10.0, false, true);
    CreepModify(PointFromId(1937), 10.0, false, true);
    CreepModify(PointFromId(1938), 10.0, false, true);
    CreepModify(PointFromId(1939), 10.0, false, true);
    CreepModify(PointFromId(1940), 10.0, false, true);
    CreepModify(PointFromId(1941), 10.0, false, true);
    CreepModify(PointFromId(1942), 10.0, false, true);
    CreepModify(PointFromId(1943), 10.0, false, true);
    CreepModify(PointFromId(1947), 10.0, false, true);
    UnitGroupLoopBegin(UnitGroup("Hatchery", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lair", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(PointFromId(1931), 10.0, true, false);
    CreepModify(PointFromId(1932), 10.0, true, false);
    CreepModify(PointFromId(1933), 10.0, true, false);
    CreepModify(PointFromId(1934), 10.0, true, false);
    CreepModify(PointFromId(1935), 10.0, true, false);
    CreepModify(PointFromId(1936), 10.0, true, false);
    CreepModify(PointFromId(1937), 10.0, true, false);
    CreepModify(PointFromId(1938), 10.0, true, false);
    CreepModify(PointFromId(1939), 10.0, true, false);
    CreepModify(PointFromId(1940), 10.0, true, false);
    CreepModify(PointFromId(1941), 10.0, true, false);
    CreepModify(PointFromId(1942), 10.0, true, false);
    CreepModify(PointFromId(1943), 10.0, true, false);
    CreepModify(PointFromId(1947), 10.0, true, false);
    UnitGroupLoopBegin(UnitGroup("Hatchery", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lair", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepArea02BL_Init () {
    gt_CreepArea02BL = TriggerCreate("gt_CreepArea02BL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Area 03 - TL
//--------------------------------------------------------------------------------------------------
bool gt_CreepArea03TL_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CreepModify(PointFromId(1767), 10.0, false, true);
    CreepModify(PointFromId(1870), 10.0, false, true);
    CreepModify(PointFromId(1889), 10.0, false, true);
    CreepModify(PointFromId(1871), 10.0, false, true);
    CreepModify(PointFromId(1872), 10.0, false, true);
    CreepModify(PointFromId(1873), 10.0, false, true);
    CreepModify(PointFromId(1874), 10.0, false, true);
    CreepModify(PointFromId(1877), 10.0, false, true);
    CreepModify(PointFromId(1878), 10.0, false, true);
    CreepModify(PointFromId(1887), 10.0, false, true);
    CreepModify(PointFromId(1888), 10.0, false, true);
    UnitGroupLoopBegin(UnitGroup("Hatchery", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lair", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(PointFromId(1767), 10.0, true, false);
    CreepModify(PointFromId(1870), 10.0, true, false);
    CreepModify(PointFromId(1889), 10.0, true, false);
    CreepModify(PointFromId(1871), 10.0, true, false);
    CreepModify(PointFromId(1872), 10.0, true, false);
    CreepModify(PointFromId(1873), 10.0, true, false);
    CreepModify(PointFromId(1874), 10.0, true, false);
    CreepModify(PointFromId(1877), 10.0, true, false);
    CreepModify(PointFromId(1878), 10.0, true, false);
    CreepModify(PointFromId(1887), 10.0, true, false);
    CreepModify(PointFromId(1888), 10.0, true, false);
    UnitGroupLoopBegin(UnitGroup("Hatchery", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lair", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepArea03TL_Init () {
    gt_CreepArea03TL = TriggerCreate("gt_CreepArea03TL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Area 04 - TR
//--------------------------------------------------------------------------------------------------
bool gt_CreepArea04TR_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CreepModify(PointFromId(1890), 10.0, false, true);
    CreepModify(PointFromId(1891), 10.0, false, true);
    CreepModify(PointFromId(1892), 10.0, false, true);
    CreepModify(PointFromId(1893), 10.0, false, true);
    CreepModify(PointFromId(1902), 10.0, false, true);
    CreepModify(PointFromId(1944), 10.0, false, true);
    CreepModify(PointFromId(1945), 10.0, false, true);
    UnitGroupLoopBegin(UnitGroup("Hatchery", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lair", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, false, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(PointFromId(1890), 10.0, true, false);
    CreepModify(PointFromId(1891), 10.0, true, false);
    CreepModify(PointFromId(1892), 10.0, true, false);
    CreepModify(PointFromId(1893), 10.0, true, false);
    CreepModify(PointFromId(1902), 10.0, true, false);
    CreepModify(PointFromId(1944), 10.0, true, false);
    CreepModify(PointFromId(1945), 10.0, true, false);
    UnitGroupLoopBegin(UnitGroup("Hatchery", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Lair", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hive", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, true, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepArea04TR_Init () {
    gt_CreepArea04TR = TriggerCreate("gt_CreepArea04TR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Cinematic Platform Lines BR
//--------------------------------------------------------------------------------------------------
bool gt_FinalCinematicPlatformLinesBR_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    // Transmission - SoundLink("TValerian02BWarfield00015", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BWarfield00015", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalCinematicPlatformLinesBR_Init () {
    gt_FinalCinematicPlatformLinesBR = TriggerCreate("gt_FinalCinematicPlatformLinesBR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Cinematic Platform Lines BL
//--------------------------------------------------------------------------------------------------
bool gt_FinalCinematicPlatformLinesBL_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    // Transmission - SoundLink("TValerian02BWarfield00016", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BWarfield00016", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalCinematicPlatformLinesBL_Init () {
    gt_FinalCinematicPlatformLinesBL = TriggerCreate("gt_FinalCinematicPlatformLinesBL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Cinematic Platform Lines TL
//--------------------------------------------------------------------------------------------------
bool gt_FinalCinematicPlatformLinesTL_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    // Transmission - SoundLink("TValerian02BWarfield00030", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BWarfield00030", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalCinematicPlatformLinesTL_Init () {
    gt_FinalCinematicPlatformLinesTL = TriggerCreate("gt_FinalCinematicPlatformLinesTL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Cinematic Platform Lines TR
//--------------------------------------------------------------------------------------------------
bool gt_FinalCinematicPlatformLinesTR_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    // Transmission - SoundLink("TValerian02BRaynor00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00013", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    PingDestroy(gv_ventPing01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalCinematicPlatformLinesTR_Init () {
    gt_FinalCinematicPlatformLinesTR = TriggerCreate("gt_FinalCinematicPlatformLinesTR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Leviathan Q
//--------------------------------------------------------------------------------------------------
bool gt_MidLeviathanQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_PlayerIsInCombat(gv_pLAYER_P01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    TriggerExecute(gt_MidLeviathanSetup, true, true);
    TriggerExecute(gt_MidLeviathanCinematic, true, true);
    TriggerExecute(gt_MidLeviathanCinematicEnd, true, true);
    TriggerExecute(gt_MidLeviathanCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLeviathanQ_Init () {
    gt_MidLeviathanQ = TriggerCreate("gt_MidLeviathanQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Leviathan Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidLeviathanSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    TimerPause(gv_platformBlowsTimerArea01, true);
    TimerPause(gv_platformBlowsTimerArea02, true);
    TimerPause(gv_platformBlowsTimerArea03, true);
    TimerPause(gv_platformBlowsTimerArea04, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_P01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_P01_USER, 0);
    PlayerSetState(gv_pLAYER_P01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TriggerEnable(gt_RemoveUnits, true);
    UnitPauseAll(true);
    AITimePause(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_midLeviathanHiddenUnitGroup, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLeviathanSetup_Init () {
    gt_MidLeviathanSetup = TriggerCreate("gt_MidLeviathanSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Leviathan Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidLeviathanCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_P01_USER);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(157), 0.0, -1, 10, true);
    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1327), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1328), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1329), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1330), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1331), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1332), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Corruptor", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1333), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Corruptor", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1336), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "BroodLord", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1334), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "BroodLord", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1335), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Leviathan", 0, gv_pLAYER_P10_LEVIATHAN, PointFromId(1326), RegionGetCenter(RegionFromId(14)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2035)), c_orderQueueReplace);
    gv_leviathanCINE = UnitLastCreated();
    UnitSetPropertyFixed(gv_leviathanCINE, c_unitPropMovementSpeed, 1.5);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus05MusicIntroB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_midLeviathanCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    // Transmission - SoundLink("TValerian02BAdjutant00035", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BAdjutant00035", 0), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(2037), 2.0, -1, 10, true);
    UnitIssueOrder(gv_leviathanCINE, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_SetAllSoundChannelVolumes(2, PlayerGroupAll(), 0.0);
    SoundPlay(SoundLink("Leviathan_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_leviathanCINE), c_animNameDefault, "Stand Angry", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.1, c_timeGame);
    UnitIssueOrder(gv_leviathanCINE, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(2036), SoundLengthSync(SoundLink("TValerian02BRaynor00036", -1)), -1, 10, true);
    // Transmission - SoundLink("TValerian02BRaynor00036", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00036", 0), c_transmissionDurationAdd, 0.0, true);
    gv_midLeviathanCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLeviathanCinematic_Init () {
    gt_MidLeviathanCinematic = TriggerCreate("gt_MidLeviathanCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Leviathan Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidLeviathanCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midLeviathanCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLeviathanCinematicEnd_Init () {
    gt_MidLeviathanCinematicEnd = TriggerCreate("gt_MidLeviathanCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Leviathan Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidLeviathanCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_midLeviathanHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    AITimePause(false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P10_LEVIATHAN, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_P01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_P01_USER);
    CameraRestore(gv_pLAYER_P01_USER, 0.0, -1, 10);
    if ((gv_midLeviathanCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    TriggerEnable(gt_RemoveUnits, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TimerPause(gv_platformBlowsTimerArea01, false);
    TimerPause(gv_platformBlowsTimerArea02, false);
    TimerPause(gv_platformBlowsTimerArea03, false);
    TimerPause(gv_platformBlowsTimerArea04, false);
    TriggerExecute(gt_ObjectiveKillLeviathanCreateQ, true, false);
    TriggerExecute(gt_SpawnLeviathan, true, false);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLeviathanCleanup_Init () {
    gt_MidLeviathanCleanup = TriggerCreate("gt_MidLeviathanCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Units
//--------------------------------------------------------------------------------------------------
bool gt_RemoveUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_P10_LEVIATHAN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveUnits_Init () {
    gt_RemoveUnits = TriggerCreate("gt_RemoveUnits_Func");
    TriggerEnable(gt_RemoveUnits, false);
    TriggerAddEventUnitRegion(gt_RemoveUnits, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    unitgroup auto922F1967_g;
    int auto922F1967_u;
    int auto2EC00956_val;

    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TriggerEnable(gt_DefeatBaseDead, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    TimerPause(gv_platformBlowsTimerArea01, true);
    TimerPause(gv_platformBlowsTimerArea02, true);
    TimerPause(gv_platformBlowsTimerArea03, true);
    TimerPause(gv_platformBlowsTimerArea04, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_P01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_P01_USER, 0);
    PlayerSetState(gv_pLAYER_P01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    AITimePause(true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_pLAYER_P01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto922F1967_g = gv_victoryHiddenUnitGroup;
    auto922F1967_u = 1;
    while (auto922F1967_u <= UnitGroupCount(auto922F1967_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(auto922F1967_g, auto922F1967_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        if (lv_chosenUnit == UnitGroupUnit(auto922F1967_g, auto922F1967_u)) {
            auto922F1967_u = auto922F1967_u + 1;
        }
    }
    auto2EC00956_val = gv_cinematicNumber;
    if (auto2EC00956_val == 1) {
        gv_ground0 = RegionFromId(97);
        gv_ground1 = RegionFromId(101);
        gv_ground2 = RegionFromId(102);
        gv_ground3 = RegionFromId(33);
        gv_ground4 = RegionFromId(34);
        gv_ground5 = RegionFromId(35);
        gv_ground6 = RegionFromId(36);
        gv_ground7 = RegionFromId(37);
        gv_ground8 = RegionFromId(38);
        gv_ground9 = RegionFromId(39);
        gv_ground10 = RegionFromId(40);
        gv_ground11 = RegionFromId(1);
        gv_timerReadytoBlowArea01 = false;
        TriggerExecute(gt_CreepArea01BR, true, false);
    }
    else if (auto2EC00956_val == 2) {
        gv_ground0 = RegionFromId(99);
        gv_ground1 = RegionFromId(103);
        gv_ground2 = RegionFromId(106);
        gv_ground3 = RegionFromId(25);
        gv_ground4 = RegionFromId(26);
        gv_ground5 = RegionFromId(27);
        gv_ground6 = RegionFromId(28);
        gv_ground7 = RegionFromId(29);
        gv_ground8 = RegionFromId(30);
        gv_ground9 = RegionFromId(31);
        gv_ground10 = RegionFromId(32);
        gv_ground11 = RegionFromId(2);
        gv_timerReadytoBlowArea02 = false;
        TriggerExecute(gt_CreepArea02BL, true, false);
    }
    else if (auto2EC00956_val == 3) {
        gv_ground0 = RegionFromId(95);
        gv_ground1 = RegionFromId(96);
        gv_ground2 = RegionFromId(98);
        gv_ground3 = RegionFromId(9);
        gv_ground4 = RegionFromId(10);
        gv_ground5 = RegionFromId(11);
        gv_ground6 = RegionFromId(15);
        gv_ground7 = RegionFromId(16);
        gv_ground8 = RegionFromId(21);
        gv_ground9 = RegionFromId(23);
        gv_ground10 = RegionFromId(24);
        gv_ground11 = RegionFromId(3);
        gv_timerReadytoBlowArea03 = false;
        TriggerExecute(gt_CreepArea03TL, true, false);
    }
    else if (auto2EC00956_val == 4) {
        gv_ground0 = RegionFromId(91);
        gv_ground1 = RegionFromId(92);
        gv_ground2 = RegionFromId(93);
        gv_ground3 = RegionFromId(41);
        gv_ground4 = RegionFromId(42);
        gv_ground5 = RegionFromId(43);
        gv_ground6 = RegionFromId(44);
        gv_ground7 = RegionFromId(45);
        gv_ground8 = RegionFromId(46);
        gv_ground9 = RegionFromId(47);
        gv_ground10 = RegionFromId(48);
        gv_ground11 = RegionFromId(4);
        gv_timerReadytoBlowArea04 = false;
        TriggerExecute(gt_CreepArea04TR, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    int auto4E537E25_val;
    int auto67B96275_val;
    int auto40ADB649_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E537E25_val = gv_cinematicNumber;
    if (auto4E537E25_val == 1) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1705), 0.0, -1, 10, true);
    }
    else if (auto4E537E25_val == 2) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1706), 0.0, -1, 10, true);
    }
    else if (auto4E537E25_val == 3) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1704), 0.0, -1, 10, true);
    }
    else if (auto4E537E25_val == 4) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1711), 0.0, -1, 10, true);
    }
    else {
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02BMusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 8.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    auto67B96275_val = gv_cinematicNumber;
    if (auto67B96275_val == 1) {
        // Transmission - SoundLink("TValerian02BRaynor00022", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00022", -1), c_transmissionDurationAdd, 0.0, true);
        CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 4.0);
    }
    else if (auto67B96275_val == 2) {
        // Transmission - SoundLink("TValerian01Raynor00055", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00055", -1), c_transmissionDurationAdd, 0.0, true);
        CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 4.0);
    }
    else if (auto67B96275_val == 3) {
        // Transmission - SoundLink("TValerian02BRaynor00018", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02BRaynor00018", -1), c_transmissionDurationAdd, 0.0, false);
        TransmissionWait(TransmissionLastSent(), 3.0);
        CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 6.0);
    }
    else if (auto67B96275_val == 4) {
        CameraShakeStart(gv_pLAYER_P01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 3.0);
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    auto40ADB649_val = gv_cinematicNumber;
    if (auto40ADB649_val == 1) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1707), 6.0, -1, 10, true);
        VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(1));
        gv_victoryRevealer = VisRevealerLastCreated();
        TriggerExecute(gt_Area01Kaboom, true, true);
    }
    else if (auto40ADB649_val == 2) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1709), 6.0, -1, 10, true);
        VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(2));
        gv_victoryRevealer = VisRevealerLastCreated();
        TriggerExecute(gt_Area02Kaboom, true, true);
    }
    else if (auto40ADB649_val == 3) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1708), 6.0, -1, 10, true);
        VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(3));
        gv_victoryRevealer = VisRevealerLastCreated();
        TriggerExecute(gt_Area03Kaboom, true, true);
    }
    else if (auto40ADB649_val == 4) {
        CameraApplyInfo(gv_pLAYER_P01_USER, CameraInfoFromId(1710), 6.0, -1, 10, true);
        VisRevealerCreate(gv_pLAYER_P01_USER, RegionFromId(4));
        gv_victoryRevealer = VisRevealerLastCreated();
        TriggerExecute(gt_Area04Kaboom, true, true);
    }
    else {
    }
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    unitgroup autoE35CE293_g;
    int autoE35CE293_u;
    int autoEBCAE2CA_val;

    // Variable Declarations
    unit lv_chosenUnit;
    fixed lv_fadeDuration;
    region lv_pickedArea;

    // Variable Initialization
    lv_chosenUnit = null;
    lv_fadeDuration = 0.0;
    lv_pickedArea = null;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_P01_USER);
    autoE35CE293_g = gv_victoryHiddenUnitGroup;
    autoE35CE293_u = 1;
    while (autoE35CE293_u <= UnitGroupCount(autoE35CE293_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(autoE35CE293_g, autoE35CE293_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        if (lv_chosenUnit == UnitGroupUnit(autoE35CE293_g, autoE35CE293_u)) {
            autoE35CE293_u = autoE35CE293_u + 1;
        }
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_P01_USER, c_playerStateXPGain, true);
    autoEBCAE2CA_val = gv_cinematicNumber;
    if (autoEBCAE2CA_val == 1) {
        lv_pickedArea = RegionFromId(1);
    }
    else if (autoEBCAE2CA_val == 2) {
        lv_pickedArea = RegionFromId(2);
    }
    else if (autoEBCAE2CA_val == 3) {
        lv_pickedArea = RegionFromId(3);
    }
    else if (autoEBCAE2CA_val == 4) {
        lv_pickedArea = RegionFromId(4);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P01_USER, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P03_ZERG_BR, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_stat_ZergKilledByPlatform += 1;
        gv_stat_ZergKilledByPlatform = (gv_stat_ZergKilledByPlatform + UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount));
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P04_ZERG_BL, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_stat_ZergKilledByPlatform += 1;
        gv_stat_ZergKilledByPlatform = (gv_stat_ZergKilledByPlatform + UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount));
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P05_ZERG_TL, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_stat_ZergKilledByPlatform += 1;
        gv_stat_ZergKilledByPlatform = (gv_stat_ZergKilledByPlatform + UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount));
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P06_ZERG_TR, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_stat_ZergKilledByPlatform += 1;
        gv_stat_ZergKilledByPlatform = (gv_stat_ZergKilledByPlatform + UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount));
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P07_ZERG_EXP, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_stat_ZergKilledByPlatform += 1;
        gv_stat_ZergKilledByPlatform = (gv_stat_ZergKilledByPlatform + UnitCargoValue(UnitGroupLoopCurrent(), c_unitCargoUnitCount));
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_P02_COOLANT_TOWERS, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground0, "TerrainObjectBraxisAlphaReactorDoodad", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground0, "TOSpacePlatformDestLarge", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground0, "TOSpacePlatformDestMedium", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground0, "TOSpacePlatformDestSmall", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground1, "TOSpacePlatformDestLarge", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground1, "TOSpacePlatformDestMedium", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground1, "TOSpacePlatformDestSmall", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground2, "TOSpacePlatformDestLarge", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground2, "TOSpacePlatformDestMedium", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground2, "TOSpacePlatformDestSmall", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground3, "TOSpacePlatformDestLarge", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground3, "TOSpacePlatformDestMedium", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_ground3, "TOSpacePlatformDestSmall", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, lv_pickedArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_hiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    gv_inCinematic = false;
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_SpawnLeviathan_Init();
    gt_LeviathanPing_Init();
    gt_LeviathanPatrolAI_Init();
    gt_LeviathanDies_Init();
    gt_LeviathanSpawnsMutas_Init();
    gt_LeviathanMutaCatcher_Init();
    gt_LeviathanMutaAI_Init();
    gt_RemovetheCoolantTowerPing_Init();
    gt_Area01CoolantTowerKilledRedSouthEastQ_Init();
    gt_Area02CoolantTowerKilledGreenSouthWestQ_Init();
    gt_Area03CoolantTowerKilledPurpleNorthWestQ_Init();
    gt_Area04CoolantTowerKilledWhiteCentralQ_Init();
    gt_Area01Kaboom_Init();
    gt_Area02Kaboom_Init();
    gt_Area03Kaboom_Init();
    gt_Area04Kaboom_Init();
    gt_Area01MoneyPickUps_Init();
    gt_Area02MoneyPickUps_Init();
    gt_Area03MoneyPickUps_Init();
    gt_Area04MoneyPickUps_Init();
    gt_CreateBlockersArea01_Init();
    gt_CreateBlockersArea02_Init();
    gt_CreateBlockersArea03_Init();
    gt_CreateBlockersArea04_Init();
    gt_StartMutaSpawners_Init();
    gt_CatchtheMutaPart1_Init();
    gt_CatchtheMutaPart2_Init();
    gt_MutaSpawnersN3_Init();
    gt_MutaSpawnersN7_Init();
    gt_MutaSpawnersN16_Init();
    gt_MutaSpawnersN18_Init();
    gt_MutaSpawnersN20_Init();
    gt_MutaSpawnersH1_Init();
    gt_MutaSpawnersH2_Init();
    gt_MutaSpawnersI5_Init();
    gt_MutaSpawnersI6_Init();
    gt_MutaSpawnersN6_Init();
    gt_MutaSpawnersN12_Init();
    gt_MutaSpawnersN15_Init();
    gt_MutaSpawnersN17_Init();
    gt_MutaSpawnersI1_Init();
    gt_MutaSpawnersI4_Init();
    gt_MutaSpawnersN5_Init();
    gt_MutaSpawnersN9_Init();
    gt_MutaSpawnersN10_Init();
    gt_MutaSpawnersN14_Init();
    gt_MutaSpawnersN23_Init();
    gt_MutaSpawnersI2_Init();
    gt_MutaSpawnersI3_Init();
    gt_ResourcePickups_Init();
    gt_PlatformLinesFirstTowerQ_Init();
    gt_PlatformLinesBRAQ_Init();
    gt_PlatformLinesBRBQ_Init();
    gt_PlatformLinesBLAQ_Init();
    gt_PlatformLinesBLBQ_Init();
    gt_PlatformLinesTLAQ_Init();
    gt_PlatformLinesTLBQ_Init();
    gt_PlatformLinesTRAQ_Init();
    gt_PlatformLinesTRBQ_Init();
    gt_PlatformInfestedLineQ_Init();
    gt_ComsatStationQ_Init();
    gt_ComsatStationQ2_Init();
    gt_ComsatStationQ3_Init();
    gt_ShowPingCoolantTowers_Init();
    gt_AutoSaves_Init();
    gt_PlatformInfoSafetyDelay_Init();
    gt_StartAI_Init();
    gt_StartUpgradesH_Init();
    gt_StartUpgradesI_Init();
    gt_CombinedAttackWaves_Init();
    gt_CombinedAttackWaves01_Init();
    gt_CombinedAttackWaves02_Init();
    gt_CombinedAttackWaves03_Init();
    gt_CombinedAttackWavesLoop_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_TipCampaignTipsQ_Init();
    gt_TipCoolantTowersQ_Init();
    gt_TipEscapingtheExplosionQ_Init();
    gt_TipLeviathanQ_Init();
    gt_StatUnitsLosttoEnemies_Init();
    gt_VictoryDestroySpacePlatformsCompleted_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDestroyCoolantTowersCreateQ_Init();
    gt_ObjectiveDestroyCoolantTowersUpdate_Init();
    gt_ObjectiveDestroyCoolantTowersComplete_Init();
    gt_ObjectiveDestroyCoolantTowersFailed_Init();
    gt_ObjectiveKillLeviathanCreateQ_Init();
    gt_ObjectiveKillLeviathanComplete_Init();
    gt_ObjectiveKillLeviathanFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingScene04_Init();
    gt_MidPlatformsQ_Init();
    gt_MidPlatformsSetup_Init();
    gt_MidPlatformsCinematic_Init();
    gt_MidPlatformsCinematicEnd_Init();
    gt_MidPlatformsCleanup_Init();
    gt_CreepArea01BR_Init();
    gt_CreepArea02BL_Init();
    gt_CreepArea03TL_Init();
    gt_CreepArea04TR_Init();
    gt_FinalCinematicPlatformLinesBR_Init();
    gt_FinalCinematicPlatformLinesBL_Init();
    gt_FinalCinematicPlatformLinesTL_Init();
    gt_FinalCinematicPlatformLinesTR_Init();
    gt_MidLeviathanQ_Init();
    gt_MidLeviathanSetup_Init();
    gt_MidLeviathanCinematic_Init();
    gt_MidLeviathanCinematicEnd_Init();
    gt_MidLeviathanCleanup_Init();
    gt_RemoveUnits_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
