//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Belly of the Beast
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p1_USER = 1;
const int gv_p2_ZERG = 2;
const int gv_p4_DOMINIONALLIES = 4;
const int gv_p5_EGGS = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
unit gv_tHEONERAYNOR;
unit gv_tHEONETYCHUS;
unit gv_tHEONESWANN;
unit gv_tHEONESTETMAN;
unit gv_tHEONEOMEGALISK;
unit gv_tHEONEBROODMOTHER;
unitgroup gv_nonHeroicDudes;
unitgroup gv__1BroodchamberAllUnits;
unitgroup gv__2BroodchamberAllUnits;
unitgroup gv__3BroodchamberAllUnits;
unitgroup gv__4BroodchamberAllUnits;
point[31] gv__4LavaDoodadPositions;
bool[31] gv__4LavaDoodadHavePlayedAnim;
point[6] gv__4LavaNydusPositions;
bool[6] gv__4LavaNydusHaveSpawned;
point[9] gv__4LavaFireNydusPositions;
bool[9] gv__4LavaFireNydusHaveSpawned;
timer gv_holdoutTimer;
int gv_holdoutTimerWindow;
bool gv_limitNydusWormSpawnsInHoldout;
playergroup gv_zergPlayers;
fixed gv_nydusWormHP;
fixed gv_queenHP;
fixed gv_omegaliskHP;
fixed gv_incapRescueRadius;
region[8] gv_feederlingRegions;
int gv_interruptableTransmission;
revealer gv__1Nuke1Revealer;
actor gv__1SnipeHereActor;
actor gv__1TalkFXActor;
unitgroup gv__1TeachSnipeBullies;
unitgroup gv__1TeachSnipeAgainBullies;
actor gv__1TeachNadesActor;
unitgroup gv__1TeachNadesBullies;
unitgroup gv__1TeachNadesAgainBullies;
unitgroup gv__1HiddenZergUnits;
actor gv__1BettyPlacementActor1;
actor gv__1BettyPlacementActor1a;
unitgroup gv__1TeachBettyBullies;
int gv__1RescueDominionPing;
unitgroup gv__1RescuableDominionGroup;
unitgroup gv__1ZergGuards;
unitgroup gv__1SEZergBulliesWest;
unitgroup gv__1SEZergBulliesEast;
unitgroup gv__1PincerBullies;
int gv__1BroodchamberLocPing;
unit gv__1BroodchamberNuke;
unitgroup gv__2StoryTellingBullies;
unitgroup gv__2ZombieRaid1;
unitgroup gv__2ZombieRaid2;
unitgroup gv__2HiddenZergUnits;
unitgroup gv__2IntroBanelings;
bool gv__2PlayerWasHurtByBanelings;
int gv__2RescueDominionPing;
unitgroup gv__2RescuableDominionGroup;
unitgroup gv__2NydusKillTeamSwarmlings;
unitgroup gv__2NydusKillTeam;
int gv__2NydusKillTeamSwarmlingSpawnAmt;
unitgroup gv__2AmbushBullies;
unitgroup gv__2AmbushUnits;
unitgroup gv__2GauntletPushbackGroup;
int gv__2BroodchamberLocPing;
unit gv__2BroodchamberNuke;
unitgroup gv__3BullyGroup1;
unitgroup gv__3BullyGroup2;
unitgroup gv__3BullyGroup2MoverShooters;
unitgroup gv__3OmegaliskSpeedbumpGroup;
unit gv__3OmegaliskRetreatUnit;
int gv__3RescueDominionPing;
unitgroup gv__3RescuableDominionGroup;
int gv__3BroodchamberLocPing;
unit gv__3BroodchamberNuke;
int gv__3QueenPing;
int gv__3QueenBossBarIndex;
int gv__3QueenEggPopLimit;
region gv__3QueenEggPopRegion;
fixed gv__4TimeLimit;
fixed gv__4HeightOfLava;
int gv__4HeroesSaved;
unit gv__4CurrentExtractionUnit;
int gv__4ExtractionPing;
int gv__4HeroesExtracted;
unitgroup gv_aIThinkGroup;
fixed gv_swarmlingSpeed;
fixed gv_nydusSpawnDelay;
string gv_nydusSpawnType;
int gv_nydusSpawnCountPerPacks;
int gv_nydusSpawnPacks;
region gv_nydusSpawnRegion;
int gv_nydusWormLimitInHoldout;
int gv_nydusWormsActiveInHoldout;
unitgroup gv_nydusSpawnedCreatures;
int gv_raynorSnipeKillsBest;
int gv_raynorSnipeKillsCurrent;
int gv_flamingBettyKills;
int gv_achievementHeroIncapCounter;
unitgroup gv_incappedHeroes;
int gv_oBJPlantSeismicCharges;
int gv_oBJExfiltrate;
bool gv_cinematicCompleted;
actor gv_cinematicStartHoldout1Ping1;
actor gv_cinematicStartHoldout1Ping1a;
actor gv_cinematicStartHoldout1Ping2;
actor gv_cinematicStartHoldout1Ping2a;
actor gv_cinematicStartHoldout1Ping3;
actor gv_cinematicStartHoldout1Ping3a;
unit gv_cINEMATICSWANN;
unit gv_cINEMATICTYCHUS;
unit gv_cINEMATICSTETTMANN;
unit gv_cINEMATICRAYNOR;
unit gv_cINEMATIC_NukeUnit;
unit gv_cinematicNydusWorm;
unitgroup gv_cinematicActors;
unitgroup gv_cinematicHiddenUnitGroup;
unitgroup gv_cinematicReinforcements;
unitgroup gv_cinematicZergStrays;
doodad gv_cinematicFissureDoodad;
bool gv_briefingActionMercDismissed;

void InitGlobals () {
    int init_i;

    gv_gameOver = false;
    gv_inCinematic = false;
    gv_tHEONERAYNOR = null;
    gv_tHEONETYCHUS = null;
    gv_tHEONESWANN = null;
    gv_tHEONESTETMAN = null;
    gv_tHEONEOMEGALISK = null;
    gv_tHEONEBROODMOTHER = UnitFromId(2318);
    gv_nonHeroicDudes = UnitGroupEmpty();
    gv__1BroodchamberAllUnits = UnitGroupEmpty();
    gv__2BroodchamberAllUnits = UnitGroupEmpty();
    gv__3BroodchamberAllUnits = UnitGroupEmpty();
    gv__4BroodchamberAllUnits = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 30) {
        gv__4LavaDoodadPositions[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 30) {
        gv__4LavaDoodadHavePlayedAnim[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 5) {
        gv__4LavaNydusPositions[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 5) {
        gv__4LavaNydusHaveSpawned[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 8) {
        gv__4LavaFireNydusPositions[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 8) {
        gv__4LavaFireNydusHaveSpawned[init_i] = false;
        init_i = init_i + 1;
    }
    gv_holdoutTimer = TimerCreate();
    gv_holdoutTimerWindow = c_timerWindowNone;
    gv_limitNydusWormSpawnsInHoldout = false;
    gv_zergPlayers = PlayerGroupEmpty();
    gv_nydusWormHP = 0.0;
    gv_queenHP = 0.0;
    gv_omegaliskHP = 1500.0;
    gv_incapRescueRadius = 0.0;
    init_i = 0;
    while (init_i <= 7) {
        gv_feederlingRegions[init_i] = null;
        init_i = init_i + 1;
    }
    gv_interruptableTransmission = c_invalidTransmissionId;
    gv__1Nuke1Revealer = null;
    gv__1TeachSnipeBullies = UnitGroupEmpty();
    gv__1TeachSnipeAgainBullies = UnitGroupEmpty();
    gv__1TeachNadesBullies = UnitGroupEmpty();
    gv__1TeachNadesAgainBullies = UnitGroupEmpty();
    gv__1HiddenZergUnits = UnitGroupEmpty();
    gv__1TeachBettyBullies = UnitGroupEmpty();
    gv__1RescuableDominionGroup = UnitGroupEmpty();
    gv__1ZergGuards = UnitGroupEmpty();
    gv__1SEZergBulliesWest = UnitGroupEmpty();
    gv__1SEZergBulliesEast = UnitGroupEmpty();
    gv__1PincerBullies = UnitGroupEmpty();
    gv__1BroodchamberNuke = null;
    gv__2StoryTellingBullies = UnitGroupEmpty();
    gv__2ZombieRaid1 = UnitGroupEmpty();
    gv__2ZombieRaid2 = UnitGroupEmpty();
    gv__2HiddenZergUnits = UnitGroupEmpty();
    gv__2IntroBanelings = UnitGroupEmpty();
    gv__2PlayerWasHurtByBanelings = false;
    gv__2RescuableDominionGroup = UnitGroupEmpty();
    gv__2NydusKillTeamSwarmlings = UnitGroupEmpty();
    gv__2NydusKillTeam = UnitGroupEmpty();
    gv__2NydusKillTeamSwarmlingSpawnAmt = 0;
    gv__2AmbushBullies = UnitGroupEmpty();
    gv__2AmbushUnits = UnitGroupEmpty();
    gv__2GauntletPushbackGroup = UnitGroupEmpty();
    gv__2BroodchamberNuke = null;
    gv__3BullyGroup1 = UnitGroupEmpty();
    gv__3BullyGroup2 = UnitGroupEmpty();
    gv__3BullyGroup2MoverShooters = UnitGroupEmpty();
    gv__3OmegaliskSpeedbumpGroup = UnitGroupEmpty();
    gv__3OmegaliskRetreatUnit = null;
    gv__3RescuableDominionGroup = UnitGroupEmpty();
    gv__3BroodchamberNuke = null;
    gv__3QueenPing = c_invalidPingId;
    gv__3QueenBossBarIndex = 0;
    gv__3QueenEggPopLimit = 0;
    gv__3QueenEggPopRegion = null;
    gv__4TimeLimit = 0.0;
    gv__4HeightOfLava = 6.0;
    gv__4HeroesSaved = 0;
    gv__4CurrentExtractionUnit = null;
    gv__4HeroesExtracted = 0;
    gv_aIThinkGroup = UnitGroupEmpty();
    gv_swarmlingSpeed = 0.0;
    gv_nydusSpawnDelay = 0.0;
    gv_nydusSpawnType = null;
    gv_nydusSpawnCountPerPacks = 0;
    gv_nydusSpawnPacks = 0;
    gv_nydusSpawnRegion = null;
    gv_nydusWormLimitInHoldout = 0;
    gv_nydusWormsActiveInHoldout = 0;
    gv_nydusSpawnedCreatures = UnitGroupEmpty();
    gv_raynorSnipeKillsBest = 0;
    gv_raynorSnipeKillsCurrent = 0;
    gv_flamingBettyKills = 0;
    gv_achievementHeroIncapCounter = 0;
    gv_incappedHeroes = UnitGroupEmpty();
    gv_oBJPlantSeismicCharges = c_invalidObjectiveId;
    gv_oBJExfiltrate = c_invalidObjectiveId;
    gv_cinematicCompleted = false;
    gv_cINEMATICSWANN = null;
    gv_cINEMATICTYCHUS = null;
    gv_cINEMATICSTETTMANN = null;
    gv_cINEMATICRAYNOR = null;
    gv_cINEMATIC_NukeUnit = null;
    gv_cinematicNydusWorm = null;
    gv_cinematicActors = UnitGroupEmpty();
    gv_cinematicHiddenUnitGroup = UnitGroupEmpty();
    gv_cinematicReinforcements = UnitGroupEmpty();
    gv_cinematicZergStrays = UnitGroupEmpty();
    gv_briefingActionMercDismissed = false;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf__3ForcePopEgg (unit lp_poppedEgg);
void gf__3AIQueenPopEggs (region lp_region, int lp_int);
void gf__3EggSpawnedMobs (unit lp_poppedEgg);
void gf_ActivateAI (unit lp_activatedunit);
void gf_SpawnNydusWorm (region lp_region, int lp_packs, int lp_countPerPacks, string lp_type, fixed lp_delay);
void gf_CreateUnburrowingUnits (int lp_qty, string lp_type, point lp_loc);
void gf_Swap (unit lp_hero, unit lp_standIn);
void gf_ResetHeroCooldowns ();
void gf_ObjectivePlantSeismicChargesUpdate (int lp_nukesPlanted);
void gf_CinematicDeployNukeWrapper (unit lp_unit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt__1IntroSequence;
trigger gt__1StartGame;
trigger gt__1OpeningDialogueQ;
trigger gt__1TipStoryModeQ;
trigger gt__1TeachSnipeQ;
trigger gt__1TeachSnipeTripViaDamage;
trigger gt__1TeachSnipeTripViaMovement;
trigger gt__1TeachSnipeActions;
trigger gt__1SnipeAbilityFlashOff;
trigger gt__1TeachSnipeAgainTripViaDamage;
trigger gt__1TeachSnipeAgainAction;
trigger gt__1TeachNadesQ;
trigger gt__1TeachNadesTripViaDamage;
trigger gt__1TeachNadesTripViaMovement;
trigger gt__1TeachNadesAction;
trigger gt__1GrenadeAbilityFlashOff;
trigger gt__1TeachNadesAgainTripViaDamage;
trigger gt__1TeachNadesAgainAction;
trigger gt__1RevealMoreZerg;
trigger gt__1TeachBettyQ;
trigger gt__1TeachBettyViaCast;
trigger gt__1TeachBettyViaDamage;
trigger gt__1TeachBettyActions;
trigger gt__1FlameTurretAbilityFlashOff;
trigger gt__1CallforHelpQ;
trigger gt__1ZergKillTeamTripViaDamage;
trigger gt__1ZergKillTeamTripViaMovement;
trigger gt__1ZergKillTeamActions;
trigger gt__1CallforHelpSNUFFED;
trigger gt__1SaveDominionQ;
trigger gt__1LongConversationQ;
trigger gt__1SEZergViaMovement;
trigger gt__1SEZergActions;
trigger gt__1SEZergActionsQ;
trigger gt__1PincerUnburrow;
trigger gt__1PincerAttack;
trigger gt__1NydusWormsTrigger;
trigger gt__1NydusWormsCheatVision;
trigger gt__1NydusWormKilled;
trigger gt__1NydusWormsQ;
trigger gt__1NydusWormsStetmannQQQ;
trigger gt__1BroodchamberHoldoutWaitForPlayerAutosaveQ;
trigger gt__1BroodchamberTriggerViaMovement;
trigger gt__1BroodchamberActions;
trigger gt__1BroodchamberTriggerHoldoutStart;
trigger gt__1BroodchamberAttackWaves;
trigger gt__1BroodchamberDestroyHintPings;
trigger gt__2InitBroodchamber;
trigger gt__2StartGame;
trigger gt__2StoryTellingQ;
trigger gt__2StoryTellingTripViaDamage;
trigger gt__2StoryTellingTripViaMovement;
trigger gt__2StoryTellingActions;
trigger gt__2StoryTelling2Q;
trigger gt__2ZombieRaid1TripViaDamage;
trigger gt__2ZombieRaid1TripViaMovement;
trigger gt__2ZombieRaid1ActionQ;
trigger gt__2ZombieRaid2TripViaDamage;
trigger gt__2ZombieRaid2TripViaMovement;
trigger gt__2ZombieRaid2ActionQ;
trigger gt__2CrazyAberration;
trigger gt__2RevealMoreZerg;
trigger gt__2BanelingTripViaMovement;
trigger gt__2BanelingSplashDetection;
trigger gt__2BanelingQ;
trigger gt__2BanelingOuchQ;
trigger gt__2CallforHelpQ;
trigger gt__2ActivateNydusKillTeam;
trigger gt__2NydusKillTeamSpawning;
trigger gt__2CallforHelpSNUFFED;
trigger gt__2SaveDominionQ;
trigger gt__2AmbushTripViaDamage;
trigger gt__2AmbushTripViaMovement;
trigger gt__2AmbushActions;
trigger gt__2AmbushActionsQ;
trigger gt__2GauntletStart;
trigger gt__2GauntletQ;
trigger gt__2GauntletKillaWorm1Q;
trigger gt__2GauntletPushback1Q;
trigger gt__2GauntletPushback2Q;
trigger gt__2BroodchamberTriggerHoldout;
trigger gt__2BroodchamberTriggerHoldoutStart;
trigger gt__2BroodchamberAttackWaves;
trigger gt__2BroodchamberHoldoutUltralisksQ;
trigger gt__3InitBroodchamber;
trigger gt__3StartGame;
trigger gt__3FeederlingFlavor;
trigger gt__3FeederlingMovementAI;
trigger gt__3QueenForeshadowingQ;
trigger gt__3BullyGroup1TripviaDamage;
trigger gt__3BullyGroup1TripviaMovement;
trigger gt__3BullyGroup1Actions;
trigger gt__3BullyGroup1ReactionQ;
trigger gt__3BullyGroup2TripviaDamage;
trigger gt__3BullyGroup2TripviaMovement;
trigger gt__3BullyGroup2Actions;
trigger gt__3BullyGroup2DelayedActivation;
trigger gt__3BullyGroup2ReactionQ;
trigger gt__3CallforHelpQ;
trigger gt__3OmegaliskTripViaDamage;
trigger gt__3OmegaliskTripViaMovement;
trigger gt__3OmegaliskActions;
trigger gt__3OmegaliskEggsPop;
trigger gt__3MarineCallforHelpQ;
trigger gt__3OmegaliskCameraShakeWhenRockDestroyed;
trigger gt__3OmegaliskBothRocksDestroyed;
trigger gt__3OmegaliskBothRocksDestroyedQ;
trigger gt__3OmegaliskRetreatPeriodicCheck;
trigger gt__3OmegaliskRetreatActions;
trigger gt__3CallforHelpSNUFFED;
trigger gt__3OmegaliskKilled;
trigger gt__3SaveDominionCheck;
trigger gt__3SaveDominionQ;
trigger gt__3QueenFeederlingFlavor;
trigger gt__3Autosave2;
trigger gt__3BroodchamberTrip;
trigger gt__3QueenAIPhase1;
trigger gt__3QueenAIPhase2;
trigger gt__3KillQueenReminderQ;
trigger gt__3QueenAIPhase3;
trigger gt__3QueenAIPhase4;
trigger gt__3QueenShockwaveScreenShake;
trigger gt__3CreateQueenBossBar;
trigger gt__3UpdateQueenBossyBar;
trigger gt__3QueenPopEggs;
trigger gt__3EggPoppedViaDamageZergQueenOnly;
trigger gt__3QueenKill;
trigger gt__4InitBroodchamber;
trigger gt__4StartGame;
trigger gt__4FeederlingFlavor;
trigger gt__4FeederlingMovementAI;
trigger gt__4StartLavaViaTime;
trigger gt__4StartLavaViaMovement;
trigger gt__4StartLavaActions;
trigger gt__4LavaShakes;
trigger gt__4LavaSound;
trigger gt__4RunQ;
trigger gt__4LavaBurnificationAmbience;
trigger gt__4Ambush1;
trigger gt__4Infestor;
trigger gt__4UltraliskUnburrow;
trigger gt__4Ambush2;
trigger gt__4Extraction;
trigger gt__4UnitExtractionController;
trigger gt_AIThink;
trigger gt_InfestorCooldown;
trigger gt_NydusSpawningTrigger;
trigger gt_RaynorSnipeInitialize;
trigger gt_RaynorSnipeUnitsKilled;
trigger gt_AchievementOneShotFiftyKills;
trigger gt_BettyKill;
trigger gt_HeroIncapacitated;
trigger gt_RecoverIncappedHeroes;
trigger gt_IncapacitationTipQ;
trigger gt_InfestorWarningQ;
trigger gt_StetmannOOMQ;
trigger gt_SeismicChargeAtHalfHealthQ;
trigger gt_DefeatSeismicChargeDestroyed;
trigger gt_DefeatAllHeroesIncapacitated;
trigger gt_DefeatAHeroWasBurninated;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectivePlantSeismicChargesCreateQ;
trigger gt_ObjectivePlantSeismicChargesComplete;
trigger gt_ObjectiveExfiltrationCreateQ;
trigger gt_DisableDamageDrivenTriggers;
trigger gt_EnableDamageDrivenTriggers;
trigger gt_CinematicStartHoldout1Q;
trigger gt_CinematicStartHoldout1Setup;
trigger gt_CinematicStartHoldout1Cinematic;
trigger gt_CinematicStartHoldout1CinematicEnd;
trigger gt_CinematicStartHoldout1Cleanup;
trigger gt_CinematicFinishedHoldout1Q;
trigger gt_CinematicFinishedHoldout1Setup;
trigger gt_CinematicFinishedHoldout1Cinematic;
trigger gt_CinematicFinishedHoldout1CinematicRunout;
trigger gt_CinematicFinishedHoldout1CinematicEnd;
trigger gt_CinematicFinishedHoldout1Cleanup;
trigger gt_CinematicStartHoldout2Q;
trigger gt_CinematicStartHoldout2Setup;
trigger gt_CinematicStartHoldout2Cinematic;
trigger gt_CinematicStartHoldout2CinematicEnd;
trigger gt_CinematicStartHoldout2Cleanup;
trigger gt_MidBroodChamber2Q;
trigger gt_CinematicFinishedHoldout2Setup;
trigger gt_CinematicFinishedHoldout2Cinematic;
trigger gt_CinematicFinishedHoldout2CinematicRunout;
trigger gt_CinematicFinishedHoldout2CinematicEnd;
trigger gt_CinematicFinishedHoldout2Cleanup;
trigger gt_CinematicStartHoldout3Q;
trigger gt_CinematicStartHoldout3Setup;
trigger gt_CinematicStartHoldout3Cinematic;
trigger gt_CinematicStartHoldout3EggsPopped;
trigger gt_CinematicStartHoldout3CinematicEnd;
trigger gt_CinematicStartHoldout3Cleanup;
trigger gt_CinematicFinishedHoldout3Q;
trigger gt_CinematicFinishedHoldout3Setup;
trigger gt_CinematicFinishedHoldout3Cinematic;
trigger gt_CinematicFinishedHoldout3CinematicRunout;
trigger gt_CinematicFinishedHoldout3NydusAI;
trigger gt_CinematicFinishedHoldout3CinematicEnd;
trigger gt_CinematicFinishedHoldout3Cleanup;
trigger gt_VictoryQ;
trigger gt_CinematicVictorySetup;
trigger gt_CinematicVictoryCinematic;
trigger gt_CinematicVictoryAction;
trigger gt_CinematicVictoryCinematicEnd;
trigger gt_CinematicVictoryCleanup;
trigger gt_CinematicDeployNuke;
trigger gt_CinematicCameraShakeNuke2;
trigger gt_CinematicCameraShakeNuke;
trigger gt_BriefingQ;
trigger gt_BriefingAction02;
trigger gt_BriefingAction03;
trigger gt_BriefingAction04;
trigger gt_BriefingScene01;
trigger gt_BriefingCameraWork01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingScene04;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf__3ForcePopEgg (unit lp_poppedEgg) {
    // Implementation
    if ((UnitIsAlive(lp_poppedEgg) == true)) {
        gf__3EggSpawnedMobs(lp_poppedEgg);
        Wait(1.3, c_timeGame);
    }
    else {
    }
}

void gf__3AIQueenPopEggs (region lp_region, int lp_int) {
    // Implementation
    gv__3QueenEggPopRegion = lp_region;
    gv__3QueenEggPopLimit = lp_int;
    TriggerExecute(gt__3QueenPopEggs, true, false);
}

void gf__3EggSpawnedMobs (unit lp_poppedEgg) {
    int auto84E2776E_val;

    // Variable Declarations
    point lv_poppedEggPoint;

    // Variable Initialization
    lv_poppedEggPoint = null;

    // Implementation
    lv_poppedEggPoint = UnitGetPosition(lp_poppedEgg);
    SoundPlay(SoundLink("Egg_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitKill(lp_poppedEgg);
    Wait(0.1, c_timeGame);
    UnitCreate(1, "Baneling", 0, 0, lv_poppedEggPoint, libNtve_gf_RandomAngle());
    UnitBehaviorRemove(UnitLastCreated(), "BanelingExplode", 1);
    UnitKill(UnitLastCreated());
    Wait(0.1, c_timeGame);
    auto84E2776E_val = RandomInt(1, 5);
    if (auto84E2776E_val == 1) {
        UnitCreate(3, "InfestedCivilian", 0, gv_p2_ZERG, lv_poppedEggPoint, libNtve_gf_RandomAngle());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            gf_ActivateAI(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else if (auto84E2776E_val == 2) {
        UnitCreate(1, "InfestedTerranCampaign", 0, gv_p2_ZERG, lv_poppedEggPoint, libNtve_gf_RandomAngle());
        gf_ActivateAI(UnitLastCreated());
        UnitCreate(1, "InfestedCivilian", 0, gv_p2_ZERG, lv_poppedEggPoint, libNtve_gf_RandomAngle());
        gf_ActivateAI(UnitLastCreated());
    }
    else if (auto84E2776E_val == 3) {
        UnitCreate(1, "InfestedCivilian", 0, gv_p2_ZERG, lv_poppedEggPoint, libNtve_gf_RandomAngle());
        gf_ActivateAI(UnitLastCreated());
        UnitCreate(1, "Zergling", 0, gv_p2_ZERG, lv_poppedEggPoint, libNtve_gf_RandomAngle());
        gf_ActivateAI(UnitLastCreated());
    }
    else if (auto84E2776E_val == 4) {
        UnitCreate(3, "Zergling", 0, gv_p2_ZERG, lv_poppedEggPoint, libNtve_gf_RandomAngle());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            gf_ActivateAI(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else if (auto84E2776E_val == 5) {
        UnitCreate(2, "InfestedTerranCampaign", 0, gv_p2_ZERG, lv_poppedEggPoint, libNtve_gf_RandomAngle());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            gf_ActivateAI(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
}

void gf_ActivateAI (unit lp_activatedunit) {
    // Variable Declarations
    point lv_rallypoint;
    unitgroup lv_targets;

    // Variable Initialization
    lv_rallypoint = null;
    lv_targets = UnitGroupEmpty();

    // Implementation
    lv_targets = UnitGroup(null, gv_p1_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAdd(gv_aIThinkGroup, lp_activatedunit);
    if ((UnitGetType(lp_activatedunit) == "Swarmling")) {
        UnitSetPropertyFixed(lp_activatedunit, c_unitPropMovementSpeed, gv_swarmlingSpeed);
        if ((libNtve_gf_RandomPercent() >= 50.0)) {
            UnitSetPropertyFixed(lp_activatedunit, c_unitPropMovementSpeed, (UnitGetPropertyFixed(lp_activatedunit, c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(1.4, 1.9)));
        }
        else {
        }
    }
    else {
    }
    if ((UnitGetType(lp_activatedunit) == "InfestedCivilian")) {
        if ((libNtve_gf_RandomPercent() >= 50.0)) {
            UnitSetPropertyFixed(lp_activatedunit, c_unitPropMovementSpeed, (UnitGetPropertyFixed(lp_activatedunit, c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(1.4, 1.9)));
        }
        else {
        }
    }
    else {
    }
    UnitIssueOrder(lp_activatedunit, OrderSetAutoCast(AbilityCommand("SapStructure", 0), true), c_orderQueueReplace);
    if ((UnitHasBehavior(gv_tHEONERAYNOR, "Incapacitated") == true)) {
        UnitGroupRemove(lv_targets, gv_tHEONERAYNOR);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESTETMAN, "Incapacitated") == true)) {
        UnitGroupRemove(lv_targets, gv_tHEONESTETMAN);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESWANN, "Incapacitated") == true)) {
        UnitGroupRemove(lv_targets, gv_tHEONESWANN);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONETYCHUS, "Incapacitated") == true)) {
        UnitGroupRemove(lv_targets, gv_tHEONETYCHUS);
    }
    else {
    }
    lv_rallypoint = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lp_activatedunit), lv_targets));
    UnitIssueOrder(lp_activatedunit, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    UnitIssueOrder(lp_activatedunit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rallypoint), c_orderQueueReplace);
    if ((UnitGetType(lp_activatedunit) == "Infestor")) {
        UnitIssueOrder(lp_activatedunit, OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), RegionRandomPoint(RegionCircle(PointWithOffsetPolar(UnitGetPosition(lp_activatedunit), (DistanceBetweenPoints(lv_rallypoint, UnitGetPosition(lp_activatedunit)) - 2.0), AngleBetweenPoints(UnitGetPosition(lp_activatedunit), lv_rallypoint)), 1.5))), c_orderQueueReplace);
    }
    else {
    }
}

void gf_SpawnNydusWorm (region lp_region, int lp_packs, int lp_countPerPacks, string lp_type, fixed lp_delay) {
    // Implementation
    gv_nydusSpawnRegion = lp_region;
    gv_nydusSpawnPacks = lp_packs;
    gv_nydusSpawnCountPerPacks = lp_countPerPacks;
    gv_nydusSpawnType = lp_type;
    gv_nydusSpawnDelay = lp_delay;
    TriggerExecute(gt_NydusSpawningTrigger, true, false);
}

void gf_CreateUnburrowingUnits (int lp_qty, string lp_type, point lp_loc) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_qty >= 1) && (lp_type != null)) {
        IntLoopBegin(1, lp_qty);
        while (!IntLoopDone()) {
            UnitCreate(1, lp_type, 0, gv_p2_ZERG, lp_loc, libNtve_gf_RandomAngle());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitGroupAdd(lv_unitGroup, UnitLastCreated());
            IntLoopStep();
        }
        IntLoopEnd();
        UnitGroupLoopBegin(lv_unitGroup);
        while (!UnitGroupLoopDone()) {
            gf_ActivateAI(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
}

void gf_Swap (unit lp_hero, unit lp_standIn) {
    // Implementation
    UnitSetPosition(lp_hero, UnitGetPosition(lp_standIn), false);
    UnitRemove(lp_standIn);
}

void gf_ResetHeroCooldowns () {
    // Implementation
    UnitAbilityReset(gv_tHEONERAYNOR, AbilityCommand("RaynorSnipe", 0), c_spendLocationAll);
    UnitAbilityReset(gv_tHEONETYCHUS, AbilityCommand("BonesTossGrenade", 0), c_spendLocationAll);
    UnitAbilityReset(gv_tHEONESWANN, AbilityCommand("DutchPlaceTurret", 0), c_spendLocationAll);
}

void gf_ObjectivePlantSeismicChargesUpdate (int lp_nukesPlanted) {
    // Implementation
    ObjectiveSetName(gv_oBJPlantSeismicCharges, (StringExternal("Param/Value/6DD01242") + IntToText(lp_nukesPlanted) + StringExternal("Param/Value/2F8541EA")));
    if ((lp_nukesPlanted >= 3)) {
        ObjectiveSetState(gv_oBJPlantSeismicCharges, c_objectiveStateCompleted);
    }
    else {
    }
}

void gf_CinematicDeployNukeWrapper (unit lp_unit) {
    // Implementation
    gv_cINEMATIC_NukeUnit = lp_unit;
    TriggerExecute(gt_CinematicDeployNuke, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(27);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt__1IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "Burrow", 1);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("RaynorSnipe", 0), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("BonesTossGrenade", 0), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("DutchPlaceTurret", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_ZERG, 5);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p4_DOMINIONALLIES, 0);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p5_EGGS, 5);
    libNtve_gf_SetAlliance(gv_p2_ZERG, gv_p4_DOMINIONALLIES, 5);
    libNtve_gf_SetAlliance(gv_p2_ZERG, gv_p5_EGGS, 8);
    libNtve_gf_SetAlliance(gv_p4_DOMINIONALLIES, gv_p5_EGGS, 7);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    PlayerSetColorIndex(gv_p2_ZERG, 4, true);
    PlayerSetColorIndex(gv_p5_EGGS, 4, true);
    PlayerGroupAdd(gv_zergPlayers, gv_p2_ZERG);
    PlayerGroupAdd(gv_zergPlayers, gv_p5_EGGS);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PreloadSoundObject("Swann_PlaceTurretVO", false);
    libNtve_gf_PreloadSoundObject("Raynor_SnipeVO", false);
    libNtve_gf_PreloadSoundObject("Tychus_TossGrenadeVO", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorCommando", 0, gv_p1_USER, PointFromId(220));
    gv_tHEONERAYNOR = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_tHEONERAYNOR, "RefSet ::global.RaynorCommando ::Self");
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusCommando", 0, gv_p1_USER, PointFromId(1405));
    gv_tHEONETYCHUS = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Swann", 0, gv_p1_USER, PointFromId(1404));
    gv_tHEONESWANN = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Stetmann", 0, gv_p1_USER, PointFromId(1406));
    gv_tHEONESTETMAN = UnitLastCreated();
    gv_tHEONEBROODMOTHER = UnitFromId(2318);
    UnitControlGroupAddUnit(gv_p1_USER, 1, gv_tHEONERAYNOR);
    UnitControlGroupAddUnit(gv_p1_USER, 2, gv_tHEONETYCHUS);
    UnitControlGroupAddUnit(gv_p1_USER, 3, gv_tHEONESWANN);
    UnitControlGroupAddUnit(gv_p1_USER, 4, gv_tHEONESTETMAN);
    UnitGroupSelect(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_p1_USER, true);
    UnitBehaviorRemove(UnitFromId(354), "RaynorRadar", 1);
    UnitBehaviorRemove(UnitFromId(358), "RaynorRadar", 1);
    UnitBehaviorRemove(UnitFromId(45), "RaynorRadar", 1);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestationSpire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetInfoText(UnitFromId(1371), StringExternal("Param/Value/96E5A249"), StringExternal("Param/Value/4738B6F1"), StringExternal("Param/Value/71ED6C33"));
    libNtve_gf_ShowHideUnit(UnitFromId(1314), false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupRemove(gv__1BroodchamberAllUnits, gv_tHEONESTETMAN);
    UnitGroupRemove(gv__1BroodchamberAllUnits, gv_tHEONESWANN);
    UnitGroupRemove(gv__1BroodchamberAllUnits, gv_tHEONERAYNOR);
    UnitGroupRemove(gv__1BroodchamberAllUnits, gv_tHEONETYCHUS);
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1TeachSnipeBullies, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1TeachSnipeAgainBullies, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1TeachNadesBullies, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1TeachNadesAgainBullies, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1TeachBettyBullies, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1ZergGuards, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv__1SEZergBulliesWest, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(123), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv__1SEZergBulliesEast, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1PincerBullies, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p4_DOMINIONALLIES, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv__1RescuableDominionGroup, UnitGroupLoopCurrent());
        UnitGroupRemove(gv__1BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1HiddenZergUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1HiddenZergUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1HiddenZergUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__1HiddenZergUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetInfoText(UnitFromId(1998), StringExternal("Param/Value/97765D28"), StringExternal("Param/Value/FE2CFED2"), StringExternal("Param/Value/D47FB8BC"));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__2BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__2StoryTellingBullies, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__2ZombieRaid1, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__2ZombieRaid2, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Baneling", gv_p2_ZERG, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__2IntroBanelings, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__2AmbushBullies, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv__2AmbushUnits, UnitGroupLoopCurrent());
        UnitGroupRemove(gv__2BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAdd(gv__2GauntletPushbackGroup, UnitFromId(2146));
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(102), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__2GauntletPushbackGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__2GauntletPushbackGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupRemove(gv__2BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p4_DOMINIONALLIES, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv__2RescuableDominionGroup, UnitGroupLoopCurrent());
        UnitGroupRemove(gv__2BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__2HiddenZergUnits, UnitGroupLoopCurrent());
        UnitGroupRemove(gv__2BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__2HiddenZergUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(UnitFromId(463), "ZergBuildingNotOnCreep", 1);
    UnitBehaviorRemove(UnitFromId(1188), "ZergBuildingNotOnCreep", 1);
    UnitBehaviorRemove(UnitFromId(1313), "ZergBuildingNotOnCreep", 1);
    UnitSetInfoText(UnitFromId(2405), StringExternal("Param/Value/E4A096C8"), StringExternal("Param/Value/976FDAC1"), StringExternal("Param/Value/9445D130"));
    gv_tHEONEOMEGALISK = UnitFromId(520);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3BullyGroup1, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p5_EGGS, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3BullyGroup1, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3BullyGroup1, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3BullyGroup2, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p5_EGGS, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3BullyGroup2, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3BullyGroup2, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3BullyGroup2MoverShooters, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3OmegaliskSpeedbumpGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p5_EGGS, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__3OmegaliskSpeedbumpGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupRemove(gv__3OmegaliskSpeedbumpGroup, gv_tHEONEOMEGALISK);
    UnitGroupLoopBegin(UnitGroup(null, gv_p4_DOMINIONALLIES, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv__3RescuableDominionGroup, UnitGroupLoopCurrent());
        UnitGroupRemove(gv__3BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(UnitFromId(117), "ZergBuildingNotOnCreep", 1);
    UnitBehaviorRemove(UnitFromId(1283), "ZergBuildingNotOnCreep", 1);
    UnitSetInfoText(UnitFromId(2406), StringExternal("Param/Value/EB679040"), StringExternal("Param/Value/14EB700C"), StringExternal("Param/Value/30169248"));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__4BroodchamberAllUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(UnitFromId(1004), "ZergBuildingNotOnCreep", 1);
    UnitBehaviorRemove(UnitFromId(396), "ZergBuildingNotOnCreep", 1);
    UnitGroupLoopBegin(gv__2BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__3BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__4BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("00");
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    RegionPlayableMapSet(RegionFromId(10));
    libLbty_gf_AutoRevealRegion(RegionFromId(137), RegionFromId(137), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(140), RegionFromId(140), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(142), RegionFromId(142), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(27), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(143), RegionFromId(143), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(144), RegionFromId(144), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(145), RegionFromId(145), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(146), RegionFromId(146), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(147), RegionFromId(147), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(148), RegionFromId(148), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(149), RegionFromId(149), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(150), RegionFromId(150), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(114), RegionFromId(114), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(160), RegionFromId(160), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(151), RegionFromId(151), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(152), RegionFromId(152), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(153), RegionFromId(153), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(154), RegionFromId(154), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(155), RegionFromId(155), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(156), RegionFromId(156), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(157), RegionFromId(157), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(158), RegionFromId(158), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(161), RegionFromId(161), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(162), RegionFromId(162), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(163), RegionFromId(163), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(164), RegionFromId(164), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(165), RegionFromId(165), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(166), RegionFromId(166), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(167), RegionFromId(167), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(81), RegionFromId(81), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(121), RegionFromId(121), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(124), RegionFromId(124), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(159), RegionFromId(159), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(168), RegionFromId(168), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(169), RegionFromId(169), gv_p1_USER);
    gv_feederlingRegions[1] = RegionFromId(33);
    gv_feederlingRegions[2] = RegionFromId(83);
    gv_feederlingRegions[3] = RegionFromId(91);
    gv_feederlingRegions[4] = RegionFromId(87);
    gv_feederlingRegions[5] = RegionFromId(88);
    gv_feederlingRegions[6] = RegionFromId(89);
    gv_feederlingRegions[7] = RegionFromId(119);
    gv__4LavaDoodadPositions[1] = PointFromId(688);
    gv__4LavaDoodadPositions[2] = PointFromId(689);
    gv__4LavaDoodadPositions[3] = PointFromId(696);
    gv__4LavaDoodadPositions[4] = PointFromId(698);
    gv__4LavaDoodadPositions[5] = PointFromId(708);
    gv__4LavaDoodadPositions[6] = PointFromId(712);
    gv__4LavaDoodadPositions[7] = PointFromId(716);
    gv__4LavaDoodadPositions[8] = PointFromId(723);
    gv__4LavaDoodadPositions[9] = PointFromId(745);
    gv__4LavaDoodadPositions[10] = PointFromId(180);
    gv__4LavaDoodadPositions[11] = PointFromId(181);
    gv__4LavaDoodadPositions[12] = PointFromId(182);
    gv__4LavaDoodadPositions[13] = PointFromId(188);
    gv__4LavaDoodadPositions[14] = PointFromId(183);
    gv__4LavaDoodadPositions[15] = PointFromId(192);
    gv__4LavaDoodadPositions[16] = PointFromId(212);
    gv__4LavaDoodadPositions[17] = PointFromId(199);
    gv__4LavaDoodadPositions[18] = PointFromId(380);
    gv__4LavaDoodadPositions[19] = PointFromId(375);
    gv__4LavaDoodadPositions[20] = PointFromId(374);
    gv__4LavaDoodadPositions[21] = PointFromId(398);
    gv__4LavaDoodadPositions[22] = PointFromId(416);
    gv__4LavaDoodadPositions[23] = PointFromId(545);
    gv__4LavaNydusPositions[1] = PointFromId(2244);
    gv__4LavaNydusPositions[2] = PointFromId(2245);
    gv__4LavaNydusPositions[3] = PointFromId(2246);
    gv__4LavaNydusPositions[4] = PointFromId(2247);
    gv__4LavaNydusPositions[5] = PointFromId(2248);
    gv__4LavaFireNydusPositions[1] = PointFromId(2647);
    gv__4LavaFireNydusPositions[2] = PointFromId(2648);
    gv__4LavaFireNydusPositions[3] = PointFromId(2649);
    gv__4LavaFireNydusPositions[4] = PointFromId(2650);
    gv__4LavaFireNydusPositions[5] = PointFromId(2651);
    gv__4LavaFireNydusPositions[6] = PointFromId(2652);
    gv__4LavaFireNydusPositions[7] = PointFromId(2653);
    gv__4LavaFireNydusPositions[8] = PointFromId(2654);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        PlayerGroupLoopBegin(gv_zergPlayers);
        while (!PlayerGroupLoopDone()) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropHandicap, c_playerPropOperSetTo, 50);
            PlayerGroupLoopStep();
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    gv_omegaliskHP = libNtve_gf_DifficultyValueFixed(1000.0, 1250.0, 1500.0, 1750.0);
    UnitSetPropertyFixed(UnitFromId(450), c_unitPropLifeMax, 500.0);
    UnitSetPropertyFixed(UnitFromId(450), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(1889), c_unitPropLifeMax, 1000.0);
    UnitSetPropertyFixed(UnitFromId(1889), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(999), c_unitPropLifeMax, 1000.0);
    UnitSetPropertyFixed(UnitFromId(999), c_unitPropLifePercent, 100.0);
    gv_nydusWormLimitInHoldout = libNtve_gf_DifficultyValueInt(2, 3, 3, 4);
    gv_swarmlingSpeed = libNtve_gf_DifficultyValueFixed(1.65, 1.65, 1.75, 1.9);
    gv_incapRescueRadius = 7.0;
    gv_nydusWormHP = 200.0;
    gv__2NydusKillTeamSwarmlingSpawnAmt = libNtve_gf_DifficultyValueInt(6, 8, 8, 10);
    gv__4TimeLimit = libNtve_gf_DifficultyValueFixed(210.0, 180.0, 180.0, 180.0);
    gv_queenHP = libNtve_gf_DifficultyValueFixed(2500.0, 3000.0, 3500.0, 4000.0);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Burrow", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("RaynorCommando", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Swann", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stetmann", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("TychusCommando", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Swarmling", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedTerran", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Omegalisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Queen", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt__1IntroSequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 2.0, UnitGetFacing(UnitGroupLoopCurrent()))), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/1E504DFF"), null, PointFromId(17));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_p1_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt__1StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1IntroSequence_Init () {
    gt__1IntroSequence = TriggerCreate("gt__1IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Start Game
//--------------------------------------------------------------------------------------------------
bool gt__1StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv__1BroodchamberNuke = UnitFromId(1314);
    TriggerEnable(gt_StetmannOOMQ, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectivePlantSeismicChargesCreateQ, true, false);
    Wait(3.5, c_timeReal);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(2)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/61568157"));
    VisRevealerCreate(gv_p1_USER, RegionFromId(98));
    gv__1Nuke1Revealer = VisRevealerLastCreated();
    gv__1BroodchamberLocPing = PingLastCreated();
    Wait(3.0, c_timeReal);
    TriggerExecute(gt__1OpeningDialogueQ, true, false);
    TriggerExecute(gt__1TipStoryModeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1StartGame_Init () {
    gt__1StartGame = TriggerCreate("gt__1StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Opening Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt__1OpeningDialogueQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ARaynor00103", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00103", 0), c_transmissionDurationAdd, 0.0, false);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1OpeningDialogueQ_Init () {
    gt__1OpeningDialogueQ = TriggerCreate("gt__1OpeningDialogueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Tip Story Mode Q
//--------------------------------------------------------------------------------------------------
bool gt__1TipStoryModeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TipStoryModeQ_Init () {
    gt__1TipStoryModeQ = TriggerCreate("gt__1TipStoryModeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Snipe Q
//--------------------------------------------------------------------------------------------------
bool gt__1TeachSnipeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv__1TeachSnipeBullies);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p1_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("RaynorSnipe", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("RaynorSnipe", 0), true);
    TransmissionClear(gv_interruptableTransmission);
    TriggerStop(gt__1OpeningDialogueQ);
    TriggerEnable(gt__1OpeningDialogueQ, false);
    TriggerQueueEnter();
    Wait(0.5, c_timeReal);
    libNtve_gf_AttachModelToUnit(gv_tHEONERAYNOR, "TalkIcon", "Origin");
    gv__1TalkFXActor = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectRed", PointFromId(89));
    gv__1SnipeHereActor = libNtve_gf_ActorLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/EBE4303D"), null, PointFromId(89));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ARaynor00001", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00001", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian02a_Penetrator", 3, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachSnipeQ_Init () {
    gt__1TeachSnipeQ = TriggerCreate("gt__1TeachSnipeQ_Func");
    TriggerAddEventUnitRegion(gt__1TeachSnipeQ, null, RegionFromId(46), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Snipe Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__1TeachSnipeTripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__1TeachSnipeBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1TeachSnipeActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachSnipeTripViaDamage_Init () {
    gt__1TeachSnipeTripViaDamage = TriggerCreate("gt__1TeachSnipeTripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__1TeachSnipeTripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Snipe Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__1TeachSnipeTripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1TeachSnipeActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachSnipeTripViaMovement_Init () {
    gt__1TeachSnipeTripViaMovement = TriggerCreate("gt__1TeachSnipeTripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__1TeachSnipeTripViaMovement, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Snipe Actions
//--------------------------------------------------------------------------------------------------
bool gt__1TeachSnipeActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1TeachSnipeTripViaDamage, false);
    TriggerEnable(gt__1TeachSnipeTripViaMovement, false);
    SoundPlay(SoundLink("Hydralisk_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1TeachSnipeBullies);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_KillModel(gv__1TalkFXActor);
    libNtve_gf_KillModel(gv__1SnipeHereActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachSnipeActions_Init () {
    gt__1TeachSnipeActions = TriggerCreate("gt__1TeachSnipeActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Snipe Ability Flash Off
//--------------------------------------------------------------------------------------------------
bool gt__1SnipeAbilityFlashOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("RaynorSnipe", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1SnipeAbilityFlashOff_Init () {
    gt__1SnipeAbilityFlashOff = TriggerCreate("gt__1SnipeAbilityFlashOff_Func");
    TriggerAddEventUnitAbility(gt__1SnipeAbilityFlashOff, null, AbilityCommand("RaynorSnipe", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Snipe Again Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__1TeachSnipeAgainTripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__1TeachSnipeAgainBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1TeachSnipeAgainAction, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachSnipeAgainTripViaDamage_Init () {
    gt__1TeachSnipeAgainTripViaDamage = TriggerCreate("gt__1TeachSnipeAgainTripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__1TeachSnipeAgainTripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Snipe Again Action
//--------------------------------------------------------------------------------------------------
bool gt__1TeachSnipeAgainAction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1TeachSnipeAgainTripViaDamage, false);
    SoundPlay(SoundLink("Hydralisk_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1TeachSnipeAgainBullies);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachSnipeAgainAction_Init () {
    gt__1TeachSnipeAgainAction = TriggerCreate("gt__1TeachSnipeAgainAction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Nades Q
//--------------------------------------------------------------------------------------------------
bool gt__1TeachNadesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv__1TeachNadesBullies);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "ZerglingBurrowed")) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p1_USER);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("BonesTossGrenade", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("BonesTossGrenade", 0), true);
    TriggerQueueEnter();
    libNtve_gf_AttachModelToUnit(gv_tHEONETYCHUS, "TalkIcon", "Origin");
    gv__1TalkFXActor = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectRed", PointFromId(44));
    gv__1TeachNadesActor = libNtve_gf_ActorLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/7842F84A"), null, PointFromId(44));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ATychus00055", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00055", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian02a_ShredderGrenades", 3, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachNadesQ_Init () {
    gt__1TeachNadesQ = TriggerCreate("gt__1TeachNadesQ_Func");
    TriggerAddEventUnitRegion(gt__1TeachNadesQ, null, RegionFromId(101), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Nades Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__1TeachNadesTripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__1TeachNadesBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1TeachNadesAction, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachNadesTripViaDamage_Init () {
    gt__1TeachNadesTripViaDamage = TriggerCreate("gt__1TeachNadesTripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__1TeachNadesTripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Nades Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__1TeachNadesTripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1TeachNadesAction, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachNadesTripViaMovement_Init () {
    gt__1TeachNadesTripViaMovement = TriggerCreate("gt__1TeachNadesTripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__1TeachNadesTripViaMovement, null, RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Nades Action
//--------------------------------------------------------------------------------------------------
bool gt__1TeachNadesAction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1TeachNadesTripViaDamage, false);
    TriggerEnable(gt__1TeachNadesTripViaMovement, false);
    libNtve_gf_KillModel(gv__1TalkFXActor);
    libNtve_gf_KillModel(gv__1TeachNadesActor);
    SoundPlay(SoundLink("Zergling_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1TeachNadesBullies);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachNadesAction_Init () {
    gt__1TeachNadesAction = TriggerCreate("gt__1TeachNadesAction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Grenade Ability Flash Off
//--------------------------------------------------------------------------------------------------
bool gt__1GrenadeAbilityFlashOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("BonesTossGrenade", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1GrenadeAbilityFlashOff_Init () {
    gt__1GrenadeAbilityFlashOff = TriggerCreate("gt__1GrenadeAbilityFlashOff_Func");
    TriggerAddEventUnitAbility(gt__1GrenadeAbilityFlashOff, null, AbilityCommand("BonesTossGrenade", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Nades Again Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__1TeachNadesAgainTripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__1TeachNadesAgainBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1TeachNadesAgainAction, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachNadesAgainTripViaDamage_Init () {
    gt__1TeachNadesAgainTripViaDamage = TriggerCreate("gt__1TeachNadesAgainTripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__1TeachNadesAgainTripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Nades Again Action
//--------------------------------------------------------------------------------------------------
bool gt__1TeachNadesAgainAction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1TeachNadesAgainTripViaDamage, false);
    SoundPlay(SoundLink("Hydralisk_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1TeachNadesAgainBullies);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachNadesAgainAction_Init () {
    gt__1TeachNadesAgainAction = TriggerCreate("gt__1TeachNadesAgainAction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Reveal More Zerg
//--------------------------------------------------------------------------------------------------
bool gt__1RevealMoreZerg_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv__1HiddenZergUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1RevealMoreZerg_Init () {
    gt__1RevealMoreZerg = TriggerCreate("gt__1RevealMoreZerg_Func");
    TriggerAddEventUnitRegion(gt__1RevealMoreZerg, null, RegionFromId(77), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Betty Q
//--------------------------------------------------------------------------------------------------
bool gt__1TeachBettyQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1TeachBettyViaCast, true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DutchPlaceTurret", 0), true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("DutchPlaceTurret", 0), true);
    TriggerQueueEnter();
    libNtve_gf_AttachModelToUnit(gv_tHEONESWANN, "TalkIcon", "Origin");
    gv__1TalkFXActor = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", PointFromId(907));
    gv__1BettyPlacementActor1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("FlamingBettyPlacementTValerian02A", PointFromId(907));
    gv__1BettyPlacementActor1a = libNtve_gf_ActorLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/11CBF765"), null, PointFromId(907));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ARaynor00003", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00003", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ASwann00004", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00004", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian02a_FlamingBetty", 3, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachBettyQ_Init () {
    gt__1TeachBettyQ = TriggerCreate("gt__1TeachBettyQ_Func");
    TriggerAddEventUnitRegion(gt__1TeachBettyQ, null, RegionFromId(68), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Betty Via Cast
//--------------------------------------------------------------------------------------------------
bool gt__1TeachBettyViaCast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("FlamingBetty", gv_p1_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv__1TalkFXActor);
    libNtve_gf_KillModel(gv__1BettyPlacementActor1);
    libNtve_gf_KillModel(gv__1BettyPlacementActor1a);
    TriggerExecute(gt__1TeachBettyActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachBettyViaCast_Init () {
    gt__1TeachBettyViaCast = TriggerCreate("gt__1TeachBettyViaCast_Func");
    TriggerEnable(gt__1TeachBettyViaCast, false);
    TriggerAddEventTimePeriodic(gt__1TeachBettyViaCast, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Betty Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__1TeachBettyViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__1TeachBettyBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1TeachBettyActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachBettyViaDamage_Init () {
    gt__1TeachBettyViaDamage = TriggerCreate("gt__1TeachBettyViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__1TeachBettyViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Teach Betty Actions
//--------------------------------------------------------------------------------------------------
bool gt__1TeachBettyActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1TeachBettyViaCast, false);
    TriggerEnable(gt__1TeachBettyViaDamage, false);
    libNtve_gf_KillModel(gv__1TalkFXActor);
    libNtve_gf_KillModel(gv__1BettyPlacementActor1);
    libNtve_gf_KillModel(gv__1BettyPlacementActor1a);
    SoundPlay(SoundLink("Zergling_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Roach_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Hydralisk_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1TeachBettyBullies);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TeachBettyActions_Init () {
    gt__1TeachBettyActions = TriggerCreate("gt__1TeachBettyActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Flame Turret Ability Flash Off
//--------------------------------------------------------------------------------------------------
bool gt__1FlameTurretAbilityFlashOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DutchPlaceTurret", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1FlameTurretAbilityFlashOff_Init () {
    gt__1FlameTurretAbilityFlashOff = TriggerCreate("gt__1FlameTurretAbilityFlashOff_Func");
    TriggerAddEventUnitAbility(gt__1FlameTurretAbilityFlashOff, null, AbilityCommand("DutchPlaceTurret", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Call for Help Q
//--------------------------------------------------------------------------------------------------
bool gt__1CallforHelpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("IncomingTransmission", -1)), c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(RegionFromId(16)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9EC9881C"));
    gv__1RescueDominionPing = PingLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/F9675C3D"), null, RegionGetCenter(RegionFromId(16)));
    TriggerEnable(gt__1CallforHelpSNUFFED, true);
    UnitGroupLoopBegin(gv__1RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p1_USER);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    // Transmission - SoundLink("TValerian02AWarfield00008", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02AWarfield00008", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ARaynor00009", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00009", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02AWarfield00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02AWarfield00010", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1CallforHelpQ_Init () {
    gt__1CallforHelpQ = TriggerCreate("gt__1CallforHelpQ_Func");
    TriggerAddEventUnitRegion(gt__1CallforHelpQ, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Zerg Kill Team Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__1ZergKillTeamTripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__1ZergGuards, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1ZergKillTeamActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ZergKillTeamTripViaDamage_Init () {
    gt__1ZergKillTeamTripViaDamage = TriggerCreate("gt__1ZergKillTeamTripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__1ZergKillTeamTripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Zerg Kill Team Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__1ZergKillTeamTripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1ZergKillTeamActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ZergKillTeamTripViaMovement_Init () {
    gt__1ZergKillTeamTripViaMovement = TriggerCreate("gt__1ZergKillTeamTripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__1ZergKillTeamTripViaMovement, null, RegionFromId(64), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Zerg Kill Team Actions
//--------------------------------------------------------------------------------------------------
bool gt__1ZergKillTeamActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1ZergKillTeamTripViaDamage, false);
    TriggerEnable(gt__1ZergKillTeamTripViaMovement, false);
    UnitGroupLoopBegin(gv__1ZergGuards);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ZergKillTeamActions_Init () {
    gt__1ZergKillTeamActions = TriggerCreate("gt__1ZergKillTeamActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Call for Help SNUFFED
//--------------------------------------------------------------------------------------------------
bool gt__1CallforHelpSNUFFED_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv__1RescuableDominionGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1SaveDominionQ, false);
    PingDestroy(gv__1RescueDominionPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1CallforHelpSNUFFED_Init () {
    gt__1CallforHelpSNUFFED = TriggerCreate("gt__1CallforHelpSNUFFED_Func");
    TriggerEnable(gt__1CallforHelpSNUFFED, false);
    TriggerAddEventUnitDied(gt__1CallforHelpSNUFFED, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Save Dominion Q
//--------------------------------------------------------------------------------------------------
bool gt__1SaveDominionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv__1RescuableDominionGroup, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv__1RescueDominionPing);
    TriggerEnable(gt__1CallforHelpSNUFFED, false);
    UnitGroupLoopBegin(gv__1RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p1_USER, true);
        UnitGroupAdd(gv_nonHeroicDudes, UnitGroupLoopCurrent());
        UnitGroupRemove(gv__1RescuableDominionGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/F3F18D6A"), null, RegionGetCenter(RegionFromId(16)));
    TriggerEnable(gt__1LongConversationQ, true);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ADominionMarine300011", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ADominionMarine300011", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02AStetmann00079", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00079", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1SaveDominionQ_Init () {
    gt__1SaveDominionQ = TriggerCreate("gt__1SaveDominionQ_Func");
    TriggerAddEventUnitRegion(gt__1SaveDominionQ, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Long Conversation Q
//--------------------------------------------------------------------------------------------------
bool gt__1LongConversationQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ASwann00088", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00088", 0), c_transmissionDurationAdd, 0.0, false);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TValerian02ARaynor00089", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00089", 0), c_transmissionDurationAdd, 0.0, false);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TValerian02ATychus00090", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00090", 0), c_transmissionDurationAdd, 0.0, false);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TValerian02ASwann00091", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00091", 0), c_transmissionDurationAdd, 0.0, false);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TValerian02AStetmann00092", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00092", 0), c_transmissionDurationAdd, 0.0, false);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LongConversationQ_Init () {
    gt__1LongConversationQ = TriggerCreate("gt__1LongConversationQ_Func");
    TriggerEnable(gt__1LongConversationQ, false);
    TriggerAddEventUnitRegion(gt__1LongConversationQ, null, RegionFromId(93), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 SE Zerg Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__1SEZergViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FlamingBetty"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1SEZergActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1SEZergViaMovement_Init () {
    gt__1SEZergViaMovement = TriggerCreate("gt__1SEZergViaMovement_Func");
    TriggerAddEventUnitRegion(gt__1SEZergViaMovement, null, RegionFromId(122), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 SE Zerg Actions
//--------------------------------------------------------------------------------------------------
bool gt__1SEZergActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1SEZergActionsQ, true, false);
    SoundPlay(SoundLink("Zergling_Attack", 2), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1SEZergBulliesWest);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(6.0, c_timeGame);
    SoundPlay(SoundLink("Roach_Attack", 2), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1SEZergBulliesEast);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1SEZergActions_Init () {
    gt__1SEZergActions = TriggerCreate("gt__1SEZergActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 SE Zerg Actions Q
//--------------------------------------------------------------------------------------------------
bool gt__1SEZergActionsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__1LongConversationQ);
    TransmissionClear(gv_interruptableTransmission);
    TriggerQueueEnter();
    Wait(0.3, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian02AStetmann00096", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00096", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1SEZergActionsQ_Init () {
    gt__1SEZergActionsQ = TriggerCreate("gt__1SEZergActionsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Pincer Unburrow
//--------------------------------------------------------------------------------------------------
bool gt__1PincerUnburrow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Zerg_UnburrowSmall", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1PincerBullies);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ZerglingBurrowed")) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PincerUnburrow_Init () {
    gt__1PincerUnburrow = TriggerCreate("gt__1PincerUnburrow_Func");
    TriggerAddEventUnitRegion(gt__1PincerUnburrow, null, RegionFromId(125), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Pincer Attack
//--------------------------------------------------------------------------------------------------
bool gt__1PincerAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Roach_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__1PincerBullies);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Ultralisk_Yes", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "InfestedAbominationBurrowed", PointFromId(846));
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Roach_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "RoachBurrowed", PointFromId(1145));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PincerAttack_Init () {
    gt__1PincerAttack = TriggerCreate("gt__1PincerAttack_Func");
    TriggerAddEventUnitRegion(gt__1PincerAttack, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Nydus Worms Trigger
//--------------------------------------------------------------------------------------------------
bool gt__1NydusWormsTrigger_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1NydusWormsCheatVision, true);
    TriggerEnable(gt__1NydusWormKilled, true);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/B5B6ECD9"), null, PointFromId(1441));
    gf_SpawnNydusWorm(RegionFromId(41), 1, libNtve_gf_DifficultyValueInt(8, 8, 9, 10), "Swarmling", 12.0);
    Wait(2.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(52), 1, libNtve_gf_DifficultyValueInt(8, 8, 9, 10), "Swarmling", 12.0);
    Wait(0.5, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(53), 1, libNtve_gf_DifficultyValueInt(8, 8, 9, 10), "Swarmling", 12.0);
    Wait(0.5, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(47), 1, libNtve_gf_DifficultyValueInt(8, 8, 9, 10), "Swarmling", 12.0);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__1NydusWormsQ, true, false);
    TriggerExecute(gt__1NydusWormsStetmannQQQ, true, false);
    Wait(6.0, c_timeGame);
    gf_ActivateAI(UnitFromId(23));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1NydusWormsTrigger_Init () {
    gt__1NydusWormsTrigger = TriggerCreate("gt__1NydusWormsTrigger_Func");
    TriggerAddEventUnitRegion(gt__1NydusWormsTrigger, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Nydus Worms Cheat Vision
//--------------------------------------------------------------------------------------------------
bool gt__1NydusWormsCheatVision_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NydusCanal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(EventUnit(), true, gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1NydusWormsCheatVision_Init () {
    gt__1NydusWormsCheatVision = TriggerCreate("gt__1NydusWormsCheatVision_Func");
    TriggerEnable(gt__1NydusWormsCheatVision, false);
    TriggerAddEventUnitRegion(gt__1NydusWormsCheatVision, null, RegionFromId(108), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Nydus Worm Killed
//--------------------------------------------------------------------------------------------------
bool gt__1NydusWormKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NydusCanal"))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1NydusWormKilled_Init () {
    gt__1NydusWormKilled = TriggerCreate("gt__1NydusWormKilled_Func");
    TriggerEnable(gt__1NydusWormKilled, false);
    TriggerAddEventUnitDied(gt__1NydusWormKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Nydus Worms Q
//--------------------------------------------------------------------------------------------------
bool gt__1NydusWormsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ATychus00031", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00031", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1NydusWormsQ_Init () {
    gt__1NydusWormsQ = TriggerCreate("gt__1NydusWormsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Nydus Worms Stetmann QQ Q
//--------------------------------------------------------------------------------------------------
bool gt__1NydusWormsStetmannQQQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    TriggerQueueEnter();
    TriggerEnable(gt__1NydusWormKilled, false);
    if ((TriggerGetExecCount(gt__1NydusWormKilled) == 0) && (gv_gameOver == false) && (gv_inCinematic == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02AStetmann00014", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00014", 0), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TValerian02ASwann00094", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00094", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1NydusWormsStetmannQQQ_Init () {
    gt__1NydusWormsStetmannQQQ = TriggerCreate("gt__1NydusWormsStetmannQQQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Broodchamber Holdout Wait For Player / Autosave Q
//--------------------------------------------------------------------------------------------------
bool gt__1BroodchamberHoldoutWaitForPlayerAutosaveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/CDD23F57"));
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/DCE79C12"), null, RegionGetCenter(RegionFromId(2)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ARaynor00052", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00052", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ASwann00081", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00081", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    TriggerEnable(gt__1BroodchamberTriggerViaMovement, true);
    if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        TriggerExecute(gt__1BroodchamberActions, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1BroodchamberHoldoutWaitForPlayerAutosaveQ_Init () {
    gt__1BroodchamberHoldoutWaitForPlayerAutosaveQ = TriggerCreate("gt__1BroodchamberHoldoutWaitForPlayerAutosaveQ_Func");
    TriggerAddEventUnitRegion(gt__1BroodchamberHoldoutWaitForPlayerAutosaveQ, null, RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Broodchamber Trigger Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__1BroodchamberTriggerViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__1BroodchamberActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1BroodchamberTriggerViaMovement_Init () {
    gt__1BroodchamberTriggerViaMovement = TriggerCreate("gt__1BroodchamberTriggerViaMovement_Func");
    TriggerEnable(gt__1BroodchamberTriggerViaMovement, false);
    TriggerAddEventUnitRegion(gt__1BroodchamberTriggerViaMovement, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Broodchamber Actions
//--------------------------------------------------------------------------------------------------
bool gt__1BroodchamberActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerEnable(gv__1Nuke1Revealer, false);
    UnitKill(UnitFromId(1371));
    TriggerEnable(gt__1NydusWormsCheatVision, false);
    TriggerExecute(gt_CinematicStartHoldout1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1BroodchamberActions_Init () {
    gt__1BroodchamberActions = TriggerCreate("gt__1BroodchamberActions_Func");
    TriggerEnable(gt__1BroodchamberActions, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Broodchamber Trigger Holdout Start
//--------------------------------------------------------------------------------------------------
bool gt__1BroodchamberTriggerHoldoutStart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1BroodchamberDestroyHintPings, true);
    TriggerExecute(gt__1BroodchamberAttackWaves, true, false);
    TriggerEnable(gt_SeismicChargeAtHalfHealthQ, true);
    UIAlertClear(gv_p1_USER);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/FE28BBC0"), null, UnitGetPosition(gv__1BroodchamberNuke));
    libNtve_gf_SendActorMessageToUnit(gv_tHEONERAYNOR, "RefSet ::global.RaynorCommando ::Self");
    TimerStart(gv_holdoutTimer, 150.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/23FF264F"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(0.00, 100.00, 0.00), 0.0);
    gv_holdoutTimerWindow = TimerWindowLastCreated();
    gv_limitNydusWormSpawnsInHoldout = true;
    gv_nydusWormsActiveInHoldout = 0;
    PingDestroy(gv__1BroodchamberLocPing);
    Wait(150.0, c_timeGame);
    TriggerExecute(gt__1BroodchamberDestroyHintPings, true, false);
    TriggerEnable(gt_SeismicChargeAtHalfHealthQ, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_CinematicFinishedHoldout1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1BroodchamberTriggerHoldoutStart_Init () {
    gt__1BroodchamberTriggerHoldoutStart = TriggerCreate("gt__1BroodchamberTriggerHoldoutStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Broodchamber Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt__1BroodchamberAttackWaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Hydralisk_Attack", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(2, "HydraliskBurrowed", PointFromId(405));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Zergling_Yes", 6), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(libNtve_gf_DifficultyValueInt(9, 9, 11, 13), "ZerglingBurrowed", PointFromId(21));
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(3), 1, libNtve_gf_DifficultyValueInt(9, 9, 10, 11), "Swarmling", 12.0);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(7), 1, libNtve_gf_DifficultyValueInt(9, 9, 10, 11), "Swarmling", 12.0);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Hydralisk_Ready", 2), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(3, "RoachBurrowed", PointFromId(72));
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Zergling_Attack", 1), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(3, "ZerglingBurrowed", PointFromId(407));
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(4), 1, libNtve_gf_DifficultyValueInt(9, 9, 10, 11), "Swarmling", 12.0);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Zergling_Attack", 2), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "RoachBurrowed", PointFromId(407));
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(6), 1, libNtve_gf_DifficultyValueInt(9, 9, 10, 11), "Swarmling", 12.0);
    SoundPlay(SoundLink("Hydralisk_Attack", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "HydraliskBurrowed", PointFromId(72));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Zergling_Yes", 6), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(3, "ZerglingBurrowed", PointFromId(21));
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(5), 1, libNtve_gf_DifficultyValueInt(9, 9, 10, 11), "Swarmling", 12.0);
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(113), 1, libNtve_gf_DifficultyValueInt(9, 9, 10, 11), "Swarmling", 12.0);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Ultralisk_Attack", 4), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "InfestedAbominationBurrowed", PointFromId(1360));
    Wait(5.0, c_timeGame);
    gf_CreateUnburrowingUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), libNtve_gf_DifficultyValueUnitType("RoachBurrowed", "HydraliskBurrowed", "HydraliskBurrowed", "InfestedAbominationBurrowed"), PointFromId(407));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Zergling_Yes", 6), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(libNtve_gf_DifficultyValueInt(3, 3, 1, 1), libNtve_gf_DifficultyValueUnitType("ZerglingBurrowed", "ZerglingBurrowed", "RoachBurrowed", "RoachBurrowed"), PointFromId(407));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Zergling_Attack", 2), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(2, "ZerglingBurrowed", PointFromId(21));
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Hydralisk_Attack", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "HydraliskBurrowed", PointFromId(72));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1BroodchamberAttackWaves_Init () {
    gt__1BroodchamberAttackWaves = TriggerCreate("gt__1BroodchamberAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Broodchamber Destroy Hint Pings
//--------------------------------------------------------------------------------------------------
bool gt__1BroodchamberDestroyHintPings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping1);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping1a);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping2);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping2a);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping3);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping3a);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1BroodchamberDestroyHintPings_Init () {
    gt__1BroodchamberDestroyHintPings = TriggerCreate("gt__1BroodchamberDestroyHintPings_Func");
    TriggerEnable(gt__1BroodchamberDestroyHintPings, false);
    TriggerAddEventUnitAbility(gt__1BroodchamberDestroyHintPings, null, AbilityCommand("DutchPlaceTurret", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Init Broodchamber
//--------------------------------------------------------------------------------------------------
bool gt__2InitBroodchamber_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    RegionPlayableMapSet(RegionEntireMap());
    UnitGroupLoopBegin(gv__1BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__2BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorAdd(UnitFromId(1313), "ZergBuildingNotOnCreep", UnitFromId(1313), 1);
    UnitBehaviorAdd(UnitFromId(1188), "ZergBuildingNotOnCreep", UnitFromId(1188), 1);
    UnitBehaviorAdd(UnitFromId(463), "ZergBuildingNotOnCreep", UnitFromId(463), 1);
    gf_Swap(gv_tHEONERAYNOR, UnitFromId(354));
    gf_Swap(gv_tHEONESTETMAN, UnitFromId(352));
    gf_Swap(gv_tHEONESWANN, UnitFromId(353));
    gf_Swap(gv_tHEONETYCHUS, UnitFromId(355));
    UnitGroupClear(gv_incappedHeroes);
    libNtve_gf_SendActorMessageToUnit(gv_tHEONERAYNOR, "RefSet ::global.RaynorCommando ::Self");
    UnitGroupLoopBegin(gv_nonHeroicDudes);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(UnitGroupLoopCurrent(), PointFromId(411), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Incapacitated", 1);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupRemove Unpowered");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "UIStatusFlagSet");
        ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HeroIncap"), "Destroy");
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "IncapStandUp", 1);
        UnitSetFacing(UnitGroupLoopCurrent(), 315.0, 0.0);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 2.0, UnitGetFacing(UnitGroupLoopCurrent()))), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_p1_USER);
    UnitGroupSelect(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_p1_USER, true);
    UIAlertClear(gv_p1_USER);
    gf_ObjectivePlantSeismicChargesUpdate(1);
    PingDestroy(gv__1BroodchamberLocPing);
    RegionPlayableMapSet(RegionFromId(13));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(15)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CD5D33CC"));
    VisRevealArea(gv_p1_USER, RegionFromId(15), 0.1, false);
    gv__2BroodchamberLocPing = PingLastCreated();
    libNtve_gf_ShowHideUnit(UnitFromId(1887), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("RaynorSnipe", 0), true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("BonesTossGrenade", 0), true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("DutchPlaceTurret", 0), true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, true);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(137), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt__2StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2InitBroodchamber_Init () {
    gt__2InitBroodchamber = TriggerCreate("gt__2InitBroodchamber_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Start Game
//--------------------------------------------------------------------------------------------------
bool gt__2StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisExploreArea(gv_p1_USER, RegionFromId(10), false, false);
    gv_limitNydusWormSpawnsInHoldout = false;
    gv__2BroodchamberNuke = UnitFromId(1887);
    TriggerEnable(gt_StetmannOOMQ, true);
    VisRevealArea(gv_p1_USER, RegionFromId(104), 0.0, false);
    Wait(1.0, c_timeReal);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D75A95E7"));
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    Wait(3.0, c_timeGame);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StartGame_Init () {
    gt__2StartGame = TriggerCreate("gt__2StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Story Telling Q
//--------------------------------------------------------------------------------------------------
bool gt__2StoryTellingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/4888855C"), null, RegionGetCenter(RegionFromId(57)));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p1_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02AStetmann00018", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00018", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ARaynor00019", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00019", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StoryTellingQ_Init () {
    gt__2StoryTellingQ = TriggerCreate("gt__2StoryTellingQ_Func");
    TriggerAddEventUnitRegion(gt__2StoryTellingQ, null, RegionFromId(55), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Story Telling Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__2StoryTellingTripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__2StoryTellingBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2StoryTellingActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StoryTellingTripViaDamage_Init () {
    gt__2StoryTellingTripViaDamage = TriggerCreate("gt__2StoryTellingTripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__2StoryTellingTripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Story Telling Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__2StoryTellingTripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2StoryTellingActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StoryTellingTripViaMovement_Init () {
    gt__2StoryTellingTripViaMovement = TriggerCreate("gt__2StoryTellingTripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__2StoryTellingTripViaMovement, null, RegionFromId(57), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Story Telling Actions
//--------------------------------------------------------------------------------------------------
bool gt__2StoryTellingActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__2StoryTellingTripViaDamage, false);
    TriggerEnable(gt__2StoryTellingTripViaMovement, false);
    SoundPlay(SoundLink("InfestedTerranReady", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__2StoryTellingBullies);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StoryTellingActions_Init () {
    gt__2StoryTellingActions = TriggerCreate("gt__2StoryTellingActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Story Telling 2 Q
//--------------------------------------------------------------------------------------------------
bool gt__2StoryTelling2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ATychus00078", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00078", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StoryTelling2Q_Init () {
    gt__2StoryTelling2Q = TriggerCreate("gt__2StoryTelling2Q_Func");
    TriggerAddEventUnitRegion(gt__2StoryTelling2Q, null, RegionFromId(109), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Zombie Raid 1 Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__2ZombieRaid1TripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__2ZombieRaid1, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2ZombieRaid1ActionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ZombieRaid1TripViaDamage_Init () {
    gt__2ZombieRaid1TripViaDamage = TriggerCreate("gt__2ZombieRaid1TripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__2ZombieRaid1TripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Zombie Raid 1 Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__2ZombieRaid1TripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2ZombieRaid1ActionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ZombieRaid1TripViaMovement_Init () {
    gt__2ZombieRaid1TripViaMovement = TriggerCreate("gt__2ZombieRaid1TripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__2ZombieRaid1TripViaMovement, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Zombie Raid 1 Action Q
//--------------------------------------------------------------------------------------------------
bool gt__2ZombieRaid1ActionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__2ZombieRaid1TripViaDamage, false);
    TriggerEnable(gt__2ZombieRaid1TripViaMovement, false);
    SoundPlay(SoundLink("InfestedTerranReady", 0), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("InfestedTerranWhat", 1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__2ZombieRaid1);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        if (((UnitGetType(UnitGroupLoopCurrent()) == "InfestedCivilian") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedTerranCampaign"))) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p1_USER);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    if ((gv_gameOver == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02ATychus00020", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00020", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    if ((gv_gameOver == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        // Transmission - SoundLink("TValerian02AInfestedRefugee00021", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02AInfestedRefugee00021", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ZombieRaid1ActionQ_Init () {
    gt__2ZombieRaid1ActionQ = TriggerCreate("gt__2ZombieRaid1ActionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Zombie Raid 2 Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__2ZombieRaid2TripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__2ZombieRaid2, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2ZombieRaid2ActionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ZombieRaid2TripViaDamage_Init () {
    gt__2ZombieRaid2TripViaDamage = TriggerCreate("gt__2ZombieRaid2TripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__2ZombieRaid2TripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Zombie Raid 2 Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__2ZombieRaid2TripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2ZombieRaid2ActionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ZombieRaid2TripViaMovement_Init () {
    gt__2ZombieRaid2TripViaMovement = TriggerCreate("gt__2ZombieRaid2TripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__2ZombieRaid2TripViaMovement, null, RegionFromId(43), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Zombie Raid 2 Action Q
//--------------------------------------------------------------------------------------------------
bool gt__2ZombieRaid2ActionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__2ZombieRaid2TripViaDamage, false);
    TriggerEnable(gt__2ZombieRaid2TripViaMovement, false);
    UnitGroupLoopBegin(gv__2ZombieRaid2);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        if (((UnitGetType(UnitGroupLoopCurrent()) == "InfestedCivilian") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedTerranCampaign"))) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p1_USER);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerQueueEnter();
    if ((gv_gameOver == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        // Transmission - SoundLink("TValerian02AInfestedMarine00022", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02AInfestedMarine00022", 0), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TValerian02ASwann00023", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00023", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ZombieRaid2ActionQ_Init () {
    gt__2ZombieRaid2ActionQ = TriggerCreate("gt__2ZombieRaid2ActionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Crazy Aberration
//--------------------------------------------------------------------------------------------------
bool gt__2CrazyAberration_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ultralisk_Pissed", 2), PlayerGroupAll(), 100.0, 0.0);
    gf_ActivateAI(UnitFromId(1939));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2CrazyAberration_Init () {
    gt__2CrazyAberration = TriggerCreate("gt__2CrazyAberration_Func");
    TriggerAddEventUnitRegion(gt__2CrazyAberration, null, RegionFromId(118), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Reveal More Zerg
//--------------------------------------------------------------------------------------------------
bool gt__2RevealMoreZerg_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv__2ZombieRaid1);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, gv_p1_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__2ZombieRaid2);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, gv_p1_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__2HiddenZergUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2RevealMoreZerg_Init () {
    gt__2RevealMoreZerg = TriggerCreate("gt__2RevealMoreZerg_Func");
    TriggerAddEventUnitRegion(gt__2RevealMoreZerg, null, RegionFromId(63), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Baneling Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__2BanelingTripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__2BanelingSplashDetection, true);
    SoundPlay(SoundLink("Baneling_Attack", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_ActivateAI(UnitFromId(1427));
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/31ED4659"), null, PointFromId(1443));
    UnitGroupLoopBegin(gv__2IntroBanelings);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeReal);
    TriggerExecute(gt__2BanelingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BanelingTripViaMovement_Init () {
    gt__2BanelingTripViaMovement = TriggerCreate("gt__2BanelingTripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__2BanelingTripViaMovement, null, RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Baneling Splash Detection
//--------------------------------------------------------------------------------------------------
bool gt__2BanelingSplashDetection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "Baneling"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv__2PlayerWasHurtByBanelings = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BanelingSplashDetection_Init () {
    gt__2BanelingSplashDetection = TriggerCreate("gt__2BanelingSplashDetection_Func");
    TriggerEnable(gt__2BanelingSplashDetection, false);
    TriggerAddEventUnitDamaged(gt__2BanelingSplashDetection, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Baneling Q
//--------------------------------------------------------------------------------------------------
bool gt__2BanelingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ARaynor00024", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00024", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    while (!((libNtve_gf_UnitGroupIsDead(gv__2IntroBanelings) == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerEnable(gt__2BanelingSplashDetection, false);
    if ((gv__2PlayerWasHurtByBanelings == true)) {
        Wait(1.5, c_timeReal);
        TriggerExecute(gt__2BanelingOuchQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BanelingQ_Init () {
    gt__2BanelingQ = TriggerCreate("gt__2BanelingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Baneling Ouch Q
//--------------------------------------------------------------------------------------------------
bool gt__2BanelingOuchQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02AStetmann00025", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00025", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ATychus00083", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00083", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BanelingOuchQ_Init () {
    gt__2BanelingOuchQ = TriggerCreate("gt__2BanelingOuchQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Call for Help Q
//--------------------------------------------------------------------------------------------------
bool gt__2CallforHelpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("IncomingTransmission", -1)), c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(RegionFromId(17)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/25AFE19C"));
    gv__2RescueDominionPing = PingLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/B0E6C990"), null, RegionGetCenter(RegionFromId(17)));
    TriggerEnable(gt__2CallforHelpSNUFFED, true);
    UnitGroupLoopBegin(gv__2RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p1_USER);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    // Transmission - SoundLink("TValerian02AWarfield00027", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02AWarfield00027", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ARaynor00028", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00028", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ATychus00029", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00029", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2CallforHelpQ_Init () {
    gt__2CallforHelpQ = TriggerCreate("gt__2CallforHelpQ_Func");
    TriggerAddEventUnitRegion(gt__2CallforHelpQ, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Activate Nydus Kill Team
//--------------------------------------------------------------------------------------------------
bool gt__2ActivateNydusKillTeam_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nydusSpawnRegion = RegionFromId(70);
    TriggerExecute(gt__2NydusKillTeamSpawning, true, false);
    Wait(15.0, c_timeGame);
    gv_nydusSpawnRegion = RegionFromId(80);
    TriggerExecute(gt__2NydusKillTeamSpawning, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ActivateNydusKillTeam_Init () {
    gt__2ActivateNydusKillTeam = TriggerCreate("gt__2ActivateNydusKillTeam_Func");
    TriggerAddEventUnitRegion(gt__2ActivateNydusKillTeam, null, RegionFromId(72), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Nydus Kill Team Spawning
//--------------------------------------------------------------------------------------------------
bool gt__2NydusKillTeamSpawning_Func (bool testConds, bool runActions) {
    int autoABAA533D_n;
    int autoABAA533D_i;

    // Variable Declarations
    region lv_region;
    unit lv_unit;

    // Variable Initialization
    lv_region = null;
    lv_unit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region = gv_nydusSpawnRegion;
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(lv_region), 15.0), CameraGetTarget(gv_p1_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p2_ZERG, RegionGetCenter(lv_region));
    UnitGroupAdd(gv__2NydusKillTeam, UnitLastCreated());
    lv_unit = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.5, 270.0);
    PingSetScale(PingLastCreated(), 0.7);
    SoundPlay(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.7, c_timeGame);
    while (true) {
        if (((UnitIsAlive(lv_unit) == false) || (TriggerGetExecCount(gt__2CallforHelpSNUFFED) == 1))) {
            break;
        }
        else {
        }
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        if ((UnitGroupCount(gv__2NydusKillTeamSwarmlings, c_unitCountAlive) < 40)) {
            autoABAA533D_n = gv__2NydusKillTeamSwarmlingSpawnAmt;
            autoABAA533D_i = 1;
            while (autoABAA533D_i <= autoABAA533D_n) {
                libNtve_gf_CreateUnitsAtPoint2(1, "Swarmling", 0, gv_p2_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, RandomFixed(240.0, 300.0)));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(954)), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(806)), c_orderQueueAddToEnd);
                UnitGroupAdd(gv__2NydusKillTeamSwarmlings, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, gv_swarmlingSpeed);
                if ((libNtve_gf_RandomPercent() >= 50.0)) {
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(1.4, 1.9)));
                }
                else {
                }
                autoABAA533D_i = autoABAA533D_i + 1;
            }
        }
        else {
        }
        Wait(12.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2NydusKillTeamSpawning_Init () {
    gt__2NydusKillTeamSpawning = TriggerCreate("gt__2NydusKillTeamSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Call for Help SNUFFED
//--------------------------------------------------------------------------------------------------
bool gt__2CallforHelpSNUFFED_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv__2RescuableDominionGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__2SaveDominionQ, false);
    PingDestroy(gv__2RescueDominionPing);
    UnitGroupLoopBegin(gv__2NydusKillTeamSwarmlings);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__2NydusKillTeam);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Unburrow", 0, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(3.5, c_timeGame);
    UnitGroupLoopBegin(gv__2NydusKillTeam);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2CallforHelpSNUFFED_Init () {
    gt__2CallforHelpSNUFFED = TriggerCreate("gt__2CallforHelpSNUFFED_Func");
    TriggerEnable(gt__2CallforHelpSNUFFED, false);
    TriggerAddEventUnitDied(gt__2CallforHelpSNUFFED, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Save Dominion Q
//--------------------------------------------------------------------------------------------------
bool gt__2SaveDominionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv__2RescuableDominionGroup, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv__2RescueDominionPing);
    TriggerEnable(gt__2CallforHelpSNUFFED, false);
    UnitGroupLoopBegin(gv__2RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p1_USER, true);
        UnitGroupAdd(gv_nonHeroicDudes, UnitGroupLoopCurrent());
        UnitGroupRemove(gv__2RescuableDominionGroup, UnitGroupLoopCurrent());
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02AFirebat00030", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02AFirebat00030", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02AStetmann00082", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00082", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2SaveDominionQ_Init () {
    gt__2SaveDominionQ = TriggerCreate("gt__2SaveDominionQ_Func");
    TriggerAddEventUnitRegion(gt__2SaveDominionQ, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ambush Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__2AmbushTripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__2AmbushBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2AmbushActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2AmbushTripViaDamage_Init () {
    gt__2AmbushTripViaDamage = TriggerCreate("gt__2AmbushTripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__2AmbushTripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ambush Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__2AmbushTripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2AmbushActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2AmbushTripViaMovement_Init () {
    gt__2AmbushTripViaMovement = TriggerCreate("gt__2AmbushTripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__2AmbushTripViaMovement, null, RegionFromId(71), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ambush Actions
//--------------------------------------------------------------------------------------------------
bool gt__2AmbushActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__2AmbushTripViaDamage, false);
    TriggerEnable(gt__2AmbushTripViaMovement, false);
    SoundPlay(SoundLink("Hydralisk_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__2AmbushBullies);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    TriggerExecute(gt__2AmbushActionsQ, true, false);
    SoundPlay(SoundLink("Baneling_Attack", 3), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__2AmbushUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2AmbushActions_Init () {
    gt__2AmbushActions = TriggerCreate("gt__2AmbushActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ambush Actions Q
//--------------------------------------------------------------------------------------------------
bool gt__2AmbushActionsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ATychus00026", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00026", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2AmbushActionsQ_Init () {
    gt__2AmbushActionsQ = TriggerCreate("gt__2AmbushActionsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Gauntlet Start
//--------------------------------------------------------------------------------------------------
bool gt__2GauntletStart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2GauntletQ, true, false);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/F1BD0083"), null, PointFromId(1743));
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_SpawnNydusWorm(RegionFromId(9), libNtve_gf_DifficultyValueInt(8, 8, 9, 10), 1, "InfestedCivilian", libNtve_gf_DifficultyValueFixed(13.0, 13.0, 12.25, 11.75));
    TriggerEnable(gt__2GauntletKillaWorm1Q, true);
    Wait(1.5, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(12), libNtve_gf_DifficultyValueInt(8, 8, 9, 10), 1, "InfestedCivilian", libNtve_gf_DifficultyValueFixed(13.0, 13.0, 12.25, 11.75));
    Wait(1.2, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(36), libNtve_gf_DifficultyValueInt(8, 8, 9, 10), 1, "InfestedCivilian", libNtve_gf_DifficultyValueFixed(13.0, 13.0, 12.25, 11.75));
    Wait(1.1, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(38), libNtve_gf_DifficultyValueInt(8, 8, 9, 10), 1, "InfestedCivilian", libNtve_gf_DifficultyValueFixed(13.0, 13.0, 12.25, 11.75));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2GauntletStart_Init () {
    gt__2GauntletStart = TriggerCreate("gt__2GauntletStart_Func");
    TriggerAddEventUnitRegion(gt__2GauntletStart, null, RegionFromId(74), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Gauntlet Q
//--------------------------------------------------------------------------------------------------
bool gt__2GauntletQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ARaynor00032", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00032", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    if ((TriggerGetExecCount(gt__2GauntletKillaWorm1Q) == 0) && (gv_gameOver == false)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02ARaynor00034", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00034", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2GauntletQ_Init () {
    gt__2GauntletQ = TriggerCreate("gt__2GauntletQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Gauntlet Kill a Worm 1 Q
//--------------------------------------------------------------------------------------------------
bool gt__2GauntletKillaWorm1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NydusCanal"))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ARaynor00033", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00033", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2GauntletKillaWorm1Q_Init () {
    gt__2GauntletKillaWorm1Q = TriggerCreate("gt__2GauntletKillaWorm1Q_Func");
    TriggerEnable(gt__2GauntletKillaWorm1Q, false);
    TriggerAddEventUnitDied(gt__2GauntletKillaWorm1Q, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Gauntlet Pushback 1 Q
//--------------------------------------------------------------------------------------------------
bool gt__2GauntletPushback1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("InfestedTerran_What", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(2, "InfestedTerranCampaignBurrowed", PointFromId(939));
    gf_CreateUnburrowingUnits(2, "InfestedTerranCampaignBurrowed", PointFromId(930));
    gf_CreateUnburrowingUnits(2, libNtve_gf_DifficultyValueUnitType("InfestedTerranCampaignBurrowed", "InfestedTerranCampaignBurrowed", "BanelingBurrowed", "BanelingBurrowed"), PointFromId(941));
    Wait(8.0, c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_gameOver == false)) {
        gf_CreateUnburrowingUnits(10, "InfestedCivilianBurrowed", PointFromId(1031));
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02ARaynor00007", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00007", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2GauntletPushback1Q_Init () {
    gt__2GauntletPushback1Q = TriggerCreate("gt__2GauntletPushback1Q_Func");
    TriggerAddEventUnitRegion(gt__2GauntletPushback1Q, null, RegionFromId(110), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Gauntlet Pushback 2 Q
//--------------------------------------------------------------------------------------------------
bool gt__2GauntletPushback2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ultralisk_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 2.0);
    UnitGroupLoopBegin(gv__2GauntletPushbackGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/57932F6F"), null, RegionGetCenter(RegionFromId(102)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ATychus00012", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00012", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2GauntletPushback2Q_Init () {
    gt__2GauntletPushback2Q = TriggerCreate("gt__2GauntletPushback2Q_Func");
    TriggerAddEventUnitRegion(gt__2GauntletPushback2Q, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Broodchamber Trigger Holdout
//--------------------------------------------------------------------------------------------------
bool gt__2BroodchamberTriggerHoldout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(1998));
    TriggerExecute(gt_CinematicStartHoldout2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BroodchamberTriggerHoldout_Init () {
    gt__2BroodchamberTriggerHoldout = TriggerCreate("gt__2BroodchamberTriggerHoldout_Func");
    TriggerAddEventUnitRegion(gt__2BroodchamberTriggerHoldout, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Broodchamber Trigger Holdout Start
//--------------------------------------------------------------------------------------------------
bool gt__2BroodchamberTriggerHoldoutStart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2BroodchamberAttackWaves, true, false);
    TriggerEnable(gt_SeismicChargeAtHalfHealthQ, true);
    UIAlertClear(gv_p1_USER);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/30A2B639"), null, UnitGetPosition(gv__2BroodchamberNuke));
    libNtve_gf_SendActorMessageToUnit(gv_tHEONERAYNOR, "RefSet ::global.RaynorCommando ::Self");
    TimerStart(gv_holdoutTimer, 150.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/8B3216F3"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(0.00, 100.00, 0.00), 0.0);
    gv_holdoutTimerWindow = TimerWindowLastCreated();
    gv_limitNydusWormSpawnsInHoldout = true;
    gv_nydusWormsActiveInHoldout = 0;
    PingDestroy(gv__2BroodchamberLocPing);
    Wait(150.0, c_timeGame);
    TriggerEnable(gt_SeismicChargeAtHalfHealthQ, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_MidBroodChamber2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BroodchamberTriggerHoldoutStart_Init () {
    gt__2BroodchamberTriggerHoldoutStart = TriggerCreate("gt__2BroodchamberTriggerHoldoutStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Broodchamber Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt__2BroodchamberAttackWaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("InfestedTerranReady", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(10, "InfestedCivilianBurrowed", PointFromId(897));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("InfestedTerran_Yes", 1), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(10, "InfestedCivilianBurrowed", PointFromId(19));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("InfestedTerranReady", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(4, "InfestedTerranCampaignBurrowed", PointFromId(19));
    gf_CreateUnburrowingUnits(2, "BanelingBurrowed", PointFromId(19));
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Ultralisk_Ready", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "InfestedAbominationBurrowed", PointFromId(10));
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("InfestedTerranReady", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(10, "InfestedCivilianBurrowed", PointFromId(5));
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Baneling_Yes", 5), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(3, "BanelingBurrowed", PointFromId(19));
    Wait(4.0, c_timeGame);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(23), 8, 1, "InfestedCivilian", 12.0);
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(24), 8, 1, "InfestedCivilian", 12.0);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("InfestedTerranReady", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(12, "InfestedCivilianBurrowed", PointFromId(10));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Hydralisk_Ready", 2), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "HydraliskBurrowed", PointFromId(19));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Roach_Ready", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "BanelingBurrowed", PointFromId(5));
    gf_CreateUnburrowingUnits(1, "BanelingBurrowed", PointFromId(19));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Infestor_Ready", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "InfestorBurrowed", PointFromId(489));
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Infestor_Ready", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(1, "InfestorBurrowed", PointFromId(10));
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(25), 8, 1, "InfestedCivilian", 12.0);
    Wait(2.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(26), 8, 1, "InfestedCivilian", 12.0);
    Wait(3.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(28), 8, 1, "InfestedCivilian", 12.0);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Ultralisk_Roar", 0), PlayerGroupAll(), 100.0, 0.0);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 5.0);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__2BroodchamberHoldoutUltralisksQ, true, false);
    Wait(3.0, c_timeGame);
    gf_CreateUnburrowingUnits(1, "UltraliskBurrowed", PointFromId(12));
    Wait(5.0, c_timeGame);
    gf_CreateUnburrowingUnits(1, "UltraliskBurrowed", PointFromId(11));
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(116), 5, 1, "Zergling", 12.0);
    SoundPlay(SoundLink("InfestedTerranReady", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(4, "InfestedTerranCampaignBurrowed", PointFromId(474));
    Wait(1.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(51), 5, 1, "InfestedTerranCampaign", 12.0);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("InfestedTerran_Attack", 1), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(12, "InfestedCivilianBurrowed", PointFromId(897));
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("Zergling_Ready", 2), PlayerGroupAll(), 100.0, 0.0);
    gf_CreateUnburrowingUnits(2, "RoachBurrowed", PointFromId(489));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BroodchamberAttackWaves_Init () {
    gt__2BroodchamberAttackWaves = TriggerCreate("gt__2BroodchamberAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Broodchamber Holdout Ultralisks Q
//--------------------------------------------------------------------------------------------------
bool gt__2BroodchamberHoldoutUltralisksQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ATychus00005", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00005", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ARaynor00006", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00006", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BroodchamberHoldoutUltralisksQ_Init () {
    gt__2BroodchamberHoldoutUltralisksQ = TriggerCreate("gt__2BroodchamberHoldoutUltralisksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Init Broodchamber
//--------------------------------------------------------------------------------------------------
bool gt__3InitBroodchamber_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    RegionPlayableMapSet(RegionEntireMap());
    UnitGroupLoopBegin(gv__2BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__3BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(1540), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1537), false);
    UnitBehaviorAdd(UnitFromId(1283), "ZergBuildingNotOnCreep", UnitFromId(1283), 1);
    UnitBehaviorAdd(UnitFromId(117), "ZergBuildingNotOnCreep", UnitFromId(117), 1);
    gf_Swap(gv_tHEONERAYNOR, UnitFromId(358));
    gf_Swap(gv_tHEONESTETMAN, UnitFromId(356));
    gf_Swap(gv_tHEONESWANN, UnitFromId(357));
    gf_Swap(gv_tHEONETYCHUS, UnitFromId(359));
    UnitGroupClear(gv_incappedHeroes);
    libNtve_gf_SendActorMessageToUnit(gv_tHEONERAYNOR, "RefSet ::global.RaynorCommando ::Self");
    UnitGroupLoopBegin(gv_nonHeroicDudes);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(UnitGroupLoopCurrent(), PointFromId(48), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Incapacitated", 1);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupRemove Unpowered");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "UIStatusFlagSet");
        ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HeroIncap"), "Destroy");
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "IncapStandUp", 1);
        UnitSetFacing(UnitGroupLoopCurrent(), 135.0, 0.0);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 2.0, UnitGetFacing(UnitGroupLoopCurrent()))), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_p1_USER);
    UnitGroupSelect(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_p1_USER, true);
    UIAlertClear(gv_p1_USER);
    gf_ObjectivePlantSeismicChargesUpdate(2);
    PingDestroy(gv__1BroodchamberLocPing);
    PingDestroy(gv__2BroodchamberLocPing);
    RegionPlayableMapSet(RegionFromId(14));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(22)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/2A440C40"));
    VisRevealArea(gv_p1_USER, RegionFromId(22), 0.1, false);
    libNtve_gf_ShowHideUnit(UnitFromId(1888), false);
    gv__3BroodchamberLocPing = PingLastCreated();
    TriggerExecute(gt__3FeederlingFlavor, true, false);
    TriggerEnable(gt__3FeederlingMovementAI, true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("DutchPlaceTurret", 0), true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("BonesTossGrenade", 0), true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("RaynorSnipe", 0), true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, true);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(138), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt__3StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3InitBroodchamber_Init () {
    gt__3InitBroodchamber = TriggerCreate("gt__3InitBroodchamber_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Start Game
//--------------------------------------------------------------------------------------------------
bool gt__3StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv__3BroodchamberNuke = UnitFromId(1888);
    TriggerEnable(gt_StetmannOOMQ, true);
    VisRevealArea(gv_p1_USER, RegionFromId(99), 0.0, false);
    Wait(1.0, c_timeReal);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E6955496"));
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    Wait(3.0, c_timeGame);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3StartGame_Init () {
    gt__3StartGame = TriggerCreate("gt__3StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Feederling Flavor
//--------------------------------------------------------------------------------------------------
bool gt__3FeederlingFlavor_Func (bool testConds, bool runActions) {
    int auto6DD76DC9_n;
    int auto6DD76DC9_i;
    int auto17B0F6A4_n;
    int auto17B0F6A4_i;
    int auto05BF46D0_n;
    int auto05BF46D0_i;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6DD76DC9_n = 15;
    auto6DD76DC9_i = 1;
    while (auto6DD76DC9_i <= auto6DD76DC9_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
        auto6DD76DC9_i = auto6DD76DC9_i + 1;
    }
    auto17B0F6A4_n = 15;
    auto17B0F6A4_i = 1;
    while (auto17B0F6A4_i <= auto17B0F6A4_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 2.0);
        auto17B0F6A4_i = auto17B0F6A4_i + 1;
    }
    auto05BF46D0_n = 10;
    auto05BF46D0_i = 1;
    while (auto05BF46D0_i <= auto05BF46D0_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 3.0);
        auto05BF46D0_i = auto05BF46D0_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3FeederlingFlavor_Init () {
    gt__3FeederlingFlavor = TriggerCreate("gt__3FeederlingFlavor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Feederling Movement AI
//--------------------------------------------------------------------------------------------------
bool gt__3FeederlingMovementAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, 3);
    while (!IntLoopDone()) {
        if ((UnitGroupCount(UnitGroup("Egg", c_playerAny, gv_feederlingRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitGroupLoopBegin(UnitGroup("Feederling", gv_p2_ZERG, gv_feederlingRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) <= 2.0)) {
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 0, (UnitGetCustomValue(UnitGroupLoopCurrent(), 0) + 1.0));
                }
                else {
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 0, IntToFixed(RandomInt(4, 6)));
                }
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_feederlingRegions[IntLoopCurrent()] = null;
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    IntLoopBegin(4, 6);
    while (!IntLoopDone()) {
        if ((UnitGroupCount(UnitGroup("Egg", c_playerAny, gv_feederlingRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitGroupLoopBegin(UnitGroup("Feederling", gv_p2_ZERG, gv_feederlingRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitKill(UnitGroupLoopCurrent());
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Feederling", gv_p2_ZERG, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) >= 1.0) && (UnitOrder(UnitGroupLoopCurrent(), 0) == null)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, gv_feederlingRegions[FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0))], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, gv_feederlingRegions[FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0))], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueAddToEnd);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3FeederlingMovementAI_Init () {
    gt__3FeederlingMovementAI = TriggerCreate("gt__3FeederlingMovementAI_Func");
    TriggerEnable(gt__3FeederlingMovementAI, false);
    TriggerAddEventTimePeriodic(gt__3FeederlingMovementAI, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen Foreshadowing Q
//--------------------------------------------------------------------------------------------------
bool gt__3QueenForeshadowingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/633EE64F"), null, PointFromId(2321));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ATychus00036", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00036", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ARaynor00037", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00037", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenForeshadowingQ_Init () {
    gt__3QueenForeshadowingQ = TriggerCreate("gt__3QueenForeshadowingQ_Func");
    TriggerAddEventUnitRegion(gt__3QueenForeshadowingQ, null, RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 1 Trip via Damage
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup1TripviaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__3BullyGroup1, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3BullyGroup1Actions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup1TripviaDamage_Init () {
    gt__3BullyGroup1TripviaDamage = TriggerCreate("gt__3BullyGroup1TripviaDamage_Func");
    TriggerAddEventUnitDamaged(gt__3BullyGroup1TripviaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 1 Trip via Movement
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup1TripviaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3BullyGroup1Actions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup1TripviaMovement_Init () {
    gt__3BullyGroup1TripviaMovement = TriggerCreate("gt__3BullyGroup1TripviaMovement_Func");
    TriggerAddEventUnitRegion(gt__3BullyGroup1TripviaMovement, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 1 Actions
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup1Actions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__3BullyGroup1TripviaDamage, false);
    TriggerEnable(gt__3BullyGroup1TripviaMovement, false);
    SoundPlay(SoundLink("Hydralisk_Ready", 3), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv__3BullyGroup1);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf__3ForcePopEgg(UnitFromId(567));
    gf__3ForcePopEgg(UnitFromId(629));
    gf__3ForcePopEgg(UnitFromId(625));
    gf__3ForcePopEgg(UnitFromId(630));
    gf__3ForcePopEgg(UnitFromId(911));
    gf__3ForcePopEgg(UnitFromId(624));
    gf__3ForcePopEgg(UnitFromId(646));
    gf__3ForcePopEgg(UnitFromId(910));
    gf__3ForcePopEgg(UnitFromId(622));
    gf__3ForcePopEgg(UnitFromId(1047));
    gf__3ForcePopEgg(UnitFromId(92));
    gf__3ForcePopEgg(UnitFromId(84));
    gf__3ForcePopEgg(UnitFromId(1416));
    gf__3ForcePopEgg(UnitFromId(516));
    while (!((libNtve_gf_UnitGroupIsDead(gv__3BullyGroup1) == true) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt__3BullyGroup1ReactionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup1Actions_Init () {
    gt__3BullyGroup1Actions = TriggerCreate("gt__3BullyGroup1Actions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 1 Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup1ReactionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ASwann00066", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00066", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02AStetmann00067", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00067", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup1ReactionQ_Init () {
    gt__3BullyGroup1ReactionQ = TriggerCreate("gt__3BullyGroup1ReactionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 2 Trip via Damage
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup2TripviaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__3BullyGroup2, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3BullyGroup2Actions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup2TripviaDamage_Init () {
    gt__3BullyGroup2TripviaDamage = TriggerCreate("gt__3BullyGroup2TripviaDamage_Func");
    TriggerAddEventUnitDamaged(gt__3BullyGroup2TripviaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 2 Trip via Movement
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup2TripviaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3BullyGroup2Actions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup2TripviaMovement_Init () {
    gt__3BullyGroup2TripviaMovement = TriggerCreate("gt__3BullyGroup2TripviaMovement_Func");
    TriggerAddEventUnitRegion(gt__3BullyGroup2TripviaMovement, null, RegionFromId(83), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 2 Actions
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup2Actions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__3BullyGroup2TripviaDamage, false);
    TriggerEnable(gt__3BullyGroup2TripviaMovement, false);
    TriggerExecute(gt__3BullyGroup2DelayedActivation, true, false);
    SoundPlay(SoundLink("Zergling_What", 2), PlayerGroupAll(), 100.0, 0.0);
    gf__3ForcePopEgg(UnitFromId(1417));
    gf__3ForcePopEgg(UnitFromId(106));
    gf__3ForcePopEgg(UnitFromId(912));
    gf__3ForcePopEgg(UnitFromId(1423));
    gf__3ForcePopEgg(UnitFromId(1419));
    gf__3ForcePopEgg(UnitFromId(1418));
    gf__3ForcePopEgg(UnitFromId(1420));
    gf__3ForcePopEgg(UnitFromId(1422));
    gf__3ForcePopEgg(UnitFromId(68));
    gf__3ForcePopEgg(UnitFromId(908));
    gf__3ForcePopEgg(UnitFromId(1421));
    gf__3ForcePopEgg(UnitFromId(105));
    gf__3ForcePopEgg(UnitFromId(66));
    while (!((libNtve_gf_UnitGroupIsDead(gv__3BullyGroup2) == true) && (libNtve_gf_UnitGroupIsDead(gv__3BullyGroup2MoverShooters) == true) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt__3BullyGroup2ReactionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup2Actions_Init () {
    gt__3BullyGroup2Actions = TriggerCreate("gt__3BullyGroup2Actions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 2 Delayed Activation
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup2DelayedActivation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.5, c_timeGame);
    UnitGroupLoopBegin(gv__3BullyGroup2MoverShooters);
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(6.0, c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        SoundPlay(SoundLink("Infestor_Pissed", 1), PlayerGroupAll(), 100.0, 0.0);
        gf_CreateUnburrowingUnits(1, "InfestorBurrowed", PointFromId(1397));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup2DelayedActivation_Init () {
    gt__3BullyGroup2DelayedActivation = TriggerCreate("gt__3BullyGroup2DelayedActivation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Bully Group 2 Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt__3BullyGroup2ReactionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ATychus00068", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00068", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BullyGroup2ReactionQ_Init () {
    gt__3BullyGroup2ReactionQ = TriggerCreate("gt__3BullyGroup2ReactionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Call for Help Q
//--------------------------------------------------------------------------------------------------
bool gt__3CallforHelpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("IncomingTransmission", -1)), c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(RegionFromId(29)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E4B7269F"));
    gv__3RescueDominionPing = PingLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/4DA83C20"), null, RegionGetCenter(RegionFromId(29)));
    TriggerEnable(gt__3CallforHelpSNUFFED, true);
    UnitGroupLoopBegin(gv__3RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p1_USER);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    // Transmission - SoundLink("TValerian02AWarfield00038", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02AWarfield00038", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3CallforHelpQ_Init () {
    gt__3CallforHelpQ = TriggerCreate("gt__3CallforHelpQ_Func");
    TriggerAddEventUnitRegion(gt__3CallforHelpQ, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Trip Via Damage
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskTripViaDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__3OmegaliskSpeedbumpGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3OmegaliskActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskTripViaDamage_Init () {
    gt__3OmegaliskTripViaDamage = TriggerCreate("gt__3OmegaliskTripViaDamage_Func");
    TriggerAddEventUnitDamaged(gt__3OmegaliskTripViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Trip Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskTripViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3OmegaliskActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskTripViaMovement_Init () {
    gt__3OmegaliskTripViaMovement = TriggerCreate("gt__3OmegaliskTripViaMovement_Func");
    TriggerAddEventUnitRegion(gt__3OmegaliskTripViaMovement, null, RegionFromId(91), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Actions
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3QueenFeederlingFlavor, true, false);
    TriggerEnable(gt__3OmegaliskTripViaDamage, false);
    TriggerEnable(gt__3OmegaliskTripViaMovement, false);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/ECB6FBCF"), null, UnitGetPosition(gv_tHEONEOMEGALISK));
    UnitSetPropertyFixed(gv_tHEONEOMEGALISK, c_unitPropLifeMax, gv_omegaliskHP);
    UnitSetPropertyFixed(gv_tHEONEOMEGALISK, c_unitPropLifePercent, 100.0);
    libNtve_gf_ShareVisionofUnit(gv_tHEONEOMEGALISK, true, gv_p1_USER);
    UnitIssueOrder(gv_tHEONEOMEGALISK, Order(AbilityCommand("BurrowOmegaliskUp", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("Ultralisk_Ready", 0), PlayerGroupAll(), 300.0, 0.0);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.125, 2.5, 100.0, 3.0);
    RegionAttachToUnit(RegionFromId(106), gv_tHEONEOMEGALISK, Point(0.0, 0.0));
    Wait(2.6, c_timeGame);
    UnitIssueOrder(gv_tHEONEOMEGALISK, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1889)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHEONEOMEGALISK, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(999)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEOMEGALISK, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(373)), c_orderQueueAddToEnd);
    TriggerExecute(gt__3MarineCallforHelpQ, true, false);
    TriggerExecute(gt__3OmegaliskEggsPop, true, false);
    TriggerExecute(gt__3OmegaliskBothRocksDestroyed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskActions_Init () {
    gt__3OmegaliskActions = TriggerCreate("gt__3OmegaliskActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Eggs Pop
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskEggsPop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.3, c_timeGame);
    SoundPlay(SoundLink("Queen_Attack", 1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    gf__3ForcePopEgg(UnitFromId(1305));
    gf__3ForcePopEgg(UnitFromId(1190));
    gf__3ForcePopEgg(UnitFromId(1438));
    gf__3ForcePopEgg(UnitFromId(1436));
    gf__3ForcePopEgg(UnitFromId(751));
    gf__3ForcePopEgg(UnitFromId(1309));
    gf__3ForcePopEgg(UnitFromId(2097));
    gf__3ForcePopEgg(UnitFromId(2096));
    gf__3ForcePopEgg(UnitFromId(39));
    gf__3ForcePopEgg(UnitFromId(2095));
    gf__3ForcePopEgg(UnitFromId(1430));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskEggsPop_Init () {
    gt__3OmegaliskEggsPop = TriggerCreate("gt__3OmegaliskEggsPop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Marine Call for Help Q
//--------------------------------------------------------------------------------------------------
bool gt__3MarineCallforHelpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ADominionMarine600064", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ADominionMarine600064", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3MarineCallforHelpQ_Init () {
    gt__3MarineCallforHelpQ = TriggerCreate("gt__3MarineCallforHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Camera Shake When Rock Destroyed
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskCameraShakeWhenRockDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 2.0);
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskCameraShakeWhenRockDestroyed_Init () {
    gt__3OmegaliskCameraShakeWhenRockDestroyed = TriggerCreate("gt__3OmegaliskCameraShakeWhenRockDestroyed_Func");
    TriggerAddEventUnitDied(gt__3OmegaliskCameraShakeWhenRockDestroyed, UnitRefFromUnit(UnitFromId(1889)));
    TriggerAddEventUnitDied(gt__3OmegaliskCameraShakeWhenRockDestroyed, UnitRefFromUnit(UnitFromId(999)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Both Rocks Destroyed
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskBothRocksDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitIsAlive(UnitFromId(999)) == false))) {
        Wait(0.1, c_timeGame);
    }
    if ((UnitIsAlive(gv_tHEONEOMEGALISK) == true)) {
        TriggerEnable(gt__3OmegaliskRetreatPeriodicCheck, true);
        TriggerExecute(gt__3OmegaliskBothRocksDestroyedQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskBothRocksDestroyed_Init () {
    gt__3OmegaliskBothRocksDestroyed = TriggerCreate("gt__3OmegaliskBothRocksDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Both Rocks Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskBothRocksDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv__3RescuableDominionGroup, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ADominionMarine600039", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ADominionMarine600039", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskBothRocksDestroyedQ_Init () {
    gt__3OmegaliskBothRocksDestroyedQ = TriggerCreate("gt__3OmegaliskBothRocksDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Retreat Periodic Check
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskRetreatPeriodicCheck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv__3RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_tHEONEOMEGALISK)) < 4.0) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), PointFromId(373)) >= 1.0) && (UnitGetCustomValue(UnitGroupLoopCurrent(), 0) == 0.0)) {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 1.0);
            gv__3OmegaliskRetreatUnit = UnitGroupLoopCurrent();
            TriggerExecute(gt__3OmegaliskRetreatActions, true, false);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskRetreatPeriodicCheck_Init () {
    gt__3OmegaliskRetreatPeriodicCheck = TriggerCreate("gt__3OmegaliskRetreatPeriodicCheck_Func");
    TriggerEnable(gt__3OmegaliskRetreatPeriodicCheck, false);
    TriggerAddEventTimePeriodic(gt__3OmegaliskRetreatPeriodicCheck, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Retreat Actions
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskRetreatActions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = gv__3OmegaliskRetreatUnit;
    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(373)), c_orderQueueReplace);
    Wait(0.7, c_timeGame);
    UnitSetCustomValue(lv_unit, 0, 0.0);
    UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskRetreatActions_Init () {
    gt__3OmegaliskRetreatActions = TriggerCreate("gt__3OmegaliskRetreatActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Call for Help SNUFFED
//--------------------------------------------------------------------------------------------------
bool gt__3CallforHelpSNUFFED_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv__3RescuableDominionGroup, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__3OmegaliskKilled, false);
    PingDestroy(gv__3RescueDominionPing);
    gf_ActivateAI(gv_tHEONEOMEGALISK);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3CallforHelpSNUFFED_Init () {
    gt__3CallforHelpSNUFFED = TriggerCreate("gt__3CallforHelpSNUFFED_Func");
    TriggerEnable(gt__3CallforHelpSNUFFED, false);
    TriggerAddEventUnitDied(gt__3CallforHelpSNUFFED, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Omegalisk Killed
//--------------------------------------------------------------------------------------------------
bool gt__3OmegaliskKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEOMEGALISK))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__3OmegaliskRetreatPeriodicCheck, false);
    UnitGroupLoopBegin(gv__3RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        UnitSetFacing(UnitGroupLoopCurrent(), RandomFixed(200.0, 250.0), 0.75);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    TriggerEnable(gt__3SaveDominionCheck, true);
    if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (UnitGroupCount(gv__3RescuableDominionGroup, c_unitCountAlive) > 0) && (gv_gameOver == false) && (gv_inCinematic == false)) {
        TriggerExecute(gt__3SaveDominionQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3OmegaliskKilled_Init () {
    gt__3OmegaliskKilled = TriggerCreate("gt__3OmegaliskKilled_Func");
    TriggerAddEventUnitDied(gt__3OmegaliskKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Save Dominion Check
//--------------------------------------------------------------------------------------------------
bool gt__3SaveDominionCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv__3RescuableDominionGroup, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3SaveDominionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3SaveDominionCheck_Init () {
    gt__3SaveDominionCheck = TriggerCreate("gt__3SaveDominionCheck_Func");
    TriggerEnable(gt__3SaveDominionCheck, false);
    TriggerAddEventUnitRegion(gt__3SaveDominionCheck, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Save Dominion Q
//--------------------------------------------------------------------------------------------------
bool gt__3SaveDominionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv__3RescueDominionPing);
    TriggerEnable(gt__3CallforHelpSNUFFED, false);
    UnitGroupLoopBegin(gv__3RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p1_USER, true);
        UnitGroupAdd(gv_nonHeroicDudes, UnitGroupLoopCurrent());
        UnitGroupRemove(gv__3RescuableDominionGroup, UnitGroupLoopCurrent());
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ADominionMarine600069", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ADominionMarine600069", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ASwann00097", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00097", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3SaveDominionQ_Init () {
    gt__3SaveDominionQ = TriggerCreate("gt__3SaveDominionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen Feederling Flavor
//--------------------------------------------------------------------------------------------------
bool gt__3QueenFeederlingFlavor_Func (bool testConds, bool runActions) {
    int auto9BB06C66_n;
    int auto9BB06C66_i;
    int auto4AF4F173_n;
    int auto4AF4F173_i;
    int auto5163F932_n;
    int auto5163F932_i;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9BB06C66_n = 12;
    auto9BB06C66_i = 1;
    while (auto9BB06C66_i <= auto9BB06C66_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(87), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 4.0);
        auto9BB06C66_i = auto9BB06C66_i + 1;
    }
    auto4AF4F173_n = 12;
    auto4AF4F173_i = 1;
    while (auto4AF4F173_i <= auto4AF4F173_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(88), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 5.0);
        auto4AF4F173_i = auto4AF4F173_i + 1;
    }
    auto5163F932_n = 12;
    auto5163F932_i = 1;
    while (auto5163F932_i <= auto5163F932_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 6.0);
        auto5163F932_i = auto5163F932_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenFeederlingFlavor_Init () {
    gt__3QueenFeederlingFlavor = TriggerCreate("gt__3QueenFeederlingFlavor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Autosave 2
//--------------------------------------------------------------------------------------------------
bool gt__3Autosave2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/0EF3D8F5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3Autosave2_Init () {
    gt__3Autosave2 = TriggerCreate("gt__3Autosave2_Func");
    TriggerAddEventUnitRegion(gt__3Autosave2, null, RegionFromId(95), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Broodchamber Trip
//--------------------------------------------------------------------------------------------------
bool gt__3BroodchamberTrip_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv__3BroodchamberLocPing);
    UnitKill(UnitFromId(2405));
    libNtve_gf_ShowHideUnit(UnitFromId(1540), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1537), true);
    TriggerExecute(gt_CinematicStartHoldout3Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BroodchamberTrip_Init () {
    gt__3BroodchamberTrip = TriggerCreate("gt__3BroodchamberTrip_Func");
    TriggerAddEventUnitRegion(gt__3BroodchamberTrip, null, RegionFromId(86), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen AI Phase 1
//--------------------------------------------------------------------------------------------------
bool gt__3QueenAIPhase1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_tHEONEBROODMOTHER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SeismicChargeAtHalfHealthQ, true);
    UnitSetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLifeMax, gv_queenHP);
    UnitSetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropMovementSpeed, 2.5);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_tHEONEBROODMOTHER), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_tHEONEBROODMOTHER);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0B218368"));
    TriggerExecute(gt__3CreateQueenBossBar, true, false);
    gv__3QueenPing = PingLastCreated();
    UIAlertClear(gv_p1_USER);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/275126F5"), null, UnitGetPosition(gv_tHEONEBROODMOTHER));
    gf__3AIQueenPopEggs(RegionFromId(87), 8);
    while (!((UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
        Wait(0.1, c_timeGame);
    }
    PingDestroy(gv__3QueenPing);
    TriggerStop(gt__3QueenPopEggs);
    gv__3QueenEggPopLimit = 0;
    UnitGroupRemove(gv_aIThinkGroup, gv_tHEONEBROODMOTHER);
    SoundPlay(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueReplace);
    Wait(12.0, c_timeGame);
    TriggerExecute(gt__3QueenAIPhase2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenAIPhase1_Init () {
    gt__3QueenAIPhase1 = TriggerCreate("gt__3QueenAIPhase1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen AI Phase 2
//--------------------------------------------------------------------------------------------------
bool gt__3QueenAIPhase2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_tHEONEBROODMOTHER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_tHEONEBROODMOTHER, PointFromId(312), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_tHEONEBROODMOTHER), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_tHEONEBROODMOTHER);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0F369205"));
    gv__3QueenPing = PingLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/C47AAD31"), null, PointFromId(312));
    Wait(0.1, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 1.5);
    UnitSetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLife, MaxF(UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLife, c_unitPropCurrent), (gv_queenHP * 0.75)));
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("Zerg_UnburrowLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.7, c_timeGame);
    gf__3AIQueenPopEggs(RegionFromId(88), 8);
    TriggerExecute(gt__3KillQueenReminderQ, true, false);
    while (!((UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
        Wait(0.1, c_timeGame);
    }
    PingDestroy(gv__3QueenPing);
    TriggerStop(gt__3QueenPopEggs);
    gv__3QueenEggPopLimit = 0;
    UnitGroupRemove(gv_aIThinkGroup, gv_tHEONEBROODMOTHER);
    SoundPlay(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt__3QueenAIPhase3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenAIPhase2_Init () {
    gt__3QueenAIPhase2 = TriggerCreate("gt__3QueenAIPhase2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Kill Queen Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt__3KillQueenReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    if ((gv_gameOver == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02ASwann00043", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00043", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3KillQueenReminderQ_Init () {
    gt__3KillQueenReminderQ = TriggerCreate("gt__3KillQueenReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen AI Phase 3
//--------------------------------------------------------------------------------------------------
bool gt__3QueenAIPhase3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_tHEONEBROODMOTHER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_tHEONEBROODMOTHER, PointFromId(310), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_tHEONEBROODMOTHER), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_tHEONEBROODMOTHER);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7C41D802"));
    gv__3QueenPing = PingLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/C21D7AA5"), null, PointFromId(310));
    Wait(0.1, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 1.5);
    UnitSetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLife, MaxF(UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLife, c_unitPropCurrent), (gv_queenHP * 0.5)));
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("QueenReady", 0), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Zerg_UnburrowLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.7, c_timeGame);
    gf__3AIQueenPopEggs(RegionFromId(89), 10);
    while (!((UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0))) {
        Wait(0.1, c_timeGame);
    }
    PingDestroy(gv__3QueenPing);
    TriggerStop(gt__3QueenPopEggs);
    gv__3QueenEggPopLimit = 0;
    UnitGroupRemove(gv_aIThinkGroup, gv_tHEONEBROODMOTHER);
    SoundPlay(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt__3QueenAIPhase4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenAIPhase3_Init () {
    gt__3QueenAIPhase3 = TriggerCreate("gt__3QueenAIPhase3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen AI Phase 4
//--------------------------------------------------------------------------------------------------
bool gt__3QueenAIPhase4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_tHEONEBROODMOTHER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_tHEONEBROODMOTHER, PointFromId(221), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_tHEONEBROODMOTHER), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_tHEONEBROODMOTHER);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C0B399CC"));
    gv__3QueenPing = PingLastCreated();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/22146DFC"), null, PointFromId(221));
    Wait(0.1, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 1.5);
    UnitSetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLife, MaxF(UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLife, c_unitPropCurrent), (gv_queenHP * 0.35)));
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("Zerg_UnburrowLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeGame);
    UnitBehaviorAdd(gv_tHEONEBROODMOTHER, "makeCreep8x6", gv_tHEONEBROODMOTHER, 1);
    CreepSetSpeed(c_creepSpeedGrowth, 200.0);
    SoundPlay(SoundLink("QueenYes", 1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("QueenShockwave", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    gf_ActivateAI(gv_tHEONEBROODMOTHER);
    while (!((UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLifePercent, c_unitPropCurrent) <= 10.0))) {
        Wait(0.1, c_timeGame);
    }
    UnitGroupRemove(gv_aIThinkGroup, gv_tHEONEBROODMOTHER);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("QueenShockwave", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    gf_ActivateAI(gv_tHEONEBROODMOTHER);
    while (true) {
        Wait(24.0, c_timeGame);
        UnitGroupRemove(gv_aIThinkGroup, gv_tHEONEBROODMOTHER);
        UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("QueenShockwave", 0)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        gf_ActivateAI(gv_tHEONEBROODMOTHER);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenAIPhase4_Init () {
    gt__3QueenAIPhase4 = TriggerCreate("gt__3QueenAIPhase4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen Shockwave Screen Shake
//--------------------------------------------------------------------------------------------------
bool gt__3QueenShockwaveScreenShake_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("QueenYes", 8), PlayerGroupAll(), 200.0, 0.0);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.125, 2.5, 100.0, RandomFixed(2.0, 4.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenShockwaveScreenShake_Init () {
    gt__3QueenShockwaveScreenShake = TriggerCreate("gt__3QueenShockwaveScreenShake_Func");
    TriggerAddEventUnitAbility(gt__3QueenShockwaveScreenShake, null, AbilityCommand("QueenShockwave", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Create Queen Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt__3CreateQueenBossBar_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv__3QueenBossBarIndex = 1;
    libNtve_gf_DisplayBossBar(gv__3QueenBossBarIndex, "Assets\\Textures\\btn-unit-zerg-queen.dds", StringExternal("Param/Value/070AAF64"), 100, PlayerGroupAll());
    libNtve_gf_SetBossBarMaximumValue(gv__3QueenBossBarIndex, FixedToInt(UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLifeMax, c_unitPropCurrent)), true);
    libNtve_gf_SetBossBarCurrentValue(gv__3QueenBossBarIndex, FixedToInt(UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLife, c_unitPropCurrent)), true);
    libNtve_gf_SetBossBarRace(gv__3QueenBossBarIndex, 2, true);
    libNtve_gf_MoveBossBar(gv__3QueenBossBarIndex, c_anchorTop, 0, 50);
    libNtve_gf_ShowHideBossBar(true, gv__3QueenBossBarIndex);
    TriggerEnable(gt__3UpdateQueenBossyBar, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3CreateQueenBossBar_Init () {
    gt__3CreateQueenBossBar = TriggerCreate("gt__3CreateQueenBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Update Queen Bossy Bar
//--------------------------------------------------------------------------------------------------
bool gt__3UpdateQueenBossyBar_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEBROODMOTHER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetBossBarCurrentValue(gv__3QueenBossBarIndex, FixedToInt(UnitGetPropertyFixed(gv_tHEONEBROODMOTHER, c_unitPropLife, c_unitPropCurrent)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3UpdateQueenBossyBar_Init () {
    gt__3UpdateQueenBossyBar = TriggerCreate("gt__3UpdateQueenBossyBar_Func");
    TriggerEnable(gt__3UpdateQueenBossyBar, false);
    TriggerAddEventUnitProperty(gt__3UpdateQueenBossyBar, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen Pop Eggs
//--------------------------------------------------------------------------------------------------
bool gt__3QueenPopEggs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_egg;

    // Variable Initialization
    lv_egg = null;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((UnitGroupCount(UnitGroup("Egg", c_playerAny, gv__3QueenEggPopRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (gv__3QueenEggPopLimit <= 0) || (UnitIsAlive(gv_tHEONEBROODMOTHER) == false))) {
            break;
        }
        else {
        }
        lv_egg = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_tHEONEBROODMOTHER), UnitGroup("Egg", c_playerAny, gv__3QueenEggPopRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (true) {
            UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), lv_egg), c_orderQueueReplace);
            Wait(0.1, c_timeGame);
            if ((UnitIsAlive(lv_egg) == false)) {
                break;
            }
            else {
            }
        }
    }
    gf_ActivateAI(gv_tHEONEBROODMOTHER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenPopEggs_Init () {
    gt__3QueenPopEggs = TriggerCreate("gt__3QueenPopEggs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Egg Popped Via Damage (Zerg Queen Only)
//--------------------------------------------------------------------------------------------------
bool gt__3EggPoppedViaDamageZergQueenOnly_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() == gv_tHEONEBROODMOTHER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Egg"))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv__3QueenEggPopLimit -= 1;
    gf__3EggSpawnedMobs(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3EggPoppedViaDamageZergQueenOnly_Init () {
    gt__3EggPoppedViaDamageZergQueenOnly = TriggerCreate("gt__3EggPoppedViaDamageZergQueenOnly_Func");
    TriggerAddEventUnitDamaged(gt__3EggPoppedViaDamageZergQueenOnly, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Queen Kill
//--------------------------------------------------------------------------------------------------
bool gt__3QueenKill_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEBROODMOTHER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__3QueenAIPhase1);
    TriggerStop(gt__3QueenAIPhase2);
    TriggerStop(gt__3QueenAIPhase3);
    TriggerStop(gt__3QueenAIPhase4);
    TriggerEnable(gt__3UpdateQueenBossyBar, false);
    TriggerEnable(gt_SeismicChargeAtHalfHealthQ, false);
    libNtve_gf_ShowHideBossBar(false, gv__3QueenBossBarIndex);
    PingDestroy(gv__3QueenPing);
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_CinematicFinishedHoldout3Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3QueenKill_Init () {
    gt__3QueenKill = TriggerCreate("gt__3QueenKill_Func");
    TriggerEnable(gt__3QueenKill, false);
    TriggerAddEventUnitDied(gt__3QueenKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Init Broodchamber
//--------------------------------------------------------------------------------------------------
bool gt__4InitBroodchamber_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    RegionPlayableMapSet(RegionEntireMap());
    UnitGroupLoopBegin(gv__3BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__4BroodchamberAllUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorAdd(UnitFromId(396), "ZergBuildingNotOnCreep", UnitFromId(396), 1);
    UnitBehaviorAdd(UnitFromId(1004), "ZergBuildingNotOnCreep", UnitFromId(1004), 1);
    gf_Swap(gv_tHEONERAYNOR, UnitFromId(45));
    gf_Swap(gv_tHEONESTETMAN, UnitFromId(40));
    gf_Swap(gv_tHEONESWANN, UnitFromId(41));
    gf_Swap(gv_tHEONETYCHUS, UnitFromId(46));
    UnitGroupClear(gv_incappedHeroes);
    libNtve_gf_SendActorMessageToUnit(gv_tHEONERAYNOR, "RefSet ::global.RaynorCommando ::Self");
    UnitGroupLoopBegin(gv_nonHeroicDudes);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(UnitGroupLoopCurrent(), PointFromId(49), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Incapacitated", 1);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupRemove Unpowered");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "UIStatusFlagSet");
        ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HeroIncap"), "Destroy");
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "IncapStandUp", 1);
        UnitSetFacing(UnitGroupLoopCurrent(), 45.0, 0.0);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 2.0, UnitGetFacing(UnitGroupLoopCurrent()))), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    FogSetColor(ColorWithAlpha(95.69, 20.00, 20.00, 40.00));
    FogSetDensity(0.7);
    FogSetFallOff(0.35);
    FogSetStartHeight((gv__4HeightOfLava - 7.0));
    UnitClearSelection(gv_p1_USER);
    UnitGroupSelect(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_p1_USER, true);
    UIAlertClear(gv_p1_USER);
    gf_ObjectivePlantSeismicChargesUpdate(3);
    PingDestroy(gv__1BroodchamberLocPing);
    PingDestroy(gv__2BroodchamberLocPing);
    PingDestroy(gv__3BroodchamberLocPing);
    RegionPlayableMapSet(RegionFromId(34));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(2416), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/84387CC6"));
    VisRevealArea(gv_p1_USER, RegionFromId(35), 0.1, false);
    gv__4ExtractionPing = PingLastCreated();
    TriggerExecute(gt_DisableDamageDrivenTriggers, true, false);
    TriggerExecute(gt__4FeederlingFlavor, true, false);
    TriggerEnable(gt__4FeederlingMovementAI, true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("RaynorSnipe", 0), true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("BonesTossGrenade", 0), true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("DutchPlaceTurret", 0), true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, true);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(139), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt__4StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4InitBroodchamber_Init () {
    gt__4InitBroodchamber = TriggerCreate("gt__4InitBroodchamber_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Start Game
//--------------------------------------------------------------------------------------------------
bool gt__4StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetRestartLoadingScreen(ConversationDataStateText("Maps|TValerian02A", "Loading Screen Restart 2"));
    TriggerEnable(gt_StetmannOOMQ, true);
    Wait(1.0, c_timeReal);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/A2FEB61B"));
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectiveExfiltrationCreateQ, true, false);
    VisRevealArea(gv_p1_USER, RegionFromId(105), 0.0, false);
    TriggerEnable(gt_DefeatAHeroWasBurninated, true);
    TriggerExecute(gt__4StartLavaViaTime, true, false);
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    Wait(3.0, c_timeGame);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4StartGame_Init () {
    gt__4StartGame = TriggerCreate("gt__4StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Feederling Flavor
//--------------------------------------------------------------------------------------------------
bool gt__4FeederlingFlavor_Func (bool testConds, bool runActions) {
    int auto5763245B_n;
    int auto5763245B_i;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5763245B_n = 15;
    auto5763245B_i = 1;
    while (auto5763245B_i <= auto5763245B_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(119), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 7.0);
        auto5763245B_i = auto5763245B_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4FeederlingFlavor_Init () {
    gt__4FeederlingFlavor = TriggerCreate("gt__4FeederlingFlavor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Feederling Movement AI
//--------------------------------------------------------------------------------------------------
bool gt__4FeederlingMovementAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_cocoons;

    // Variable Initialization
    lv_cocoons = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cocoons = UnitGroup("Egg", gv_p5_EGGS, gv_feederlingRegions[7], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_cocoons, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitGroupLoopBegin(UnitGroup("Feederling", gv_p2_ZERG, gv_feederlingRegions[7], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitKill(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("Feederling", c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) >= 1.0) && (UnitOrder(UnitGroupLoopCurrent(), 0) == null)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupRandomUnit(lv_cocoons, c_unitCountAlive))), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupRandomUnit(lv_cocoons, c_unitCountAlive))), c_orderQueueAddToEnd);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4FeederlingMovementAI_Init () {
    gt__4FeederlingMovementAI = TriggerCreate("gt__4FeederlingMovementAI_Func");
    TriggerEnable(gt__4FeederlingMovementAI, false);
    TriggerAddEventTimePeriodic(gt__4FeederlingMovementAI, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Start Lava Via Time
//--------------------------------------------------------------------------------------------------
bool gt__4StartLavaViaTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libNtve_gf_DifficultyValueFixed(15.0, 10.0, 10.0, 10.0), c_timeGame);
    TriggerExecute(gt__4StartLavaActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4StartLavaViaTime_Init () {
    gt__4StartLavaViaTime = TriggerCreate("gt__4StartLavaViaTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Start Lava Via Movement
//--------------------------------------------------------------------------------------------------
bool gt__4StartLavaViaMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__4StartLavaActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4StartLavaViaMovement_Init () {
    gt__4StartLavaViaMovement = TriggerCreate("gt__4StartLavaViaMovement_Func");
    TriggerAddEventUnitRegion(gt__4StartLavaViaMovement, null, RegionFromId(75), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Start Lava Actions
//--------------------------------------------------------------------------------------------------
bool gt__4StartLavaActions_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    WaterSetState("Template 1|Lava 2", gv__4TimeLimit, c_wtcLinear);
    TriggerExecute(gt__4LavaShakes, true, false);
    TriggerExecute(gt__4LavaSound, true, false);
    TriggerExecute(gt__4LavaBurnificationAmbience, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__4RunQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4StartLavaActions_Init () {
    gt__4StartLavaActions = TriggerCreate("gt__4StartLavaActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Lava Shakes
//--------------------------------------------------------------------------------------------------
bool gt__4LavaShakes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_gameOver == false)) {
            CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.5, 100.0, RandomFixed(2.0, 4.0));
            Wait(RandomFixed(8.0, 12.0), c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4LavaShakes_Init () {
    gt__4LavaShakes = TriggerCreate("gt__4LavaShakes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Lava Sound
//--------------------------------------------------------------------------------------------------
bool gt__4LavaSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_gameOver == false)) {
            SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 200.0, 0.0);
            Wait(SoundLengthSync(SoundLink("TUILavaRising", -1)), c_timeReal);
            Wait(0.1, c_timeReal);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4LavaSound_Init () {
    gt__4LavaSound = TriggerCreate("gt__4LavaSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Run! Q
//--------------------------------------------------------------------------------------------------
bool gt__4RunQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ARaynor00047", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00047", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4RunQ_Init () {
    gt__4RunQ = TriggerCreate("gt__4RunQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Lava Burnification & Ambience
//--------------------------------------------------------------------------------------------------
bool gt__4LavaBurnificationAmbience_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lavaIncrement;

    // Variable Initialization
    lv_lavaIncrement = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lavaIncrement = (gv__4TimeLimit * 4.0);
    lv_lavaIncrement = (10.0 / lv_lavaIncrement);
    gv__4HeightOfLava = (gv__4HeightOfLava + lv_lavaIncrement);
    FogSetStartHeight((gv__4HeightOfLava - 7.0));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((WorldHeight(c_heightMapGround, UnitGetPosition(UnitGroupLoopCurrent())) <= gv__4HeightOfLava)) {
            PlayerCreateEffectUnit(0, "LavaFireDamage", UnitGroupLoopCurrent());
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Incapacitated") == true)) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - 10.0));
            }
            else {
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    IntLoopBegin(1, 23);
    while (!IntLoopDone()) {
        if ((WorldHeight(c_heightMapGround, gv__4LavaDoodadPositions[IntLoopCurrent()]) <= (gv__4HeightOfLava + 0.25)) && (gv__4LavaDoodadHavePlayedAnim[IntLoopCurrent()] == false)) {
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv__4LavaDoodadPositions[IntLoopCurrent()], 2.0), "TTosh01FlameGeyser", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv__4LavaDoodadPositions[IntLoopCurrent()], 2.0), "Spires", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
            gv__4LavaDoodadHavePlayedAnim[IntLoopCurrent()] = true;
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    IntLoopBegin(1, 5);
    while (!IntLoopDone()) {
        if ((WorldHeight(c_heightMapGround, gv__4LavaNydusPositions[IntLoopCurrent()]) <= (gv__4HeightOfLava + 0.25)) && (gv__4LavaNydusHaveSpawned[IntLoopCurrent()] == false)) {
            gf_SpawnNydusWorm(RegionCircle(gv__4LavaNydusPositions[IntLoopCurrent()], 0.5), 5, 1, "InfestedCivilian", 12.0);
            gv__4LavaNydusHaveSpawned[IntLoopCurrent()] = true;
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    IntLoopBegin(1, 8);
    while (!IntLoopDone()) {
        if ((WorldHeight(c_heightMapGround, gv__4LavaFireNydusPositions[IntLoopCurrent()]) <= (gv__4HeightOfLava + 0.25)) && (gv__4LavaFireNydusHaveSpawned[IntLoopCurrent()] == false)) {
            UnitCreate(1, "NydusWormLavaDeath", 0, gv_p2_ZERG, gv__4LavaFireNydusPositions[IntLoopCurrent()], libNtve_gf_RandomAngle());
            gv__4LavaFireNydusHaveSpawned[IntLoopCurrent()] = true;
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    Wait(0.25, c_timeGame);
    if ((gv_gameOver == false)) {
        TriggerExecute(TriggerGetCurrent(), true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4LavaBurnificationAmbience_Init () {
    gt__4LavaBurnificationAmbience = TriggerCreate("gt__4LavaBurnificationAmbience_Func");
    TriggerEnable(gt__4LavaBurnificationAmbience, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Ambush 1
//--------------------------------------------------------------------------------------------------
bool gt__4Ambush1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Zergling_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4Ambush1_Init () {
    gt__4Ambush1 = TriggerCreate("gt__4Ambush1_Func");
    TriggerAddEventUnitRegion(gt__4Ambush1, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Infestor
//--------------------------------------------------------------------------------------------------
bool gt__4Infestor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Infestor_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_ActivateAI(UnitFromId(87));
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(84), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4Infestor_Init () {
    gt__4Infestor = TriggerCreate("gt__4Infestor_Func");
    TriggerAddEventUnitRegion(gt__4Infestor, null, RegionFromId(59), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Ultralisk Unburrow
//--------------------------------------------------------------------------------------------------
bool gt__4UltraliskUnburrow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_ActivateAI(UnitFromId(140));
    }
    else {
        SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_ActivateAI(UnitFromId(6));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4UltraliskUnburrow_Init () {
    gt__4UltraliskUnburrow = TriggerCreate("gt__4UltraliskUnburrow_Func");
    TriggerAddEventUnitRegion(gt__4UltraliskUnburrow, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Ambush 2
//--------------------------------------------------------------------------------------------------
bool gt__4Ambush2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Zergling_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Baneling_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(111), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_ActivateAI(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4Ambush2_Init () {
    gt__4Ambush2 = TriggerCreate("gt__4Ambush2_Func");
    TriggerAddEventUnitRegion(gt__4Ambush2, null, RegionFromId(90), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Extraction
//--------------------------------------------------------------------------------------------------
bool gt__4Extraction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsInvulnerable(EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv__4CurrentExtractionUnit = EventUnit();
    TriggerExecute(gt__4UnitExtractionController, true, false);
    if ((EventUnit() == gv_tHEONERAYNOR)) {
        gv__4HeroesSaved += 1;
    }
    else {
    }
    if ((EventUnit() == gv_tHEONETYCHUS)) {
        gv__4HeroesSaved += 1;
    }
    else {
    }
    if ((EventUnit() == gv_tHEONESWANN)) {
        gv__4HeroesSaved += 1;
    }
    else {
    }
    if ((EventUnit() == gv_tHEONESTETMAN)) {
        gv__4HeroesSaved += 1;
    }
    else {
    }
    if ((gv__4HeroesSaved == 4)) {
        gv__4HeroesSaved += 1;
        SoundPlay(SoundLink("Terran_Veterancy", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitKill(UnitFromId(2406));
        gv_gameOver = true;
        PingDestroy(gv__4ExtractionPing);
        TriggerExecute(gt_ObjectivePlantSeismicChargesComplete, true, false);
        libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4Extraction_Init () {
    gt__4Extraction = TriggerCreate("gt__4Extraction_Func");
    TriggerAddEventUnitRegion(gt__4Extraction, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 Unit Extraction Controller
//--------------------------------------------------------------------------------------------------
bool gt__4UnitExtractionController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lOCAL_ExtractingUnit;
    int lv_i;

    // Variable Initialization
    lv_lOCAL_ExtractingUnit = null;
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lOCAL_ExtractingUnit = gv__4CurrentExtractionUnit;
    UnitSelect(lv_lOCAL_ExtractingUnit, gv_p1_USER, false);
    UnitSetState(lv_lOCAL_ExtractingUnit, c_unitStateSelectable, false);
    UnitSetState(lv_lOCAL_ExtractingUnit, c_unitStateTargetable, false);
    UnitSetState(lv_lOCAL_ExtractingUnit, c_unitStateStatusBar, false);
    UnitSetState(lv_lOCAL_ExtractingUnit, c_unitStateInvulnerable, true);
    while (true) {
        if ((libNtve_gf_UnitInRegion(lv_lOCAL_ExtractingUnit, RegionCircle(PointFromId(1568), 1.0)) == true)) {
            UnitSetState(lv_lOCAL_ExtractingUnit, c_unitStateHidden, true);
            UnitSetPosition(lv_lOCAL_ExtractingUnit, RegionGetCenter(RegionFromId(139)), false);
            return true;
        }
        else {
        }
        if ((gv_inCinematic == true)) {
            Wait(1.0, c_timeReal);
            return true;
        }
        else {
        }
        UnitIssueOrder(lv_lOCAL_ExtractingUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1568)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4UnitExtractionController_Init () {
    gt__4UnitExtractionController = TriggerCreate("gt__4UnitExtractionController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Think
//--------------------------------------------------------------------------------------------------
bool gt_AIThink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_rallypoint;
    unitgroup lv_targets;

    // Variable Initialization
    lv_rallypoint = null;
    lv_targets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targets = UnitGroup(null, gv_p1_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitHasBehavior(gv_tHEONERAYNOR, "Incapacitated") == true)) {
        UnitGroupRemove(lv_targets, gv_tHEONERAYNOR);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESTETMAN, "Incapacitated") == true)) {
        UnitGroupRemove(lv_targets, gv_tHEONESTETMAN);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESWANN, "Incapacitated") == true)) {
        UnitGroupRemove(lv_targets, gv_tHEONESWANN);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONETYCHUS, "Incapacitated") == true)) {
        UnitGroupRemove(lv_targets, gv_tHEONETYCHUS);
    }
    else {
    }
    UnitGroupLoopBegin(gv_aIThinkGroup);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderSetAutoCast(AbilityCommand("SapStructure", 0), true), c_orderQueueReplace);
        lv_rallypoint = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitGroupLoopCurrent()), lv_targets));
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_rallypoint), c_orderQueueReplace);
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Infestor")) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) < libNtve_gf_DifficultyValueFixed(3.0, 3.0, 4.0, 5.0))) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), RegionRandomPoint(RegionCircle(PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), (DistanceBetweenPoints(lv_rallypoint, UnitGetPosition(UnitGroupLoopCurrent())) - 2.0), AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_rallypoint)), 1.5))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowInfestorDown", 0)), c_orderQueueReplace);
                UnitGroupRemove(gv_aIThinkGroup, UnitGroupLoopCurrent());
                libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, gv_p1_USER);
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIThink_Init () {
    gt_AIThink = TriggerCreate("gt_AIThink_Func");
    TriggerAddEventTimePeriodic(gt_AIThink, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_InfestorCooldown_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnit(), 0, (UnitGetCustomValue(EventUnit(), 0) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorCooldown_Init () {
    gt_InfestorCooldown = TriggerCreate("gt_InfestorCooldown_Func");
    TriggerAddEventUnitAbility(gt_InfestorCooldown, null, AbilityCommand("InfestedTerrans", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawning Trigger
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawningTrigger_Func (bool testConds, bool runActions) {
    int auto100421EA_n;
    int auto100421EA_i;

    // Variable Declarations
    region lv_region;
    int lv_packs;
    int lv_countperpack;
    string lv_type;
    fixed lv_delay;
    fixed lv_dynamicdelay;
    unit lv_unit;
    int lv_ping;

    // Variable Initialization
    lv_region = null;
    lv_packs = 0;
    lv_countperpack = 0;
    lv_type = null;
    lv_delay = 0.0;
    lv_dynamicdelay = 0.0;
    lv_unit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region = gv_nydusSpawnRegion;
    lv_packs = gv_nydusSpawnPacks;
    lv_countperpack = gv_nydusSpawnCountPerPacks;
    lv_type = gv_nydusSpawnType;
    lv_delay = gv_nydusSpawnDelay;
    if ((gv_nydusWormsActiveInHoldout >= gv_nydusWormLimitInHoldout) && (gv_limitNydusWormSpawnsInHoldout == true)) {
        return true;
    }
    else {
    }
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(lv_region), 15.0), CameraGetTarget(gv_p1_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p2_ZERG, RegionGetCenter(lv_region));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_nydusWormHP);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/DEBF77B4"), null, UnitGetPosition(UnitLastCreated()));
    lv_unit = UnitLastCreated();
    if ((gv_limitNydusWormSpawnsInHoldout == true)) {
        UnitSetCustomValue(UnitLastCreated(), 0, 1.0);
        gv_nydusWormsActiveInHoldout += 1;
    }
    else {
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(UnitGetPosition(lv_unit), 6.0), "Spires", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/2730F80D"));
    lv_ping = PingLastCreated();
    SoundPlay(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.7, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_unit) == false)) {
            PingDestroy(lv_ping);
            if ((UnitGetCustomValue(lv_unit, 0) == 1.0)) {
                gv_nydusWormsActiveInHoldout -= 1;
            }
            else {
            }
            break;
        }
        else {
        }
        auto100421EA_n = lv_packs;
        auto100421EA_i = 1;
        while (auto100421EA_i <= auto100421EA_n) {
            if ((UnitGroupCount(gv_nydusSpawnedCreatures, c_unitCountAlive) < 60) && (UnitIsAlive(lv_unit) == true) && (gv_gameOver == false) && (gv_inCinematic == false)) {
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(lv_countperpack, lv_type, 0, gv_p2_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                while (!UnitGroupLoopDone()) {
                    UnitGroupAdd(gv_nydusSpawnedCreatures, UnitGroupLoopCurrent());
                    gf_ActivateAI(UnitGroupLoopCurrent());
                    UnitGroupLoopStep();
                }
                UnitGroupLoopEnd();
            }
            else {
            }
            Wait(0.5, c_timeAI);
            auto100421EA_i = auto100421EA_i + 1;
        }
        lv_dynamicdelay = lv_delay;
        while (true) {
            if ((UnitIsAlive(lv_unit) == false)) {
                break;
            }
            else {
                if ((lv_dynamicdelay >= 0.5)) {
                    lv_dynamicdelay = (lv_dynamicdelay - 0.5);
                    Wait(0.5, c_timeAI);
                }
                else {
                    Wait(lv_dynamicdelay, c_timeGame);
                    break;
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawningTrigger_Init () {
    gt_NydusSpawningTrigger = TriggerCreate("gt_NydusSpawningTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Snipe - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_RaynorSnipeInitialize_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RaynorSnipeUnitsKilled, true);
    gv_raynorSnipeKillsCurrent = 0;
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_RaynorSnipeUnitsKilled, false);
    if ((gv_raynorSnipeKillsCurrent > gv_raynorSnipeKillsBest)) {
        gv_raynorSnipeKillsBest = gv_raynorSnipeKillsCurrent;
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_raynorSnipeKillsBest >= 50)) {
        TriggerExecute(gt_AchievementOneShotFiftyKills, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorSnipeInitialize_Init () {
    gt_RaynorSnipeInitialize = TriggerCreate("gt_RaynorSnipeInitialize_Func");
    TriggerAddEventUnitAbility(gt_RaynorSnipeInitialize, null, AbilityCommand("RaynorSnipe", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Snipe - Units Killed
//--------------------------------------------------------------------------------------------------
bool gt_RaynorSnipeUnitsKilled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_raynorSnipeKillsCurrent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorSnipeUnitsKilled_Init () {
    gt_RaynorSnipeUnitsKilled = TriggerCreate("gt_RaynorSnipeUnitsKilled_Func");
    TriggerEnable(gt_RaynorSnipeUnitsKilled, false);
    TriggerAddEventUnitDamaged(gt_RaynorSnipeUnitsKilled, null, c_unitDamageTypeAny, c_unitDamageFatal, "RaynorSnipeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - One Shot, Fifty Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementOneShotFiftyKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementAward(gv_p1_USER, "TValerian02A_3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementOneShotFiftyKills_Init () {
    gt_AchievementOneShotFiftyKills = TriggerCreate("gt_AchievementOneShotFiftyKills_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Betty Kill
//--------------------------------------------------------------------------------------------------
bool gt_BettyKill_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "FlamingBetty"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_flamingBettyKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BettyKill_Init () {
    gt_BettyKill = TriggerCreate("gt_BettyKill_Func");
    TriggerAddEventUnitDied(gt_BettyKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Incapacitated
//--------------------------------------------------------------------------------------------------
bool gt_HeroIncapacitated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_tHEONERAYNOR, "Incapacitated") == true) && (UnitGroupHasUnit(gv_incappedHeroes, gv_tHEONERAYNOR) == false)) {
        UnitGroupAdd(gv_incappedHeroes, gv_tHEONERAYNOR);
        gv_achievementHeroIncapCounter += 1;
        TriggerExecute(gt_IncapacitationTipQ, true, false);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESTETMAN, "Incapacitated") == true) && (UnitGroupHasUnit(gv_incappedHeroes, gv_tHEONESTETMAN) == false)) {
        UnitGroupAdd(gv_incappedHeroes, gv_tHEONESTETMAN);
        gv_achievementHeroIncapCounter += 1;
        TriggerExecute(gt_IncapacitationTipQ, true, false);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESWANN, "Incapacitated") == true) && (UnitGroupHasUnit(gv_incappedHeroes, gv_tHEONESWANN) == false)) {
        UnitGroupAdd(gv_incappedHeroes, gv_tHEONESWANN);
        gv_achievementHeroIncapCounter += 1;
        TriggerExecute(gt_IncapacitationTipQ, true, false);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONETYCHUS, "Incapacitated") == true) && (UnitGroupHasUnit(gv_incappedHeroes, gv_tHEONETYCHUS) == false)) {
        UnitGroupAdd(gv_incappedHeroes, gv_tHEONETYCHUS);
        gv_achievementHeroIncapCounter += 1;
        TriggerExecute(gt_IncapacitationTipQ, true, false);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONERAYNOR, "Incapacitated") == true) && (UnitHasBehavior(gv_tHEONETYCHUS, "Incapacitated") == true) && (UnitHasBehavior(gv_tHEONESWANN, "Incapacitated") == true) && (UnitHasBehavior(gv_tHEONESTETMAN, "Incapacitated") == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_RecoverIncappedHeroes, false);
        libNtve_gf_PauseUnit(gv_tHEONERAYNOR, true);
        libNtve_gf_PauseUnit(gv_tHEONETYCHUS, true);
        libNtve_gf_PauseUnit(gv_tHEONESWANN, true);
        libNtve_gf_PauseUnit(gv_tHEONESTETMAN, true);
        TriggerExecute(gt_DefeatAllHeroesIncapacitated, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroIncapacitated_Init () {
    gt_HeroIncapacitated = TriggerCreate("gt_HeroIncapacitated_Func");
    TriggerAddEventTimePeriodic(gt_HeroIncapacitated, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recover Incapped Heroes
//--------------------------------------------------------------------------------------------------
bool gt_RecoverIncappedHeroes_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_tHEONERAYNOR, "Incapacitated") == true) && (UnitHasBehavior(gv_tHEONERAYNOR, "IncapStandUp") == false)) {
        if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(gv_tHEONERAYNOR), gv_incapRescueRadius), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_PauseUnit(gv_tHEONERAYNOR, true);
        }
        else {
            libNtve_gf_PauseUnit(gv_tHEONERAYNOR, false);
        }
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONERAYNOR, "Incapacitated") == false) && (UnitHasBehavior(gv_tHEONERAYNOR, "IncapStandUp") == false) && (UnitGroupHasUnit(gv_incappedHeroes, gv_tHEONERAYNOR) == true)) {
        UnitGroupRemove(gv_incappedHeroes, gv_tHEONERAYNOR);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESTETMAN, "Incapacitated") == true) && (UnitHasBehavior(gv_tHEONESTETMAN, "IncapStandUp") == false)) {
        if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(gv_tHEONESTETMAN), gv_incapRescueRadius), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_PauseUnit(gv_tHEONESTETMAN, true);
        }
        else {
            libNtve_gf_PauseUnit(gv_tHEONESTETMAN, false);
        }
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESTETMAN, "Incapacitated") == false) && (UnitHasBehavior(gv_tHEONESTETMAN, "IncapStandUp") == false) && (UnitGroupHasUnit(gv_incappedHeroes, gv_tHEONESTETMAN) == true)) {
        UnitGroupRemove(gv_incappedHeroes, gv_tHEONESTETMAN);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESWANN, "Incapacitated") == true) && (UnitHasBehavior(gv_tHEONESWANN, "IncapStandUp") == false)) {
        if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(gv_tHEONESWANN), gv_incapRescueRadius), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_PauseUnit(gv_tHEONESWANN, true);
        }
        else {
            libNtve_gf_PauseUnit(gv_tHEONESWANN, false);
        }
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONESWANN, "Incapacitated") == false) && (UnitHasBehavior(gv_tHEONESWANN, "IncapStandUp") == false) && (UnitGroupHasUnit(gv_incappedHeroes, gv_tHEONESWANN) == true)) {
        UnitGroupRemove(gv_incappedHeroes, gv_tHEONESWANN);
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONETYCHUS, "Incapacitated") == true) && (UnitHasBehavior(gv_tHEONETYCHUS, "IncapStandUp") == false)) {
        if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(gv_tHEONETYCHUS), gv_incapRescueRadius), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_PauseUnit(gv_tHEONETYCHUS, true);
        }
        else {
            libNtve_gf_PauseUnit(gv_tHEONETYCHUS, false);
        }
    }
    else {
    }
    if ((UnitHasBehavior(gv_tHEONETYCHUS, "Incapacitated") == false) && (UnitHasBehavior(gv_tHEONETYCHUS, "IncapStandUp") == false) && (UnitGroupHasUnit(gv_incappedHeroes, gv_tHEONETYCHUS) == true)) {
        UnitGroupRemove(gv_incappedHeroes, gv_tHEONETYCHUS);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecoverIncappedHeroes_Init () {
    gt_RecoverIncappedHeroes = TriggerCreate("gt_RecoverIncappedHeroes_Func");
    TriggerAddEventTimePeriodic(gt_RecoverIncappedHeroes, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incapacitation Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_IncapacitationTipQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian02a_FallenHeroes", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncapacitationTipQ_Init () {
    gt_IncapacitationTipQ = TriggerCreate("gt_IncapacitationTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_InfestorWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian02ASwann00098", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00098", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ATychus00095", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00095", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorWarningQ_Init () {
    gt_InfestorWarningQ = TriggerCreate("gt_InfestorWarningQ_Func");
    TriggerAddEventUnitAbility(gt_InfestorWarningQ, null, AbilityCommand("InfestedTerrans", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stetmann OOM Q
//--------------------------------------------------------------------------------------------------
bool gt_StetmannOOMQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_tHEONESTETMAN) == true) && (UnitHasBehavior(gv_tHEONESTETMAN, "Incapacitated") == false) && (UnitHasBehavior(gv_tHEONESTETMAN, "IncapStandUp") == false) && (UnitGetPropertyFixed(gv_tHEONESTETMAN, c_unitPropEnergyPercent, c_unitPropCurrent) <= 10.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02AStetmann00017", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONESTETMAN, SoundLink("TValerian02AStetmann00017", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StetmannOOMQ_Init () {
    gt_StetmannOOMQ = TriggerCreate("gt_StetmannOOMQ_Func");
    TriggerEnable(gt_StetmannOOMQ, false);
    TriggerAddEventTimePeriodic(gt_StetmannOOMQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seismic Charge At Half Health Q
//--------------------------------------------------------------------------------------------------
bool gt_SeismicChargeAtHalfHealthQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv__1BroodchamberNuke, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (UnitIsAlive(gv__1BroodchamberNuke) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02ASwann00093", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00093", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    if ((UnitGetPropertyFixed(gv__2BroodchamberNuke, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (UnitIsAlive(gv__2BroodchamberNuke) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02ASwann00093", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00093", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    if ((UnitGetPropertyFixed(gv__3BroodchamberNuke, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (UnitIsAlive(gv__3BroodchamberNuke) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TValerian02ASwann00093", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONESWANN, SoundLink("TValerian02ASwann00093", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeismicChargeAtHalfHealthQ_Init () {
    gt_SeismicChargeAtHalfHealthQ = TriggerCreate("gt_SeismicChargeAtHalfHealthQ_Func");
    TriggerEnable(gt_SeismicChargeAtHalfHealthQ, false);
    TriggerAddEventTimePeriodic(gt_SeismicChargeAtHalfHealthQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Seismic Charge Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatSeismicChargeDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NukePack"))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TimerPause(gv_holdoutTimer, true);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/FEDFBBC4"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatSeismicChargeDestroyed_Init () {
    gt_DefeatSeismicChargeDestroyed = TriggerCreate("gt_DefeatSeismicChargeDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatSeismicChargeDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat All Heroes Incapacitated
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAllHeroesIncapacitated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/BCCCE7D0"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAllHeroesIncapacitated_Init () {
    gt_DefeatAllHeroesIncapacitated = TriggerCreate("gt_DefeatAllHeroesIncapacitated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat A Hero Was Burninated
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAHeroWasBurninated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unittype;

    // Variable Initialization
    lv_unittype = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TychusCommando") || (UnitGetType(EventUnit()) == "RaynorCommando") || (UnitGetType(EventUnit()) == "Swann") || (UnitGetType(EventUnit()) == "Stetmann")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    lv_unittype = UnitGetType(EventUnit());
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, (UnitTypeGetName(lv_unittype) + StringExternal("Param/Value/A29B53C1")), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAHeroWasBurninated_Init () {
    gt_DefeatAHeroWasBurninated = TriggerCreate("gt_DefeatAHeroWasBurninated_Func");
    TriggerEnable(gt_DefeatAHeroWasBurninated, false);
    TriggerAddEventUnitDied(gt_DefeatAHeroWasBurninated, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    if ((ObjectiveGetState(gv_oBJPlantSeismicCharges) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_oBJExfiltrate) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "TValerian02A_1");
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementHeroIncapCounter == 0)) {
        AchievementAward(gv_p1_USER, "TValerian02A_2");
    }
    else {
    }
    VictoryPanelAddAchievement("TValerian02A_1");
    VictoryPanelAddAchievement("TValerian02A_2");
    VictoryPanelAddAchievement("TValerian02A_3");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F1AB7D8D"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_tHEONERAYNOR, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/70D8CB97"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_tHEONETYCHUS, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D617830B"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_tHEONESWANN, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D7C4D886"), IntToText(gv_flamingBettyKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5E55665C"), StringExternal("Param/Value/6D27773E"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0B89C2AB"), IntToText(gv_raynorSnipeKillsBest));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/C2F1A3B1"), IntToText(gv_achievementHeroIncapCounter));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Plant Seismic Charges Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePlantSeismicChargesCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/70CCCF96"), StringExternal("Param/Value/45096F8B"), c_objectiveStateActive, true);
    gv_oBJPlantSeismicCharges = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(91, ObjectiveLastCreated(), StringExternal("Param/Value/9E819C5A"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePlantSeismicChargesCreateQ_Init () {
    gt_ObjectivePlantSeismicChargesCreateQ = TriggerCreate("gt_ObjectivePlantSeismicChargesCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Plant Seismic Charges Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePlantSeismicChargesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePlantSeismicChargesCreateQ, true, false);
    ObjectiveSetState(gv_oBJPlantSeismicCharges, c_objectiveStateCompleted);
    ObjectiveSetState(gv_oBJExfiltrate, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePlantSeismicChargesComplete_Init () {
    gt_ObjectivePlantSeismicChargesComplete = TriggerCreate("gt_ObjectivePlantSeismicChargesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Exfiltration Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExfiltrationCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/2364874E"), StringExternal("Param/Value/DD330B9F"), c_objectiveStateActive, true);
    gv_oBJExfiltrate = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(92, ObjectiveLastCreated(), StringExternal("Param/Value/2864B30D"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExfiltrationCreateQ_Init () {
    gt_ObjectiveExfiltrationCreateQ = TriggerCreate("gt_ObjectiveExfiltrationCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Damage Driven Triggers
//--------------------------------------------------------------------------------------------------
bool gt_DisableDamageDrivenTriggers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1ZergKillTeamTripViaDamage, false);
    TriggerEnable(gt__1ZergKillTeamTripViaDamage, false);
    TriggerEnable(gt__1TeachBettyViaDamage, false);
    TriggerEnable(gt__1TeachSnipeAgainTripViaDamage, false);
    TriggerEnable(gt__1TeachSnipeTripViaDamage, false);
    TriggerEnable(gt__1TeachNadesTripViaDamage, false);
    TriggerEnable(gt__1TeachNadesAgainTripViaDamage, false);
    TriggerEnable(gt__2AmbushTripViaDamage, false);
    TriggerEnable(gt__2ZombieRaid1TripViaDamage, false);
    TriggerEnable(gt__2ZombieRaid2TripViaDamage, false);
    TriggerEnable(gt__2StoryTellingTripViaDamage, false);
    TriggerEnable(gt__3OmegaliskTripViaDamage, false);
    TriggerEnable(gt__3EggPoppedViaDamageZergQueenOnly, false);
    TriggerEnable(gt__3BullyGroup1TripviaDamage, false);
    TriggerEnable(gt__3BullyGroup2TripviaDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableDamageDrivenTriggers_Init () {
    gt_DisableDamageDrivenTriggers = TriggerCreate("gt_DisableDamageDrivenTriggers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Damage Driven Triggers
//--------------------------------------------------------------------------------------------------
bool gt_EnableDamageDrivenTriggers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1ZergKillTeamTripViaDamage, true);
    TriggerEnable(gt__1ZergKillTeamTripViaDamage, true);
    TriggerEnable(gt__1TeachBettyViaDamage, true);
    TriggerEnable(gt__1TeachSnipeAgainTripViaDamage, true);
    TriggerEnable(gt__1TeachSnipeTripViaDamage, true);
    TriggerEnable(gt__1TeachNadesTripViaDamage, true);
    TriggerEnable(gt__1TeachNadesAgainTripViaDamage, true);
    TriggerEnable(gt__2AmbushTripViaDamage, true);
    TriggerEnable(gt__2ZombieRaid1TripViaDamage, true);
    TriggerEnable(gt__2ZombieRaid2TripViaDamage, true);
    TriggerEnable(gt__2StoryTellingTripViaDamage, true);
    TriggerEnable(gt__3OmegaliskTripViaDamage, true);
    TriggerEnable(gt__3EggPoppedViaDamageZergQueenOnly, true);
    TriggerEnable(gt__3BullyGroup1TripviaDamage, true);
    TriggerEnable(gt__3BullyGroup2TripviaDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDamageDrivenTriggers_Init () {
    gt_EnableDamageDrivenTriggers = TriggerCreate("gt_EnableDamageDrivenTriggers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_CinematicStartHoldout1Setup, true, true);
    TriggerExecute(gt_CinematicStartHoldout1Cinematic, true, true);
    TriggerExecute(gt_CinematicStartHoldout1CinematicEnd, true, true);
    TriggerExecute(gt_CinematicStartHoldout1Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout1Q_Init () {
    gt_CinematicStartHoldout1Q = TriggerCreate("gt_CinematicStartHoldout1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 1 Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout1Setup_Func (bool testConds, bool runActions) {
    unitgroup autoA9E6D43E_g;
    int autoA9E6D43E_u;
    unitgroup auto7CC4FD9E_g;
    int auto7CC4FD9E_u;

    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    RegionPlayableMapSet(RegionEntireMap());
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, 0);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TriggerExecute(gt_DisableDamageDrivenTriggers, true, false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoA9E6D43E_g = gv_cinematicHiddenUnitGroup;
    autoA9E6D43E_u = 1;
    while (autoA9E6D43E_u <= UnitGroupCount(autoA9E6D43E_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(autoA9E6D43E_g, autoA9E6D43E_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_MakeUnitInvulnerable(lv_chosenUnit, true);
        if (lv_chosenUnit == UnitGroupUnit(autoA9E6D43E_g, autoA9E6D43E_u)) {
            autoA9E6D43E_u = autoA9E6D43E_u + 1;
        }
    }
    gv_cinematicZergStrays = UnitGroup(null, gv_p2_ZERG, RegionFromId(10), UnitFilter(0, 0, 0, 0), 0);
    auto7CC4FD9E_g = gv_cinematicZergStrays;
    auto7CC4FD9E_u = 1;
    while (auto7CC4FD9E_u <= UnitGroupCount(auto7CC4FD9E_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(auto7CC4FD9E_g, auto7CC4FD9E_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_MakeUnitInvulnerable(lv_chosenUnit, true);
        if (lv_chosenUnit == UnitGroupUnit(auto7CC4FD9E_g, auto7CC4FD9E_u)) {
            auto7CC4FD9E_u = auto7CC4FD9E_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout1Setup_Init () {
    gt_CinematicStartHoldout1Setup = TriggerCreate("gt_CinematicStartHoldout1Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 1 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout1Cinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2450), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2451), 15.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorCommando", 0, gv_p1_USER, PointFromId(2445));
    UnitBehaviorRemove(UnitLastCreated(), "RaynorRadar", 1);
    gv_cINEMATICRAYNOR = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Stetmann", 0, gv_p1_USER, PointFromId(2448));
    gv_cINEMATICSTETTMANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swann", 0, gv_p1_USER, PointFromId(2446));
    gv_cINEMATICSWANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusCommando", 0, gv_p1_USER, PointFromId(2447));
    gv_cINEMATICTYCHUS = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Marine") || (UnitGetType(UnitGroupLoopCurrent()) == "Medic"))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(UnitGroupLoopCurrent()), 0, gv_p1_USER, RegionRandomPoint(RegionFromId(129)), PointFromId(2182));
            UnitGroupAdd(gv_cinematicReinforcements, UnitLastCreated());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    gf_CinematicDeployNukeWrapper(gv__1BroodchamberNuke);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TValerian02ARaynor00015", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICRAYNOR, SoundLink("TValerian02ARaynor00015", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2452), 6.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", PointFromId(872));
    gv_cinematicStartHoldout1Ping1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("FlamingBettyPlacementTValerian02A", PointFromId(872));
    gv_cinematicStartHoldout1Ping1a = libNtve_gf_ActorLastCreated();
    Wait(0.4, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", PointFromId(842));
    gv_cinematicStartHoldout1Ping2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("FlamingBettyPlacementTValerian02A", PointFromId(842));
    gv_cinematicStartHoldout1Ping2a = libNtve_gf_ActorLastCreated();
    Wait(0.4, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", PointFromId(379));
    gv_cinematicStartHoldout1Ping3 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("FlamingBettyPlacementTValerian02A", PointFromId(379));
    gv_cinematicStartHoldout1Ping3a = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TValerian02ASwann00016", 0)
    libNtve_gf_MakeUnitFacePoint(gv_cINEMATICSWANN, UnitGetPosition(gv_cINEMATICRAYNOR), 0.0);
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICSWANN, SoundLink("TValerian02ASwann00016", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(2.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout1Cinematic_Init () {
    gt_CinematicStartHoldout1Cinematic = TriggerCreate("gt_CinematicStartHoldout1Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 1 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout1CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout1CinematicEnd_Init () {
    gt_CinematicStartHoldout1CinematicEnd = TriggerCreate("gt_CinematicStartHoldout1CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 1 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout1Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_chosenUnit;
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_chosenUnit = null;
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping1);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping1a);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping2);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping2a);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping3);
    libNtve_gf_KillModel(gv_cinematicStartHoldout1Ping3a);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", PointFromId(872));
    gv_cinematicStartHoldout1Ping1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("FlamingBettyPlacementTValerian02A", PointFromId(872));
    gv_cinematicStartHoldout1Ping1a = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", PointFromId(842));
    gv_cinematicStartHoldout1Ping2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("FlamingBettyPlacementTValerian02A", PointFromId(842));
    gv_cinematicStartHoldout1Ping2a = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", PointFromId(379));
    gv_cinematicStartHoldout1Ping3 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("FlamingBettyPlacementTValerian02A", PointFromId(379));
    gv_cinematicStartHoldout1Ping3a = libNtve_gf_ActorLastCreated();
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(gv__1BroodchamberNuke, true);
    libNtve_gf_MakeUnitInvulnerable(gv__1BroodchamberNuke, false);
    UnitSetOwner(gv__1BroodchamberNuke, gv_p1_USER, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv__1BroodchamberNuke), c_animNameDefault, "Stand Work", c_animFlagPlayForever, 0.0);
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Incapacitated", 1);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupRemove Unpowered");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "UIStatusFlagSet");
        ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HeroIncap"), "Destroy");
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "IncapStandUp", 1);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicZergStrays);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_ResetHeroCooldowns();
    UnitGroupLoopBegin(UnitGroup("FlamingBetty", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicActors);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPosition(gv_tHEONERAYNOR, PointFromId(2445), false);
    UnitSetPosition(gv_tHEONESTETMAN, PointFromId(2448), false);
    UnitSetPosition(gv_tHEONESWANN, PointFromId(2446), false);
    UnitSetPosition(gv_tHEONETYCHUS, PointFromId(2447), false);
    UnitGroupLoopBegin(gv_nonHeroicDudes);
    while (!UnitGroupLoopDone()) {
        UnitSetPosition(UnitGroupLoopCurrent(), PointFromId(2449), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    CameraRestore(gv_p1_USER, 0.0, -1, 10);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    UnitGroupClear(gv_cinematicHiddenUnitGroup);
    gv_inCinematic = false;
    RegionPlayableMapSet(RegionFromId(127));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(2456), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt__1BroodchamberTriggerHoldoutStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout1Cleanup_Init () {
    gt_CinematicStartHoldout1Cleanup = TriggerCreate("gt_CinematicStartHoldout1Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_CinematicFinishedHoldout1Setup, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout1Cinematic, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout1CinematicEnd, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout1Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout1Q_Init () {
    gt_CinematicFinishedHoldout1Q = TriggerCreate("gt_CinematicFinishedHoldout1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 1 Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout1Setup_Func (bool testConds, bool runActions) {
    unitgroup auto3907877C_g;
    int auto3907877C_u;

    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TimerWindowDestroy(gv_holdoutTimerWindow);
    PingDestroy(gv__1RescueDominionPing);
    RegionPlayableMapSet(RegionEntireMap());
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, 0);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    TriggerExecute(gt__1CallforHelpSNUFFED, true, false);
    UnitGroupLoopBegin(gv__1RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto3907877C_g = gv_cinematicHiddenUnitGroup;
    auto3907877C_u = 1;
    while (auto3907877C_u <= UnitGroupCount(auto3907877C_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(auto3907877C_g, auto3907877C_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_MakeUnitInvulnerable(lv_chosenUnit, true);
        if (lv_chosenUnit == UnitGroupUnit(auto3907877C_g, auto3907877C_u)) {
            auto3907877C_u = auto3907877C_u + 1;
        }
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetOwner(gv__1BroodchamberNuke, gv_p1_USER, true);
    libNtve_gf_ShowHideUnit(gv__1BroodchamberNuke, true);
    libNtve_gf_ChangeUnitDamage(gv__1BroodchamberNuke, 0, 1);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv__1BroodchamberNuke), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_MakeUnitInvulnerable(gv__1BroodchamberNuke, false);
    TriggerEnable(gt_CinematicFinishedHoldout1CinematicRunout, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout1Setup_Init () {
    gt_CinematicFinishedHoldout1Setup = TriggerCreate("gt_CinematicFinishedHoldout1Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 1 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout1Cinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2184), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2185), 15.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorCommando", 0, gv_p1_USER, PointFromId(2173));
    UnitBehaviorRemove(UnitLastCreated(), "RaynorRadar", 1);
    gv_cINEMATICRAYNOR = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Stetmann", 0, gv_p1_USER, PointFromId(2176));
    gv_cINEMATICSTETTMANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swann", 0, gv_p1_USER, PointFromId(2175));
    gv_cINEMATICSWANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusCommando", 0, gv_p1_USER, PointFromId(2174));
    gv_cINEMATICTYCHUS = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(364)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(364)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(364)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(364)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbomination", 0, gv_p2_ZERG, PointFromId(2207));
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(364)), c_orderQueueReplace);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 200.0);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_p2_ZERG, PointFromId(2209));
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, 12.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(364)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Marine") || (UnitGetType(UnitGroupLoopCurrent()) == "Medic"))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(UnitGroupLoopCurrent()), 0, gv_p1_USER, RegionRandomPoint(RegionFromId(131)), PointFromId(364));
            UnitGroupAdd(gv_cinematicReinforcements, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(364)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TValerian02ARaynor00053", 0)
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICRAYNOR, SoundLink("TValerian02ARaynor00053", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(0.25, c_timeGame);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("RaynorSnipe", 0), PointFromId(2186)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(364)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(364)), c_orderQueueReplace);
    Wait(1.7, c_timeGame);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(364)), c_orderQueueReplace);
    Wait(0.9, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Roach", 0, gv_p2_ZERG, PointFromId(2215));
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__1BroodchamberNuke), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(3, "Hydralisk", 0, gv_p2_ZERG, PointFromId(2216));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__1BroodchamberNuke), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(6, "Zergling", 0, gv_p2_ZERG, PointFromId(2217));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__1BroodchamberNuke), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv__1BroodchamberNuke), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(406), 0.0, -1, 10, true);
    SoundPlay(SoundLink("Reaper_D8ChargeAttackImpact", 2), PlayerGroupAll(), 300.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerExecute(gt_CinematicCameraShakeNuke, true, false);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2183), 18.0, -1, 10, true);
    UnitKill(gv__1BroodchamberNuke);
    gv_cinematicFissureDoodad = DoodadFromId(337);
    TriggerExecute(gt_CinematicCameraShakeNuke2, true, false);
    PlayerCreateEffectPoint(gv_p1_USER, "NukeDamage", PointFromId(2182));
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(PointFromId(2182), 14.0), "Signal DoodadDeath");
    Wait(3.0, c_timeGame);
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 200.0, 0.0);
    Wait(2.5, c_timeGame);
    // Transmission - SoundLink("TValerian02ARaynor00054", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ARaynor00054", 0), c_transmissionDurationAdd, 0.0, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout1Cinematic_Init () {
    gt_CinematicFinishedHoldout1Cinematic = TriggerCreate("gt_CinematicFinishedHoldout1Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 1 Cinematic Runout
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout1CinematicRunout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == true))) {
            return false;
        }

        if (!(((UnitGroupHasUnit(gv_cinematicActors, EventUnit()) == true) || (UnitGroupHasUnit(gv_cinematicReinforcements, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout1CinematicRunout_Init () {
    gt_CinematicFinishedHoldout1CinematicRunout = TriggerCreate("gt_CinematicFinishedHoldout1CinematicRunout_Func");
    TriggerEnable(gt_CinematicFinishedHoldout1CinematicRunout, false);
    TriggerAddEventUnitRangePoint(gt_CinematicFinishedHoldout1CinematicRunout, null, PointFromId(364), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 1 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout1CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout1CinematicEnd_Init () {
    gt_CinematicFinishedHoldout1CinematicEnd = TriggerCreate("gt_CinematicFinishedHoldout1CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 1 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout1Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_CinematicFinishedHoldout1CinematicRunout, false);
    TriggerExecute(gt_EnableDamageDrivenTriggers, true, false);
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 0);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_ResetHeroCooldowns();
    UnitGroupLoopBegin(UnitGroup("FlamingBetty", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicActors);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitRemove(gv__1BroodchamberNuke);
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    CameraShakeStop(gv_p1_USER);
    CameraRestore(gv_p1_USER, 0.0, -1, 10);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    UnitGroupClear(gv_cinematicHiddenUnitGroup);
    gv_inCinematic = false;
    TriggerExecute(gt__2InitBroodchamber, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout1Cleanup_Init () {
    gt_CinematicFinishedHoldout1Cleanup = TriggerCreate("gt_CinematicFinishedHoldout1Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_CinematicStartHoldout2Setup, true, true);
    TriggerExecute(gt_CinematicStartHoldout2Cinematic, true, true);
    TriggerExecute(gt_CinematicStartHoldout2CinematicEnd, true, true);
    TriggerExecute(gt_CinematicStartHoldout2Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout2Q_Init () {
    gt_CinematicStartHoldout2Q = TriggerCreate("gt_CinematicStartHoldout2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 2 Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout2Setup_Func (bool testConds, bool runActions) {
    unitgroup auto29B29729_g;
    int auto29B29729_u;
    unitgroup autoA88026E3_g;
    int autoA88026E3_u;

    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    RegionPlayableMapSet(RegionEntireMap());
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, 0);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(gv__2NydusKillTeamSwarmlings);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv__2NydusKillTeam);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ZERG, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_DisableDamageDrivenTriggers, true, false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto29B29729_g = gv_cinematicHiddenUnitGroup;
    auto29B29729_u = 1;
    while (auto29B29729_u <= UnitGroupCount(auto29B29729_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(auto29B29729_g, auto29B29729_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_MakeUnitInvulnerable(lv_chosenUnit, true);
        if (lv_chosenUnit == UnitGroupUnit(auto29B29729_g, auto29B29729_u)) {
            auto29B29729_u = auto29B29729_u + 1;
        }
    }
    gv_cinematicZergStrays = UnitGroup(null, gv_p2_ZERG, RegionFromId(13), UnitFilter(0, 0, 0, 0), 0);
    autoA88026E3_g = gv_cinematicZergStrays;
    autoA88026E3_u = 1;
    while (autoA88026E3_u <= UnitGroupCount(autoA88026E3_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(autoA88026E3_g, autoA88026E3_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_MakeUnitInvulnerable(lv_chosenUnit, true);
        if (lv_chosenUnit == UnitGroupUnit(autoA88026E3_g, autoA88026E3_u)) {
            autoA88026E3_u = autoA88026E3_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout2Setup_Init () {
    gt_CinematicStartHoldout2Setup = TriggerCreate("gt_CinematicStartHoldout2Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 2 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout2Cinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2454), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2455), 15.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorCommando", 0, gv_p1_USER, PointFromId(2458));
    UnitBehaviorRemove(UnitLastCreated(), "RaynorRadar", 1);
    gv_cINEMATICRAYNOR = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Stetmann", 0, gv_p1_USER, PointFromId(2461));
    gv_cINEMATICSTETTMANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swann", 0, gv_p1_USER, PointFromId(2459));
    gv_cINEMATICSWANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusCommando", 0, gv_p1_USER, PointFromId(2460));
    gv_cINEMATICTYCHUS = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Marine") || (UnitGetType(UnitGroupLoopCurrent()) == "Medic") || (UnitGetType(UnitGroupLoopCurrent()) == "Firebat"))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(UnitGroupLoopCurrent()), 0, gv_p1_USER, RegionRandomPoint(RegionFromId(132)), PointFromId(22));
            UnitGroupAdd(gv_cinematicReinforcements, UnitLastCreated());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicEventC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TValerian02AStetmann00084", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICSTETTMANN, SoundLink("TValerian02AStetmann00084", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ATychus00085", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICTYCHUS, SoundLink("TValerian02ATychus00085", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02AStetmann00086", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICSTETTMANN, SoundLink("TValerian02AStetmann00086", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ARaynor00087", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICRAYNOR, SoundLink("TValerian02ARaynor00087", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(2.0, c_timeGame);
    gf_CinematicDeployNukeWrapper(gv__2BroodchamberNuke);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TValerian02ARaynor00035", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00035", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(2.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout2Cinematic_Init () {
    gt_CinematicStartHoldout2Cinematic = TriggerCreate("gt_CinematicStartHoldout2Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 2 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout2CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout2CinematicEnd_Init () {
    gt_CinematicStartHoldout2CinematicEnd = TriggerCreate("gt_CinematicStartHoldout2CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 2 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout2Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(gv__2BroodchamberNuke, true);
    libNtve_gf_MakeUnitInvulnerable(gv__2BroodchamberNuke, false);
    UnitSetOwner(gv__2BroodchamberNuke, gv_p1_USER, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv__2BroodchamberNuke), c_animNameDefault, "Stand Work", c_animFlagPlayForever, 0.0);
    UnitGroupLoopBegin(gv_cinematicActors);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Incapacitated", 1);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupRemove Unpowered");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "UIStatusFlagSet");
        ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HeroIncap"), "Destroy");
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "IncapStandUp", 1);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicZergStrays);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_ResetHeroCooldowns();
    UnitGroupLoopBegin(UnitGroup("FlamingBetty", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPosition(gv_tHEONERAYNOR, PointFromId(2458), false);
    UnitSetPosition(gv_tHEONESTETMAN, PointFromId(2461), false);
    UnitSetPosition(gv_tHEONESWANN, PointFromId(2459), false);
    UnitSetPosition(gv_tHEONETYCHUS, PointFromId(2460), false);
    UnitGroupLoopBegin(gv_nonHeroicDudes);
    while (!UnitGroupLoopDone()) {
        UnitSetPosition(UnitGroupLoopCurrent(), PointFromId(2462), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    CameraRestore(gv_p1_USER, 0.0, -1, 10);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    UnitGroupClear(gv_cinematicHiddenUnitGroup);
    gv_inCinematic = false;
    RegionPlayableMapSet(RegionFromId(126));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(2457), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt__2BroodchamberTriggerHoldoutStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout2Cleanup_Init () {
    gt_CinematicStartHoldout2Cleanup = TriggerCreate("gt_CinematicStartHoldout2Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_MidBroodChamber2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_CinematicFinishedHoldout2Setup, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout2Cinematic, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout2CinematicEnd, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout2Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBroodChamber2Q_Init () {
    gt_MidBroodChamber2Q = TriggerCreate("gt_MidBroodChamber2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 2 Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout2Setup_Func (bool testConds, bool runActions) {
    unitgroup auto99161F1E_g;
    int auto99161F1E_u;

    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TimerWindowDestroy(gv_holdoutTimerWindow);
    PingDestroy(gv__2RescueDominionPing);
    RegionPlayableMapSet(RegionEntireMap());
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, 0);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("BonesTossGrenade", 0), true);
    TriggerExecute(gt__2CallforHelpSNUFFED, true, false);
    UnitGroupLoopBegin(gv__2RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto99161F1E_g = gv_cinematicHiddenUnitGroup;
    auto99161F1E_u = 1;
    while (auto99161F1E_u <= UnitGroupCount(auto99161F1E_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(auto99161F1E_g, auto99161F1E_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_MakeUnitInvulnerable(lv_chosenUnit, true);
        if (lv_chosenUnit == UnitGroupUnit(auto99161F1E_g, auto99161F1E_u)) {
            auto99161F1E_u = auto99161F1E_u + 1;
        }
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((RegionContainsPoint(RegionFromId(76), UnitGetPosition(UnitGroupLoopCurrent())) == false)) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetOwner(gv__2BroodchamberNuke, gv_p1_USER, true);
    libNtve_gf_ShowHideUnit(gv__2BroodchamberNuke, true);
    libNtve_gf_ChangeUnitDamage(gv__2BroodchamberNuke, 0, 1);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv__2BroodchamberNuke), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_MakeUnitInvulnerable(gv__2BroodchamberNuke, false);
    TriggerEnable(gt_CinematicFinishedHoldout2CinematicRunout, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout2Setup_Init () {
    gt_CinematicFinishedHoldout2Setup = TriggerCreate("gt_CinematicFinishedHoldout2Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 2 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout2Cinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2224), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2225), 15.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorCommando", 0, gv_p1_USER, PointFromId(2177));
    UnitBehaviorRemove(UnitLastCreated(), "RaynorRadar", 1);
    gv_cINEMATICRAYNOR = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Stetmann", 0, gv_p1_USER, PointFromId(2180));
    gv_cINEMATICSTETTMANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swann", 0, gv_p1_USER, PointFromId(2179));
    gv_cINEMATICSWANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusCommando", 0, gv_p1_USER, PointFromId(2178));
    gv_cINEMATICTYCHUS = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Marine") || (UnitGetType(UnitGroupLoopCurrent()) == "Medic") || (UnitGetType(UnitGroupLoopCurrent()) == "Firebat"))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(UnitGroupLoopCurrent()), 0, gv_p1_USER, RegionRandomPoint(RegionFromId(133)), PointFromId(2223));
            UnitGroupAdd(gv_cinematicReinforcements, UnitLastCreated());
            libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 0, 2);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 5.0, AngleBetweenPoints(UnitGetPosition(UnitLastCreated()), PointFromId(2223)))), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1840)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1842)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1843)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1841)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(8, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(1848));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1849)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(7, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(1850));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1849)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(2, "InfestedTerranCampaign", 0, gv_p2_ZERG, PointFromId(1850));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1849)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(1859));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicEventD", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    Wait(5.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2268), 10.0, -1, 10, true);
    // Transmission - SoundLink("TValerian02ATychus00080", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ATychus00080", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("BonesTossGrenade", 0), PointFromId(410)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2223)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2223)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2223)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2223)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2223)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    Wait(0.9, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p2_ZERG, PointFromId(2286));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__2BroodchamberNuke), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(2, "Baneling", 0, gv_p2_ZERG, PointFromId(2285));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__2BroodchamberNuke), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(20, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(1845));
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_RandomPercent() >= 50.0)) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(1.4, 1.9)));
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__2BroodchamberNuke), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(4, "InfestedTerranCampaign", 0, gv_p2_ZERG, PointFromId(1845));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__2BroodchamberNuke), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(40, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(1846));
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_RandomPercent() >= 50.0)) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(1.4, 1.9)));
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__2BroodchamberNuke), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(20, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(1847));
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_RandomPercent() >= 50.0)) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(1.4, 1.9)));
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__2BroodchamberNuke), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(4, "InfestedTerranCampaign", 0, gv_p2_ZERG, PointFromId(1847));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicActors);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv__2BroodchamberNuke), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2240), 0.0, -1, 10, true);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("Reaper_D8ChargeAttackImpact", 2), PlayerGroupAll(), 300.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerExecute(gt_CinematicCameraShakeNuke, true, false);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2241), 10.0, -1, 10, true);
    UnitKill(gv__2BroodchamberNuke);
    gv_cinematicFissureDoodad = DoodadFromId(323);
    TriggerExecute(gt_CinematicCameraShakeNuke2, true, false);
    PlayerCreateEffectPoint(gv_p1_USER, "NukeDamage", PointFromId(22));
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(PointFromId(22), 14.0), "Signal DoodadDeath");
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 200.0, 0.0);
    Wait(2.5, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(409), 10.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TValerian02ARaynor00065", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ARaynor00065", 0), c_transmissionDurationAdd, 0.0, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout2Cinematic_Init () {
    gt_CinematicFinishedHoldout2Cinematic = TriggerCreate("gt_CinematicFinishedHoldout2Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 2 Cinematic Runout
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout2CinematicRunout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == true))) {
            return false;
        }

        if (!(((UnitGroupHasUnit(gv_cinematicActors, EventUnit()) == true) || (UnitGroupHasUnit(gv_cinematicReinforcements, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout2CinematicRunout_Init () {
    gt_CinematicFinishedHoldout2CinematicRunout = TriggerCreate("gt_CinematicFinishedHoldout2CinematicRunout_Func");
    TriggerEnable(gt_CinematicFinishedHoldout2CinematicRunout, false);
    TriggerAddEventUnitRangePoint(gt_CinematicFinishedHoldout2CinematicRunout, null, PointFromId(2223), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 2 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout2CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout2CinematicEnd_Init () {
    gt_CinematicFinishedHoldout2CinematicEnd = TriggerCreate("gt_CinematicFinishedHoldout2CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 2 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout2Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_CinematicFinishedHoldout2CinematicRunout, false);
    TriggerExecute(gt_EnableDamageDrivenTriggers, true, false);
    UnitGroupLoopBegin(gv_cinematicActors);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_ResetHeroCooldowns();
    UnitGroupLoopBegin(UnitGroup("FlamingBetty", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitRemove(gv__2BroodchamberNuke);
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    CameraShakeStop(gv_p1_USER);
    CameraRestore(gv_p1_USER, 0.0, -1, 10);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    gv_inCinematic = false;
    UnitGroupClear(gv_cinematicHiddenUnitGroup);
    TriggerExecute(gt__3InitBroodchamber, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout2Cleanup_Init () {
    gt_CinematicFinishedHoldout2Cleanup = TriggerCreate("gt_CinematicFinishedHoldout2Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout3Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_CinematicStartHoldout3Setup, true, true);
    TriggerExecute(gt_CinematicStartHoldout3Cinematic, true, true);
    TriggerExecute(gt_CinematicStartHoldout3CinematicEnd, true, true);
    TriggerExecute(gt_CinematicStartHoldout3Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout3Q_Init () {
    gt_CinematicStartHoldout3Q = TriggerCreate("gt_CinematicStartHoldout3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 3 Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout3Setup_Func (bool testConds, bool runActions) {
    unitgroup autoD59ACE39_g;
    int autoD59ACE39_u;

    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, 0);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TriggerEnable(gt_CinematicStartHoldout3EggsPopped, true);
    TriggerExecute(gt_DisableDamageDrivenTriggers, true, false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoD59ACE39_g = gv_cinematicHiddenUnitGroup;
    autoD59ACE39_u = 1;
    while (autoD59ACE39_u <= UnitGroupCount(autoD59ACE39_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(autoD59ACE39_g, autoD59ACE39_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        if (lv_chosenUnit == UnitGroupUnit(autoD59ACE39_g, autoD59ACE39_u)) {
            autoD59ACE39_u = autoD59ACE39_u + 1;
        }
    }
    UnitGroupLoopBegin(UnitGroup("Feederling", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt__3CallforHelpSNUFFED, true, false);
    UnitGroupLoopBegin(gv__3RescuableDominionGroup);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitRemove(gv_tHEONEOMEGALISK);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((RegionContainsPoint(RegionFromId(128), UnitGetPosition(UnitGroupLoopCurrent())) == false)) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout3Setup_Init () {
    gt_CinematicStartHoldout3Setup = TriggerCreate("gt_CinematicStartHoldout3Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 3 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout3Cinematic_Func (bool testConds, bool runActions) {
    int auto99299595_n;
    int auto99299595_i;
    int autoFB1A51E8_n;
    int autoFB1A51E8_i;
    int auto7CDDB223_n;
    int auto7CDDB223_i;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorCommando", 0, gv_p1_USER, PointFromId(1040));
    UnitBehaviorRemove(UnitLastCreated(), "RaynorRadar", 1);
    gv_cINEMATICRAYNOR = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Stetmann", 0, gv_p1_USER, PointFromId(1159));
    gv_cINEMATICSTETTMANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swann", 0, gv_p1_USER, PointFromId(1160));
    gv_cINEMATICSWANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusCommando", 0, gv_p1_USER, PointFromId(1041));
    gv_cINEMATICTYCHUS = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Marine") || (UnitGetType(UnitGroupLoopCurrent()) == "Medic") || (UnitGetType(UnitGroupLoopCurrent()) == "Firebat"))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(UnitGroupLoopCurrent()), 0, gv_p1_USER, RegionRandomPoint(RegionFromId(134)), PointFromId(2222));
            UnitGroupAdd(gv_cinematicReinforcements, UnitLastCreated());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    auto99299595_n = 12;
    auto99299595_i = 1;
    while (auto99299595_i <= auto99299595_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(87), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 4.0);
        auto99299595_i = auto99299595_i + 1;
    }
    autoFB1A51E8_n = 12;
    autoFB1A51E8_i = 1;
    while (autoFB1A51E8_i <= autoFB1A51E8_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(88), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 5.0);
        autoFB1A51E8_i = autoFB1A51E8_i + 1;
    }
    auto7CDDB223_n = 12;
    auto7CDDB223_i = 1;
    while (auto7CDDB223_i <= auto7CDDB223_n) {
        lv_unit = UnitGroupRandomUnit(UnitGroup("Egg", c_playerAny, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "Feederling", 0, gv_p2_ZERG, UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetCustomValue(UnitLastCreated(), 0, 6.0);
        auto7CDDB223_i = auto7CDDB223_i + 1;
    }
    libNtve_gf_PauseUnit(gv_tHEONEBROODMOTHER, false);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(179), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(215), 5.5, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicEventE", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(6.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(922), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(389), 8.0, -1, 10, true);
    gf_CinematicDeployNukeWrapper(gv__3BroodchamberNuke);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TValerian02ARaynor00041", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICRAYNOR, SoundLink("TValerian02ARaynor00041", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ASwann00070", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICSWANN, SoundLink("TValerian02ASwann00070", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    SoundPlay(SoundLink("QueenReady", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(98), 3.0, -1, 10, true);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 3.0);
    Wait(3.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    // Transmission - SoundLink("TValerian02ARaynor00072", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICRAYNOR, SoundLink("TValerian02ARaynor00072", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_cINEMATICSTETTMANN), 1.0))), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.0))), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.2, c_timeGame);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_cINEMATICSWANN), 1.0))), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_cINEMATICRAYNOR), 1.0))), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_cINEMATICTYCHUS), 1.0))), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.0))), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 1.5);
    SoundPlay(SoundLink("QueenYes", 3), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_cINEMATICSWANN), 1.0))), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.0))), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.6, c_timeGame);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_cINEMATICSTETTMANN), 1.0))), c_orderQueueReplace);
    Wait(0.4, c_timeGame);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_cINEMATICTYCHUS), 1.0))), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_cINEMATICRAYNOR), 1.0))), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_tHEONEBROODMOTHER)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_tHEONEBROODMOTHER)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_tHEONEBROODMOTHER)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_tHEONEBROODMOTHER)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_tHEONEBROODMOTHER)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("Zerg_UnburrowLarge", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("QueenReady", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEBROODMOTHER), c_animNameDefault, "Spell", 0, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1161), 0.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("QueenWhat", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1000), 7.0, -1, 10, true);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), UnitFromId(112)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), UnitFromId(108)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), UnitFromId(1178)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), UnitFromId(1175)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), UnitFromId(1174)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), UnitFromId(296)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), UnitFromId(1173)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingUnit(AbilityCommand("EggPop", 0), UnitFromId(299)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(162)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(0);
    // Transmission - SoundLink("TValerian02ATychus00042", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICTYCHUS, SoundLink("TValerian02ATychus00042", 0), c_transmissionDurationAdd, 0.0, true);
    SoundPlay(SoundLink("QueenYes", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TValerian02ARaynor00040", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICRAYNOR, SoundLink("TValerian02ARaynor00040", 0), c_transmissionDurationAdd, 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout3Cinematic_Init () {
    gt_CinematicStartHoldout3Cinematic = TriggerCreate("gt_CinematicStartHoldout3Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 3 Eggs Popped
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout3EggsPopped_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Egg"))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() == gv_tHEONEBROODMOTHER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf__3EggSpawnedMobs(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout3EggsPopped_Init () {
    gt_CinematicStartHoldout3EggsPopped = TriggerCreate("gt_CinematicStartHoldout3EggsPopped_Func");
    TriggerEnable(gt_CinematicStartHoldout3EggsPopped, false);
    TriggerAddEventUnitDamaged(gt_CinematicStartHoldout3EggsPopped, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 3 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout3CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fadeDuration = 0.5;
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout3CinematicEnd_Init () {
    gt_CinematicStartHoldout3CinematicEnd = TriggerCreate("gt_CinematicStartHoldout3CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Start Holdout 3 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicStartHoldout3Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_tHEONERAYNOR, "RefSet ::global.RaynorCommando ::Self");
    UnitSetPosition(gv_tHEONERAYNOR, PointFromId(1040), false);
    UnitSetPosition(gv_tHEONESWANN, PointFromId(1160), false);
    UnitSetPosition(gv_tHEONESTETMAN, PointFromId(1159), false);
    UnitSetPosition(gv_tHEONETYCHUS, PointFromId(1041), false);
    libNtve_gf_ShowHideUnit(gv__3BroodchamberNuke, true);
    UnitSetOwner(gv__3BroodchamberNuke, gv_p1_USER, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv__3BroodchamberNuke), c_animNameDefault, "Stand Work", c_animFlagPlayForever, 0.0);
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_ResetHeroCooldowns();
    UnitGroupLoopBegin(UnitGroup("FlamingBetty", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    TriggerStop(gt_CinematicStartHoldout3EggsPopped);
    TriggerEnable(gt_CinematicStartHoldout3EggsPopped, false);
    TriggerEnable(gt__3EggPoppedViaDamageZergQueenOnly, true);
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Swarmling", c_playerAny, RegionFromId(103), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedCivilian", c_playerAny, RegionFromId(103), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Zergling", c_playerAny, RegionFromId(103), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedTerranCampaign", c_playerAny, RegionFromId(103), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicActors);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitRemove(UnitFromId(1540));
    UnitRemove(UnitFromId(1537));
    UnitSetPosition(gv_tHEONEBROODMOTHER, PointFromId(162), false);
    UnitSetFacing(gv_tHEONEBROODMOTHER, PointGetFacing(PointFromId(162)), 0.0);
    UnitIssueOrder(gv_tHEONEBROODMOTHER, Order(AbilityCommand("BurrowQueenUp", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(400));
    gf_ActivateAI(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swarmling", 0, gv_p2_ZERG, PointFromId(1207));
    gf_ActivateAI(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(1005));
    gf_ActivateAI(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedTerranCampaign", 0, gv_p2_ZERG, PointFromId(1032));
    gf_ActivateAI(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(1006));
    gf_ActivateAI(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swarmling", 0, gv_p2_ZERG, PointFromId(1217));
    gf_ActivateAI(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p2_ZERG, PointFromId(1009));
    gf_ActivateAI(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swarmling", 0, gv_p2_ZERG, PointFromId(1208));
    gf_ActivateAI(UnitLastCreated());
    UnitGroupLoopBegin(gv_nonHeroicDudes);
    while (!UnitGroupLoopDone()) {
        UnitSetPosition(UnitGroupLoopCurrent(), PointFromId(85), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 0);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Incapacitated", 1);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupRemove Unpowered");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "UIStatusFlagSet");
        ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HeroIncap"), "Destroy");
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "IncapStandUp", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorAdd(gv_tHEONERAYNOR, "RaynorRadar", gv_tHEONERAYNOR, 1);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    UnitGroupSelect(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_p1_USER, true);
    UIAlertClear(gv_p1_USER);
    RegionPlayableMapSet(RegionFromId(128));
    CameraRestore(gv_p1_USER, 0.0, -1, 10);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(86), 1.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    lv_fadeDuration = 0.5;
    UnitGroupClear(gv_cinematicHiddenUnitGroup);
    gv_inCinematic = false;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt__3QueenAIPhase1, true, false);
    TriggerEnable(gt__3QueenKill, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicStartHoldout3Cleanup_Init () {
    gt_CinematicStartHoldout3Cleanup = TriggerCreate("gt_CinematicStartHoldout3Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout3Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_CinematicFinishedHoldout3Setup, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout3Cinematic, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout3CinematicEnd, true, true);
    TriggerExecute(gt_CinematicFinishedHoldout3Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout3Q_Init () {
    gt_CinematicFinishedHoldout3Q = TriggerCreate("gt_CinematicFinishedHoldout3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 3 Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout3Setup_Func (bool testConds, bool runActions) {
    unitgroup autoC954446F_g;
    int autoC954446F_u;

    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TimerWindowDestroy(gv_holdoutTimerWindow);
    PingDestroy(gv__3RescueDominionPing);
    RegionPlayableMapSet(RegionEntireMap());
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, 0);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    UnitPauseAll(true);
    TriggerEnable(gt__3OmegaliskTripViaMovement, false);
    gv_cinematicHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoC954446F_g = gv_cinematicHiddenUnitGroup;
    autoC954446F_u = 1;
    while (autoC954446F_u <= UnitGroupCount(autoC954446F_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(autoC954446F_g, autoC954446F_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_ChangeUnitDamage(lv_chosenUnit, 0, 1);
        if (lv_chosenUnit == UnitGroupUnit(autoC954446F_g, autoC954446F_u)) {
            autoC954446F_u = autoC954446F_u + 1;
        }
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetOwner(gv__3BroodchamberNuke, gv_p1_USER, true);
    libNtve_gf_ShowHideUnit(gv__3BroodchamberNuke, true);
    libNtve_gf_ChangeUnitDamage(gv__3BroodchamberNuke, 0, 1);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv__3BroodchamberNuke), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_MakeUnitInvulnerable(gv__3BroodchamberNuke, false);
    TriggerEnable(gt_CinematicFinishedHoldout3CinematicRunout, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout3Setup_Init () {
    gt_CinematicFinishedHoldout3Setup = TriggerCreate("gt_CinematicFinishedHoldout3Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 3 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout3Cinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadQueen;
    int lv_pHTextTag;

    // Variable Initialization
    lv_deadQueen = null;
    lv_pHTextTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2251), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2252), 10.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorCommando", 0, gv_p1_USER, PointFromId(2218));
    UnitBehaviorRemove(UnitLastCreated(), "RaynorRadar", 1);
    gv_cINEMATICRAYNOR = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Stetmann", 0, gv_p1_USER, PointFromId(2221));
    gv_cINEMATICSTETTMANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Swann", 0, gv_p1_USER, PointFromId(2220));
    gv_cINEMATICSWANN = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusCommando", 0, gv_p1_USER, PointFromId(2219));
    gv_cINEMATICTYCHUS = UnitLastCreated();
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Marine") || (UnitGetType(UnitGroupLoopCurrent()) == "Medic") || (UnitGetType(UnitGroupLoopCurrent()) == "Firebat"))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(UnitGroupLoopCurrent()), 0, gv_p1_USER, RegionRandomPoint(RegionFromId(135)), PointFromId(2222));
            UnitGroupAdd(gv_cinematicReinforcements, UnitLastCreated());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateModelAtPoint("QueenDead", PointFromId(2242));
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Dead", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicEventF", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TValerian02AStetmann00073", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02AStetmann00073", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2288), 0.0, -1, 10, true);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p2_ZERG, PointFromId(2253));
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    gv_cinematicNydusWorm = UnitLastCreated();
    TriggerExecute(gt_CinematicFinishedHoldout3NydusAI, true, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("NydusWorm_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2289), 0.0, -1, 10, true);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p2_ZERG, PointFromId(2254));
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    gv_cinematicNydusWorm = UnitLastCreated();
    TriggerExecute(gt_CinematicFinishedHoldout3NydusAI, true, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("NydusWorm_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2290), 0.0, -1, 10, true);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p2_ZERG, PointFromId(2255));
    UnitGroupAdd(gv_cinematicActors, UnitLastCreated());
    gv_cinematicNydusWorm = UnitLastCreated();
    TriggerExecute(gt_CinematicFinishedHoldout3NydusAI, true, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("NydusWorm_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    // Transmission - SoundLink("TValerian02ARaynor00074", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ARaynor00074", 0), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2291), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2292), 10.0, -1, 10, true);
    // Transmission - SoundLink("TValerian02ASwann00075", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian02ASwann00075", 0), c_transmissionDurationAdd, 0.0, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("DutchPlaceTurret", 0), PointFromId(2274)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2291), 10.0, -1, 10, true);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1426)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1426)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1426)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1426)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1426)), c_orderQueueReplace);
    Wait(3.5, c_timeGame);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Reaper_D8ChargeAttackImpact", 2), PlayerGroupAll(), 300.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TextTagDestroy(lv_pHTextTag);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2297), 10.0, -1, 10, true);
    TriggerExecute(gt_CinematicCameraShakeNuke, true, false);
    UnitKill(gv__3BroodchamberNuke);
    gv_cinematicFissureDoodad = DoodadFromId(1237);
    TriggerExecute(gt_CinematicCameraShakeNuke2, true, false);
    PlayerCreateEffectPoint(gv_p1_USER, "NukeDamage", PointFromId(2222));
    UnitKill(lv_deadQueen);
    UnitKill(UnitGroupUnit(UnitGroup("FlamingBetty", c_playerAny, RegionCircle(PointFromId(2274), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(PointFromId(2222), 14.0), "Signal DoodadDeath");
    Wait(7.4, c_timeGame);
    WaterSetState("Template 2|[Default]", 0.0, c_wtcLinear);
    WaterSetState("Template 2|Cine4 Lava", 90.0, c_wtcLinear);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.5, 100.0, 4.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 200.0, 0.0);
    UnitSetPosition(gv_cINEMATICRAYNOR, PointFromId(2303), false);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2317)), c_orderQueueReplace);
    UnitSetPosition(gv_cINEMATICSTETTMANN, PointFromId(2305), false);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2314)), c_orderQueueReplace);
    UnitSetPosition(gv_cINEMATICSWANN, PointFromId(2304), false);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2315)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2313)), c_orderQueueAddToEnd);
    UnitSetPosition(gv_cINEMATICTYCHUS, PointFromId(2302), false);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2316)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(136)), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2313)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2301), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2307), 5.0, -1, 10, true);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 200.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(2463)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    UnitKill(UnitFromId(2470));
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2313)), c_orderQueueReplace);
    // Transmission - SoundLink("TValerian02ATychus00045", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONETYCHUS, SoundLink("TValerian02ATychus00045", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02ARaynor00046", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONERAYNOR, SoundLink("TValerian02ARaynor00046", 0), c_transmissionDurationAdd, 0.0, false);
    TransmissionWait(TransmissionLastSent(), 1.5);
    libNtve_gf_MakeUnitFacePoint(gv_cINEMATICTYCHUS, UnitGetPosition(gv_cINEMATICRAYNOR), 0.5);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2313)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2308), 5.0, -1, 10, true);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.5, 100.0, 7.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 200.0, 0.0);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2313)), c_orderQueueReplace);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(2464)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.75, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(2432)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(2436)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(2433)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(2465)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout3Cinematic_Init () {
    gt_CinematicFinishedHoldout3Cinematic = TriggerCreate("gt_CinematicFinishedHoldout3Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 3 Cinematic Runout
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout3CinematicRunout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == true))) {
            return false;
        }

        if (!(((UnitGroupHasUnit(gv_cinematicActors, EventUnit()) == true) || (UnitGroupHasUnit(gv_cinematicReinforcements, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout3CinematicRunout_Init () {
    gt_CinematicFinishedHoldout3CinematicRunout = TriggerCreate("gt_CinematicFinishedHoldout3CinematicRunout_Func");
    TriggerEnable(gt_CinematicFinishedHoldout3CinematicRunout, false);
    TriggerAddEventUnitRangePoint(gt_CinematicFinishedHoldout3CinematicRunout, null, PointFromId(2313), 1.3, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 3 Nydus AI
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout3NydusAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;

    // Variable Initialization
    lv_nydusWorm = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nydusWorm = gv_cinematicNydusWorm;
    Wait(3.7, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_nydusWorm) == false)) {
            break;
        }
        else {
        }
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_p2_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1425)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1425)), c_orderQueueAddToEnd);
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            UnitGroupAdd(gv_cinematicActors, UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(2.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout3NydusAI_Init () {
    gt_CinematicFinishedHoldout3NydusAI = TriggerCreate("gt_CinematicFinishedHoldout3NydusAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 3 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout3CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout3CinematicEnd_Init () {
    gt_CinematicFinishedHoldout3CinematicEnd = TriggerCreate("gt_CinematicFinishedHoldout3CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Finished Holdout 3 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicFinishedHoldout3Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_CinematicFinishedHoldout3CinematicRunout, false);
    TriggerEnable(gt__3FeederlingMovementAI, false);
    UnitGroupLoopBegin(gv_cinematicHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 0);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_ResetHeroCooldowns();
    UnitGroupLoopBegin(UnitGroup("FlamingBetty", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicActors);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicReinforcements);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    CameraShakeStop(gv_p1_USER);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    UnitGroupClear(gv_cinematicHiddenUnitGroup);
    libNtve_gf_CreateModelAtPoint("QueenDeath", PointFromId(2242));
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Dead", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gv_inCinematic = false;
    TriggerExecute(gt__4InitBroodchamber, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicFinishedHoldout3Cleanup_Init () {
    gt_CinematicFinishedHoldout3Cleanup = TriggerCreate("gt_CinematicFinishedHoldout3Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_CinematicVictorySetup, true, true);
    TriggerExecute(gt_CinematicVictoryCinematic, true, true);
    TriggerExecute(gt_CinematicVictoryCinematicEnd, true, true);
    TriggerExecute(gt_CinematicVictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicVictorySetup_Func (bool testConds, bool runActions) {
    unitgroup auto1526D810_g;
    int auto1526D810_u;

    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    RegionPlayableMapSet(RegionEntireMap());
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    FogSetStartHeight(2.0);
    UnitPauseAll(true);
    gv_cinematicHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto1526D810_g = gv_cinematicHiddenUnitGroup;
    auto1526D810_u = 1;
    while (auto1526D810_u <= UnitGroupCount(auto1526D810_g, c_unitCountAll)) {
        lv_chosenUnit = UnitGroupUnit(auto1526D810_g, auto1526D810_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        if (lv_chosenUnit == UnitGroupUnit(auto1526D810_g, auto1526D810_u)) {
            auto1526D810_u = auto1526D810_u + 1;
        }
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    WaterSetState("Template 1|[Default]", 0.0, c_wtcLinear);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicVictorySetup_Init () {
    gt_CinematicVictorySetup = TriggerCreate("gt_CinematicVictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicVictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(488), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2250), 5.0, -1, 10, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Marine") || (UnitGetType(UnitGroupLoopCurrent()) == "Medic") || (UnitGetType(UnitGroupLoopCurrent()) == "Firebat"))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(UnitGroupLoopCurrent()), 0, gv_p1_USER, RegionRandomPoint(RegionFromId(138)), PointFromId(2644));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2643)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_CinematicVictoryAction, true, false);
    // Transmission - SoundLink("TValerian02ATychus00099", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICTYCHUS, SoundLink("TValerian02ATychus00099", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(4.0, c_timeReal);
    // Transmission - SoundLink("TValerian02ASwann00100", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICSWANN, SoundLink("TValerian02ASwann00100", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian02AStetmann00101", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICSTETTMANN, SoundLink("TValerian02AStetmann00101", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(0.75, c_timeReal);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_cINEMATICSTETTMANN)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_cINEMATICSTETTMANN)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2644)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_cINEMATICRAYNOR)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_cINEMATICRAYNOR)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_cINEMATICRAYNOR)), c_orderQueueReplace);
    // Transmission - SoundLink("TValerian02ARaynor00102", 0)
    libCamp_gf_SendTransmissionCampaign(gv_cINEMATICRAYNOR, SoundLink("TValerian02ARaynor00102", 0), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2643)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2642), 8.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_cINEMATICSTETTMANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2643)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2643)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2645)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2643)), c_orderQueueReplace);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 50.0, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicVictoryCinematic_Init () {
    gt_CinematicVictoryCinematic = TriggerCreate("gt_CinematicVictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Victory Action
//--------------------------------------------------------------------------------------------------
bool gt_CinematicVictoryAction_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Stetmann", 0, gv_p1_USER, PointFromId(2612));
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2323)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2645)), c_orderQueueAddToEnd);
    gv_cINEMATICSTETTMANN = UnitLastCreated();
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Swann", 0, gv_p1_USER, PointFromId(2612));
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2638)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2645)), c_orderQueueAddToEnd);
    gv_cINEMATICSWANN = UnitLastCreated();
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.5, 100.0, 5.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 250.0, 0.0);
    WaterSetState("Template 1|Cinematic Lava", 30.0, c_wtcLinear);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusCommando", 0, gv_p1_USER, PointFromId(2612));
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2639)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2645)), c_orderQueueAddToEnd);
    gv_cINEMATICTYCHUS = UnitLastCreated();
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "RaynorCommando", 0, gv_p1_USER, PointFromId(2612));
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2640)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2645)), c_orderQueueAddToEnd);
    gv_cINEMATICRAYNOR = UnitLastCreated();
    Wait(2.0, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.4, 2.5, 100.0, 6.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 250.0, 0.0);
    WaterSetState("Template 1|Cinematic Lava", 3.0, c_wtcLinear);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1205), 5.0, -1, 10, true);
    Wait(1.75, c_timeGame);
    UnitCreate(1, "NydusWormLavaDeath", 0, gv_p2_ZERG, PointFromId(2646), 270.0);
    Wait(0.85, c_timeGame);
    UnitCreate(1, "NydusWormLavaDeath", 0, gv_p2_ZERG, PointFromId(2656), 270.0);
    Wait(0.4, c_timeGame);
    UnitCreate(1, "NydusWormLavaDeath", 0, gv_p2_ZERG, PointFromId(2657), 270.0);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(gv_cINEMATICTYCHUS, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2644)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICSWANN, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2644)), c_orderQueueReplace);
    UnitIssueOrder(gv_cINEMATICRAYNOR, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2644)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2641), 12.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicVictoryAction_Init () {
    gt_CinematicVictoryAction = TriggerCreate("gt_CinematicVictoryAction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicVictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(gt_CinematicVictoryAction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicVictoryCinematicEnd_Init () {
    gt_CinematicVictoryCinematicEnd = TriggerCreate("gt_CinematicVictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicVictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicVictoryCleanup_Init () {
    gt_CinematicVictoryCleanup = TriggerCreate("gt_CinematicVictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Deploy Nuke
//--------------------------------------------------------------------------------------------------
bool gt_CinematicDeployNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lOCAL_NukeUnit;

    // Variable Initialization
    lv_lOCAL_NukeUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lOCAL_NukeUnit = gv_cINEMATIC_NukeUnit;
    libNtve_gf_MakeUnitFacePoint(gv_cINEMATICSWANN, UnitGetPosition(lv_lOCAL_NukeUnit), 0.5);
    Wait(0.75, c_timeGame);
    libNtve_gf_PauseUnit(gv_cINEMATICSWANN, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cINEMATICSWANN), c_animNameDefault, "Spell", 0, c_animTimeDefault);
    Wait(1.3, c_timeGame);
    libNtve_gf_PauseUnit(gv_cINEMATICSWANN, false);
    libNtve_gf_ShowHideUnit(lv_lOCAL_NukeUnit, true);
    UnitSetOwner(lv_lOCAL_NukeUnit, gv_p1_USER, true);
    SoundPlayAtPoint(SoundLink("TArmoryCraneStand03", 0), PlayerGroupAll(), UnitGetPosition(lv_lOCAL_NukeUnit), 8.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_lOCAL_NukeUnit), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.45, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_lOCAL_NukeUnit), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicDeployNuke_Init () {
    gt_CinematicDeployNuke = TriggerCreate("gt_CinematicDeployNuke_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Fissure Death
//--------------------------------------------------------------------------------------------------
bool gt_CinematicCameraShakeNuke2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(gv_cinematicFissureDoodad), c_animNameDefault, "Death", 0, c_animTimeDefault);
    Wait(2.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(gv_cinematicFissureDoodad), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicCameraShakeNuke2_Init () {
    gt_CinematicCameraShakeNuke2 = TriggerCreate("gt_CinematicCameraShakeNuke2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Nuke Camera Shake
//--------------------------------------------------------------------------------------------------
bool gt_CinematicCameraShakeNuke_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.5, 100.0, 2.0);
    Wait(1.85, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.15, 2.0, 100.0, 3.0);
    Wait(2.85, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 1.5, 100.0, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicCameraShakeNuke_Init () {
    gt_CinematicCameraShakeNuke = TriggerCreate("gt_CinematicCameraShakeNuke_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt__1StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitRemove(UnitFromId(1371));
    UnitRemove(UnitFromId(1998));
    UnitRemove(UnitFromId(2405));
    UnitRemove(UnitFromId(2406));
    UnitGroupLoopBegin(UnitGroup("NukePack", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    RegionPlayableMapSet(RegionEntireMap());
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingAction02, true, false);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingAction03, true, false);
    TriggerExecute(gt_BriefingScene03, true, true);
    TriggerExecute(gt_BriefingAction04, true, false);
    TriggerExecute(gt_BriefingScene04, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Action 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingAction02_Func (bool testConds, bool runActions) {
    int autoEE2EF6F6_n;
    int autoEE2EF6F6_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Zergling", 0, gv_p2_ZERG, PointFromId(1901), 270.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1902)), c_orderQueueReplace);
    UnitCreate(1, "Hydralisk", 0, gv_p2_ZERG, PointFromId(1900), 270.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1903)), c_orderQueueReplace);
    autoEE2EF6F6_n = 4;
    autoEE2EF6F6_i = 1;
    while (autoEE2EF6F6_i <= autoEE2EF6F6_n) {
        UnitCreate(1, "InfestedTerranCampaign", 0, gv_p2_ZERG, PointFromId(1902), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1901)), c_orderQueueReplace);
        autoEE2EF6F6_i = autoEE2EF6F6_i + 1;
    }
    UnitCreate(1, "InfestedAbomination", 0, gv_p2_ZERG, PointFromId(1903), 270.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1900)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", 0, gv_p2_ZERG, PointFromId(1904));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", 0, gv_p2_ZERG, PointFromId(1905));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingAction02_Init () {
    gt_BriefingAction02 = TriggerCreate("gt_BriefingAction02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Action 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingAction03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reaper1;
    unit lv_reaper2;
    unit lv_marine1;
    unit lv_marine2;
    unit lv_firebat1;

    // Variable Initialization
    lv_reaper1 = null;
    lv_reaper2 = null;
    lv_marine1 = null;
    lv_marine2 = null;
    lv_firebat1 = null;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "DevilDog", 0, gv_p4_DOMINIONALLIES, PointFromId(1785));
    lv_firebat1 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1784)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1800)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_p4_DOMINIONALLIES, PointFromId(1782));
    lv_marine1 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1781)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1800)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_p4_DOMINIONALLIES, PointFromId(1783));
    lv_marine2 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1780)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1800)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "BlockB", 0, gv_p4_DOMINIONALLIES, PointFromId(1788));
    lv_reaper1 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1786)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1800)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "BlockB", 0, gv_p4_DOMINIONALLIES, PointFromId(1789));
    lv_reaper2 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1787)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1800)), c_orderQueueAddToEnd);
    while (!((gv_briefingActionMercDismissed == true))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(lv_firebat1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1803)), c_orderQueueReplace);
    UnitIssueOrder(lv_marine1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1805)), c_orderQueueReplace);
    UnitIssueOrder(lv_marine2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1804)), c_orderQueueReplace);
    UnitIssueOrder(lv_reaper1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1801)), c_orderQueueReplace);
    UnitIssueOrder(lv_reaper2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1802)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingAction03_Init () {
    gt_BriefingAction03 = TriggerCreate("gt_BriefingAction03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Action 04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingAction04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_DOMINIONALLIES, PointFromId(1751));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 0, 2);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(923)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_DOMINIONALLIES, PointFromId(925));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 0, 2);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(54)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_DOMINIONALLIES, PointFromId(1752));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 0, 2);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(924)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_DOMINIONALLIES, PointFromId(1750));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 0, 2);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(460)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p4_DOMINIONALLIES, PointFromId(1503));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 0, 2);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1564)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_p2_ZERG, PointFromId(1760));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(924)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_p2_ZERG, PointFromId(1761));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(924)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingAction04_Init () {
    gt_BriefingAction04 = TriggerCreate("gt_BriefingAction04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingCameraWork01, true, false);
    Wait(0.1, c_timeReal);
    MovieStartRecording("Briefing_Video_TValerian2a_00");
    // Transmission - SoundLink("TValerian02ABriefingAdjutant00001", 0)
    SoundPlay(SoundLink("TValerian02ABriefingAdjutant00001", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingAdjutant00001", 0))), c_timeReal);
    // Transmission - SoundLink("TValerian02ABriefingRaynor00002", 0)
    SoundPlay(SoundLink("TValerian02ABriefingRaynor00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00002", 0))), c_timeReal);
    // Transmission - SoundLink("TValerian02ABriefingAdjutant00003", 0)
    SoundPlay(SoundLink("TValerian02ABriefingAdjutant00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingAdjutant00003", 0))), c_timeReal);
    // Transmission - SoundLink("TValerian02ABriefingTychus00004", 0)
    SoundPlay(SoundLink("TValerian02ABriefingTychus00004", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingTychus00004", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingAdjutant00001", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00002", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingAdjutant00003", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingTychus00004", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Camera Work 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingCameraWork01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(414), 0.0, -1, 10, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectRed", PointFromId(1762));
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1748), 0.0, -1, 10, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectRed", PointFromId(1763));
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1747), 0.0, -1, 10, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectRed", PointFromId(1764));
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(365), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(412), 15.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingCameraWork01_Init () {
    gt_BriefingCameraWork01 = TriggerCreate("gt_BriefingCameraWork01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(413), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(415), 15.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian2a_01");
    // Transmission - SoundLink("TValerian02ABriefingRaynor00005", 0)
    SoundPlay(SoundLink("TValerian02ABriefingRaynor00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00005", 0))), c_timeReal);
    // Transmission - SoundLink("TValerian02ABriefingRaynor00011", 0)
    SoundPlay(SoundLink("TValerian02ABriefingRaynor00011", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00011", 0))), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(366), 15.0, -1, 10, true);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingTychus00004", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00005", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00011", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(724), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(738), 20.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian2a_02");
    // Transmission - SoundLink("TValerian02ABriefingWarfield00006", 0)
    SoundPlay(SoundLink("TValerian02ABriefingWarfield00006", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingWarfield00006", 0))), c_timeReal);
    // Transmission - SoundLink("TValerian02ABriefingRaynor00007", 0)
    SoundPlay(SoundLink("TValerian02ABriefingRaynor00007", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00007", 0))), c_timeReal);
    gv_briefingActionMercDismissed = true;
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00007", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingWarfield00006", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00007", 0))), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(367), 15.0, -1, 10, true);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(797), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(837), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian2a_03");
    // Transmission - SoundLink("TValerian02ABriefingWarfield00009", 0)
    SoundPlay(SoundLink("TValerian02ABriefingWarfield00009", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingWarfield00009", 0))), c_timeReal);
    // Transmission - SoundLink("TValerian02ABriefingRaynor00008", 0)
    SoundPlay(SoundLink("TValerian02ABriefingRaynor00008", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00008", 0))), c_timeReal);
    // Transmission - SoundLink("TValerian02ABriefingRaynor00010", 0)
    SoundPlay(SoundLink("TValerian02ABriefingRaynor00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00010", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingWarfield00009", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00008", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian02ABriefingRaynor00010", 0))), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(368), 15.0, -1, 10, true);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04_Init () {
    gt_BriefingScene04 = TriggerCreate("gt_BriefingScene04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt__1IntroSequence_Init();
    gt__1StartGame_Init();
    gt__1OpeningDialogueQ_Init();
    gt__1TipStoryModeQ_Init();
    gt__1TeachSnipeQ_Init();
    gt__1TeachSnipeTripViaDamage_Init();
    gt__1TeachSnipeTripViaMovement_Init();
    gt__1TeachSnipeActions_Init();
    gt__1SnipeAbilityFlashOff_Init();
    gt__1TeachSnipeAgainTripViaDamage_Init();
    gt__1TeachSnipeAgainAction_Init();
    gt__1TeachNadesQ_Init();
    gt__1TeachNadesTripViaDamage_Init();
    gt__1TeachNadesTripViaMovement_Init();
    gt__1TeachNadesAction_Init();
    gt__1GrenadeAbilityFlashOff_Init();
    gt__1TeachNadesAgainTripViaDamage_Init();
    gt__1TeachNadesAgainAction_Init();
    gt__1RevealMoreZerg_Init();
    gt__1TeachBettyQ_Init();
    gt__1TeachBettyViaCast_Init();
    gt__1TeachBettyViaDamage_Init();
    gt__1TeachBettyActions_Init();
    gt__1FlameTurretAbilityFlashOff_Init();
    gt__1CallforHelpQ_Init();
    gt__1ZergKillTeamTripViaDamage_Init();
    gt__1ZergKillTeamTripViaMovement_Init();
    gt__1ZergKillTeamActions_Init();
    gt__1CallforHelpSNUFFED_Init();
    gt__1SaveDominionQ_Init();
    gt__1LongConversationQ_Init();
    gt__1SEZergViaMovement_Init();
    gt__1SEZergActions_Init();
    gt__1SEZergActionsQ_Init();
    gt__1PincerUnburrow_Init();
    gt__1PincerAttack_Init();
    gt__1NydusWormsTrigger_Init();
    gt__1NydusWormsCheatVision_Init();
    gt__1NydusWormKilled_Init();
    gt__1NydusWormsQ_Init();
    gt__1NydusWormsStetmannQQQ_Init();
    gt__1BroodchamberHoldoutWaitForPlayerAutosaveQ_Init();
    gt__1BroodchamberTriggerViaMovement_Init();
    gt__1BroodchamberActions_Init();
    gt__1BroodchamberTriggerHoldoutStart_Init();
    gt__1BroodchamberAttackWaves_Init();
    gt__1BroodchamberDestroyHintPings_Init();
    gt__2InitBroodchamber_Init();
    gt__2StartGame_Init();
    gt__2StoryTellingQ_Init();
    gt__2StoryTellingTripViaDamage_Init();
    gt__2StoryTellingTripViaMovement_Init();
    gt__2StoryTellingActions_Init();
    gt__2StoryTelling2Q_Init();
    gt__2ZombieRaid1TripViaDamage_Init();
    gt__2ZombieRaid1TripViaMovement_Init();
    gt__2ZombieRaid1ActionQ_Init();
    gt__2ZombieRaid2TripViaDamage_Init();
    gt__2ZombieRaid2TripViaMovement_Init();
    gt__2ZombieRaid2ActionQ_Init();
    gt__2CrazyAberration_Init();
    gt__2RevealMoreZerg_Init();
    gt__2BanelingTripViaMovement_Init();
    gt__2BanelingSplashDetection_Init();
    gt__2BanelingQ_Init();
    gt__2BanelingOuchQ_Init();
    gt__2CallforHelpQ_Init();
    gt__2ActivateNydusKillTeam_Init();
    gt__2NydusKillTeamSpawning_Init();
    gt__2CallforHelpSNUFFED_Init();
    gt__2SaveDominionQ_Init();
    gt__2AmbushTripViaDamage_Init();
    gt__2AmbushTripViaMovement_Init();
    gt__2AmbushActions_Init();
    gt__2AmbushActionsQ_Init();
    gt__2GauntletStart_Init();
    gt__2GauntletQ_Init();
    gt__2GauntletKillaWorm1Q_Init();
    gt__2GauntletPushback1Q_Init();
    gt__2GauntletPushback2Q_Init();
    gt__2BroodchamberTriggerHoldout_Init();
    gt__2BroodchamberTriggerHoldoutStart_Init();
    gt__2BroodchamberAttackWaves_Init();
    gt__2BroodchamberHoldoutUltralisksQ_Init();
    gt__3InitBroodchamber_Init();
    gt__3StartGame_Init();
    gt__3FeederlingFlavor_Init();
    gt__3FeederlingMovementAI_Init();
    gt__3QueenForeshadowingQ_Init();
    gt__3BullyGroup1TripviaDamage_Init();
    gt__3BullyGroup1TripviaMovement_Init();
    gt__3BullyGroup1Actions_Init();
    gt__3BullyGroup1ReactionQ_Init();
    gt__3BullyGroup2TripviaDamage_Init();
    gt__3BullyGroup2TripviaMovement_Init();
    gt__3BullyGroup2Actions_Init();
    gt__3BullyGroup2DelayedActivation_Init();
    gt__3BullyGroup2ReactionQ_Init();
    gt__3CallforHelpQ_Init();
    gt__3OmegaliskTripViaDamage_Init();
    gt__3OmegaliskTripViaMovement_Init();
    gt__3OmegaliskActions_Init();
    gt__3OmegaliskEggsPop_Init();
    gt__3MarineCallforHelpQ_Init();
    gt__3OmegaliskCameraShakeWhenRockDestroyed_Init();
    gt__3OmegaliskBothRocksDestroyed_Init();
    gt__3OmegaliskBothRocksDestroyedQ_Init();
    gt__3OmegaliskRetreatPeriodicCheck_Init();
    gt__3OmegaliskRetreatActions_Init();
    gt__3CallforHelpSNUFFED_Init();
    gt__3OmegaliskKilled_Init();
    gt__3SaveDominionCheck_Init();
    gt__3SaveDominionQ_Init();
    gt__3QueenFeederlingFlavor_Init();
    gt__3Autosave2_Init();
    gt__3BroodchamberTrip_Init();
    gt__3QueenAIPhase1_Init();
    gt__3QueenAIPhase2_Init();
    gt__3KillQueenReminderQ_Init();
    gt__3QueenAIPhase3_Init();
    gt__3QueenAIPhase4_Init();
    gt__3QueenShockwaveScreenShake_Init();
    gt__3CreateQueenBossBar_Init();
    gt__3UpdateQueenBossyBar_Init();
    gt__3QueenPopEggs_Init();
    gt__3EggPoppedViaDamageZergQueenOnly_Init();
    gt__3QueenKill_Init();
    gt__4InitBroodchamber_Init();
    gt__4StartGame_Init();
    gt__4FeederlingFlavor_Init();
    gt__4FeederlingMovementAI_Init();
    gt__4StartLavaViaTime_Init();
    gt__4StartLavaViaMovement_Init();
    gt__4StartLavaActions_Init();
    gt__4LavaShakes_Init();
    gt__4LavaSound_Init();
    gt__4RunQ_Init();
    gt__4LavaBurnificationAmbience_Init();
    gt__4Ambush1_Init();
    gt__4Infestor_Init();
    gt__4UltraliskUnburrow_Init();
    gt__4Ambush2_Init();
    gt__4Extraction_Init();
    gt__4UnitExtractionController_Init();
    gt_AIThink_Init();
    gt_InfestorCooldown_Init();
    gt_NydusSpawningTrigger_Init();
    gt_RaynorSnipeInitialize_Init();
    gt_RaynorSnipeUnitsKilled_Init();
    gt_AchievementOneShotFiftyKills_Init();
    gt_BettyKill_Init();
    gt_HeroIncapacitated_Init();
    gt_RecoverIncappedHeroes_Init();
    gt_IncapacitationTipQ_Init();
    gt_InfestorWarningQ_Init();
    gt_StetmannOOMQ_Init();
    gt_SeismicChargeAtHalfHealthQ_Init();
    gt_DefeatSeismicChargeDestroyed_Init();
    gt_DefeatAllHeroesIncapacitated_Init();
    gt_DefeatAHeroWasBurninated_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectivePlantSeismicChargesCreateQ_Init();
    gt_ObjectivePlantSeismicChargesComplete_Init();
    gt_ObjectiveExfiltrationCreateQ_Init();
    gt_DisableDamageDrivenTriggers_Init();
    gt_EnableDamageDrivenTriggers_Init();
    gt_CinematicStartHoldout1Q_Init();
    gt_CinematicStartHoldout1Setup_Init();
    gt_CinematicStartHoldout1Cinematic_Init();
    gt_CinematicStartHoldout1CinematicEnd_Init();
    gt_CinematicStartHoldout1Cleanup_Init();
    gt_CinematicFinishedHoldout1Q_Init();
    gt_CinematicFinishedHoldout1Setup_Init();
    gt_CinematicFinishedHoldout1Cinematic_Init();
    gt_CinematicFinishedHoldout1CinematicRunout_Init();
    gt_CinematicFinishedHoldout1CinematicEnd_Init();
    gt_CinematicFinishedHoldout1Cleanup_Init();
    gt_CinematicStartHoldout2Q_Init();
    gt_CinematicStartHoldout2Setup_Init();
    gt_CinematicStartHoldout2Cinematic_Init();
    gt_CinematicStartHoldout2CinematicEnd_Init();
    gt_CinematicStartHoldout2Cleanup_Init();
    gt_MidBroodChamber2Q_Init();
    gt_CinematicFinishedHoldout2Setup_Init();
    gt_CinematicFinishedHoldout2Cinematic_Init();
    gt_CinematicFinishedHoldout2CinematicRunout_Init();
    gt_CinematicFinishedHoldout2CinematicEnd_Init();
    gt_CinematicFinishedHoldout2Cleanup_Init();
    gt_CinematicStartHoldout3Q_Init();
    gt_CinematicStartHoldout3Setup_Init();
    gt_CinematicStartHoldout3Cinematic_Init();
    gt_CinematicStartHoldout3EggsPopped_Init();
    gt_CinematicStartHoldout3CinematicEnd_Init();
    gt_CinematicStartHoldout3Cleanup_Init();
    gt_CinematicFinishedHoldout3Q_Init();
    gt_CinematicFinishedHoldout3Setup_Init();
    gt_CinematicFinishedHoldout3Cinematic_Init();
    gt_CinematicFinishedHoldout3CinematicRunout_Init();
    gt_CinematicFinishedHoldout3NydusAI_Init();
    gt_CinematicFinishedHoldout3CinematicEnd_Init();
    gt_CinematicFinishedHoldout3Cleanup_Init();
    gt_VictoryQ_Init();
    gt_CinematicVictorySetup_Init();
    gt_CinematicVictoryCinematic_Init();
    gt_CinematicVictoryAction_Init();
    gt_CinematicVictoryCinematicEnd_Init();
    gt_CinematicVictoryCleanup_Init();
    gt_CinematicDeployNuke_Init();
    gt_CinematicCameraShakeNuke2_Init();
    gt_CinematicCameraShakeNuke_Init();
    gt_BriefingQ_Init();
    gt_BriefingAction02_Init();
    gt_BriefingAction03_Init();
    gt_BriefingAction04_Init();
    gt_BriefingScene01_Init();
    gt_BriefingCameraWork01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingScene04_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
