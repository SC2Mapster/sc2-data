//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Breakout
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p1_USER = 1;
const int gv_p2_RAYNOR_LIGHTBLUE = 2;
const int gv_p3_DOMINION_RED = 3;
const int gv_p4_DOMINION_PURPLE = 4;
const int gv_p5_DOMINION_GREY = 5;
const int gv_p6_DOMINION_ORANGE = 6;
const int gv_p7_PRISONER_YELLOW = 7;
const int gv_p8_ALLIED_PINK = 8;
const int gv_p9_ALLIED_GREEN = 9;
const int gv_p11_ALLIED_CELLBLOCK_A = 11;
const int gv_p12_ALLIED_CELLBLOCK_B = 12;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_p0_NEUTRAL;
bool gv_gameOver;
bool gv_inCinematic;
unit gv_ghostEMP;
unit gv_tosh;
playergroup gv_dominionPlayers;
playergroup gv_raynorsRaiders;
int gv_inCombatIndicator;
unit[8] gv_initialMarines;
point[8] gv_initialMarinePoints;
int gv_numberOfInitialMarines;
unit[32] gv_aOEMarines;
point[32] gv_aOEMarinePoints;
int gv_numberOfAOEMarines;
bool gv_ghostActive;
bool gv_ghostCastEMP;
int gv_textTagMindBlast;
unit gv_shadowOps;
bool gv_firstNuke;
actor gv_actorMissileTurret1;
bool gv_aIStartedSafety;
actor gv_cellBlockAGate;
unitgroup gv_cellBlockAJerksGroup;
revealer gv_cellBlockAGateReveal;
bool gv_cellBlockASearching;
int gv_firstDiamondbacksActivated;
unitgroup gv_nonActivatedDiamondbacks;
actor gv_cellBlockBGate;
unitgroup gv_cellBlockBJerksGroup;
revealer gv_cellBlockBGateReveal;
int gv_firstSiegeTanksActivated;
point[16] gv_waypoints;
int gv_waypointCount;
int gv_stage;
bool gv_bonusClear01;
bool gv_bonusClear02;
timer gv_maraudersComeOnline;
bool gv_sendingSpecialWaves;
bool gv_flashMindblast;
bool gv_flashNuke;
bool gv_flashConsumption;
bool gv_flashPsiShield;
actor gv_actorMindblastIndicator;
timer gv_achievementHardTimer;
bool gv_achievementToshHealthBelow100;
int gv_bonusCreditsEarned;
int gv_cellBlocksFreed;
int gv_enemiesKilledByNukes;
int gv_enemiesKilled;
int gv_toshLowestHealth;
int gv_mainPrisonPing;
int gv_objectiveClearMainPrison;
int gv_objectiveToshMustSurvive;
int gv_cellBlock_A_Ping;
int gv_objectiveCellBlock_A;
int gv_cellBlock_B_Ping;
int gv_objectiveCellBlock_B;
unitgroup gv_victoryHiddenUnitGroup;
bool gv_victoryCinematicCompleted;

void InitGlobals () {
    int init_i;

    gv_p0_NEUTRAL = 0;
    gv_gameOver = false;
    gv_inCinematic = false;
    gv_ghostEMP = null;
    gv_tosh = UnitFromId(326);
    gv_dominionPlayers = PlayerGroupEmpty();
    gv_raynorsRaiders = PlayerGroupEmpty();
    gv_inCombatIndicator = 0;
    init_i = 0;
    while (init_i <= 7) {
        gv_initialMarines[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 7) {
        gv_initialMarinePoints[init_i] = null;
        init_i = init_i + 1;
    }
    gv_numberOfInitialMarines = 0;
    init_i = 0;
    while (init_i <= 31) {
        gv_aOEMarines[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 31) {
        gv_aOEMarinePoints[init_i] = null;
        init_i = init_i + 1;
    }
    gv_numberOfAOEMarines = 0;
    gv_ghostActive = false;
    gv_ghostCastEMP = false;
    gv_textTagMindBlast = c_textTagNone;
    gv_shadowOps = UnitFromId(485);
    gv_firstNuke = true;
    gv_aIStartedSafety = false;
    gv_cellBlockAJerksGroup = UnitGroupEmpty();
    gv_cellBlockAGateReveal = null;
    gv_cellBlockASearching = false;
    gv_firstDiamondbacksActivated = 0;
    gv_nonActivatedDiamondbacks = UnitGroupEmpty();
    gv_cellBlockBJerksGroup = UnitGroupEmpty();
    gv_cellBlockBGateReveal = null;
    gv_firstSiegeTanksActivated = 0;
    init_i = 0;
    while (init_i <= 15) {
        gv_waypoints[init_i] = null;
        init_i = init_i + 1;
    }
    gv_waypointCount = 0;
    gv_stage = 0;
    gv_bonusClear01 = false;
    gv_bonusClear02 = false;
    gv_maraudersComeOnline = TimerCreate();
    gv_sendingSpecialWaves = false;
    gv_flashMindblast = false;
    gv_flashNuke = false;
    gv_flashConsumption = false;
    gv_flashPsiShield = false;
    gv_actorMindblastIndicator = null;
    gv_achievementHardTimer = TimerCreate();
    gv_achievementToshHealthBelow100 = false;
    gv_bonusCreditsEarned = 0;
    gv_cellBlocksFreed = 0;
    gv_enemiesKilledByNukes = 0;
    gv_enemiesKilled = 0;
    gv_toshLowestHealth = FixedToInt(UnitGetPropertyFixed(UnitFromId(326), c_unitPropLifeMax, c_unitPropNormal));
    gv_objectiveClearMainPrison = c_invalidObjectiveId;
    gv_objectiveToshMustSurvive = c_invalidObjectiveId;
    gv_objectiveCellBlock_A = c_invalidObjectiveId;
    gv_objectiveCellBlock_B = c_invalidObjectiveId;
    gv_victoryCinematicCompleted = false;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_UpgradeForAllies (int lp_qty, string lp_upgrade);
void gf_UpgradeForEnemies (int lp_qty, string lp_upgrade);
void gf_SetUnitMaxLife (unit lp_unit, fixed lp_maxHP);
void gf_OrderUnitToMoveThenTurnToTargetPointsFacing (unit lp_u, point lp_targetPoint, int lp_queue);
bool gf_PlayerIsInCombat (int lp_player);
void gf_CellBlockMoveWorker (unit lp_worker, region lp_locale);
void gf_CellBlockAssignDrivers (string lp_vehicleType1, string lp_vehicleType2, region lp_prisonerRegion, region lp_vehicleRegion);
void gf_SpawnDropPod (int lp_who, point lp_source, point lp_dest, int lp_qty1, string lp_unit1, int lp_qty2, string lp_unit2, int lp_qty3, string lp_unit3, fixed lp_delay);
void gf_LimitUnitType (int lp_who, int lp_easy, int lp_normal, int lp_hard, int lp_insane, string lp_make, string lp_altType);
void gf_SetWaypoints (int lp_ally, int lp_starting, int lp_ending);
void gf_GhostAI (int lp_owner, unit lp_ghost, unitgroup lp_candidates);
void gf_MedicAI (int lp_owner, unit lp_medic, unitgroup lp_candidates);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_OpeningDialogueQ;
trigger gt_GuardTowersInitiate;
trigger gt_Bunker15Dies;
trigger gt_MedicMana;
trigger gt_RaynorsBaseUnderAttackQ;
trigger gt_InitialMarines;
trigger gt_AOEMarines;
trigger gt_StartingMarinesBehavior;
trigger gt_ToshVictims;
trigger gt_GhostCloak;
trigger gt_GhostEMP;
trigger gt_GhostEMPSafety;
trigger gt_GhostEMPSafetySet;
trigger gt_RavenPatrolStart;
trigger gt_GiveMindBlast;
trigger gt_GivePsiShield;
trigger gt_TIPNukeReadyFirstQ;
trigger gt_MissileTurretDestroyed;
trigger gt_AIStartSafety;
trigger gt_CellBlockACompleted;
trigger gt_CellBlockACompletedQ;
trigger gt_CellBlockAReminderQ;
trigger gt_CellBlockAPatrol;
trigger gt_CellBlockAPatrolSearching;
trigger gt_CellBlockAPrisonerWander;
trigger gt_CellBlockBCompleted;
trigger gt_CellBlockBCompletedQ;
trigger gt_CellBlockBReminderQ;
trigger gt_CellBlockBRavenPatrol;
trigger gt_CellBlockBPrisonerWander;
trigger gt_CellBlockWorkersMovement;
trigger gt_CellBlockDriversGetInVehicles;
trigger gt_CellBlockSpawners;
trigger gt_DialogueMindBlastQ;
trigger gt_DialogueDetectionQ;
trigger gt_DialogueRaynorsForcesQ;
trigger gt_OutpostCheck01;
trigger gt_OutpostBuild01AutoSaveQ;
trigger gt_DefenseOutpost01Create;
trigger gt_OutpostCheck02;
trigger gt_OutpostBuild02AutoSaveQ;
trigger gt_DefenseOutpost02Create;
trigger gt_SCVReturn;
trigger gt_StartAI;
trigger gt_InitWaypoints;
trigger gt_ALLYAttackWaves;
trigger gt_ALLYAttackWavesMainBase;
trigger gt_ALLYAttackWavesCellBlockAActivate;
trigger gt_ALLYAttackWavesCellBlockA;
trigger gt_ALLYAttackWavesCellBlockBActivate;
trigger gt_ALLYAttackWavesCellBlockB;
trigger gt_ENEMYAttackWaves;
trigger gt_ENEMYAttackWaveStandard;
trigger gt_ENEMYBonusWaveArea01Hurt;
trigger gt_ENEMYRavensActivateArea03Approached;
trigger gt_ENEMYBonusWaveArea02Hurt;
trigger gt_ENEMYBonusWaveMainAreaHurt;
trigger gt_RepairEnemy01;
trigger gt_RepairEnemy02;
trigger gt_RepairEnemy03;
trigger gt_RepairEnemy04;
trigger gt_NerfFinalProduction;
trigger gt_AIMinerals;
trigger gt_AIGas;
trigger gt_StorymodeTipsQ;
trigger gt_TIPCloakingQ;
trigger gt_TIPMindblastQ;
trigger gt_TIPConsumptionQ;
trigger gt_TIPPsiShieldQ;
trigger gt_ButtonFlashTurnoffMindblast;
trigger gt_ButtonFlashTurnoffConsumption;
trigger gt_ButtonFlashTurnoffPsiShield;
trigger gt_ButtonFlashTurnoffNuke;
trigger gt_StatEnemiesKilledByNukes;
trigger gt_StatEnemiesKilledbyAnyone;
trigger gt_StatToshLowestHealth;
trigger gt_VictoryMainPrisonCleared;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatToshDies;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveClearMainPrisonCreateQ;
trigger gt_ObjectiveClearMainPrisonComplete;
trigger gt_ObjectiveClearMainPrisonFailed;
trigger gt_ObjectiveCellBlock_ACreateQ;
trigger gt_ObjectiveCellBlock_AComplete;
trigger gt_ObjectiveCellBlock_BCreateQ;
trigger gt_ObjectiveCellBlock_BComplete;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingScene04;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryDoorAnimation;
trigger gt_VictoryCinematicDoorSounds;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_UpgradeForAllies (int lp_qty, string lp_upgrade) {
    // Implementation
    TechTreeUpgradeAddLevel(gv_p2_RAYNOR_LIGHTBLUE, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p8_ALLIED_PINK, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p9_ALLIED_GREEN, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p11_ALLIED_CELLBLOCK_A, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p12_ALLIED_CELLBLOCK_B, lp_upgrade, lp_qty);
}

void gf_UpgradeForEnemies (int lp_qty, string lp_upgrade) {
    // Implementation
    TechTreeUpgradeAddLevel(gv_p3_DOMINION_RED, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p4_DOMINION_PURPLE, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p5_DOMINION_GREY, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p6_DOMINION_ORANGE, lp_upgrade, lp_qty);
}

void gf_SetUnitMaxLife (unit lp_unit, fixed lp_maxHP) {
    // Implementation
    UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, lp_maxHP);
    UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
}

void gf_OrderUnitToMoveThenTurnToTargetPointsFacing (unit lp_u, point lp_targetPoint, int lp_queue) {
    // Implementation
    UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), lp_queue);
    UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lp_targetPoint, 10.0, PointGetFacing(lp_targetPoint))), c_orderQueueAddToEnd);
}

bool gf_PlayerIsInCombat (int lp_player) {
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_CellBlockMoveWorker (unit lp_worker, region lp_locale) {
    // Variable Declarations
    unitgroup lv_vehicles;

    // Variable Initialization
    lv_vehicles = UnitGroupEmpty();

    // Implementation
    if ((lp_worker == null)) {
        return ;
    }
    else {
    }
    if ((UnitOrder(lp_worker, 0) != null)) {
        return ;
    }
    else {
    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Diamondback", gv_p0_NEUTRAL, lp_locale, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_vehicles);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("SiegeTank", gv_p0_NEUTRAL, lp_locale, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_vehicles);
    if ((UnitGroupCount(lv_vehicles, c_unitCountAlive) > 0)) {
        UnitIssueOrder(lp_worker, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupRandomUnit(lv_vehicles, c_unitCountAlive))), c_orderQueueReplace);
    }
    else {
    }
}

void gf_CellBlockAssignDrivers (string lp_vehicleType1, string lp_vehicleType2, region lp_prisonerRegion, region lp_vehicleRegion) {
    unitgroup auto5B9DB599_g;
    int auto5B9DB599_u;
    unitgroup auto3DCCD67D_g;
    int auto3DCCD67D_u;

    // Variable Declarations
    unitgroup lv_prisonerGroup;
    unitgroup lv_vehicleGroup;
    unit lv_vehicle;
    unit lv_prisoner;

    // Variable Initialization
    lv_prisonerGroup = UnitGroupEmpty();
    lv_vehicleGroup = UnitGroupEmpty();
    lv_vehicle = null;
    lv_prisoner = null;

    // Implementation
    lv_prisonerGroup = UnitGroup(null, gv_p7_PRISONER_YELLOW, lp_prisonerRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_vehicleGroup = UnitGroup(lp_vehicleType1, gv_p0_NEUTRAL, lp_vehicleRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(lp_vehicleType2, gv_p0_NEUTRAL, lp_vehicleRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_vehicleGroup);
    auto5B9DB599_g = lv_vehicleGroup;
    auto5B9DB599_u = 1;
    while (auto5B9DB599_u <= UnitGroupCount(auto5B9DB599_g, c_unitCountAll)) {
        lv_vehicle = UnitGroupUnit(auto5B9DB599_g, auto5B9DB599_u);
        lv_prisoner = UnitGroupRandomUnit(lv_prisonerGroup, c_unitCountAlive);
        UnitSetOwner(lv_prisoner, gv_p2_RAYNOR_LIGHTBLUE, false);
        UnitIssueOrder(lv_prisoner, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_vehicle)), c_orderQueueReplace);
        UnitGroupRemove(lv_prisonerGroup, lv_prisoner);
        if (lv_vehicle == UnitGroupUnit(auto5B9DB599_g, auto5B9DB599_u)) {
            auto5B9DB599_u = auto5B9DB599_u + 1;
        }
    }
    UnitGroupClear(lv_vehicleGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(lp_vehicleType1, gv_p0_NEUTRAL, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_vehicleGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(lp_vehicleType1, gv_p0_NEUTRAL, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_vehicleGroup);
    auto3DCCD67D_g = lv_prisonerGroup;
    auto3DCCD67D_u = 1;
    while (auto3DCCD67D_u <= UnitGroupCount(auto3DCCD67D_g, c_unitCountAll)) {
        lv_prisoner = UnitGroupUnit(auto3DCCD67D_g, auto3DCCD67D_u);
        lv_vehicle = UnitGroupRandomUnit(lv_vehicleGroup, c_unitCountAlive);
        UnitIssueOrder(lv_prisoner, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_vehicle)), c_orderQueueReplace);
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(lv_prisoner), "Work");
        if (lv_prisoner == UnitGroupUnit(auto3DCCD67D_g, auto3DCCD67D_u)) {
            auto3DCCD67D_u = auto3DCCD67D_u + 1;
        }
    }
}

void gf_SpawnDropPod (int lp_who, point lp_source, point lp_dest, int lp_qty1, string lp_unit1, int lp_qty2, string lp_unit2, int lp_qty3, string lp_unit3, fixed lp_delay) {
    // Variable Declarations
    unitgroup lv_dropGroup;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(lp_qty1, lp_unit1, 0, lp_who, lp_source);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup);
    libNtve_gf_CreateUnitsAtPoint2(lp_qty2, lp_unit2, 0, lp_who, lp_source);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup);
    if ((lp_unit3 != null)) {
        libNtve_gf_CreateUnitsAtPoint2(lp_qty3, lp_unit3, 0, lp_who, lp_source);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup);
    }
    else {
    }
    libCamp_gf_CreateDropPod(0, lp_dest, UnitGroupFilterPlayer(lv_dropGroup, lp_who, 0), false);
    Wait(lp_delay, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03AMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
}

void gf_LimitUnitType (int lp_who, int lp_easy, int lp_normal, int lp_hard, int lp_insane, string lp_make, string lp_altType) {
    // Variable Declarations
    int lv_numberOf1;
    int lv_numberOf2;
    region lv_limitRegion;

    // Variable Initialization
    lv_numberOf1 = 0;
    lv_numberOf2 = 0;
    lv_limitRegion = null;

    // Implementation
    if ((lp_who == gv_p2_RAYNOR_LIGHTBLUE)) {
        lv_limitRegion = RegionFromId(30);
    }
    else {
        lv_limitRegion = RegionFromId(42);
    }
    lv_numberOf1 = UnitGroupCount(UnitGroup(lp_make, lp_who, lv_limitRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((lp_altType != null)) {
        lv_numberOf2 = UnitGroupCount(UnitGroup(lp_altType, lp_who, lv_limitRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else {
    }
    if (((lv_numberOf1 + lv_numberOf2) < libNtve_gf_DifficultyValueInt(lp_easy, lp_normal, lp_normal, lp_insane))) {
        AIAttackWaveAddUnits4(1, 1, 1, 1, lp_make);
    }
    else {
    }
}

void gf_SetWaypoints (int lp_ally, int lp_starting, int lp_ending) {
    int auto4EB59D25_ae;
    int auto4EB59D25_ai;
    int auto7701E821_ae;
    int auto7701E821_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    if ((lp_ally == gv_p3_DOMINION_RED)) {
        auto4EB59D25_ae = lp_ending;
        auto4EB59D25_ai = -1;
        lv_index = lp_starting;
        while ((auto4EB59D25_ai >= 0 && lv_index <= auto4EB59D25_ae) || (auto4EB59D25_ai <= 0 && lv_index >= auto4EB59D25_ae)) {
            AIAttackWaveAddWaypoint(lp_ally, gv_waypoints[lv_index], false);
            if (lv_index == auto4EB59D25_ae) {
                break;
            }
            lv_index = lv_index + auto4EB59D25_ai;
        }
    }
    else {
        auto7701E821_ae = lp_ending;
        auto7701E821_ai = 1;
        lv_index = lp_starting;
        while ((auto7701E821_ai >= 0 && lv_index <= auto7701E821_ae) || (auto7701E821_ai <= 0 && lv_index >= auto7701E821_ae)) {
            AIAttackWaveAddWaypoint(lp_ally, gv_waypoints[lv_index], false);
            if (lv_index == auto7701E821_ae) {
                break;
            }
            lv_index = lv_index + auto7701E821_ai;
        }
    }
}

void gf_GhostAI (int lp_owner, unit lp_ghost, unitgroup lp_candidates) {
    // Variable Declarations
    order lv_snipeOrder;
    marker lv_snipeMarker;
    aifilter lv_snipeFilter;

    // Variable Initialization
    lv_snipeOrder = null;
    lv_snipeMarker = null;
    lv_snipeFilter = AIFilter(lp_owner);

    // Implementation
    if ((((PlayerDifficulty(1) == 1 || PlayerDifficulty(1) == 2) == true) || (UnitGetPropertyFixed(gv_tosh, c_unitPropLife, c_unitPropCurrent) < libNtve_gf_DifficultyValueFixed(250.0, 250.0, 250.0, 200.0)))) {
        UnitGroupRemove(lp_candidates, gv_tosh);
    }
    else {
    }
    AISetFilterAlliance(lv_snipeFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_snipeFilter, libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogAbil, "Snipe", "TargetFilters[" + IntToString(0) + "]", lp_owner)));
    AISetFilterRange(lv_snipeFilter, lp_ghost, (StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "Snipe", "Range[" + IntToString(0) + "]", lp_owner)) + 1.0));
    AISetFilterLifePerMarker(lv_snipeFilter, StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SnipeDamage", "Amount", lp_owner)), lv_snipeMarker);
    lp_candidates = AIGetFilterGroup(lv_snipeFilter, lp_candidates);
    lv_snipeOrder = OrderTargetingUnit(AbilityCommand("Snipe", 0), UnitGroupUnit(lp_candidates, 1));
    if ((UnitOrderIsValid(lp_ghost, lv_snipeOrder) == true)) {
        AICast(lp_ghost, lv_snipeOrder, lv_snipeMarker, false);
    }
    else {
    }
}

void gf_MedicAI (int lp_owner, unit lp_medic, unitgroup lp_candidates) {
    // Implementation
    if ((UnitGetPropertyFixed(gv_tosh, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) && (DistanceBetweenPoints(UnitGetPosition(gv_tosh), UnitGetPosition(lp_medic)) <= 6.0)) {
        libNtve_gf_AICast(lp_medic, OrderTargetingUnit(AbilityCommand("heal", 0), gv_tosh));
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(10);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("HeroNuclearStrike", 0), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("MindBlast", 0), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("Consumption", 0), false);
    gf_UpgradeForAllies(1, "TerranInfantryArmorsLevel1");
    gf_UpgradeForAllies(1, "SiegeTech");
    TechTreeUnitAllow(gv_p2_RAYNOR_LIGHTBLUE, "Marauder", true);
    libCamp_gf_EnableCampaignTechUnit(true, 8, gv_p2_RAYNOR_LIGHTBLUE);
    libCamp_gf_EnableCampaignTechUnit(true, 13, gv_p11_ALLIED_CELLBLOCK_A);
    libCamp_gf_EnableCampaignTechUnit(true, 14, gv_p12_ALLIED_CELLBLOCK_B);
    TechTreeAbilityAllow(gv_p2_RAYNOR_LIGHTBLUE, AbilityCommand("StimPack", 0), false);
    gf_UpgradeForEnemies(1, "TerranInfantryArmorsLevel1");
    gf_UpgradeForEnemies(1, "SiegeTech");
    TechTreeUpgradeAddLevel(gv_p3_DOMINION_RED, "PunisherGrenades", 1);
    TechTreeUpgradeAddLevel(gv_p4_DOMINION_PURPLE, "PunisherGrenades", 1);
    TechTreeUpgradeAddLevel(gv_p5_DOMINION_GREY, "PunisherGrenades", 1);
    TechTreeUpgradeAddLevel(gv_p6_DOMINION_ORANGE, "PunisherGrenades", 1);
    TechTreeAbilityAllow(gv_p3_DOMINION_RED, AbilityCommand("AutoTurret", 0), false);
    TechTreeAbilityAllow(gv_p6_DOMINION_ORANGE, AbilityCommand("AutoTurret", 0), false);
    TechTreeUnitAllow(gv_p3_DOMINION_RED, "AutoTurret", false);
    TechTreeUnitAllow(gv_p6_DOMINION_ORANGE, "AutoTurret", false);
    TechTreeAbilityAllow(gv_p3_DOMINION_RED, AbilityCommand("D8Charge", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_raynorsRaiders, gv_p2_RAYNOR_LIGHTBLUE);
    PlayerGroupAdd(gv_raynorsRaiders, gv_p8_ALLIED_PINK);
    PlayerGroupAdd(gv_raynorsRaiders, gv_p9_ALLIED_GREEN);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_RAYNOR_LIGHTBLUE, 1);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p7_PRISONER_YELLOW, 0);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p8_ALLIED_PINK, 1);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p9_ALLIED_GREEN, 1);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p11_ALLIED_CELLBLOCK_A, 1);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p12_ALLIED_CELLBLOCK_B, 1);
    libNtve_gf_SetAlliance(gv_p2_RAYNOR_LIGHTBLUE, gv_p7_PRISONER_YELLOW, 1);
    libNtve_gf_SetAlliance(gv_p2_RAYNOR_LIGHTBLUE, gv_p8_ALLIED_PINK, 2);
    libNtve_gf_SetAlliance(gv_p2_RAYNOR_LIGHTBLUE, gv_p9_ALLIED_GREEN, 2);
    libNtve_gf_SetAlliance(gv_p2_RAYNOR_LIGHTBLUE, gv_p11_ALLIED_CELLBLOCK_A, 2);
    libNtve_gf_SetAlliance(gv_p2_RAYNOR_LIGHTBLUE, gv_p12_ALLIED_CELLBLOCK_B, 2);
    libNtve_gf_SetAllianceOneWay(gv_p2_RAYNOR_LIGHTBLUE, gv_p1_USER, 2);
    libNtve_gf_SetAlliance(gv_p8_ALLIED_PINK, gv_p7_PRISONER_YELLOW, 8);
    libNtve_gf_SetAlliance(gv_p8_ALLIED_PINK, gv_p9_ALLIED_GREEN, 2);
    libNtve_gf_SetAlliance(gv_p8_ALLIED_PINK, gv_p11_ALLIED_CELLBLOCK_A, 2);
    libNtve_gf_SetAlliance(gv_p8_ALLIED_PINK, gv_p12_ALLIED_CELLBLOCK_B, 2);
    libNtve_gf_SetAllianceOneWay(gv_p8_ALLIED_PINK, gv_p1_USER, 2);
    libNtve_gf_SetAlliance(gv_p9_ALLIED_GREEN, gv_p7_PRISONER_YELLOW, 8);
    libNtve_gf_SetAlliance(gv_p9_ALLIED_GREEN, gv_p11_ALLIED_CELLBLOCK_A, 2);
    libNtve_gf_SetAlliance(gv_p9_ALLIED_GREEN, gv_p12_ALLIED_CELLBLOCK_B, 2);
    libNtve_gf_SetAllianceOneWay(gv_p9_ALLIED_GREEN, gv_p1_USER, 2);
    libNtve_gf_SetAlliance(gv_p11_ALLIED_CELLBLOCK_A, gv_p7_PRISONER_YELLOW, 8);
    libNtve_gf_SetAlliance(gv_p11_ALLIED_CELLBLOCK_A, gv_p12_ALLIED_CELLBLOCK_B, 2);
    libNtve_gf_SetAllianceOneWay(gv_p11_ALLIED_CELLBLOCK_A, gv_p1_USER, 2);
    libNtve_gf_SetAlliance(gv_p12_ALLIED_CELLBLOCK_B, gv_p7_PRISONER_YELLOW, 8);
    libNtve_gf_SetAllianceOneWay(gv_p12_ALLIED_CELLBLOCK_B, gv_p1_USER, 2);
    PlayerGroupAdd(gv_dominionPlayers, gv_p3_DOMINION_RED);
    PlayerGroupAdd(gv_dominionPlayers, gv_p4_DOMINION_PURPLE);
    PlayerGroupAdd(gv_dominionPlayers, gv_p5_DOMINION_GREY);
    PlayerGroupAdd(gv_dominionPlayers, gv_p6_DOMINION_ORANGE);
    libNtve_gf_SetAlliance(gv_p3_DOMINION_RED, gv_p4_DOMINION_PURPLE, 1);
    libNtve_gf_SetAlliance(gv_p3_DOMINION_RED, gv_p5_DOMINION_GREY, 1);
    libNtve_gf_SetAlliance(gv_p3_DOMINION_RED, gv_p6_DOMINION_ORANGE, 1);
    libNtve_gf_SetAlliance(gv_p3_DOMINION_RED, gv_p7_PRISONER_YELLOW, 7);
    libNtve_gf_SetAlliance(gv_p4_DOMINION_PURPLE, gv_p5_DOMINION_GREY, 1);
    libNtve_gf_SetAlliance(gv_p4_DOMINION_PURPLE, gv_p6_DOMINION_ORANGE, 1);
    libNtve_gf_SetAlliance(gv_p4_DOMINION_PURPLE, gv_p7_PRISONER_YELLOW, 7);
    libNtve_gf_SetAlliance(gv_p5_DOMINION_GREY, gv_p6_DOMINION_ORANGE, 1);
    libNtve_gf_SetAlliance(gv_p5_DOMINION_GREY, gv_p7_PRISONER_YELLOW, 7);
    libNtve_gf_SetAlliance(gv_p6_DOMINION_ORANGE, gv_p7_PRISONER_YELLOW, 7);
    libNtve_gf_SetAllianceOneWay(gv_p6_DOMINION_ORANGE, gv_p3_DOMINION_RED, 2);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_p2_RAYNOR_LIGHTBLUE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p2_RAYNOR_LIGHTBLUE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_DOMINION_RED, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_DOMINION_RED, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_DOMINION_PURPLE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_DOMINION_PURPLE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p5_DOMINION_GREY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p5_DOMINION_GREY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p6_DOMINION_ORANGE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p6_DOMINION_ORANGE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p8_ALLIED_PINK, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p8_ALLIED_PINK, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p9_ALLIED_GREEN, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p9_ALLIED_GREEN, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_p4_DOMINION_PURPLE, 1, true);
    PlayerSetColorIndex(gv_p5_DOMINION_GREY, 1, true);
    PlayerSetColorIndex(gv_p6_DOMINION_ORANGE, 1, true);
    PlayerSetColorIndex(gv_p8_ALLIED_PINK, 3, true);
    PlayerSetColorIndex(gv_p9_ALLIED_GREEN, 3, true);
    PlayerSetColorIndex(gv_p11_ALLIED_CELLBLOCK_A, 3, true);
    PlayerSetColorIndex(gv_p12_ALLIED_CELLBLOCK_B, 3, true);
    PlayerSetState(gv_p4_DOMINION_PURPLE, c_playerStateShowScore, false);
    PlayerSetState(gv_p5_DOMINION_GREY, c_playerStateShowScore, false);
    PlayerSetState(gv_p6_DOMINION_ORANGE, c_playerStateShowScore, false);
    PlayerSetState(gv_p7_PRISONER_YELLOW, c_playerStateShowScore, false);
    PlayerSetState(gv_p8_ALLIED_PINK, c_playerStateShowScore, false);
    PlayerSetState(gv_p9_ALLIED_GREEN, c_playerStateShowScore, false);
    PlayerSetState(gv_p9_ALLIED_GREEN, c_playerStateShowScore, false);
    PlayerSetState(gv_p11_ALLIED_CELLBLOCK_A, c_playerStateShowScore, false);
    PlayerSetState(gv_p12_ALLIED_CELLBLOCK_B, c_playerStateShowScore, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    PlayerSetState(gv_p0_NEUTRAL, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p6_DOMINION_ORANGE, c_playerStateFidgetingEnabled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_i;

    // Variable Initialization
    lv_i = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(528), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(583), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPropertyFixed(gv_tosh, c_unitPropEnergyPercent, 100.0);
    TriggerExecute(gt_InitWaypoints, true, false);
    libNtve_gf_ShowHideUnit(UnitFromId(485), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(922), true);
    UnitSetState(UnitFromId(922), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(922), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(1432), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1432), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(1432), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(1432), c_unitStateInvulnerable, true);
    UnitBehaviorAdd(UnitFromId(135), "FastBuild", UnitFromId(135), 1);
    UnitBehaviorAdd(UnitFromId(1330), "FastBuild", UnitFromId(1330), 1);
    UnitBehaviorAdd(UnitFromId(108), "FastBuild", UnitFromId(108), 1);
    UnitBehaviorAdd(UnitFromId(85), "FastBuild", UnitFromId(85), 1);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(120), true);
    UnitSetState(UnitFromId(120), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(120), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(120), c_unitStateStatusBar, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(126), true);
    UnitSetState(UnitFromId(126), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(126), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(126), c_unitStateStatusBar, false);
    UnitGroupLoopBegin(UnitGroup("Diamondback", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "Stand Morph");
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SiegeTank", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PrisonerCivilian", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_CellBlockAPrisonerWander, true, false);
    TriggerExecute(gt_CellBlockBPrisonerWander, true, false);
    UnitIssueOrder(UnitFromId(731), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1151)), c_orderQueueReplace);
    gv_nonActivatedDiamondbacks = UnitGroup("Diamondback", 0, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(UnitGroup(null, gv_p6_DOMINION_ORANGE, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cellBlockAJerksGroup, UnitGroupLoopCurrent());
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), PointFromId(1140)));
        UnitSetCustomValue(UnitGroupLoopCurrent(), 1, AngleBetweenPoints(PointFromId(1140), UnitGetPosition(UnitGroupLoopCurrent())));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_CellBlockAPatrol, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p6_DOMINION_ORANGE, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cellBlockBJerksGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_ghostEMP = UnitFromId(1455);
    UnitSetPropertyFixed(gv_ghostEMP, c_unitPropEnergyPercent, 100.0);
    TechTreeUpgradeAddLevel(gv_p6_DOMINION_ORANGE, "PersonalCloaking", 1);
    TriggerExecute(gt_GhostCloak, true, false);
    libNtve_gf_MakeUnitInvulnerable(gv_ghostEMP, true);
    TriggerExecute(gt_InitialMarines, true, false);
    TriggerExecute(gt_AOEMarines, true, false);
    TriggerExecute(gt_CellBlockBRavenPatrol, true, false);
    UnitIssueOrder(UnitFromId(1648), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(24), "FastBuild", UnitFromId(24), 1);
    UnitBehaviorAdd(UnitFromId(25), "FastBuild", UnitFromId(25), 1);
    UnitCargoCreate(UnitFromId(6), "Marine", 4);
    UnitCargoCreate(UnitFromId(7), "Marine", 4);
    UnitGroupLoopBegin(UnitGroup(null, gv_p3_DOMINION_RED, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("DuskWing", gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("DukesRevenge", gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Reaper", gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03AMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(38), RegionFromId(39), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(4), RegionFromId(3), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(37), RegionFromId(36), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(41), RegionFromId(41), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(41), RegionFromId(41), gv_p2_RAYNOR_LIGHTBLUE);
    libLbty_gf_AutoRevealRegion(RegionFromId(8), RegionFromId(8), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(55), RegionFromId(55), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(55), RegionFromId(55), gv_p2_RAYNOR_LIGHTBLUE);
    TriggerExecute(gt_GuardTowersInitiate, true, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(59), RegionFromId(59), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        libNtve_gf_SetTacticalAIThink(PlayerGroupLoopCurrent(), "Ghost", "GhostAI", false);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_raynorsRaiders);
    while (!PlayerGroupLoopDone()) {
        libNtve_gf_SetTacticalAIThink(PlayerGroupLoopCurrent(), "Medic", "MedicAI", false);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    if (((PlayerDifficulty(1) == 3 || PlayerDifficulty(1) == 4) == true)) {
        AISetDifficulty(gv_p3_DOMINION_RED, c_diffPressForward, true);
    }
    else {
    }
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShrikeTurret", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "NeosteelFrame", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", libNtve_gf_DifficultyValueInt(3, 4, 4, 6));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        TriggerEnable(gt_ENEMYRavensActivateArea03Approached, true);
    }
    else {
    }
    if ((PlayerDifficulty(gv_p1_USER) == 1)) {
        TechTreeUpgradeAddLevel(gv_p1_USER, "ToshEasyMode", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Diamondback", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Tosh", false, gv_p1_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("HammerSecurity", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("HelsAngelAssault", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("DuskWing", false, gv_p1_USER);
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeBreakerSieged", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("DukesRevenge", false, gv_p1_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_p1_USER) || (UnitGetOwner(EventUnitTarget()) == gv_p1_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 4;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitStartedAttack(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    VisRevealArea(gv_p1_USER, RegionFromId(29), 0.0, false);
    Wait(0.1, c_timeGame);
    UnitSelect(gv_tosh, gv_p1_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(92)), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    AICampaignStart(gv_p2_RAYNOR_LIGHTBLUE);
    AICampaignStart(gv_p3_DOMINION_RED);
    AICampaignStart(gv_p4_DOMINION_PURPLE);
    AICampaignStart(gv_p5_DOMINION_GREY);
    AICampaignStart(gv_p6_DOMINION_ORANGE);
    AICampaignStart(gv_p8_ALLIED_PINK);
    AICampaignStart(gv_p9_ALLIED_GREEN);
    AICampaignStart(gv_p11_ALLIED_CELLBLOCK_A);
    AICampaignStart(gv_p12_ALLIED_CELLBLOCK_B);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TimerStart(gv_achievementHardTimer, 1500.0, false, c_timeAI);
    }
    else {
    }
    UnitIssueOrder(UnitFromId(227), Order(AbilityCommand("ArmSiloWithNuke", 0)), c_orderQueueReplace);
    TriggerExecute(gt_StartingMarinesBehavior, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveClearMainPrisonCreateQ, true, false);
    TriggerExecute(gt_StorymodeTipsQ, true, false);
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_ObjectiveCellBlock_ACreateQ, true, false);
    TriggerExecute(gt_ObjectiveCellBlock_BCreateQ, true, false);
    TriggerExecute(gt_OpeningDialogueQ, true, false);
    TriggerExecute(gt_TIPCloakingQ, true, false);
    TriggerEnable(gt_MedicMana, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt_OpeningDialogueQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/06967444"), null, gv_tosh);
    // Transmission - SoundLink("TTosh03ATosh00021", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ATosh00021", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningDialogueQ_Init () {
    gt_OpeningDialogueQ = TriggerCreate("gt_OpeningDialogueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guard Towers Initiate
//--------------------------------------------------------------------------------------------------
bool gt_GuardTowersInitiate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "NewFolsomPrisonTower", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    Wait(6.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(56), "NewFolsomPrisonTower", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuardTowersInitiate_Init () {
    gt_GuardTowersInitiate = TriggerCreate("gt_GuardTowersInitiate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Dies
//--------------------------------------------------------------------------------------------------
bool gt_Bunker15Dies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p2_RAYNOR_LIGHTBLUE))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("DestructibleSandbags", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bunker15Dies_Init () {
    gt_Bunker15Dies = TriggerCreate("gt_Bunker15Dies_Func");
    TriggerAddEventUnitDied(gt_Bunker15Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medic Mana
//--------------------------------------------------------------------------------------------------
bool gt_MedicMana_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Medic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicMana_Init () {
    gt_MedicMana = TriggerCreate("gt_MedicMana_Func");
    TriggerEnable(gt_MedicMana, false);
    TriggerAddEventUnitRegion(gt_MedicMana, null, RegionPlayableMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor'sBaseUnderAttack Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorsBaseUnderAttackQ_Func (bool testConds, bool runActions) {
    int auto720DA649_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p2_RAYNOR_LIGHTBLUE))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(libNtve_gf_KillingUnit()), gv_p2_RAYNOR_LIGHTBLUE, 4) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/91FF803F"), null, UnitGetPosition(EventUnit()));
    auto720DA649_val = RandomInt(0, 3);
    if (auto720DA649_val == 0) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh03ARaynor00015", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00015", 0), c_transmissionDurationSet, 5.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else if (auto720DA649_val == 1) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh03ARaynor00016", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00016", 0), c_transmissionDurationSet, 6.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else if (auto720DA649_val == 2) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh03ARaynor00017", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00017", 0), c_transmissionDurationSet, 6.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else if (auto720DA649_val == 3) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh03ARaynor00018", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00018", 0), c_transmissionDurationSet, 6.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorsBaseUnderAttackQ_Init () {
    gt_RaynorsBaseUnderAttackQ = TriggerCreate("gt_RaynorsBaseUnderAttackQ_Func");
    TriggerAddEventUnitDied(gt_RaynorsBaseUnderAttackQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Marines
//--------------------------------------------------------------------------------------------------
bool gt_InitialMarines_Func (bool testConds, bool runActions) {
    int auto5F0EABE7_ae;
    int auto5F0EABE7_ai;
    int autoA36E5FD5_ae;
    int autoA36E5FD5_ai;
    int auto0B2A0ED9_ae;
    int auto0B2A0ED9_ai;

    // Variable Declarations
    int lv_i;
    point lv_attackPoint;

    // Variable Initialization
    lv_i = 0;
    lv_attackPoint = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Marine", gv_p6_DOMINION_ORANGE, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_numberOfInitialMarines += 1;
        gv_initialMarines[gv_numberOfInitialMarines] = UnitGroupLoopCurrent();
        gv_initialMarinePoints[gv_numberOfInitialMarines] = UnitGetPosition(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (true) {
        Wait(2.0, c_timeAI);
        if ((UnitGroupCount(UnitGroup(null, gv_p6_DOMINION_ORANGE, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            TriggerEnable(gt_ToshVictims, false);
            auto5F0EABE7_ae = gv_numberOfInitialMarines;
            auto5F0EABE7_ai = 1;
            lv_i = 1;
            while ((auto5F0EABE7_ai >= 0 && lv_i <= auto5F0EABE7_ae) || (auto5F0EABE7_ai <= 0 && lv_i >= auto5F0EABE7_ae)) {
                AISetUnitScriptControlled(gv_initialMarines[lv_i], false);
                AISetUnitSuicide(gv_initialMarines[lv_i], true);
                if (lv_i == auto5F0EABE7_ae) {
                    break;
                }
                lv_i = lv_i + auto5F0EABE7_ai;
            }
            return true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_attackPoint = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(RegionGetCenter(RegionFromId(46)), UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
            autoA36E5FD5_ae = gv_numberOfInitialMarines;
            autoA36E5FD5_ai = 1;
            lv_i = 1;
            while ((autoA36E5FD5_ai >= 0 && lv_i <= autoA36E5FD5_ae) || (autoA36E5FD5_ai <= 0 && lv_i >= autoA36E5FD5_ae)) {
                UnitIssueOrder(gv_initialMarines[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), lv_attackPoint), c_orderQueueReplace);
                if (lv_i == autoA36E5FD5_ae) {
                    break;
                }
                lv_i = lv_i + autoA36E5FD5_ai;
            }
        }
        else {
            auto0B2A0ED9_ae = gv_numberOfInitialMarines;
            auto0B2A0ED9_ai = 1;
            lv_i = 1;
            while ((auto0B2A0ED9_ai >= 0 && lv_i <= auto0B2A0ED9_ae) || (auto0B2A0ED9_ai <= 0 && lv_i >= auto0B2A0ED9_ae)) {
                UnitIssueOrder(gv_initialMarines[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), gv_initialMarinePoints[lv_i]), c_orderQueueReplace);
                if (lv_i == auto0B2A0ED9_ae) {
                    break;
                }
                lv_i = lv_i + auto0B2A0ED9_ai;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialMarines_Init () {
    gt_InitialMarines = TriggerCreate("gt_InitialMarines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOE Marines
//--------------------------------------------------------------------------------------------------
bool gt_AOEMarines_Func (bool testConds, bool runActions) {
    int autoC1760395_ae;
    int autoC1760395_ai;
    int auto32E86561_ae;
    int auto32E86561_ai;
    int auto1C4DD019_ae;
    int auto1C4DD019_ai;
    int auto7EBA5900_ae;
    int auto7EBA5900_ai;

    // Variable Declarations
    int lv_i;
    point lv_attackPoint;

    // Variable Initialization
    lv_i = 0;
    lv_attackPoint = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Marine", gv_p6_DOMINION_ORANGE, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_numberOfAOEMarines += 1;
        gv_aOEMarines[gv_numberOfAOEMarines] = UnitGroupLoopCurrent();
        gv_aOEMarinePoints[gv_numberOfAOEMarines] = UnitGetPosition(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitGroupCount(UnitGroup(null, gv_p6_DOMINION_ORANGE, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            autoC1760395_ae = gv_numberOfAOEMarines;
            autoC1760395_ai = 1;
            lv_i = 1;
            while ((autoC1760395_ai >= 0 && lv_i <= autoC1760395_ae) || (autoC1760395_ai <= 0 && lv_i >= autoC1760395_ae)) {
                AISetUnitScriptControlled(gv_aOEMarines[lv_i], false);
                AISetUnitSuicide(gv_aOEMarines[lv_i], true);
                if (lv_i == autoC1760395_ae) {
                    break;
                }
                lv_i = lv_i + autoC1760395_ai;
            }
            return true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            auto32E86561_ae = gv_numberOfAOEMarines;
            auto32E86561_ai = 1;
            lv_i = 1;
            while ((auto32E86561_ai >= 0 && lv_i <= auto32E86561_ae) || (auto32E86561_ai <= 0 && lv_i >= auto32E86561_ae)) {
                UnitIssueOrder(gv_aOEMarines[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1502)), c_orderQueueReplace);
                if (lv_i == auto32E86561_ae) {
                    break;
                }
                lv_i = lv_i + auto32E86561_ai;
            }
            Wait(2.0, c_timeAI);
            while (true) {
                if ((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    break;
                }
                else {
                }
                lv_attackPoint = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(RegionGetCenter(RegionFromId(38)), UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
                auto1C4DD019_ae = gv_numberOfAOEMarines;
                auto1C4DD019_ai = 1;
                lv_i = 1;
                while ((auto1C4DD019_ai >= 0 && lv_i <= auto1C4DD019_ae) || (auto1C4DD019_ai <= 0 && lv_i >= auto1C4DD019_ae)) {
                    UnitIssueOrder(gv_aOEMarines[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), lv_attackPoint), c_orderQueueReplace);
                    if (lv_i == auto1C4DD019_ae) {
                        break;
                    }
                    lv_i = lv_i + auto1C4DD019_ai;
                }
                Wait(1.0, c_timeAI);
            }
        }
        else {
            auto7EBA5900_ae = gv_numberOfAOEMarines;
            auto7EBA5900_ai = 1;
            lv_i = 1;
            while ((auto7EBA5900_ai >= 0 && lv_i <= auto7EBA5900_ae) || (auto7EBA5900_ai <= 0 && lv_i >= auto7EBA5900_ae)) {
                UnitIssueOrder(gv_aOEMarines[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), gv_aOEMarinePoints[lv_i]), c_orderQueueReplace);
                if (lv_i == auto7EBA5900_ae) {
                    break;
                }
                lv_i = lv_i + auto7EBA5900_ai;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOEMarines_Init () {
    gt_AOEMarines = TriggerCreate("gt_AOEMarines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starting Marines Behavior
//--------------------------------------------------------------------------------------------------
bool gt_StartingMarinesBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victims;
    unit lv_searcher;
    point lv_returnPoint;
    bool lv_victimsVictimized;

    // Variable Initialization
    lv_victims = UnitGroupEmpty();
    lv_searcher = null;
    lv_returnPoint = null;
    lv_victimsVictimized = false;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_victims, UnitFromId(1867));
    UnitGroupAdd(lv_victims, UnitFromId(1868));
    UnitGroupAdd(lv_victims, UnitFromId(1524));
    while (true) {
        Wait(0.25, c_timeGame);
        UnitGroupLoopBegin(lv_victims);
        while (!UnitGroupLoopDone()) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) < 99.0)) {
                lv_victimsVictimized = true;
                break;
            }
            else {
            }
            if ((UnitGroupCount(lv_victims, c_unitCountAlive) < 3)) {
                lv_victimsVictimized = true;
                break;
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if ((lv_victimsVictimized == true)) {
            break;
        }
        else {
        }
    }
    lv_searcher = libNtve_gf_ClosestUnitToPoint(RegionGetCenter(RegionFromId(46)), UnitGroupFilter(null, c_playerAny, lv_victims, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    if ((UnitIsAlive(lv_searcher) == false)) {
        return true;
    }
    else {
        UnitSetOwner(lv_searcher, gv_p5_DOMINION_GREY, false);
        lv_returnPoint = UnitGetPosition(lv_searcher);
        UnitIssueOrder(lv_searcher, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(lv_searcher, UnitGetPosition(gv_tosh), 0.5);
    }
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(lv_searcher) == false)) {
        UnitSetOwner(lv_searcher, gv_p6_DOMINION_ORANGE, false);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
        UnitIssueOrder(lv_searcher, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(50))), c_orderQueueReplace);
    }
    else {
    }
    Wait(8.0, c_timeGame);
    if ((UnitIsAlive(lv_searcher) == false)) {
        UnitIssueOrder(lv_searcher, OrderTargetingPoint(AbilityCommand("attack", 0), lv_returnPoint), c_orderQueueReplace);
    }
    else {
    }
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(lv_searcher) == false)) {
        AISetUnitScriptControlled(lv_searcher, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartingMarinesBehavior_Init () {
    gt_StartingMarinesBehavior = TriggerCreate("gt_StartingMarinesBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh Victims
//--------------------------------------------------------------------------------------------------
bool gt_ToshVictims_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_searcher;
    unitgroup lv_marineGroup;

    // Variable Initialization
    lv_searcher = null;
    lv_marineGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() == gv_tosh))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p6_DOMINION_ORANGE) || (UnitGetOwner(EventUnit()) == gv_p3_DOMINION_RED)))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(46)) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_marineGroup = UnitGroup("Marine", gv_p6_DOMINION_ORANGE, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_searcher = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_tosh), lv_marineGroup);
    libNtve_gf_MakeUnitFacePoint(lv_searcher, UnitGetPosition(gv_tosh), 0.3);
    UnitGroupLoopBegin(lv_marineGroup);
    while (!UnitGroupLoopDone()) {
        if ((UnitGroupLoopCurrent() != lv_searcher)) {
            UnitSetFacing(UnitGroupLoopCurrent(), libNtve_gf_RandomAngle(), RandomFixed(0.4, 0.7));
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    if ((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    else {
    }
    UnitGroupLoopBegin(lv_marineGroup);
    while (!UnitGroupLoopDone()) {
        UnitSetFacing(UnitGroupLoopCurrent(), libNtve_gf_RandomAngle(), RandomFixed(0.4, 0.7));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    if ((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    else {
    }
    UnitGroupLoopBegin(lv_marineGroup);
    while (!UnitGroupLoopDone()) {
        UnitSetFacing(UnitGroupLoopCurrent(), libNtve_gf_RandomAngle(), RandomFixed(0.4, 0.7));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToshVictims_Init () {
    gt_ToshVictims = TriggerCreate("gt_ToshVictims_Func");
    TriggerAddEventUnitDamaged(gt_ToshVictims, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Cloak
//--------------------------------------------------------------------------------------------------
bool gt_GhostCloak_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_ghostEMP) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_ghostEMP, c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(gv_ghostEMP, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_ghostEMP, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_PauseUnit(gv_ghostEMP, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostCloak_Init () {
    gt_GhostCloak = TriggerCreate("gt_GhostCloak_Func");
    TriggerAddEventTimePeriodic(gt_GhostCloak, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost EMP
//--------------------------------------------------------------------------------------------------
bool gt_GhostEMP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tosh))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_ghostEMP) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(gv_ghostEMP, false);
    TriggerEnable(gt_GhostCloak, false);
    TriggerEnable(gt_GhostEMPSafety, true);
    libNtve_gf_MakeUnitInvulnerable(gv_ghostEMP, false);
    UnitSetPropertyFixed(gv_ghostEMP, c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(gv_ghostEMP, Order(AbilityCommand("GhostCloak", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_ghostEMP, OrderTargetingPoint(AbilityCommand("EMP", 0), PointFromId(368)), c_orderQueueReplace);
    gv_ghostActive = true;
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_TIPConsumptionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostEMP_Init () {
    gt_GhostEMP = TriggerCreate("gt_GhostEMP_Func");
    TriggerAddEventUnitRegion(gt_GhostEMP, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost  EMP Safety
//--------------------------------------------------------------------------------------------------
bool gt_GhostEMPSafety_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_ghostActive == true))) {
            return false;
        }

        if (!((gv_ghostCastEMP == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_ghostEMP) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_GhostCloak, false);
    libNtve_gf_PauseUnit(gv_ghostEMP, false);
    libNtve_gf_MakeUnitInvulnerable(gv_ghostEMP, false);
    UnitSetPropertyFixed(gv_ghostEMP, c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(gv_ghostEMP, Order(AbilityCommand("GhostCloak", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_ghostEMP, OrderTargetingPoint(AbilityCommand("EMP", 0), PointFromId(368)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostEMPSafety_Init () {
    gt_GhostEMPSafety = TriggerCreate("gt_GhostEMPSafety_Func");
    TriggerEnable(gt_GhostEMPSafety, false);
    TriggerAddEventTimePeriodic(gt_GhostEMPSafety, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost EMP Safety Set
//--------------------------------------------------------------------------------------------------
bool gt_GhostEMPSafetySet_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_ghostEMP) == true))) {
            return false;
        }

        if (!((gv_ghostCastEMP == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_ghostCastEMP = true;
    TriggerEnable(gt_GhostEMPSafety, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostEMPSafetySet_Init () {
    gt_GhostEMPSafetySet = TriggerCreate("gt_GhostEMPSafetySet_Func");
    TriggerAddEventUnitAbility(gt_GhostEMPSafetySet, UnitRefFromVariable("gv_ghostEMP"), AbilityCommand("EMP", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raven Patrol Start
//--------------------------------------------------------------------------------------------------
bool gt_RavenPatrolStart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tosh))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1648)) == false)) {
        return true;
    }
    else {
    }
    UnitIssueOrder(UnitFromId(1648), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(960)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1648), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    while (true) {
        Wait(9.0, c_timeGame);
        if ((UnitIsAlive(UnitFromId(1648)) == false)) {
            return true;
        }
        else {
        }
        UnitIssueOrder(UnitFromId(1648), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1769)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1648), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        Wait(9.0, c_timeGame);
        if ((UnitIsAlive(UnitFromId(1648)) == false)) {
            return true;
        }
        else {
        }
        UnitIssueOrder(UnitFromId(1648), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(960)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1648), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavenPatrolStart_Init () {
    gt_RavenPatrolStart = TriggerCreate("gt_RavenPatrolStart_Func");
    TriggerAddEventUnitRegion(gt_RavenPatrolStart, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Mind Blast
//--------------------------------------------------------------------------------------------------
bool gt_GiveMindBlast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("MindBlast", 0), true);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("MindBlast", 0), true);
    gv_flashMindblast = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveMindBlast_Init () {
    gt_GiveMindBlast = TriggerCreate("gt_GiveMindBlast_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Psi Shield
//--------------------------------------------------------------------------------------------------
bool gt_GivePsiShield_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("VoodooShield", 0), true);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("VoodooShield", 0), true);
    gv_flashPsiShield = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GivePsiShield_Init () {
    gt_GivePsiShield = TriggerCreate("gt_GivePsiShield_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP - Nuke Ready First Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPNukeReadyFirstQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_tosh, RegionFromId(28)) == true))) {
            return false;
        }

        if (!((gv_stage >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ARaynor00010", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00010", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh03ARaynor00026", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00026", 0), c_transmissionDurationAdd, 0.0, true);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("HeroNuclearStrike", 0), true);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("HeroNuclearStrike", 0), true);
    gv_flashNuke = true;
    UnitMagazineArm(gv_shadowOps, AbilityCommand("HeroArmNuke", 0), libNtve_gf_DifficultyValueInt(5, 5, 4, 4));
    SoundPlay(SoundLink("Alert_TerranNukeReady", -1), PlayerGroupAll(), 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh03a_TacNuke", 3, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPNukeReadyFirstQ_Init () {
    gt_TIPNukeReadyFirstQ = TriggerCreate("gt_TIPNukeReadyFirstQ_Func");
    TriggerAddEventTimePeriodic(gt_TIPNukeReadyFirstQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Missile Turret Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_MissileTurretDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_aIStartedSafety == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_aIStartedSafety = true;
    TriggerExecute(gt_StartAI, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogueRaynorsForcesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissileTurretDestroyed_Init () {
    gt_MissileTurretDestroyed = TriggerCreate("gt_MissileTurretDestroyed_Func");
    TriggerAddEventUnitDied(gt_MissileTurretDestroyed, UnitRefFromUnit(UnitFromId(228)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Start Safety
//--------------------------------------------------------------------------------------------------
bool gt_AIStartSafety_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_aIStartedSafety == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_StartAI, true, false);
    gv_aIStartedSafety = true;
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogueRaynorsForcesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIStartSafety_Init () {
    gt_AIStartSafety = TriggerCreate("gt_AIStartSafety_Func");
    TriggerAddEventUnitRegion(gt_AIStartSafety, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block A Completed
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockACompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vehicle;
    unit lv_driver;
    unitgroup lv_prisoners;

    // Variable Initialization
    lv_vehicle = null;
    lv_driver = null;
    lv_prisoners = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_cellBlockAJerksGroup) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03AMusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_cellBlocksFreed += 1;
    gv_bonusCreditsEarned += 25000;
    TriggerExecute(gt_ObjectiveCellBlock_AComplete, true, false);
    UnitIssueOrder(UnitFromId(156), Order(AbilityCommand("SecurityGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    VisRevealArea(gv_p1_USER, RegionFromId(13), 0.0, false);
    TriggerExecute(gt_CellBlockACompletedQ, true, false);
    TriggerStop(gt_CellBlockAPrisonerWander);
    gf_CellBlockAssignDrivers("Diamondback", "Diamondback", RegionFromId(22), RegionFromId(13));
    while (!((gv_firstDiamondbacksActivated >= 1))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ALLYAttackWavesCellBlockA, true, false);
    Wait(20.0, c_timeAI);
    gv_bonusClear01 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockACompleted_Init () {
    gt_CellBlockACompleted = TriggerCreate("gt_CellBlockACompleted_Func");
    TriggerAddEventUnitDied(gt_CellBlockACompleted, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block A Completed Q
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockACompletedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ARaynor00007", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00007", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockACompletedQ_Init () {
    gt_CellBlockACompletedQ = TriggerCreate("gt_CellBlockACompletedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block A Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockAReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_p1_USER, RegionFromId(21), 0.0, false);
    MinimapPing(PlayerGroupAll(), PointFromId(2056), 5.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/B84B328A"), null, RegionGetCenter(RegionFromId(21)));
    SoundPlay(SoundLink("UI_TerranPing", 0), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveShow(gv_objectiveCellBlock_A, PlayerGroupAll(), true);
    VisRevealArea(gv_p1_USER, RegionFromId(22), 4.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(22)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.8);
    gv_cellBlock_A_Ping = PingLastCreated();
    PingSetTooltip(gv_cellBlock_A_Ping, StringExternal("Param/Value/7949E8B2"));
    Wait(2.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03AHorner00005", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03AHorner00005", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockAReminderQ_Init () {
    gt_CellBlockAReminderQ = TriggerCreate("gt_CellBlockAReminderQ_Func");
    TriggerAddEventUnitRegion(gt_CellBlockAReminderQ, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block A Patrol
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockAPatrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_movementTarget;
    int lv_targetCooldown;
    unitgroup lv_patrolGroup;
    unit lv_tempUnit;

    // Variable Initialization
    lv_movementTarget = null;
    lv_targetCooldown = 0;
    lv_patrolGroup = UnitGroupEmpty();
    lv_tempUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrolGroup = UnitGroupFilter(null, gv_p6_DOMINION_ORANGE, gv_cellBlockAJerksGroup, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        Wait(1.0, c_timeGame);
        while (!((gv_cellBlockASearching == false))) {
            Wait(0.5, c_timeGame);
        }
        if ((UnitGroupCount(lv_patrolGroup, c_unitCountAlive) == 0)) {
            TriggerEnable(gt_CellBlockAPatrolSearching, false);
            TriggerStop(gt_CellBlockAPatrolSearching);
            return true;
        }
        else {
        }
        if ((lv_targetCooldown > 0)) {
            lv_targetCooldown -= 1;
        }
        else {
        }
        lv_tempUnit = UnitGroupUnit(lv_patrolGroup, 1);
        if ((lv_targetCooldown == 0) && (libNtve_gf_UnitInRegion(lv_tempUnit, RegionCircle(PointWithOffsetPolar(PointFromId(1140), UnitGetCustomValue(lv_tempUnit, 0), UnitGetCustomValue(lv_tempUnit, 1)), 1.0)) == true)) {
            lv_movementTarget = PointFromId(1142);
            lv_targetCooldown = 10;
        }
        else {
        }
        if ((lv_targetCooldown == 0) && (libNtve_gf_UnitInRegion(lv_tempUnit, RegionCircle(PointWithOffsetPolar(PointFromId(1142), UnitGetCustomValue(lv_tempUnit, 0), UnitGetCustomValue(lv_tempUnit, 1)), 1.0)) == true)) {
            lv_movementTarget = PointFromId(1140);
            lv_targetCooldown = 10;
        }
        else {
        }
        if ((UnitIsAlive(gv_tosh) == true) && (libNtve_gf_UnitIsVisibleToPlayer(gv_tosh, gv_p6_DOMINION_ORANGE) == true) && (libNtve_gf_UnitInRegion(gv_tosh, RegionCircle(libNtve_gf_CenterOfUnitGroup(lv_patrolGroup), 9.0)) == true)) {
            UnitGroupIssueOrder(lv_patrolGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_tosh)), c_orderQueueReplace);
        }
        else {
            UnitGroupLoopBegin(lv_patrolGroup);
            while (!UnitGroupLoopDone()) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(lv_movementTarget, UnitGetCustomValue(UnitGroupLoopCurrent(), 0), UnitGetCustomValue(UnitGroupLoopCurrent(), 1))), c_orderQueueReplace);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockAPatrol_Init () {
    gt_CellBlockAPatrol = TriggerCreate("gt_CellBlockAPatrol_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block A Patrol Searching
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockAPatrolSearching_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_searcher;
    unitgroup lv_patrolGroup;

    // Variable Initialization
    lv_searcher = null;
    lv_patrolGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() == gv_tosh))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p6_DOMINION_ORANGE))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(gv_tosh, gv_p6_DOMINION_ORANGE) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_cellBlockAJerksGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_cellBlockASearching = true;
    lv_patrolGroup = UnitGroupFilter(null, gv_p6_DOMINION_ORANGE, gv_cellBlockAJerksGroup, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_searcher = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_tosh), lv_patrolGroup);
    UnitIssueOrder(lv_searcher, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(lv_searcher, UnitGetPosition(gv_tosh), 0.3);
    UnitGroupLoopBegin(lv_patrolGroup);
    while (!UnitGroupLoopDone()) {
        if ((UnitGroupLoopCurrent() != lv_searcher)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetFacing(UnitGroupLoopCurrent(), libNtve_gf_RandomAngle(), RandomFixed(0.4, 0.7));
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeGame);
    if ((libNtve_gf_UnitIsVisibleToPlayer(gv_tosh, gv_p6_DOMINION_ORANGE) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
        gv_cellBlockASearching = false;
        return true;
    }
    else {
    }
    UnitGroupLoopBegin(lv_patrolGroup);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetFacing(UnitGroupLoopCurrent(), libNtve_gf_RandomAngle(), RandomFixed(0.4, 0.7));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeGame);
    Wait(2.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockAPatrolSearching_Init () {
    gt_CellBlockAPatrolSearching = TriggerCreate("gt_CellBlockAPatrolSearching_Func");
    TriggerAddEventUnitDamaged(gt_CellBlockAPatrolSearching, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block A Prisoner Wander
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockAPrisonerWander_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_prisonerGroup;
    point lv_randomPoint;

    // Variable Initialization
    lv_prisonerGroup = UnitGroupEmpty();
    lv_randomPoint = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("PrisonerCivilian", gv_p7_PRISONER_YELLOW, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_prisonerGroup, UnitGroupLoopCurrent());
        lv_randomPoint = RegionRandomPoint(RegionFromId(45));
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, PointGetX(UnitGetPosition(UnitGroupLoopCurrent())));
        UnitSetCustomValue(UnitGroupLoopCurrent(), 1, PointGetY(UnitGetPosition(UnitGroupLoopCurrent())));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (true) {
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("PrisonerCivilian", gv_p7_PRISONER_YELLOW, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(Point(UnitGetCustomValue(UnitGroupLoopCurrent(), 0), UnitGetCustomValue(UnitGroupLoopCurrent(), 1)), 2.0)) == true)) {
                if ((RandomInt(1, 40) == 1)) {
                    lv_randomPoint = RegionRandomPoint(RegionFromId(45));
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 0, PointGetX(lv_randomPoint));
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 1, PointGetY(lv_randomPoint));
                }
                else {
                }
            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), Point(UnitGetCustomValue(UnitGroupLoopCurrent(), 0), UnitGetCustomValue(UnitGroupLoopCurrent(), 1))), c_orderQueueReplace);
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockAPrisonerWander_Init () {
    gt_CellBlockAPrisonerWander = TriggerCreate("gt_CellBlockAPrisonerWander_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block B Completed
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockBCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vehicle;
    unit lv_driver;
    unitgroup lv_prisoners;
    unitgroup lv_allVehicles;

    // Variable Initialization
    lv_vehicle = null;
    lv_driver = null;
    lv_prisoners = UnitGroupEmpty();
    lv_allVehicles = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_cellBlockBJerksGroup) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03AMusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_cellBlocksFreed += 1;
    gv_bonusCreditsEarned += 25000;
    TriggerExecute(gt_ObjectiveCellBlock_BComplete, true, false);
    UnitIssueOrder(UnitFromId(131), Order(AbilityCommand("SecurityGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    VisRevealArea(gv_p1_USER, RegionFromId(15), 0.0, false);
    TriggerExecute(gt_CellBlockBCompletedQ, true, false);
    TriggerStop(gt_CellBlockBPrisonerWander);
    gf_CellBlockAssignDrivers("SiegeTank", "SiegeTank", RegionFromId(31), RegionFromId(15));
    while (!((gv_firstSiegeTanksActivated >= 2))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ALLYAttackWavesCellBlockB, true, false);
    Wait(20.0, c_timeAI);
    gv_bonusClear02 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockBCompleted_Init () {
    gt_CellBlockBCompleted = TriggerCreate("gt_CellBlockBCompleted_Func");
    TriggerAddEventUnitDied(gt_CellBlockBCompleted, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block B Completed Q
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockBCompletedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ARaynor00008", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00008", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockBCompletedQ_Init () {
    gt_CellBlockBCompletedQ = TriggerCreate("gt_CellBlockBCompletedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block B Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockBReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealArea(gv_p1_USER, RegionFromId(24), 0.0, false);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p7_PRISONER_YELLOW, 1);
    MinimapPing(PlayerGroupAll(), PointFromId(2057), 5.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/0C27CF7E"), null, RegionGetCenter(RegionFromId(24)));
    SoundPlay(SoundLink("UI_TerranPing", 0), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveShow(gv_objectiveCellBlock_B, PlayerGroupAll(), true);
    VisRevealArea(gv_p1_USER, RegionFromId(31), 4.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(31)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.8);
    gv_cellBlock_B_Ping = PingLastCreated();
    PingSetTooltip(gv_cellBlock_B_Ping, StringExternal("Param/Value/612DD42C"));
    Wait(2.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03AHorner00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03AHorner00013", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh03ARaynor00002", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00002", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockBReminderQ_Init () {
    gt_CellBlockBReminderQ = TriggerCreate("gt_CellBlockBReminderQ_Func");
    TriggerAddEventUnitRegion(gt_CellBlockBReminderQ, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block B Raven Patrol
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockBRavenPatrol_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(UnitFromId(823)) == false)) {
            return true;
        }
        else {
        }
        Wait(libNtve_gf_DifficultyValueFixed(7.0, 7.0, 10.0, 10.0), c_timeGame);
        UnitIssueOrder(UnitFromId(823), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(822)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(823), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        Wait(libNtve_gf_DifficultyValueFixed(6.0, 6.0, 10.0, 10.0), c_timeGame);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            UnitIssueOrder(UnitFromId(823), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(518)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitFromId(823), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1792)), c_orderQueueReplace);
        }
        UnitIssueOrder(UnitFromId(823), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockBRavenPatrol_Init () {
    gt_CellBlockBRavenPatrol = TriggerCreate("gt_CellBlockBRavenPatrol_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block B Prisoner Wander
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockBPrisonerWander_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_prisonerGroup;
    point lv_randomPoint;

    // Variable Initialization
    lv_prisonerGroup = UnitGroupEmpty();
    lv_randomPoint = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("PrisonerCivilian", gv_p7_PRISONER_YELLOW, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_prisonerGroup, UnitGroupLoopCurrent());
        lv_randomPoint = RegionRandomPoint(RegionFromId(47));
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, PointGetX(UnitGetPosition(UnitGroupLoopCurrent())));
        UnitSetCustomValue(UnitGroupLoopCurrent(), 1, PointGetY(UnitGetPosition(UnitGroupLoopCurrent())));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (true) {
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("PrisonerCivilian", gv_p7_PRISONER_YELLOW, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(Point(UnitGetCustomValue(UnitGroupLoopCurrent(), 0), UnitGetCustomValue(UnitGroupLoopCurrent(), 1)), 2.0)) == true)) {
                if ((RandomInt(1, 32) == 1)) {
                    lv_randomPoint = RegionRandomPoint(RegionFromId(47));
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 0, PointGetX(lv_randomPoint));
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 1, PointGetY(lv_randomPoint));
                }
                else {
                }
            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), Point(UnitGetCustomValue(UnitGroupLoopCurrent(), 0), UnitGetCustomValue(UnitGroupLoopCurrent(), 1))), c_orderQueueReplace);
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockBPrisonerWander_Init () {
    gt_CellBlockBPrisonerWander = TriggerCreate("gt_CellBlockBPrisonerWander_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block Workers Movement
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockWorkersMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_bonusClear01 == true)) {
        gf_CellBlockMoveWorker(UnitGroupRandomUnit(UnitGroup("PrisonerCivilian", gv_p7_PRISONER_YELLOW, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), RegionFromId(26));
    }
    else {
    }
    if ((gv_bonusClear02 == true)) {
        gf_CellBlockMoveWorker(UnitGroupRandomUnit(UnitGroup("PrisonerCivilian", gv_p7_PRISONER_YELLOW, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), RegionFromId(51));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockWorkersMovement_Init () {
    gt_CellBlockWorkersMovement = TriggerCreate("gt_CellBlockWorkersMovement_Func");
    TriggerAddEventTimePeriodic(gt_CellBlockWorkersMovement, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block Drivers Get In Vehicles
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockDriversGetInVehicles_Func (bool testConds, bool runActions) {
    unitgroup autoC4A62E5D_g;
    int autoC4A62E5D_u;

    // Variable Declarations
    unit lv_driver;
    unit lv_targetDiamondback;

    // Variable Initialization
    lv_driver = null;
    lv_targetDiamondback = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4A62E5D_g = UnitGroup("PrisonerCivilian", gv_p2_RAYNOR_LIGHTBLUE, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4A62E5D_u = 1;
    while (autoC4A62E5D_u <= UnitGroupCount(autoC4A62E5D_g, c_unitCountAll)) {
        lv_driver = UnitGroupUnit(autoC4A62E5D_g, autoC4A62E5D_u);
        if ((UnitOrder(lv_driver, 0) == null)) {
            if ((libNtve_gf_UnitInRegion(lv_driver, RegionFromId(13)) == true)) {
                lv_targetDiamondback = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_driver), gv_nonActivatedDiamondbacks);
                UnitGroupRemove(gv_nonActivatedDiamondbacks, lv_targetDiamondback);
                libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lv_targetDiamondback), "Stand Morph");
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_targetDiamondback), "StandMorphEnd", "Stand Morph End", 0, c_animTimeDefault);
            }
            else {
            }
            if ((libNtve_gf_UnitInRegion(lv_driver, RegionFromId(43)) == true)) {
                gv_firstDiamondbacksActivated += 1;
            }
            else {
            }
            if ((libNtve_gf_UnitInRegion(lv_driver, RegionFromId(44)) == true)) {
                gv_firstSiegeTanksActivated += 1;
            }
            else {
            }
            UnitRemove(lv_driver);
        }
        else {
        }
        if (lv_driver == UnitGroupUnit(autoC4A62E5D_g, autoC4A62E5D_u)) {
            autoC4A62E5D_u = autoC4A62E5D_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockDriversGetInVehicles_Init () {
    gt_CellBlockDriversGetInVehicles = TriggerCreate("gt_CellBlockDriversGetInVehicles_Func");
    TriggerAddEventTimePeriodic(gt_CellBlockDriversGetInVehicles, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block Spawners
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockSpawners_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_bonusClear01 == true)) {
        if ((UnitGroupCount(UnitGroup("Diamondback", gv_p0_NEUTRAL, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
            UnitCreate(1, "Diamondback", 0, gv_p0_NEUTRAL, RegionGetCenter(RegionFromId(18)), 43.0);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
            UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        }
        else {
        }
    }
    else {
    }
    if ((gv_bonusClear02 == true)) {
        if ((UnitGroupCount(UnitGroup("SiegeTank", gv_p0_NEUTRAL, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
            UnitCreate(1, "SiegeTank", 0, gv_p0_NEUTRAL, RegionGetCenter(RegionFromId(20)), 135.0);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
            UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        }
        else {
        }
        if ((UnitGroupCount(UnitGroup("SiegeTank", gv_p0_NEUTRAL, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
            UnitCreate(1, "SiegeTank", 0, gv_p0_NEUTRAL, RegionGetCenter(RegionFromId(19)), 45.0);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
            UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockSpawners_Init () {
    gt_CellBlockSpawners = TriggerCreate("gt_CellBlockSpawners_Func");
    TriggerAddEventTimePeriodic(gt_CellBlockSpawners, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Mind Blast Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueMindBlastQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ATosh00023", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tosh, SoundLink("TTosh03ATosh00023", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueMindBlastQ_Init () {
    gt_DialogueMindBlastQ = TriggerCreate("gt_DialogueMindBlastQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Detection Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueDetectionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_tosh))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ATosh00020", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tosh, SoundLink("TTosh03ATosh00020", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh03ATosh00022", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tosh, SoundLink("TTosh03ATosh00022", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueDetectionQ_Init () {
    gt_DialogueDetectionQ = TriggerCreate("gt_DialogueDetectionQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueDetectionQ, null, RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor's Forces Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorsForcesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ARaynor00027", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00027", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh03ATosh00001", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tosh, SoundLink("TTosh03ATosh00001", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorsForcesQ_Init () {
    gt_DialogueRaynorsForcesQ = TriggerCreate("gt_DialogueRaynorsForcesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Outpost Check01
//--------------------------------------------------------------------------------------------------
bool gt_OutpostCheck01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p5_DOMINION_GREY, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_stage = 1;
    TriggerExecute(gt_OutpostBuild01AutoSaveQ, true, false);
    TriggerExecute(gt_DefenseOutpost01Create, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OutpostCheck01_Init () {
    gt_OutpostCheck01 = TriggerCreate("gt_OutpostCheck01_Func");
    TriggerAddEventTimePeriodic(gt_OutpostCheck01, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OutpostBuild01 Auto Save Q
//--------------------------------------------------------------------------------------------------
bool gt_OutpostBuild01AutoSaveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ARaynor00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00003", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/326FC940"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OutpostBuild01AutoSaveQ_Init () {
    gt_OutpostBuild01AutoSaveQ = TriggerCreate("gt_OutpostBuild01AutoSaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defense Outpost01 Create
//--------------------------------------------------------------------------------------------------
bool gt_DefenseOutpost01Create_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnDropPod(gv_p8_ALLIED_PINK, PointFromId(292), PointFromId(280), 4, "Marine", 1, "Medic", 1, "SCV", 0.5);
    gf_SpawnDropPod(gv_p8_ALLIED_PINK, PointFromId(293), PointFromId(281), 4, "Marine", 1, "Medic", 1, "SCV", 0.5);
    gf_SpawnDropPod(gv_p8_ALLIED_PINK, PointFromId(341), PointFromId(282), 4, "Marine", 1, "Medic", 1, "SCV", 0.5);
    Wait(5.0, c_timeGame);
    AIToggleBulliesInRegion(gv_p8_ALLIED_PINK, RegionFromId(5), true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p8_ALLIED_PINK, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p8_ALLIED_PINK, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenseOutpost01Create_Init () {
    gt_DefenseOutpost01Create = TriggerCreate("gt_DefenseOutpost01Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Outpost Check02
//--------------------------------------------------------------------------------------------------
bool gt_OutpostCheck02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p5_DOMINION_GREY, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p4_DOMINION_PURPLE, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_stage = 2;
    TriggerExecute(gt_OutpostBuild02AutoSaveQ, true, false);
    TriggerExecute(gt_DefenseOutpost02Create, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OutpostCheck02_Init () {
    gt_OutpostCheck02 = TriggerCreate("gt_OutpostCheck02_Func");
    TriggerAddEventTimePeriodic(gt_OutpostCheck02, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OutpostBuild02 Auto Save Q
//--------------------------------------------------------------------------------------------------
bool gt_OutpostBuild02AutoSaveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ARaynor00006", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ARaynor00006", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/737E0700"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OutpostBuild02AutoSaveQ_Init () {
    gt_OutpostBuild02AutoSaveQ = TriggerCreate("gt_OutpostBuild02AutoSaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defense Outpost02 Create
//--------------------------------------------------------------------------------------------------
bool gt_DefenseOutpost02Create_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnDropPod(gv_p9_ALLIED_GREEN, PointFromId(292), PointFromId(434), 4, "Marine", 1, "Medic", 1, "SCV", 0.5);
    gf_SpawnDropPod(gv_p9_ALLIED_GREEN, PointFromId(293), PointFromId(435), 4, "Marine", 1, "Medic", 1, "SCV", 0.5);
    gf_SpawnDropPod(gv_p9_ALLIED_GREEN, PointFromId(341), PointFromId(442), 4, "Marine", 1, "Medic", 1, "SCV", 0.5);
    Wait(5.0, c_timeGame);
    AIToggleBulliesInRegion(gv_p9_ALLIED_GREEN, RegionFromId(6), true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p9_ALLIED_GREEN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p9_ALLIED_GREEN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenseOutpost02Create_Init () {
    gt_DefenseOutpost02Create = TriggerCreate("gt_DefenseOutpost02Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Return
//--------------------------------------------------------------------------------------------------
bool gt_SCVReturn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p9_ALLIED_GREEN))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(714)), c_orderQueueReplace);
    Wait(8.0, c_timeAI);
    AISetUnitScriptControlled(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVReturn_Init () {
    gt_SCVReturn = TriggerCreate("gt_SCVReturn_Func");
    TriggerAddEventUnitRegion(gt_SCVReturn, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_maraudersComeOnline, 60.0, false, c_timeAI);
    AISetAPM(gv_p2_RAYNOR_LIGHTBLUE, 10000);
    AIAttackWaveSetGatherPoint(gv_p2_RAYNOR_LIGHTBLUE, PointFromId(432));
    AIAttackWaveSetGatherPoint(gv_p8_ALLIED_PINK, PointFromId(268));
    AIAttackWaveSetGatherPoint(gv_p9_ALLIED_GREEN, PointFromId(559));
    AIAttackWaveSetGatherPoint(gv_p11_ALLIED_CELLBLOCK_A, PointFromId(762));
    AIAttackWaveSetGatherPoint(gv_p12_ALLIED_CELLBLOCK_B, PointFromId(763));
    AIAttackWaveSetGatherPoint(gv_p3_DOMINION_RED, PointFromId(598));
    AIAttackWaveSetTargetPlayer(gv_p8_ALLIED_PINK, PlayerGroupSingle(gv_p3_DOMINION_RED));
    AIAttackWaveSetTargetPlayer(gv_p9_ALLIED_GREEN, PlayerGroupSingle(gv_p3_DOMINION_RED));
    AIAttackWaveSetTargetPlayer(gv_p11_ALLIED_CELLBLOCK_A, PlayerGroupSingle(gv_p4_DOMINION_PURPLE));
    AIAttackWaveSetTargetPlayer(gv_p12_ALLIED_CELLBLOCK_B, PlayerGroupSingle(gv_p3_DOMINION_RED));
    AIToggleBulliesInRegion(gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(12), true);
    AISetAPM(gv_p2_RAYNOR_LIGHTBLUE, 3000);
    AISetAPM(gv_p8_ALLIED_PINK, 3000);
    AISetAPM(gv_p9_ALLIED_GREEN, 3000);
    AISetAPM(gv_p3_DOMINION_RED, libNtve_gf_DifficultyValueInt(400, 800, 3000, 3000));
    TriggerExecute(gt_ALLYAttackWavesMainBase, true, false);
    TriggerExecute(gt_ALLYAttackWaves, true, false);
    TriggerExecute(gt_ENEMYAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Waypoints
//--------------------------------------------------------------------------------------------------
bool gt_InitWaypoints_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_waypoints[1] = PointFromId(376);
    gv_waypoints[2] = PointFromId(378);
    gv_waypoints[3] = PointFromId(379);
    gv_waypoints[4] = PointFromId(402);
    gv_waypoints[5] = PointFromId(399);
    gv_waypoints[6] = PointFromId(414);
    gv_waypoints[7] = PointFromId(415);
    gv_waypoints[8] = PointFromId(416);
    gv_waypoints[9] = PointFromId(418);
    gv_waypoints[10] = PointFromId(419);
    gv_waypoints[11] = PointFromId(403);
    gv_waypoints[12] = PointFromId(404);
    gv_waypoints[13] = PointFromId(405);
    gv_waypoints[14] = PointFromId(407);
    gv_waypoints[15] = PointFromId(409);
    gv_waypointCount = 15;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitWaypoints_Init () {
    gt_InitWaypoints = TriggerCreate("gt_InitWaypoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(30.0, c_timeAI);
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        TriggerExecute(gt_ALLYAttackWavesMainBase, true, false);
        TriggerStop(gt_ALLYAttackWavesCellBlockAActivate);
        TriggerStop(gt_ALLYAttackWavesCellBlockBActivate);
        TriggerExecute(gt_ALLYAttackWavesCellBlockAActivate, true, false);
        TriggerExecute(gt_ALLYAttackWavesCellBlockBActivate, true, false);
        Wait(15.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWaves_Init () {
    gt_ALLYAttackWaves = TriggerCreate("gt_ALLYAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves - Main Base
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWavesMainBase_Func (bool testConds, bool runActions) {
    int auto95CD12D3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto95CD12D3_val = gv_stage;
    if (auto95CD12D3_val == 0) {
        AIAttackWaveSetTargetPlayer(gv_p2_RAYNOR_LIGHTBLUE, PlayerGroupSingle(gv_p5_DOMINION_GREY));
        gf_SetWaypoints(gv_p2_RAYNOR_LIGHTBLUE, 1, gv_waypointCount);
        AIAttackWaveAddUnits4(4, 4, 4, 4, "Marine");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Medic");
        if ((TimerGetRemaining(gv_maraudersComeOnline) == 0.0)) {
            AIAttackWaveAddUnits4(1, 1, 1, 1, "Marauder");
        }
        else {
        }
    }
    else if (auto95CD12D3_val == 1) {
        AIAttackWaveSetTargetPlayer(gv_p2_RAYNOR_LIGHTBLUE, PlayerGroupSingle(gv_p4_DOMINION_PURPLE));
        gf_SetWaypoints(gv_p2_RAYNOR_LIGHTBLUE, 1, gv_waypointCount);
        AIAttackWaveAddUnits4(6, 6, 6, 6, "Marine");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Marauder");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Medic");
    }
    else if (auto95CD12D3_val == 2) {
        AIAttackWaveSetTargetPlayer(gv_p2_RAYNOR_LIGHTBLUE, PlayerGroupSingle(gv_p3_DOMINION_RED));
        gf_SetWaypoints(gv_p2_RAYNOR_LIGHTBLUE, 1, gv_waypointCount);
        AIAttackWaveAddUnits4(8, 8, 8, 8, "Marine");
        AIAttackWaveAddUnits4(3, 3, 3, 3, "Marauder");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Medic");
    }
    else {
    }
    AIAttackWaveSend(gv_p2_RAYNOR_LIGHTBLUE, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWavesMainBase_Init () {
    gt_ALLYAttackWavesMainBase = TriggerCreate("gt_ALLYAttackWavesMainBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves - Cell Block A Activate
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWavesCellBlockAActivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_bonusClear01 == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            break;
        }
        else {
        }
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ALLYAttackWavesCellBlockA, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWavesCellBlockAActivate_Init () {
    gt_ALLYAttackWavesCellBlockAActivate = TriggerCreate("gt_ALLYAttackWavesCellBlockAActivate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves - Cell Block A
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWavesCellBlockA_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_RescueUnit(UnitGroupUnit(UnitGroup("Diamondback", 0, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), gv_p11_ALLIED_CELLBLOCK_A, true);
    UnitGroupLoopBegin(UnitGroup("Diamondback", gv_p11_ALLIED_CELLBLOCK_A, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_SetWaypoints(gv_p11_ALLIED_CELLBLOCK_A, 8, gv_waypointCount);
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Diamondback");
    AIAttackWaveSend(gv_p11_ALLIED_CELLBLOCK_A, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWavesCellBlockA_Init () {
    gt_ALLYAttackWavesCellBlockA = TriggerCreate("gt_ALLYAttackWavesCellBlockA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves - Cell Block B Activate
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWavesCellBlockBActivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_bonusClear02 == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            break;
        }
        else {
        }
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ALLYAttackWavesCellBlockB, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWavesCellBlockBActivate_Init () {
    gt_ALLYAttackWavesCellBlockBActivate = TriggerCreate("gt_ALLYAttackWavesCellBlockBActivate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves - Cell Block B
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWavesCellBlockB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_chosenTank;

    // Variable Initialization
    lv_chosenTank = null;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 2) == 1)) {
        lv_chosenTank = UnitGroupUnit(UnitGroup("SiegeTank", 0, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        libNtve_gf_RescueUnit(lv_chosenTank, gv_p12_ALLIED_CELLBLOCK_B, true);
        UnitSetState(lv_chosenTank, c_unitStateTargetable, true);
        UnitSetState(lv_chosenTank, c_unitStateStatusBar, true);
        UnitSetState(lv_chosenTank, c_unitStateInvulnerable, false);
        UnitIssueOrder(lv_chosenTank, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1958)), c_orderQueueReplace);
    }
    else {
        lv_chosenTank = UnitGroupUnit(UnitGroup("SiegeTank", 0, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        libNtve_gf_RescueUnit(lv_chosenTank, gv_p12_ALLIED_CELLBLOCK_B, true);
        UnitSetState(lv_chosenTank, c_unitStateTargetable, true);
        UnitSetState(lv_chosenTank, c_unitStateStatusBar, true);
        UnitSetState(lv_chosenTank, c_unitStateInvulnerable, false);
        UnitIssueOrder(lv_chosenTank, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(357)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    AISetUnitScriptControlled(lv_chosenTank, false);
    AISetUnitSuicide(lv_chosenTank, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWavesCellBlockB_Init () {
    gt_ALLYAttackWavesCellBlockB = TriggerCreate("gt_ALLYAttackWavesCellBlockB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ENEMY Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ENEMYAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        TriggerExecute(gt_ENEMYAttackWaveStandard, true, false);
        Wait(45.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ENEMYAttackWaves_Init () {
    gt_ENEMYAttackWaves = TriggerCreate("gt_ENEMYAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ENEMY Attack Wave - Standard
//--------------------------------------------------------------------------------------------------
bool gt_ENEMYAttackWaveStandard_Func (bool testConds, bool runActions) {
    int auto7A07393A_val;
    int autoB140473D_n;
    int autoB140473D_i;
    int auto93C01791_n;
    int auto93C01791_i;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p3_DOMINION_RED, PlayerGroupSingle(gv_p2_RAYNOR_LIGHTBLUE));
    gf_SetWaypoints(gv_p3_DOMINION_RED, gv_waypointCount, 1);
    auto7A07393A_val = gv_stage;
    if (auto7A07393A_val == 0) {
        AIAttackWaveAddUnits4(6, 6, 7, 7, "Marine");
        if ((TimerGetRemaining(gv_maraudersComeOnline) == 0.0)) {
            AIAttackWaveAddUnits4(1, 1, 2, 2, "Hellion");
        }
        else {
        }
        gf_LimitUnitType(gv_p3_DOMINION_RED, 4, 4, 4, 4, "Medic", null);
    }
    else if (auto7A07393A_val == 1) {
        AIAttackWaveAddUnits4(7, 7, 8, 8, "Marine");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Hellion");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Reaper");
        autoB140473D_n = 2;
        autoB140473D_i = 1;
        while (autoB140473D_i <= autoB140473D_n) {
            gf_LimitUnitType(gv_p3_DOMINION_RED, 3, 3, 3, 3, "Medic", null);
            autoB140473D_i = autoB140473D_i + 1;
        }
    }
    else if (auto7A07393A_val == 2) {
        AIAttackWaveAddUnits4(8, 8, 9, 9, "Marine");
        AIAttackWaveAddUnits4(2, 2, 3, 0, "Hellion");
        AIAttackWaveAddUnits4(3, 3, 4, 4, "Reaper");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "SiegeTank");
        auto93C01791_n = 2;
        auto93C01791_i = 1;
        while (auto93C01791_i <= auto93C01791_n) {
            gf_LimitUnitType(gv_p3_DOMINION_RED, 4, 4, 4, 4, "Medic", null);
            auto93C01791_i = auto93C01791_i + 1;
        }
    }
    else {
    }
    AIAttackWaveSend(gv_p3_DOMINION_RED, 40, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ENEMYAttackWaveStandard_Init () {
    gt_ENEMYAttackWaveStandard = TriggerCreate("gt_ENEMYAttackWaveStandard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ENEMY Bonus Wave - Area 01 Hurt
//--------------------------------------------------------------------------------------------------
bool gt_ENEMYBonusWaveArea01Hurt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!(((EventUnit() == UnitFromId(297)) || (EventUnit() == UnitFromId(294))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetTargetPlayer(gv_p3_DOMINION_RED, PlayerGroupSingle(gv_p2_RAYNOR_LIGHTBLUE));
    gf_SetWaypoints(gv_p3_DOMINION_RED, gv_waypointCount, 1);
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Marauder");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "SiegeTank");
    AIAttackWaveSend(gv_p3_DOMINION_RED, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ENEMYBonusWaveArea01Hurt_Init () {
    gt_ENEMYBonusWaveArea01Hurt = TriggerCreate("gt_ENEMYBonusWaveArea01Hurt_Func");
    TriggerAddEventUnitDied(gt_ENEMYBonusWaveArea01Hurt, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ENEMY Ravens Activate - Area 03 Approached
//--------------------------------------------------------------------------------------------------
bool gt_ENEMYRavensActivateArea03Approached_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_p3_DOMINION_RED, RegionFromId(54), true);
    AIToggleBulliesInRegion(gv_p3_DOMINION_RED, RegionFromId(53), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ENEMYRavensActivateArea03Approached_Init () {
    gt_ENEMYRavensActivateArea03Approached = TriggerCreate("gt_ENEMYRavensActivateArea03Approached_Func");
    TriggerEnable(gt_ENEMYRavensActivateArea03Approached, false);
    TriggerAddEventUnitRegion(gt_ENEMYRavensActivateArea03Approached, null, RegionFromId(57), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ENEMY Bonus Wave - Area 02 Hurt
//--------------------------------------------------------------------------------------------------
bool gt_ENEMYBonusWaveArea02Hurt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!(((EventUnit() == UnitFromId(482)) || (EventUnit() == UnitFromId(668))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetTargetPlayer(gv_p3_DOMINION_RED, PlayerGroupSingle(gv_p2_RAYNOR_LIGHTBLUE));
    gf_SetWaypoints(gv_p3_DOMINION_RED, gv_waypointCount, 1);
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Marauder");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "SiegeTank");
    AIAttackWaveSend(gv_p3_DOMINION_RED, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ENEMYBonusWaveArea02Hurt_Init () {
    gt_ENEMYBonusWaveArea02Hurt = TriggerCreate("gt_ENEMYBonusWaveArea02Hurt_Func");
    TriggerAddEventUnitDied(gt_ENEMYBonusWaveArea02Hurt, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ENEMY Bonus Wave - Main Area Hurt
//--------------------------------------------------------------------------------------------------
bool gt_ENEMYBonusWaveMainAreaHurt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!(((EventUnit() == UnitFromId(261)) || (EventUnit() == UnitFromId(262))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetTargetPlayer(gv_p3_DOMINION_RED, PlayerGroupSingle(gv_p2_RAYNOR_LIGHTBLUE));
    gf_SetWaypoints(gv_p3_DOMINION_RED, gv_waypointCount, 1);
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Medic");
    AIAttackWaveAddUnits4(0, 0, 2, 4, "Marauder");
    AIAttackWaveAddUnits4(0, 0, 2, 4, "Banshee");
    AIAttackWaveSend(gv_p3_DOMINION_RED, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ENEMYBonusWaveMainAreaHurt_Init () {
    gt_ENEMYBonusWaveMainAreaHurt = TriggerCreate("gt_ENEMYBonusWaveMainAreaHurt_Func");
    TriggerAddEventUnitDied(gt_ENEMYBonusWaveMainAreaHurt, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair Enemy 01
//--------------------------------------------------------------------------------------------------
bool gt_RepairEnemy01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(294)) == true) || (UnitIsAlive(UnitFromId(297)) == true)))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_p5_DOMINION_GREY, "SCV", c_techCountQueuedOrBetter) < libNtve_gf_DifficultyValueInt(0, 0, 1, 1)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_p5_DOMINION_GREY, PointFromId(234));
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(709)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(710)), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepairEnemy01_Init () {
    gt_RepairEnemy01 = TriggerCreate("gt_RepairEnemy01_Func");
    TriggerAddEventTimePeriodic(gt_RepairEnemy01, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair Enemy 02
//--------------------------------------------------------------------------------------------------
bool gt_RepairEnemy02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(482)) == true) || (UnitIsAlive(UnitFromId(668)) == true)))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_p4_DOMINION_PURPLE, "SCV", c_techCountQueuedOrBetter) < libNtve_gf_DifficultyValueInt(1, 1, 2, 2)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_p4_DOMINION_PURPLE, PointFromId(706));
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(714)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(715)), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepairEnemy02_Init () {
    gt_RepairEnemy02 = TriggerCreate("gt_RepairEnemy02_Func");
    TriggerAddEventTimePeriodic(gt_RepairEnemy02, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair Enemy 03
//--------------------------------------------------------------------------------------------------
bool gt_RepairEnemy03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(457)) == true) || (UnitIsAlive(UnitFromId(263)) == true)))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_p3_DOMINION_RED, "SCV", c_techCountQueuedOrBetter) < libNtve_gf_DifficultyValueInt(1, 1, 2, 2)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_p3_DOMINION_RED, PointFromId(553));
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(554)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(775)), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepairEnemy03_Init () {
    gt_RepairEnemy03 = TriggerCreate("gt_RepairEnemy03_Func");
    TriggerAddEventTimePeriodic(gt_RepairEnemy03, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair Enemy 04
//--------------------------------------------------------------------------------------------------
bool gt_RepairEnemy04_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(401)) == true) || (UnitIsAlive(UnitFromId(1454)) == true)))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_p6_DOMINION_ORANGE, "SCV", c_techCountQueuedOrBetter) < libNtve_gf_DifficultyValueInt(1, 1, 2, 2)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_p6_DOMINION_ORANGE, PointFromId(186));
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(325)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(366)), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepairEnemy04_Init () {
    gt_RepairEnemy04 = TriggerCreate("gt_RepairEnemy04_Func");
    TriggerAddEventTimePeriodic(gt_RepairEnemy04, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerf Final Production
//--------------------------------------------------------------------------------------------------
bool gt_NerfFinalProduction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup("Barracks", gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "FastBuild", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Factory", gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "FastBuild", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Starport", gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "FastBuild", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NerfFinalProduction_Init () {
    gt_NerfFinalProduction = TriggerCreate("gt_NerfFinalProduction_Func");
    TriggerAddEventUnitRegion(gt_NerfFinalProduction, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 2221);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIMinerals_Init () {
    gt_AIMinerals = TriggerCreate("gt_AIMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_p2_RAYNOR_LIGHTBLUE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_p3_DOMINION_RED, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_p4_DOMINION_PURPLE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_p5_DOMINION_GREY, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_p6_DOMINION_ORANGE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_p8_ALLIED_PINK, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_p9_ALLIED_GREEN, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 2221);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGas_Init () {
    gt_AIGas = TriggerCreate("gt_AIGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_p2_RAYNOR_LIGHTBLUE, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_p3_DOMINION_RED, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_p4_DOMINION_PURPLE, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_p5_DOMINION_GREY, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_p6_DOMINION_ORANGE, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_p8_ALLIED_PINK, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_p9_ALLIED_GREEN, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storymode Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_StorymodeTipsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorymodeTipsQ_Init () {
    gt_StorymodeTipsQ = TriggerCreate("gt_StorymodeTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP - Cloaking Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPCloakingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh03a_Detectors", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPCloakingQ_Init () {
    gt_TIPCloakingQ = TriggerCreate("gt_TIPCloakingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP - Mindblast Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPMindblastQ_Func (bool testConds, bool runActions) {
    int autoAC7A6831_ae;
    int autoAC7A6831_ai;

    // Variable Declarations
    timer lv_indicatorTimeout;
    int lv_startingMindBlasts;
    unitgroup lv_initialMarineGroup;
    int lv_i;

    // Variable Initialization
    lv_indicatorTimeout = TimerCreate();
    lv_startingMindBlasts = 0;
    lv_initialMarineGroup = UnitGroupEmpty();
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tosh))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh03a_MindBlast", 3, PlayerGroupAll());
    TriggerExecute(gt_GiveMindBlast, true, false);
    TriggerExecute(gt_DialogueMindBlastQ, true, false);
    TriggerQueueExit();
    Wait(1.0, c_timeAI);
    autoAC7A6831_ae = gv_numberOfInitialMarines;
    autoAC7A6831_ai = 1;
    lv_i = 1;
    while ((autoAC7A6831_ai >= 0 && lv_i <= autoAC7A6831_ae) || (autoAC7A6831_ai <= 0 && lv_i >= autoAC7A6831_ae)) {
        if ((libNtve_gf_UnitInRegion(gv_initialMarines[lv_i], RegionFromId(46)) == true)) {
            UnitGroupAdd(lv_initialMarineGroup, gv_initialMarines[lv_i]);
        }
        else {
        }
        if (lv_i == autoAC7A6831_ae) {
            break;
        }
        lv_i = lv_i + autoAC7A6831_ai;
    }
    if ((UnitGroupCount(lv_initialMarineGroup, c_unitCountAlive) >= 4)) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLargeRed", libNtve_gf_CenterOfUnitGroup(lv_initialMarineGroup));
        gv_actorMindblastIndicator = libNtve_gf_ActorLastCreated();
        TextTagCreate(StringExternal("Param/Value/52AB2985"), 22, UnitGetPosition(UnitFromId(1887)), 2.0, true, false, PlayerGroupAll());
        gv_textTagMindBlast = TextTagLastCreated();
        TextTagSetPosition(TextTagLastCreated(), PointWithOffset(PointFromId(1158), 0.0, 0.0), 1.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
        SoundPlayAtPoint(SoundLink("UI_TipSelect", -1), PlayerGroupAll(), libNtve_gf_CenterOfUnitGroup(lv_initialMarineGroup), 0.0, 100.0, 0.0);
        TimerStart(lv_indicatorTimeout, 10.0, false, c_timeAI);
        while (true) {
            Wait(1.0, c_timeAI);
            if (((UnitGroupCount(lv_initialMarineGroup, c_unitCountAlive) < 4) || (TimerGetRemaining(lv_indicatorTimeout) == 0.0))) {
                libNtve_gf_KillModel(gv_actorMindblastIndicator);
                TextTagDestroy(gv_textTagMindBlast);
                return true;
            }
            else {
            }
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPMindblastQ_Init () {
    gt_TIPMindblastQ = TriggerCreate("gt_TIPMindblastQ_Func");
    TriggerAddEventUnitRegion(gt_TIPMindblastQ, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP - Consumption Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPConsumptionQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gf_PlayerIsInCombat(gv_p1_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("Consumption", 0), true);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Consumption", 0), true);
    gv_flashConsumption = true;
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03ATosh00024", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tosh, SoundLink("TTosh03ATosh00024", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh03ATosh00025", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tosh, SoundLink("TTosh03ATosh00025", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh03a_Consume", 3, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPConsumptionQ_Init () {
    gt_TIPConsumptionQ = TriggerCreate("gt_TIPConsumptionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP - Psi Shield Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPPsiShieldQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_indicator;
    timer lv_indicatorTimeout;

    // Variable Initialization
    lv_indicator = null;
    lv_indicatorTimeout = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tosh))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh3A_VoodooShield", 3, PlayerGroupAll());
    TriggerExecute(gt_GivePsiShield, true, false);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPPsiShieldQ_Init () {
    gt_TIPPsiShieldQ = TriggerCreate("gt_TIPPsiShieldQ_Func");
    TriggerAddEventUnitRegion(gt_TIPPsiShieldQ, null, RegionFromId(32), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Turn off Mindblast
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashTurnoffMindblast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_flashMindblast == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("MindBlast", 0), false);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(gv_actorMindblastIndicator);
    TextTagDestroy(gv_textTagMindBlast);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashTurnoffMindblast_Init () {
    gt_ButtonFlashTurnoffMindblast = TriggerCreate("gt_ButtonFlashTurnoffMindblast_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashTurnoffMindblast, c_playerAny, "MindBlast");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Turn off Consumption
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashTurnoffConsumption_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_flashConsumption == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Consumption", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashTurnoffConsumption_Init () {
    gt_ButtonFlashTurnoffConsumption = TriggerCreate("gt_ButtonFlashTurnoffConsumption_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashTurnoffConsumption, c_playerAny, "Consumption");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Turn off Psi Shield
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashTurnoffPsiShield_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_flashPsiShield == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("VoodooShield", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashTurnoffPsiShield_Init () {
    gt_ButtonFlashTurnoffPsiShield = TriggerCreate("gt_ButtonFlashTurnoffPsiShield_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashTurnoffPsiShield, c_playerAny, "VoodooShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Turn off Nuke
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashTurnoffNuke_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_flashNuke == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("HeroNuclearStrike", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashTurnoffNuke_Init () {
    gt_ButtonFlashTurnoffNuke = TriggerCreate("gt_ButtonFlashTurnoffNuke_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashTurnoffNuke, c_playerAny, "NukeCalldown");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Enemies Killed By Nukes
//--------------------------------------------------------------------------------------------------
bool gt_StatEnemiesKilledByNukes_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p3_DOMINION_RED) || (UnitGetOwner(EventUnit()) == gv_p4_DOMINION_PURPLE) || (UnitGetOwner(EventUnit()) == gv_p5_DOMINION_GREY) || (UnitGetOwner(EventUnit()) == gv_p6_DOMINION_ORANGE)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemiesKilledByNukes += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatEnemiesKilledByNukes_Init () {
    gt_StatEnemiesKilledByNukes = TriggerCreate("gt_StatEnemiesKilledByNukes_Func");
    TriggerAddEventUnitDamaged(gt_StatEnemiesKilledByNukes, null, c_unitDamageTypeAny, c_unitDamageFatal, "HeroNukeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Enemies Killed by Anyone
//--------------------------------------------------------------------------------------------------
bool gt_StatEnemiesKilledbyAnyone_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p3_DOMINION_RED) || (UnitGetOwner(EventUnit()) == gv_p4_DOMINION_PURPLE) || (UnitGetOwner(EventUnit()) == gv_p5_DOMINION_GREY) || (UnitGetOwner(EventUnit()) == gv_p6_DOMINION_ORANGE)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemiesKilled += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatEnemiesKilledbyAnyone_Init () {
    gt_StatEnemiesKilledbyAnyone = TriggerCreate("gt_StatEnemiesKilledbyAnyone_Func");
    TriggerAddEventUnitDied(gt_StatEnemiesKilledbyAnyone, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Tosh Lowest Health
//--------------------------------------------------------------------------------------------------
bool gt_StatToshLowestHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_displayedLife;

    // Variable Initialization
    lv_displayedLife = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_displayedLife = FixedToInt(UnitGetPropertyFixed(gv_tosh, c_unitPropLife, c_unitPropCurrent));
    if ((lv_displayedLife < 1) && (UnitGetPropertyFixed(gv_tosh, c_unitPropLife, c_unitPropCurrent) > 0.0)) {
        lv_displayedLife = 1;
    }
    else {
    }
    if ((lv_displayedLife < gv_toshLowestHealth)) {
        gv_toshLowestHealth = lv_displayedLife;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatToshLowestHealth_Init () {
    gt_StatToshLowestHealth = TriggerCreate("gt_StatToshLowestHealth_Func");
    TriggerAddEventUnitDamaged(gt_StatToshLowestHealth, UnitRefFromVariable("gv_tosh"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Main Prison Cleared
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMainPrisonCleared_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerEnable(gt_CellBlockDriversGetInVehicles, false);
    TriggerEnable(gt_CellBlockSpawners, false);
    TriggerStop(gt_CellBlockDriversGetInVehicles);
    TriggerStop(gt_CellBlockSpawners);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(922)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TriggerExecute(gt_ObjectiveClearMainPrisonComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMainPrisonCleared_Init () {
    gt_VictoryMainPrisonCleared = TriggerCreate("gt_VictoryMainPrisonCleared_Func");
    TriggerAddEventTimePeriodic(gt_VictoryMainPrisonCleared, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveCellBlock_A) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveCellBlock_B) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveClearMainPrison) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveToshMustSurvive) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "TTosh03A_1");
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_toshLowestHealth >= 100)) {
        AchievementAward(gv_p1_USER, "TTosh03A_2");
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_achievementHardTimer) != 0.0)) {
        AchievementAward(gv_p1_USER, "TTosh03A_3");
    }
    else {
    }
    VictoryPanelAddAchievement("TTosh03A_1");
    VictoryPanelAddAchievement("TTosh03A_2");
    VictoryPanelAddAchievement("TTosh03A_3");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F0003528"), IntToText(gv_enemiesKilled));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2175072A"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_tosh, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9C05BA17"), StringExternal("Param/Value/313B6A5B"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D88B245F"), IntToText(gv_toshLowestHealth));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2E860ECD"), IntToText(gv_enemiesKilledByNukes));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E1927F44"), StringExternal("Param/Value/3E148109"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EEE3E8BD"), (IntToText(gv_cellBlocksFreed) + StringExternal("Param/Value/92A97F06") + StringExternal("Param/Value/E7798C49")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F513B674"), libCamp_gf_FormatCredits(gv_bonusCreditsEarned, true));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p2_RAYNOR_LIGHTBLUE, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeGame);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/59E462FF"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Tosh Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatToshDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnit() == gv_tosh))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveClearMainPrisonFailed, true, false);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/F6A2D66D"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatToshDies_Init () {
    gt_DefeatToshDies = TriggerCreate("gt_DefeatToshDies_Func");
    TriggerAddEventUnitDied(gt_DefeatToshDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p1_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p1_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Main Prison Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearMainPrisonCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/D2D30F59"), StringExternal("Param/Value/AEA83BA8"), c_objectiveStateActive, true);
    gv_objectiveClearMainPrison = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(25, ObjectiveLastCreated(), StringExternal("Param/Value/FDD20C03"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    VisRevealArea(gv_p1_USER, RegionFromId(8), 16.0, false);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/7F61BFCD"), null, RegionGetCenter(RegionFromId(8)));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(8)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_mainPrisonPing = PingLastCreated();
    PingSetTooltip(gv_mainPrisonPing, StringExternal("Param/Value/8D06E3F4"));
    ObjectiveCreate(StringExternal("Param/Value/19F8DA70"), StringExternal("Param/Value/C829731D"), c_objectiveStateActive, true);
    gv_objectiveToshMustSurvive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(28, ObjectiveLastCreated(), StringExternal("Param/Value/30EB4842"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearMainPrisonCreateQ_Init () {
    gt_ObjectiveClearMainPrisonCreateQ = TriggerCreate("gt_ObjectiveClearMainPrisonCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Main Prison Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearMainPrisonComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_mainPrisonPing);
    TriggerExecute(gt_ObjectiveClearMainPrisonCreateQ, true, false);
    ObjectiveSetState(gv_objectiveClearMainPrison, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveToshMustSurvive, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearMainPrisonComplete_Init () {
    gt_ObjectiveClearMainPrisonComplete = TriggerCreate("gt_ObjectiveClearMainPrisonComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear Main Prison Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearMainPrisonFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveClearMainPrisonCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearMainPrisonFailed_Init () {
    gt_ObjectiveClearMainPrisonFailed = TriggerCreate("gt_ObjectiveClearMainPrisonFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Cell Block_A Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCellBlock_ACreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/1A489F89"), StringExternal("Param/Value/A5253672"), c_objectiveStateHidden, false);
    gv_objectiveCellBlock_A = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(26, ObjectiveLastCreated(), StringExternal("Param/Value/8EDB0902"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCellBlock_ACreateQ_Init () {
    gt_ObjectiveCellBlock_ACreateQ = TriggerCreate("gt_ObjectiveCellBlock_ACreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Cell Block_A Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCellBlock_AComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_cellBlock_A_Ping);
    TriggerExecute(gt_ObjectiveCellBlock_ACreateQ, true, false);
    ObjectiveSetState(gv_objectiveCellBlock_A, c_objectiveStateCompleted);
    libCamp_gf_AddProgressToStoryObjective(1, 26);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCellBlock_AComplete_Init () {
    gt_ObjectiveCellBlock_AComplete = TriggerCreate("gt_ObjectiveCellBlock_AComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Cell Block_B Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCellBlock_BCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/05DF4AC2"), StringExternal("Param/Value/F0DF8BF5"), c_objectiveStateHidden, false);
    gv_objectiveCellBlock_B = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(27, ObjectiveLastCreated(), StringExternal("Param/Value/98C738B2"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCellBlock_BCreateQ_Init () {
    gt_ObjectiveCellBlock_BCreateQ = TriggerCreate("gt_ObjectiveCellBlock_BCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Cell Block_B Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCellBlock_BComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_cellBlock_B_Ping);
    TriggerExecute(gt_ObjectiveCellBlock_BCreateQ, true, false);
    ObjectiveSetState(gv_objectiveCellBlock_B, c_objectiveStateCompleted);
    libCamp_gf_AddProgressToStoryObjective(1, 27);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCellBlock_BComplete_Init () {
    gt_ObjectiveCellBlock_BComplete = TriggerCreate("gt_ObjectiveCellBlock_BComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    TriggerExecute(gt_BriefingScene04, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(210), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(481), ((SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00002", 0)) + SoundLengthSync(SoundLink("TTosh03ABriefingTosh00003", 0))) - 2.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03A_00");
    SoundPlay(SoundLink("TTosh03ABriefingRaynor00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00002", 0))), c_timeReal);
    SoundPlay(SoundLink("TTosh03ABriefingTosh00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03ABriefingTosh00003", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00002", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingTosh00003", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(589), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(672), ((SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00004", 0)) + SoundLengthSync(SoundLink("TTosh03ABriefingTosh00005", 0))) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03A_01");
    SoundPlay(SoundLink("TTosh03ABriefingRaynor00004", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00004", 0))), c_timeReal);
    SoundPlay(SoundLink("TTosh03ABriefingTosh00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03ABriefingTosh00005", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00004", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingTosh00005", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(673), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    MovieStartRecording("Briefing_Video_TTosh03A_02");
    SoundPlay(SoundLink("TTosh03ABriefingHorner00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingHorner00010", 0))), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(674), 0.0, -1, 10, true);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingHorner00010", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingHorner00010", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(740), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(681), SoundLengthSync(SoundLink("TTosh03ABriefingHorner00006", 0)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03A_03");
    SoundPlay(SoundLink("TTosh03ABriefingHorner00006", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.4 * SoundLengthSync(SoundLink("TTosh03ABriefingHorner00006", 0))), c_timeReal);
    libNtve_gf_AttachModelToUnit(UnitFromId(922), "BriefingUnitSelectLargeRed", "Center");
    Wait((0.6 * SoundLengthSync(SoundLink("TTosh03ABriefingHorner00006", 0))), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(682), SoundLengthSync(SoundLink("TTosh03ABriefingHorner00009", 0)), -1, 10, true);
    SoundPlay(SoundLink("TTosh03ABriefingHorner00009", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03ABriefingHorner00009", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingHorner00006", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingHorner00009", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1754), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1755), ((SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00007", 0)) + SoundLengthSync(SoundLink("TTosh03ABriefingTosh00008", 0))) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03A_04");
    SoundPlay(SoundLink("TTosh03ABriefingRaynor00007", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00007", 0))), c_timeReal);
    SoundPlay(SoundLink("TTosh03ABriefingTosh00008", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03ABriefingTosh00008", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00007", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03ABriefingTosh00008", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04_Init () {
    gt_BriefingScene04 = TriggerCreate("gt_BriefingScene04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveClearMainPrisonComplete, true, true);
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDaySetLength(0.0);
    UnitPauseAll(true);
    AITimePause(true);
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p3_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("DestructibleSandbags", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_p1_USER, null, UnitFilter(0, 0, 0, 0), 0);
    UnitGroupLoopBegin(gv_victoryHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", c_playerAny, RegionCircle(PointFromId(2018), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(97), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03AMusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(98), (SoundLengthSync(SoundLink("TTosh03ATosh00009", -1)) + 0.0), -1, 10, true);
    TriggerExecute(gt_VictoryDoorAnimation, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    // Transmission - SoundLink("TTosh03ANova00036", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ANova00036", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh03ATosh00009", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03ATosh00009", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeReal);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Door Animation
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDoorAnimation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(922)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_VictoryCinematicDoorSounds, true, false);
    Wait(7.7, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "PrisonerSpectre", c_unitCreateIgnorePlacement, gv_p7_PRISONER_YELLOW, PointFromId(2018));
    libNtve_gf_CreateUnitsAtPoint2(1, "PrisonerSpectre", c_unitCreateIgnorePlacement, gv_p7_PRISONER_YELLOW, PointFromId(2019));
    libNtve_gf_CreateUnitsAtPoint2(1, "PrisonerSpectre", c_unitCreateIgnorePlacement, gv_p7_PRISONER_YELLOW, PointFromId(2020));
    libNtve_gf_CreateUnitsAtPoint2(1, "PrisonerSpectre", c_unitCreateIgnorePlacement, gv_p7_PRISONER_YELLOW, PointFromId(2022));
    Wait(2.3, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("PrisonerSpectre", c_playerAny, RegionCircle(PointFromId(2018), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2023)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDoorAnimation_Init () {
    gt_VictoryDoorAnimation = TriggerCreate("gt_VictoryDoorAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic Door Sounds
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicDoorSounds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Doodad_TrainDockingDoorOpen", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    SoundPlay(SoundLink("SetPiece_MarSaraBarDoor_Open", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicDoorSounds_Init () {
    gt_VictoryCinematicDoorSounds = TriggerCreate("gt_VictoryCinematicDoorSounds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Variable Initialization
    lv_fadeDuratioin = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitSetVisible(libNtve_gf_CinematicPortrait(2), PlayerGroupAll(), false, false);
    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuratioin, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_OpeningDialogueQ_Init();
    gt_GuardTowersInitiate_Init();
    gt_Bunker15Dies_Init();
    gt_MedicMana_Init();
    gt_RaynorsBaseUnderAttackQ_Init();
    gt_InitialMarines_Init();
    gt_AOEMarines_Init();
    gt_StartingMarinesBehavior_Init();
    gt_ToshVictims_Init();
    gt_GhostCloak_Init();
    gt_GhostEMP_Init();
    gt_GhostEMPSafety_Init();
    gt_GhostEMPSafetySet_Init();
    gt_RavenPatrolStart_Init();
    gt_GiveMindBlast_Init();
    gt_GivePsiShield_Init();
    gt_TIPNukeReadyFirstQ_Init();
    gt_MissileTurretDestroyed_Init();
    gt_AIStartSafety_Init();
    gt_CellBlockACompleted_Init();
    gt_CellBlockACompletedQ_Init();
    gt_CellBlockAReminderQ_Init();
    gt_CellBlockAPatrol_Init();
    gt_CellBlockAPatrolSearching_Init();
    gt_CellBlockAPrisonerWander_Init();
    gt_CellBlockBCompleted_Init();
    gt_CellBlockBCompletedQ_Init();
    gt_CellBlockBReminderQ_Init();
    gt_CellBlockBRavenPatrol_Init();
    gt_CellBlockBPrisonerWander_Init();
    gt_CellBlockWorkersMovement_Init();
    gt_CellBlockDriversGetInVehicles_Init();
    gt_CellBlockSpawners_Init();
    gt_DialogueMindBlastQ_Init();
    gt_DialogueDetectionQ_Init();
    gt_DialogueRaynorsForcesQ_Init();
    gt_OutpostCheck01_Init();
    gt_OutpostBuild01AutoSaveQ_Init();
    gt_DefenseOutpost01Create_Init();
    gt_OutpostCheck02_Init();
    gt_OutpostBuild02AutoSaveQ_Init();
    gt_DefenseOutpost02Create_Init();
    gt_SCVReturn_Init();
    gt_StartAI_Init();
    gt_InitWaypoints_Init();
    gt_ALLYAttackWaves_Init();
    gt_ALLYAttackWavesMainBase_Init();
    gt_ALLYAttackWavesCellBlockAActivate_Init();
    gt_ALLYAttackWavesCellBlockA_Init();
    gt_ALLYAttackWavesCellBlockBActivate_Init();
    gt_ALLYAttackWavesCellBlockB_Init();
    gt_ENEMYAttackWaves_Init();
    gt_ENEMYAttackWaveStandard_Init();
    gt_ENEMYBonusWaveArea01Hurt_Init();
    gt_ENEMYRavensActivateArea03Approached_Init();
    gt_ENEMYBonusWaveArea02Hurt_Init();
    gt_ENEMYBonusWaveMainAreaHurt_Init();
    gt_RepairEnemy01_Init();
    gt_RepairEnemy02_Init();
    gt_RepairEnemy03_Init();
    gt_RepairEnemy04_Init();
    gt_NerfFinalProduction_Init();
    gt_AIMinerals_Init();
    gt_AIGas_Init();
    gt_StorymodeTipsQ_Init();
    gt_TIPCloakingQ_Init();
    gt_TIPMindblastQ_Init();
    gt_TIPConsumptionQ_Init();
    gt_TIPPsiShieldQ_Init();
    gt_ButtonFlashTurnoffMindblast_Init();
    gt_ButtonFlashTurnoffConsumption_Init();
    gt_ButtonFlashTurnoffPsiShield_Init();
    gt_ButtonFlashTurnoffNuke_Init();
    gt_StatEnemiesKilledByNukes_Init();
    gt_StatEnemiesKilledbyAnyone_Init();
    gt_StatToshLowestHealth_Init();
    gt_VictoryMainPrisonCleared_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatToshDies_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveClearMainPrisonCreateQ_Init();
    gt_ObjectiveClearMainPrisonComplete_Init();
    gt_ObjectiveClearMainPrisonFailed_Init();
    gt_ObjectiveCellBlock_ACreateQ_Init();
    gt_ObjectiveCellBlock_AComplete_Init();
    gt_ObjectiveCellBlock_BCreateQ_Init();
    gt_ObjectiveCellBlock_BComplete_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingScene04_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryDoorAnimation_Init();
    gt_VictoryCinematicDoorSounds_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
