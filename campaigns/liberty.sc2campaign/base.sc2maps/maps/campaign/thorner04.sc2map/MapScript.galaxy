//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Media Blitz
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_DOMINION_INFANTRY = 2;
const int gv_p03_DOMINION_SIEGE = 3;
const int gv_p04_DOMINION_AIR = 4;
const int gv_p05_DOMINION_RAIDER = 5;
const int gv_p06_CIVILIANS = 6;
const int gv_p07_HORNERBASE = 7;
const int gv_p08_DOMINION = 8;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_dominionPlayers;
bool gv_gameOver;
bool gv_inCinematic;
unitgroup gv_hiddenPlayerBase;
bool gv_missionStage1;
int gv_civilianVehicleCounter;
fixed gv_distractionTime;
timer gv_distractionTimer;
int gv_distractionTimerWindow;
timer gv__90SecondWarning;
timer gv__30SecondWarning;
unit gv_odin;
bool gv_odinDead;
bool gv_sneakAttackBegun;
unitgroup gv_destructibleObjectsNeutral;
unitgroup gv_destructibleObjectsCiv;
unit gv_secretDocuments;
revealer gv_sector1BeaconRevealer;
revealer gv_sector2BeaconRevealer;
revealer gv_sector3BeaconRevealer;
int gv_pingSector1Tower;
int gv_pingSector2Tower;
int gv_pingSector3Tower;
int gv_pingSector1Base;
int gv_pingSector2Base;
int gv_pingSector3Base;
actor gv_pingActor_Tower1;
actor gv_pingActor_Tower2;
actor gv_pingActor_Tower3;
bool gv_playerHasMercTech;
revealer gv_korhalRevealer;
unit gv_supplyDepotSCV;
timer gv_dominionAttackOdin;
int gv_bonusCreditsEarned;
int gv_statueCount;
unitgroup gv_statues;
int gv_statuesDestroyed;
actor gv_statueExclamation;
unit[7] gv_statueBullhorns;
int gv_statueTransmission01;
int gv_statueTransmission02;
int gv_statueTransmission03;
int gv_statueTransmission04;
int gv_statueTransmission05;
int gv_statueTransmission06;
unitgroup gv_killTeamMedivacs;
unitgroup gv_killTeamAttackers;
int gv_uploadBoard;
fixed gv_uploadTime;
int[4] gv_transmissionProgress;
int gv_waveAttacker;
int gv_wavePrepTime;
bool[17] gv_playerHasPermission;
int gv_achievementBarracksDestroyed;
int gv_achievementFactoryDestroyed;
int gv_achievementStarportDestroyed;
timer gv_achievementHardTimer;
int gv_secretsFound;
int gv_odinKillCount;
int gv_hornerTimeWarning;
unit gv_pickedUnit;
int gv_objectiveDestroyDominionForces;
int gv_objectiveBroadcastTowersAccessed;
int gv_objectiveAccessTower1;
int gv_objectiveAccessTower2;
int gv_objectiveAccessTower3;
unitgroup gv_briefingParadeGroup;
point[16] gv_briefingParadePoints;
int gv_briefingNumberOfParadePoints;
bool gv_introCinematicCompleted;
unitgroup gv_introHiddenUnitGroup;
sound gv_soundEmitterCheers;
bool gv_midCinematicCompleted;
unitgroup gv_midHiddenUnitGroup;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    int init_i;

    gv_dominionPlayers = PlayerGroupEmpty();
    gv_gameOver = false;
    gv_inCinematic = false;
    gv_hiddenPlayerBase = UnitGroupEmpty();
    gv_missionStage1 = false;
    gv_civilianVehicleCounter = 0;
    gv_distractionTime = 0.0;
    gv_distractionTimer = TimerCreate();
    gv_distractionTimerWindow = c_timerWindowNone;
    gv__90SecondWarning = TimerCreate();
    gv__30SecondWarning = TimerCreate();
    gv_odin = null;
    gv_odinDead = false;
    gv_sneakAttackBegun = false;
    gv_destructibleObjectsNeutral = UnitGroupEmpty();
    gv_destructibleObjectsCiv = UnitGroupEmpty();
    gv_secretDocuments = null;
    gv_sector1BeaconRevealer = null;
    gv_sector2BeaconRevealer = null;
    gv_sector3BeaconRevealer = null;
    gv_pingActor_Tower1 = null;
    gv_pingActor_Tower2 = null;
    gv_pingActor_Tower3 = null;
    gv_playerHasMercTech = false;
    gv_korhalRevealer = null;
    gv_supplyDepotSCV = null;
    gv_dominionAttackOdin = TimerCreate();
    gv_bonusCreditsEarned = 0;
    gv_statueCount = 0;
    gv_statues = UnitGroupEmpty();
    gv_statuesDestroyed = 0;
    gv_statueExclamation = null;
    init_i = 0;
    while (init_i <= 6) {
        gv_statueBullhorns[init_i] = null;
        init_i = init_i + 1;
    }
    gv_statueTransmission01 = c_invalidTransmissionId;
    gv_statueTransmission02 = c_invalidTransmissionId;
    gv_statueTransmission03 = c_invalidTransmissionId;
    gv_statueTransmission04 = c_invalidTransmissionId;
    gv_statueTransmission05 = c_invalidTransmissionId;
    gv_statueTransmission06 = c_invalidTransmissionId;
    gv_killTeamMedivacs = UnitGroupEmpty();
    gv_killTeamAttackers = UnitGroupEmpty();
    gv_uploadBoard = c_boardNone;
    gv_uploadTime = 0.0;
    init_i = 0;
    while (init_i <= 3) {
        gv_transmissionProgress[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_waveAttacker = gv_p04_DOMINION_AIR;
    gv_wavePrepTime = 180;
    init_i = 0;
    while (init_i <= 16) {
        gv_playerHasPermission[init_i] = false;
        init_i = init_i + 1;
    }
    gv_achievementBarracksDestroyed = 0;
    gv_achievementFactoryDestroyed = 0;
    gv_achievementStarportDestroyed = 0;
    gv_achievementHardTimer = TimerCreate();
    gv_secretsFound = 0;
    gv_odinKillCount = 0;
    gv_hornerTimeWarning = c_invalidTransmissionId;
    gv_pickedUnit = null;
    gv_objectiveDestroyDominionForces = c_invalidObjectiveId;
    gv_objectiveBroadcastTowersAccessed = 0;
    gv_objectiveAccessTower1 = c_invalidObjectiveId;
    gv_objectiveAccessTower2 = c_invalidObjectiveId;
    gv_objectiveAccessTower3 = c_invalidObjectiveId;
    gv_briefingParadeGroup = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 15) {
        gv_briefingParadePoints[init_i] = null;
        init_i = init_i + 1;
    }
    gv_briefingNumberOfParadePoints = 0;
    gv_introCinematicCompleted = false;
    gv_introHiddenUnitGroup = UnitGroupEmpty();
    gv_soundEmitterCheers = null;
    gv_midCinematicCompleted = false;
    gv_midHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryCinematicCompleted = false;
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreatePassiveUnitsInBunker (int lp_qty, string lp_type, unit lp_bunker);
void gf_AddUpgradeForDominion (int lp_qty, string lp_upgrade);
void gf_SetMaxLife (unit lp_u, fixed lp_maxLife);
bool gf_TransportIsDeadOrEmpty (unit lp_transport);
bool gf_TransportsAreDeadOrEmpty (unitgroup lp_transports);
void gf_ShowUnitAggro (unit lp_aggroedUnit);
void gf_DropKillTeamViaMedivac (int lp_qty1, string lp_type1, int lp_qty2, string lp_type2, point lp_spawnLoc, point lp_dropLoc);
void gf_WaitForDropsAndAttack (point lp_targetPoint);
void gf_UploadData (unit lp_unit, int lp_index);
void gf_CheckKillTeams (int lp_baseIndex, fixed lp_progress);
void gf_WaitForPermissionToAttack (int lp_player);
int gf_NextAttacker (int lp_lastAttacker);
bool gf_PlayerCanAttack (int lp_player);
void gf_SendAnAttackWave ();
void gf_WaitForNextWave ();
void gf_PlayUnitTalkIcon (unit lp_chosenUnit);
void gf_CreateBriefingParadeUnit (string lp_unitType, int lp_player, fixed lp_polarDistance, fixed lp_polarRadius);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGShortenTime;
trigger gt_StartGameStage1;
trigger gt_StartGameStage1Timer;
trigger gt_StartGameStage2;
trigger gt_CiviliansAttackedandCower;
trigger gt_RemoveGarrisonedCivilians;
trigger gt_CityAmbienceNorthSideVehicles;
trigger gt_CityAmbienceSESideVehicles;
trigger gt_CityAmbienceSWSideVehicles;
trigger gt_CityAmbienceWestSideBlimp;
trigger gt_CityAmbienceEastSideBlimp;
trigger gt_CityAmbienceNorthSpawnVehicleRemoval;
trigger gt_CityAmbienceSESpawnVehicleRemoval;
trigger gt_CityAmbienceSWSpawnVehicleRemoval;
trigger gt_CityAmbienceWestBlimpRemoval;
trigger gt_CityAmbienceEastBlimpRemoval;
trigger gt_OdinStompsStuff;
trigger gt_RemoveDominionOutpostPings;
trigger gt_ScienceFacilityBarragedSpawnSecretDocuments;
trigger gt_SecretDocumentsRetrievedUnlockHorner05S;
trigger gt_SCVBuildsSupplyDepot;
trigger gt_SCVGoesIdle;
trigger gt_ShowAggroIcononUnit;
trigger gt_HornerBuildsPlayerBase;
trigger gt_ParadePlazaReaction;
trigger gt_AggroPassiveUnits;
trigger gt_InitialAttackOver;
trigger gt_OdinDiesMovetoStage2;
trigger gt_CreatePrimaryObjectiveLeaderboard;
trigger gt_CreateBeaconsandMapPings;
trigger gt_OdinDiesQ;
trigger gt_SwannFliesInaThor;
trigger gt_ThorChangesOwner;
trigger gt_TychusEjection;
trigger gt_Statue1;
trigger gt_Statue2;
trigger gt_Statue3;
trigger gt_Statue4;
trigger gt_Statue5;
trigger gt_Statue6;
trigger gt_Statue1KillBullhorn;
trigger gt_Statue2KillBullhorn;
trigger gt_Statue3KillBullhorn;
trigger gt_Statue4KillBullhorn;
trigger gt_Statue5KillBullhorn;
trigger gt_Statue6KillBullhorn;
trigger gt_BullhornStopSounds;
trigger gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ;
trigger gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ;
trigger gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ;
trigger gt_SendAirBaseKillTeam1;
trigger gt_SendAirBaseKillTeam2;
trigger gt_SendAirBaseKillTeam3;
trigger gt_SendSiegeBaseKillTeam1;
trigger gt_SendSiegeBaseKillTeam2;
trigger gt_SendSiegeBaseKillTeam3;
trigger gt_SendRaiderBaseKillTeam1;
trigger gt_SendRaiderBaseKillTeam2;
trigger gt_SendRaiderBaseKillTeam3;
trigger gt_StartAI;
trigger gt_StartUpgrades;
trigger gt_AttackWaveTiming;
trigger gt_FirstAttackWave;
trigger gt_P03AttackWavesSiege;
trigger gt_P04AttackWavesAir;
trigger gt_P05AttackWavesRaider;
trigger gt_ActivateP02Bullies;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_AchievementDestroyaBarracksStarportandFactory;
trigger gt_VictoryBroadcastTowersCompleted;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_PlayUnitTalkonPickedUnit;
trigger gt_TransmissionPlazaMarineReactionQ;
trigger gt_TransmissionMengskStatuesQ;
trigger gt_TransmissionTychusEjectsOutoftheOdin;
trigger gt_TransmissionSwannDropsInAThorQ;
trigger gt_TransmissionCivilianSquishArea1Q;
trigger gt_TransmissionCivilianSquishArea2Q;
trigger gt_TransmissionCivilianSquishArea3Q;
trigger gt_TransmissionCivilianSquishArea4Q;
trigger gt_TransmissionCivilianSquishArea5Q;
trigger gt_TransmissionOdinNearReaperQ;
trigger gt_TransmissionOdinNearSiegeTankQ;
trigger gt_TransmissionOdinNearVikingQ;
trigger gt_TransmissionStage2IntroQ;
trigger gt_TransmissionAirBaseGankSquadQ;
trigger gt_TransmissionSiegeBaseGankSquadQ;
trigger gt_TransmissionRaiderBaseGankSquadQ;
trigger gt_TransmissionDataSuccessfullyUploadedQ;
trigger gt_Transmission90sLeftonDistractionQ;
trigger gt_Transmission30sLeftonDistractionQ;
trigger gt_NewUnitOdinTipQ;
trigger gt_NewUnitThorTipQ;
trigger gt_NewAbilityBarrageTipQ;
trigger gt_TrainTroopsTipQ;
trigger gt_ObjectiveDestroyCreateQ;
trigger gt_ObjectiveDestroyComplete;
trigger gt_ObjectiveAccessBroadcastTowersCreateQ;
trigger gt_ObjectiveAccessBroadcastTowersUpdateQ;
trigger gt_ObjectiveAccessBroadcastTower1Complete;
trigger gt_ObjectiveAccessBroadcastTower2Complete;
trigger gt_ObjectiveAccessBroadcastTower3Complete;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingParade;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_RecreateBase;
trigger gt_ResetSCVPositions;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryTowerScene;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreatePassiveUnitsInBunker (int lp_qty, string lp_type, unit lp_bunker) {
    unitgroup auto560015A7_g;
    int auto560015A7_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = null;

    // Implementation
    UnitCargoCreate(lp_bunker, lp_type, lp_qty);
    auto560015A7_g = UnitLastCreatedGroup();
    auto560015A7_u = 1;
    while (auto560015A7_u <= UnitGroupCount(auto560015A7_g, c_unitCountAll)) {
        lv_u = UnitGroupUnit(auto560015A7_g, auto560015A7_u);
        UnitBehaviorAdd(lv_u, "Passive", lv_u, 1);
        if (lv_u == UnitGroupUnit(auto560015A7_g, auto560015A7_u)) {
            auto560015A7_u = auto560015A7_u + 1;
        }
    }
}

void gf_AddUpgradeForDominion (int lp_qty, string lp_upgrade) {
    // Implementation
    TechTreeUpgradeAddLevel(gv_p02_DOMINION_INFANTRY, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p03_DOMINION_SIEGE, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p04_DOMINION_AIR, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p05_DOMINION_RAIDER, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p08_DOMINION, lp_upgrade, lp_qty);
}

void gf_SetMaxLife (unit lp_u, fixed lp_maxLife) {
    // Implementation
    UnitSetPropertyFixed(lp_u, c_unitPropLifeMax, lp_maxLife);
    UnitSetPropertyFixed(lp_u, c_unitPropLifePercent, 100.0);
}

bool gf_TransportIsDeadOrEmpty (unit lp_transport) {
    // Implementation
    if ((UnitIsAlive(lp_transport) == false)) {
        return true;
    }
    else {
    }
    if ((UnitCargoValue(lp_transport, c_unitCargoUnitCount) == 0)) {
        return true;
    }
    else {
    }
    return false;
}

bool gf_TransportsAreDeadOrEmpty (unitgroup lp_transports) {
    unitgroup auto2F78EED7_g;
    int auto2F78EED7_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = null;

    // Implementation
    auto2F78EED7_g = lp_transports;
    auto2F78EED7_u = 1;
    while (auto2F78EED7_u <= UnitGroupCount(auto2F78EED7_g, c_unitCountAll)) {
        lv_u = UnitGroupUnit(auto2F78EED7_g, auto2F78EED7_u);
        if ((gf_TransportIsDeadOrEmpty(lv_u) == false)) {
            return false;
        }
        else {
        }
        if (lv_u == UnitGroupUnit(auto2F78EED7_g, auto2F78EED7_u)) {
            auto2F78EED7_u = auto2F78EED7_u + 1;
        }
    }
    return true;
}

void gf_ShowUnitAggro (unit lp_aggroedUnit) {
    // Implementation
    gv_pickedUnit = lp_aggroedUnit;
    TriggerExecute(gt_ShowAggroIcononUnit, true, false);
}

void gf_DropKillTeamViaMedivac (int lp_qty1, string lp_type1, int lp_qty2, string lp_type2, point lp_spawnLoc, point lp_dropLoc) {
    // Variable Declarations
    unit lv_dropship;

    // Variable Initialization
    lv_dropship = null;

    // Implementation
    if ((lp_qty1 == 0) && (lp_qty2 == 0)) {
        return ;
    }
    else {
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_p08_DOMINION, lp_spawnLoc, lp_dropLoc);
    lv_dropship = UnitLastCreated();
    if ((lp_type1 != null)) {
        UnitCargoCreate(lv_dropship, lp_type1, lp_qty1);
    }
    else {
    }
    if ((lp_type2 != null)) {
        UnitCargoCreate(lv_dropship, lp_type2, lp_qty2);
    }
    else {
    }
    AISetGroupScriptControlled(UnitCargoGroup(lv_dropship), true);
    UnitGroupAdd(gv_killTeamMedivacs, lv_dropship);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoGroup(lv_dropship), gv_killTeamAttackers);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_dropship, lp_dropLoc, lp_spawnLoc);
}

void gf_WaitForDropsAndAttack (point lp_targetPoint) {
    // Variable Declarations
    unitgroup lv_attackers;
    unitgroup lv_medivacs;

    // Variable Initialization
    lv_attackers = UnitGroupCopy(gv_killTeamAttackers);
    lv_medivacs = UnitGroupCopy(gv_killTeamMedivacs);

    // Implementation
    libNtve_gf_AddUnitGroupToUnitGroup(gv_killTeamAttackers, lv_attackers);
    libNtve_gf_AddUnitGroupToUnitGroup(gv_killTeamMedivacs, lv_medivacs);
    UnitGroupClear(gv_killTeamAttackers);
    UnitGroupClear(gv_killTeamMedivacs);
    while (!((gf_TransportsAreDeadOrEmpty(lv_medivacs) == true))) {
        Wait(0.2, c_timeGame);
    }
    UnitGroupIssueOrder(lv_attackers, OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
}

void gf_UploadData (unit lp_unit, int lp_index) {
    int autoE4CDAE9A_n;
    int autoE4CDAE9A_i;
    int auto0BECB369_val;

    // Variable Declarations
    text lv_text1;
    text lv_text2;
    text lv_text3;
    fixed lv_realInterval;
    fixed lv_realCurrent;
    int lv_count;
    int lv_numberOfPlayerUnitsByCOP;

    // Variable Initialization
    lv_text1 = StringExternal("Param/Value/EBD210CF");
    lv_text2 = StringExternal("Param/Value/64685A91");
    lv_text3 = StringExternal("Param/Value/E10677B6");
    lv_realInterval = 0.0;
    lv_realCurrent = 0.0;
    lv_count = 1;
    lv_numberOfPlayerUnitsByCOP = 0;

    // Implementation
    lv_numberOfPlayerUnitsByCOP = UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lp_unit), 2.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    lv_realInterval = 1.0;
    lv_realCurrent = (lv_realInterval * IntToFixed(gv_transmissionProgress[lp_index]));
    lv_text1 = StringExternal("Param/Value/C2EAFB32");
    lv_text2 = FixedToText(lv_realCurrent, 0);
    lv_text3 = StringExternal("Param/Value/E4408F4A");
    SoundPlay(SoundLink("TUI_StarmapMenuPopup", -1), PlayerGroupAll(), 100.0, 0.0);
    autoE4CDAE9A_n = (100 - gv_transmissionProgress[lp_index]);
    autoE4CDAE9A_i = 1;
    while (autoE4CDAE9A_i <= autoE4CDAE9A_n) {
        gf_CheckKillTeams(lp_index, lv_realCurrent);
        if ((lv_realCurrent >= 100.0)) {
            break;
        }
        else {
        }
        if ((ModI(lv_count, 12) == 0)) {
            auto0BECB369_val = RandomInt(1, 3);
            if (auto0BECB369_val == 1) {
                SoundPlay(SoundLink("TUI_ArmoryConsoleExit", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto0BECB369_val == 2) {
                SoundPlay(SoundLink("TUI_ArmoryConsolePurchase", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto0BECB369_val == 3) {
                SoundPlay(SoundLink("TUI_ArmoryConsoleSelect", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
        }
        else {
        }
        BoardItemSetText(gv_uploadBoard, 2, lp_index, (lv_text1 + lv_text2 + lv_text3));
        Wait((gv_uploadTime / 100.0), c_timeGame);
        lv_realCurrent = (lv_realCurrent + lv_realInterval);
        lv_text2 = FixedToText(lv_realCurrent, 0);
        lv_numberOfPlayerUnitsByCOP = UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lp_unit), 2.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_numberOfPlayerUnitsByCOP == 0)) {
            gv_transmissionProgress[lp_index] = (gv_transmissionProgress[lp_index] + lv_count);
            return ;
        }
        else {
            lv_count = (lv_count + 1);
        }
        autoE4CDAE9A_i = autoE4CDAE9A_i + 1;
    }
    gv_transmissionProgress[lp_index] = 150;
    BoardItemSetText(gv_uploadBoard, 2, lp_index, StringExternal("Param/Value/8F385175"));
    TextTagCreate(StringExternal("Param/Value/4111D2AB"), 30, UnitGetPosition(lp_unit), 2.0, true, false, PlayerGroupAll());
    SoundPlay(SoundLink("TUI_ArmoryConsolePurchase", -1), PlayerGroupAll(), 100.0, 0.0);
    TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

void gf_CheckKillTeams (int lp_baseIndex, fixed lp_progress) {
    int auto3E293D45_val;

    // Implementation
    auto3E293D45_val = lp_baseIndex;
    if (auto3E293D45_val == 1) {
        TriggerExecute(gt_TransmissionAirBaseGankSquadQ, true, false);
        TriggerExecute(gt_SendAirBaseKillTeam1, true, false);
        if ((lp_progress >= 30.0)) {
            TriggerExecute(gt_SendAirBaseKillTeam2, true, false);
        }
        else {
        }
        if ((lp_progress >= 60.0)) {
            TriggerExecute(gt_SendAirBaseKillTeam3, true, false);
        }
        else {
        }
    }
    else if (auto3E293D45_val == 2) {
        TriggerExecute(gt_TransmissionSiegeBaseGankSquadQ, true, false);
        TriggerExecute(gt_SendSiegeBaseKillTeam1, true, false);
        if ((lp_progress >= 30.0)) {
            TriggerExecute(gt_SendSiegeBaseKillTeam2, true, false);
        }
        else {
        }
        if ((lp_progress >= 60.0)) {
            TriggerExecute(gt_SendSiegeBaseKillTeam3, true, false);
        }
        else {
        }
    }
    else if (auto3E293D45_val == 3) {
        TriggerExecute(gt_TransmissionRaiderBaseGankSquadQ, true, false);
        TriggerExecute(gt_SendRaiderBaseKillTeam1, true, false);
        if ((lp_progress >= 30.0)) {
            TriggerExecute(gt_SendRaiderBaseKillTeam2, true, false);
        }
        else {
        }
        if ((lp_progress >= 60.0)) {
            TriggerExecute(gt_SendRaiderBaseKillTeam3, true, false);
        }
        else {
        }
    }
    else {
    }
}

void gf_WaitForPermissionToAttack (int lp_player) {
    // Implementation
    while (!((gv_playerHasPermission[lp_player] == true))) {
        Wait(0.05, c_timeAI);
    }
    gv_playerHasPermission[lp_player] = false;
}

int gf_NextAttacker (int lp_lastAttacker) {
    int autoDF14CF65_val;

    // Implementation
    autoDF14CF65_val = lp_lastAttacker;
    if (autoDF14CF65_val == gv_p05_DOMINION_RAIDER) {
        return gv_p04_DOMINION_AIR;
    }
    else if (autoDF14CF65_val == gv_p04_DOMINION_AIR) {
        return gv_p03_DOMINION_SIEGE;
    }
    else if (autoDF14CF65_val == gv_p03_DOMINION_SIEGE) {
        return gv_p05_DOMINION_RAIDER;
    }
    else {
    }
    return 0;
}

bool gf_PlayerCanAttack (int lp_player) {
    // Implementation
    if ((lp_player == 0)) {
        return false;
    }
    else {
    }
    if ((TechTreeUnitCount(lp_player, "Barracks", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(lp_player, "BarracksFlying", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(lp_player, "Factory", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(lp_player, "FactoryFlying", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(lp_player, "Starport", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(lp_player, "StarportFlying", c_techCountQueuedOrBetter) == 0)) {
        return false;
    }
    else {
    }
    return true;
}

void gf_SendAnAttackWave () {
    // Implementation
    gv_waveAttacker = gf_NextAttacker(gv_waveAttacker);
    if ((gf_PlayerCanAttack(gv_waveAttacker) == false)) {
        gv_waveAttacker = gf_NextAttacker(gv_waveAttacker);
    }
    else {
    }
    if ((gf_PlayerCanAttack(gv_waveAttacker) == false)) {
        gv_waveAttacker = gf_NextAttacker(gv_waveAttacker);
    }
    else {
    }
    gv_playerHasPermission[gv_waveAttacker] = true;
}

void gf_WaitForNextWave () {
    int auto4852D119_val;

    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Implementation
    if ((gf_PlayerCanAttack(gv_p05_DOMINION_RAIDER) == true)) {
        lv_attackerCount = (lv_attackerCount + 1);
    }
    else {
    }
    if ((gf_PlayerCanAttack(gv_p04_DOMINION_AIR) == true)) {
        lv_attackerCount = (lv_attackerCount + 1);
    }
    else {
    }
    if ((gf_PlayerCanAttack(gv_p03_DOMINION_SIEGE) == true)) {
        lv_attackerCount = (lv_attackerCount + 1);
    }
    else {
    }
    auto4852D119_val = lv_attackerCount;
    if (auto4852D119_val == 3) {
        Wait(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 180.0, 150.0), c_timeAI);
    }
    else if (auto4852D119_val == 2) {
        Wait(libNtve_gf_DifficultyValueFixed(210.0, 210.0, 165.0, 135.0), c_timeAI);
    }
    else if (auto4852D119_val == 1) {
        Wait(libNtve_gf_DifficultyValueFixed(240.0, 240.0, 150.0, 120.0), c_timeAI);
    }
    else {
        Wait(3600.0, c_timeAI);
    }
}

void gf_PlayUnitTalkIcon (unit lp_chosenUnit) {
    // Implementation
    gv_pickedUnit = lp_chosenUnit;
    TriggerExecute(gt_PlayUnitTalkonPickedUnit, true, false);
}

void gf_CreateBriefingParadeUnit (string lp_unitType, int lp_player, fixed lp_polarDistance, fixed lp_polarRadius) {
    int auto5E4EFB6A_ae;
    int auto5E4EFB6A_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, lp_unitType, 0, lp_player, PointWithOffsetPolar(gv_briefingParadePoints[1], lp_polarDistance, (PointGetFacing(gv_briefingParadePoints[1]) + lp_polarRadius)));
    UnitGroupAdd(gv_briefingParadeGroup, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.5);
    auto5E4EFB6A_ae = gv_briefingNumberOfParadePoints;
    auto5E4EFB6A_ai = 1;
    lv_i = 2;
    while ((auto5E4EFB6A_ai >= 0 && lv_i <= auto5E4EFB6A_ae) || (auto5E4EFB6A_ai <= 0 && lv_i >= auto5E4EFB6A_ae)) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(gv_briefingParadePoints[lv_i], lp_polarDistance, (PointGetFacing(gv_briefingParadePoints[lv_i]) + lp_polarRadius))), c_orderQueueAddToEnd);
        if (lv_i == auto5E4EFB6A_ae) {
            break;
        }
        lv_i = lv_i + auto5E4EFB6A_ai;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(15);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, 22, gv_p01_USER);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("OdinNuclearStrike", 0), false);
    UnitGroupLoopBegin(UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "AutoTurretTimedLife", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    PlayerGroupAdd(gv_dominionPlayers, gv_p02_DOMINION_INFANTRY);
    PlayerGroupAdd(gv_dominionPlayers, gv_p03_DOMINION_SIEGE);
    PlayerGroupAdd(gv_dominionPlayers, gv_p04_DOMINION_AIR);
    PlayerGroupAdd(gv_dominionPlayers, gv_p05_DOMINION_RAIDER);
    PlayerGroupAdd(gv_dominionPlayers, gv_p08_DOMINION);
    libNtve_gf_SetPlayerGroupAlliance(gv_dominionPlayers, 2);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p06_CIVILIANS, 7);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p07_HORNERBASE, 2);
    libNtve_gf_SetAlliance(gv_p02_DOMINION_INFANTRY, gv_p06_CIVILIANS, 7);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_SIEGE, gv_p06_CIVILIANS, 7);
    libNtve_gf_SetAlliance(gv_p04_DOMINION_AIR, gv_p06_CIVILIANS, 7);
    libNtve_gf_SetAlliance(gv_p05_DOMINION_RAIDER, gv_p06_CIVILIANS, 7);
    libNtve_gf_SetAlliance(gv_p07_HORNERBASE, gv_p06_CIVILIANS, 7);
    libNtve_gf_SetAllianceOneWay(gv_p08_DOMINION, gv_p06_CIVILIANS, 7);
    libNtve_gf_SetAlliance(gv_p07_HORNERBASE, gv_p02_DOMINION_INFANTRY, 7);
    libNtve_gf_SetAlliance(gv_p07_HORNERBASE, gv_p03_DOMINION_SIEGE, 7);
    libNtve_gf_SetAlliance(gv_p07_HORNERBASE, gv_p04_DOMINION_AIR, 7);
    libNtve_gf_SetAlliance(gv_p07_HORNERBASE, gv_p05_DOMINION_RAIDER, 7);
    libNtve_gf_SetAllianceOneWay(gv_p07_HORNERBASE, gv_p08_DOMINION, 7);
    libCamp_gf_ApplyCampaignTech(gv_p07_HORNERBASE);
    PlayerModifyPropertyInt(gv_p02_DOMINION_INFANTRY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p02_DOMINION_INFANTRY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_DOMINION_SIEGE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_DOMINION_SIEGE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_DOMINION_AIR, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_DOMINION_AIR, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_DOMINION_RAIDER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_DOMINION_RAIDER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p07_HORNERBASE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p07_HORNERBASE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_p03_DOMINION_SIEGE, 1, true);
    PlayerSetColorIndex(gv_p04_DOMINION_AIR, 1, true);
    PlayerSetColorIndex(gv_p05_DOMINION_RAIDER, 1, true);
    PlayerSetState(gv_p06_CIVILIANS, c_playerStateShowScore, false);
    PlayerSetState(gv_p07_HORNERBASE, c_playerStateShowScore, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_odin = UnitFromId(1);
    libNtve_gf_ShareVisionofUnit(gv_odin, true, gv_p03_DOMINION_SIEGE);
    libNtve_gf_ShareVisionofUnit(gv_odin, true, gv_p04_DOMINION_AIR);
    libNtve_gf_ShareVisionofUnit(gv_odin, true, gv_p05_DOMINION_RAIDER);
    gv_statueBullhorns[1] = UnitFromId(1597);
    gv_statueBullhorns[2] = UnitFromId(1612);
    gv_statueBullhorns[3] = UnitFromId(216);
    gv_statueBullhorns[4] = UnitFromId(213);
    gv_statueBullhorns[5] = UnitFromId(217);
    gv_statueBullhorns[6] = UnitFromId(215);
    UnitGroupLoopBegin(UnitGroup("Beacon_Terran", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/BAA72864"), StringExternal("Param/Value/FFD0115C"), StringExternal("Param/Value/3A40DEA3"));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_CreatePassiveUnitsInBunker(4, "Marine", UnitFromId(1266));
    gf_CreatePassiveUnitsInBunker(2, "Marine", UnitFromId(1313));
    gf_CreatePassiveUnitsInBunker(1, "Marauder", UnitFromId(1313));
    gf_CreatePassiveUnitsInBunker(4, "Marine", UnitFromId(923));
    gf_CreatePassiveUnitsInBunker(2, "Marine", UnitFromId(579));
    gf_CreatePassiveUnitsInBunker(1, "Marauder", UnitFromId(579));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("MengskStatue", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_statues);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("MengskStatueAlone", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_statues);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("WolfStatue", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_statues);
    UnitGroupLoopBegin(gv_statues);
    while (!UnitGroupLoopDone()) {
        gf_SetMaxLife(UnitGroupLoopCurrent(), 200.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(963), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetTeamColorIndex(UnitFromId(1081), 1);
    UnitGroupLoopBegin(UnitGroup("LogisticsHeadquarters", gv_p08_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlighted, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION_INFANTRY, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Passive", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION_INFANTRY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Passive", UnitGroupLoopCurrent(), 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ScanRangeBonus", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_DOMINION_SIEGE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Passive", UnitGroupLoopCurrent(), 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ScanRangeBonus", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p04_DOMINION_AIR, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Passive", UnitGroupLoopCurrent(), 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ScanRangeBonus", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p05_DOMINION_RAIDER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Passive", UnitGroupLoopCurrent(), 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ScanRangeBonus", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner04MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(30), RegionFromId(30), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(16), RegionFromId(16), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(23), RegionFromId(23), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(19), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(24), RegionFromId(24), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_p01_USER);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleBullhornLights", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleBillboardScrollingText", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleBillboardTall", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleSignsConstruction", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleSignsDirectional", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleSignsFunny", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleSignsIcons", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleSignsWarning", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleStoreFrontCityProps", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("GlobeStatue", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleKorhalFoliage", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleKorhalTree", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleKorhalPodium", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleKorhalFlag", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("TRaynor01SignsDestructible1", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleSearchlight", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleSpacePlatformBarrier", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleSpacePlatformSign", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleStreetlight", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DestructibleTrafficSignal", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("UtilityBot", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsNeutral);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Scientist", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Civilian", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("CivilianFemale", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("CivilianCarsUnit", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("CruiserBike", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("TerranBuggy", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("CargoTruckUnitBarrels", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("CargoTruckUnitFlatbed", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("CargoTruckUnitTrailer", gv_p06_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_destructibleObjectsCiv);
    UnitGroupLoopBegin(gv_destructibleObjectsNeutral);
    while (!UnitGroupLoopDone()) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 1, 99.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_destructibleObjectsCiv);
    while (!UnitGroupLoopDone()) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 1, 99.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p02_DOMINION_INFANTRY, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p03_DOMINION_SIEGE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p04_DOMINION_AIR, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p05_DOMINION_RAIDER, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p08_DOMINION, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }
    else {
    }
    gv_distractionTime = libNtve_gf_DifficultyValueFixed(300.0, 300.0, 270.0, 240.0);
    UnitSetPropertyFixed(gv_odin, c_unitPropEnergyPercent, 100.0);
    gv_uploadTime = 55.0;
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "SiegeTech");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranInfantryArmorsLevel1");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranInfantryWeaponsLevel1");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranVehicleArmorsLevel1");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranVehicleWeaponsLevel1");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranShipArmorsLevel1");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranShipWeaponsLevel1");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "AresClassWeaponsSystemViking");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ClusterWarheads");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "AresClassWeaponsSystem");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "MaelstromRounds");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "StabilizerMedPacks");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ReaperU238Rounds");
    gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "CombatShield");
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("BansheeCloak", 0), false);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Diamondback", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Vulture", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Odin", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_p01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_p01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("SpartanCompany", false, gv_p01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("WarPig", false, gv_p01_USER);
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeBreakerSieged", false, gv_p01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Shorten Time
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGShortenTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_distractionTimer, true);
    TimerStart(gv_distractionTimer, 5.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGShortenTime_Init () {
    gt_DEBUGShortenTime = TriggerCreate("gt_DEBUGShortenTime_Func");
    TriggerAddEventChatMessage(gt_DEBUGShortenTime, c_playerAny, "short", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/0930E285"), null, gv_odin);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TimerStart(gv_achievementHardTimer, 1200.0, false, c_timeAI);
    }
    else {
    }
    gv_missionStage1 = true;
    GamePauseAllCharges(true);
    GamePauseAllCooldowns(true);
    TriggerExecute(gt_SCVBuildsSupplyDepot, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyCreateQ, true, false);
    Wait(2.0, c_timeReal);
    if ((gv_sneakAttackBegun == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/A5099609"));
    }
    else {
    }
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_NewUnitOdinTipQ, true, false);
    TriggerExecute(gt_NewAbilityBarrageTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1_Init () {
    gt_StartGameStage1 = TriggerCreate("gt_StartGameStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1 Timer
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1Timer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_distractionTimer, gv_distractionTime, false, c_timeGame);
    gv_distractionTimer = TimerLastStarted();
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/E6304B93"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    gv_distractionTimerWindow = TimerWindowLastCreated();
    TimerWindowSetColor(gv_distractionTimerWindow, c_timerWindowColorTime, Color(0.00, 100.00, 0.00), 0.0);
    TimerStart(gv__90SecondWarning, (gv_distractionTime - 90.0), false, c_timeGame);
    TimerStart(gv__30SecondWarning, (gv_distractionTime - 30.0), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1Timer_Init () {
    gt_StartGameStage1Timer = TriggerCreate("gt_StartGameStage1Timer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertClear(gv_p01_USER);
    GamePauseAllCharges(false);
    GamePauseAllCooldowns(false);
    gv_missionStage1 = false;
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerExecute(gt_SwannFliesInaThor, true, false);
    TriggerExecute(gt_ObjectiveAccessBroadcastTowersCreateQ, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_CreatePrimaryObjectiveLeaderboard, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_CreateBeaconsandMapPings, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionStage2IntroQ, true, true);
    TriggerExecute(gt_TrainTroopsTipQ, true, true);
    Wait(5.0, c_timeGame);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2_Init () {
    gt_StartGameStage2 = TriggerCreate("gt_StartGameStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilians Attacked and Cower
//--------------------------------------------------------------------------------------------------
bool gt_CiviliansAttackedandCower_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Civilian") || (UnitGetType(EventUnit()) == "CivilianFemale")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_p06_CIVILIANS, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) == 0.0)) {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 99.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Fidget Inferior End", 0, c_animTimeDefault);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, UnitGroupRandomUnit(UnitGroup("Hut", gv_p06_CIVILIANS, RegionCircle(UnitGetPosition(EventUnit()), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CiviliansAttackedandCower_Init () {
    gt_CiviliansAttackedandCower = TriggerCreate("gt_CiviliansAttackedandCower_Func");
    TriggerEnable(gt_CiviliansAttackedandCower, false);
    TriggerAddEventUnitDied(gt_CiviliansAttackedandCower, null);
    TriggerAddEventUnitDamaged(gt_CiviliansAttackedandCower, null, c_unitDamageTypeAny, c_unitDamageEither, EventUnitDamageEffect());
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Garrisoned Civilians
//--------------------------------------------------------------------------------------------------
bool gt_RemoveGarrisonedCivilians_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hut"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p06_CIVILIANS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnitCargo());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveGarrisonedCivilians_Init () {
    gt_RemoveGarrisonedCivilians = TriggerCreate("gt_RemoveGarrisonedCivilians_Func");
    TriggerAddEventUnitCargo(gt_RemoveGarrisonedCivilians, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - North Side Vehicles
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceNorthSideVehicles_Func (bool testConds, bool runActions) {
    int auto257BD5B4_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization
    lv_random = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_civilianVehicleCounter <= 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 7);
    gv_civilianVehicleCounter += 1;
    auto257BD5B4_val = lv_random;
    if (auto257BD5B4_val == 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CruiserBike", 0, gv_p06_CIVILIANS, PointFromId(245));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(308)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(469)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(866)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1408)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1458)), c_orderQueueAddToEnd);
    }
    else if (auto257BD5B4_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranBuggy", 0, gv_p06_CIVILIANS, PointFromId(245));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(308)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(469)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(866)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1408)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1458)), c_orderQueueAddToEnd);
    }
    else if (auto257BD5B4_val == 3) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, gv_p06_CIVILIANS, PointFromId(245));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(308)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(469)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(866)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1408)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1458)), c_orderQueueAddToEnd);
    }
    else if (auto257BD5B4_val == 4) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitTrailer", 0, gv_p06_CIVILIANS, PointFromId(245));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(308)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(469)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(866)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1408)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1458)), c_orderQueueAddToEnd);
    }
    else if (auto257BD5B4_val == 5) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitFlatbed", 0, gv_p06_CIVILIANS, PointFromId(245));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(308)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(469)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(866)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1408)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1458)), c_orderQueueAddToEnd);
    }
    else if (auto257BD5B4_val == 6) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColonistVehicleUnit", 0, gv_p06_CIVILIANS, PointFromId(245));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(308)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(469)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(866)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1408)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1458)), c_orderQueueAddToEnd);
    }
    else if (auto257BD5B4_val == 7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianCarsUnit", 0, gv_p06_CIVILIANS, PointFromId(245));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(308)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(469)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(866)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1408)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1458)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceNorthSideVehicles_Init () {
    gt_CityAmbienceNorthSideVehicles = TriggerCreate("gt_CityAmbienceNorthSideVehicles_Func");
    TriggerAddEventTimePeriodic(gt_CityAmbienceNorthSideVehicles, 50.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - SE Side Vehicles
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceSESideVehicles_Func (bool testConds, bool runActions) {
    int auto00442D74_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization
    lv_random = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_civilianVehicleCounter <= 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 7);
    gv_civilianVehicleCounter += 1;
    auto00442D74_val = lv_random;
    if (auto00442D74_val == 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CruiserBike", 0, gv_p06_CIVILIANS, PointFromId(1459));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1460)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1461)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1462)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1463)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1464)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1465)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1466)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1467)), c_orderQueueAddToEnd);
    }
    else if (auto00442D74_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranBuggy", 0, gv_p06_CIVILIANS, PointFromId(1459));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1460)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1461)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1462)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1463)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1464)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1465)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1466)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1467)), c_orderQueueAddToEnd);
    }
    else if (auto00442D74_val == 3) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, gv_p06_CIVILIANS, PointFromId(1459));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1460)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1461)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1462)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1463)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1464)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1465)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1466)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1467)), c_orderQueueAddToEnd);
    }
    else if (auto00442D74_val == 4) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitFlatbed", 0, gv_p06_CIVILIANS, PointFromId(1459));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1460)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1461)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1462)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1463)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1464)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1465)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1466)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1467)), c_orderQueueAddToEnd);
    }
    else if (auto00442D74_val == 5) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitTrailer", 0, gv_p06_CIVILIANS, PointFromId(1459));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1460)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1461)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1462)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1463)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1464)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1465)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1466)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1467)), c_orderQueueAddToEnd);
    }
    else if (auto00442D74_val == 6) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColonistVehicleUnit", 0, gv_p06_CIVILIANS, PointFromId(1459));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1460)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1461)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1462)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1463)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1464)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1465)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1466)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1467)), c_orderQueueAddToEnd);
    }
    else if (auto00442D74_val == 7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianCarsUnit", 0, gv_p06_CIVILIANS, PointFromId(1459));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1460)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1461)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1462)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1463)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1464)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1465)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1466)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1467)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceSESideVehicles_Init () {
    gt_CityAmbienceSESideVehicles = TriggerCreate("gt_CityAmbienceSESideVehicles_Func");
    TriggerAddEventTimePeriodic(gt_CityAmbienceSESideVehicles, 40.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - SW Side Vehicles
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceSWSideVehicles_Func (bool testConds, bool runActions) {
    int autoE43E0056_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization
    lv_random = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_civilianVehicleCounter <= 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 7);
    gv_civilianVehicleCounter += 1;
    autoE43E0056_val = lv_random;
    if (autoE43E0056_val == 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CruiserBike", 0, gv_p06_CIVILIANS, PointFromId(1468));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1469)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1470)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1471)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1472)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1473)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1474)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1475)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1476)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1477)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1478)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1479)), c_orderQueueAddToEnd);
    }
    else if (autoE43E0056_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CruiserBike", 0, gv_p06_CIVILIANS, PointFromId(1468));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1469)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1470)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1471)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1472)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1473)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1474)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1475)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1476)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1477)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1478)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1479)), c_orderQueueAddToEnd);
    }
    else if (autoE43E0056_val == 3) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, gv_p06_CIVILIANS, PointFromId(1468));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1469)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1470)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1471)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1472)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1473)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1474)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1475)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1476)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1477)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1478)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1479)), c_orderQueueAddToEnd);
    }
    else if (autoE43E0056_val == 4) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitTrailer", 0, gv_p06_CIVILIANS, PointFromId(1468));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1469)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1470)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1471)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1472)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1473)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1474)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1475)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1476)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1477)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1478)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1479)), c_orderQueueAddToEnd);
    }
    else if (autoE43E0056_val == 5) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitFlatbed", 0, gv_p06_CIVILIANS, PointFromId(1468));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1469)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1470)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1471)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1472)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1473)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1474)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1475)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1476)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1477)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1478)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1479)), c_orderQueueAddToEnd);
    }
    else if (autoE43E0056_val == 6) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColonistVehicleUnit", 0, gv_p06_CIVILIANS, PointFromId(1468));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1469)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1470)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1471)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1472)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1473)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1474)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1475)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1476)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1477)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1478)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1479)), c_orderQueueAddToEnd);
    }
    else if (autoE43E0056_val == 7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianCarsUnit", 0, gv_p06_CIVILIANS, PointFromId(1468));
        UnitSetCustomValue(UnitLastCreated(), 1, 99.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1469)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1470)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1471)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1472)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1473)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1474)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1475)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1476)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1477)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1478)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1479)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceSWSideVehicles_Init () {
    gt_CityAmbienceSWSideVehicles = TriggerCreate("gt_CityAmbienceSWSideVehicles_Func");
    TriggerAddEventTimePeriodic(gt_CityAmbienceSWSideVehicles, 50.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - West Side Blimp
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceWestSideBlimp_Func (bool testConds, bool runActions) {
    int autoF04FDBAA_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization
    lv_random = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 2);
    autoF04FDBAA_val = lv_random;
    if (autoF04FDBAA_val == 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlimpAds", 0, gv_p06_CIVILIANS, PointFromId(1854));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1855)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1856)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1857)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1858)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1859)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1860)), c_orderQueueAddToEnd);
    }
    else if (autoF04FDBAA_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blimp", 0, gv_p06_CIVILIANS, PointFromId(1854));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1855)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1856)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1857)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1858)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1859)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1860)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceWestSideBlimp_Init () {
    gt_CityAmbienceWestSideBlimp = TriggerCreate("gt_CityAmbienceWestSideBlimp_Func");
    TriggerAddEventTimePeriodic(gt_CityAmbienceWestSideBlimp, 105.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - East Side Blimp
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceEastSideBlimp_Func (bool testConds, bool runActions) {
    int auto6AB8FC97_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization
    lv_random = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 2);
    auto6AB8FC97_val = lv_random;
    if (auto6AB8FC97_val == 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlimpAds", 0, gv_p06_CIVILIANS, PointFromId(803));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(804)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(939)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(941)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(942)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(943)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(944)), c_orderQueueAddToEnd);
    }
    else if (auto6AB8FC97_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blimp", 0, gv_p06_CIVILIANS, PointFromId(803));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(804)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(939)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(941)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(942)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(943)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(944)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceEastSideBlimp_Init () {
    gt_CityAmbienceEastSideBlimp = TriggerCreate("gt_CityAmbienceEastSideBlimp_Func");
    TriggerAddEventTimePeriodic(gt_CityAmbienceEastSideBlimp, 105.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - North Spawn Vehicle Removal
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceNorthSpawnVehicleRemoval_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_CIVILIANS))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 99.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_civilianVehicleCounter -= 1;
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceNorthSpawnVehicleRemoval_Init () {
    gt_CityAmbienceNorthSpawnVehicleRemoval = TriggerCreate("gt_CityAmbienceNorthSpawnVehicleRemoval_Func");
    TriggerAddEventUnitRegion(gt_CityAmbienceNorthSpawnVehicleRemoval, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - SE Spawn Vehicle Removal
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceSESpawnVehicleRemoval_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_CIVILIANS))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 99.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_civilianVehicleCounter -= 1;
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceSESpawnVehicleRemoval_Init () {
    gt_CityAmbienceSESpawnVehicleRemoval = TriggerCreate("gt_CityAmbienceSESpawnVehicleRemoval_Func");
    TriggerAddEventUnitRegion(gt_CityAmbienceSESpawnVehicleRemoval, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - SW Spawn Vehicle Removal
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceSWSpawnVehicleRemoval_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_CIVILIANS))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 99.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_civilianVehicleCounter -= 1;
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceSWSpawnVehicleRemoval_Init () {
    gt_CityAmbienceSWSpawnVehicleRemoval = TriggerCreate("gt_CityAmbienceSWSpawnVehicleRemoval_Func");
    TriggerAddEventUnitRegion(gt_CityAmbienceSWSpawnVehicleRemoval, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - West Blimp Removal
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceWestBlimpRemoval_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_CIVILIANS))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Blimp") || (UnitGetType(EventUnit()) == "BlimpAds")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceWestBlimpRemoval_Init () {
    gt_CityAmbienceWestBlimpRemoval = TriggerCreate("gt_CityAmbienceWestBlimpRemoval_Func");
    TriggerAddEventUnitRegion(gt_CityAmbienceWestBlimpRemoval, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Ambience - East Blimp Removal
//--------------------------------------------------------------------------------------------------
bool gt_CityAmbienceEastBlimpRemoval_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_CIVILIANS))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Blimp") || (UnitGetType(EventUnit()) == "BlimpAds")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityAmbienceEastBlimpRemoval_Init () {
    gt_CityAmbienceEastBlimpRemoval = TriggerCreate("gt_CityAmbienceEastBlimpRemoval_Func");
    TriggerAddEventUnitRegion(gt_CityAmbienceEastBlimpRemoval, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Stomps Stuff!
//--------------------------------------------------------------------------------------------------
bool gt_OdinStompsStuff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_odin) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p06_CIVILIANS, RegionCircle(UnitGetPosition(gv_odin), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) == 0.0) && ((UnitGetType(UnitGroupLoopCurrent()) == "Civilian") || (UnitGetType(UnitGroupLoopCurrent()) == "CivilianFemale") || (UnitGetType(UnitGroupLoopCurrent()) == "Scientist"))) {
            PlayerSetState(gv_p06_CIVILIANS, c_playerStateFidgetingEnabled, false);
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 99.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionCircle(UnitGetPosition(gv_odin), 2.75), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 1) == 99.0)) {
            UnitKill(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p06_CIVILIANS, RegionCircle(UnitGetPosition(gv_odin), 2.75), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 1) == 99.0)) {
            UnitKill(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinStompsStuff_Init () {
    gt_OdinStompsStuff = TriggerCreate("gt_OdinStompsStuff_Func");
    TriggerEnable(gt_OdinStompsStuff, false);
    TriggerAddEventTimePeriodic(gt_OdinStompsStuff, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Dominion Outpost Pings
//--------------------------------------------------------------------------------------------------
bool gt_RemoveDominionOutpostPings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_p03_DOMINION_SIEGE) || (UnitGetOwner(EventUnit()) == gv_p04_DOMINION_AIR) || (UnitGetOwner(EventUnit()) == gv_p05_DOMINION_RAIDER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p03_DOMINION_SIEGE, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        PingDestroy(gv_pingSector2Base);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup(null, gv_p04_DOMINION_AIR, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        PingDestroy(gv_pingSector1Base);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup(null, gv_p05_DOMINION_RAIDER, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        PingDestroy(gv_pingSector3Base);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveDominionOutpostPings_Init () {
    gt_RemoveDominionOutpostPings = TriggerCreate("gt_RemoveDominionOutpostPings_Func");
    TriggerAddEventUnitDied(gt_RemoveDominionOutpostPings, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Science Facility Barraged - Spawn Secret Documents
//--------------------------------------------------------------------------------------------------
bool gt_ScienceFacilityBarragedSpawnSecretDocuments_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SecretDocumentsRetrievedUnlockHorner05S, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SecretDocuments", 0, gv_p06_CIVILIANS, PointFromId(73));
    gv_secretDocuments = UnitLastCreated();
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/AA6A68E5"), StringExternal("Param/Value/E6030984"), StringExternal("Param/Value/813608F7"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScienceFacilityBarragedSpawnSecretDocuments_Init () {
    gt_ScienceFacilityBarragedSpawnSecretDocuments = TriggerCreate("gt_ScienceFacilityBarragedSpawnSecretDocuments_Func");
    TriggerAddEventUnitDied(gt_ScienceFacilityBarragedSpawnSecretDocuments, UnitRefFromUnit(UnitFromId(1081)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Secret Documents Retrieved - Unlock Horner05S
//--------------------------------------------------------------------------------------------------
bool gt_SecretDocumentsRetrievedUnlockHorner05S_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(gv_secretDocuments), 2.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_secretsFound = 1;
    UnitKill(gv_secretDocuments);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 3, StringExternal("Param/Value/DAF7934D"), 0);
    ConversationDataStateSetValue("StoryState|HornerSecretMissionOn", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecretDocumentsRetrievedUnlockHorner05S_Init () {
    gt_SecretDocumentsRetrievedUnlockHorner05S = TriggerCreate("gt_SecretDocumentsRetrievedUnlockHorner05S_Func");
    TriggerEnable(gt_SecretDocumentsRetrievedUnlockHorner05S, false);
    TriggerAddEventTimePeriodic(gt_SecretDocumentsRetrievedUnlockHorner05S, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Builds Supply Depot
//--------------------------------------------------------------------------------------------------
bool gt_SCVBuildsSupplyDepot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sCV;

    // Variable Initialization
    lv_sCV = null;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_supplyDepotSCV = UnitGroupRandomUnit(UnitGroup("SCV", gv_p07_HORNERBASE, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    Wait(0.5, c_timeGame);
    if ((libCamp_gf_StoryResearchStateCheck(3, 2) == true)) {
        AISetUnitScriptControlled(gv_supplyDepotSCV, true);
        UnitIssueOrder(gv_supplyDepotSCV, OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), RegionGetCenter(RegionFromId(35))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_supplyDepotSCV, OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), RegionGetCenter(RegionFromId(36))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_supplyDepotSCV, OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), RegionGetCenter(RegionFromId(37))), c_orderQueueAddToEnd);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            UnitIssueOrder(gv_supplyDepotSCV, OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), RegionGetCenter(RegionFromId(42))), c_orderQueueAddToEnd);
        }
        else {
        }
    }
    else {
        AISetUnitScriptControlled(gv_supplyDepotSCV, true);
        UnitIssueOrder(gv_supplyDepotSCV, OrderTargetingPoint(AbilityCommand("TerranBuild", 1), RegionGetCenter(RegionFromId(35))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_supplyDepotSCV, OrderTargetingPoint(AbilityCommand("TerranBuild", 1), RegionGetCenter(RegionFromId(36))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_supplyDepotSCV, OrderTargetingPoint(AbilityCommand("TerranBuild", 1), RegionGetCenter(RegionFromId(37))), c_orderQueueAddToEnd);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            UnitIssueOrder(gv_supplyDepotSCV, OrderTargetingPoint(AbilityCommand("TerranBuild", 1), RegionGetCenter(RegionFromId(42))), c_orderQueueAddToEnd);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVBuildsSupplyDepot_Init () {
    gt_SCVBuildsSupplyDepot = TriggerCreate("gt_SCVBuildsSupplyDepot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Goes Idle
//--------------------------------------------------------------------------------------------------
bool gt_SCVGoesIdle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p07_HORNERBASE))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(gv_supplyDepotSCV, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVGoesIdle_Init () {
    gt_SCVGoesIdle = TriggerCreate("gt_SCVGoesIdle_Func");
    TriggerAddEventUnitBecomesIdle(gt_SCVGoesIdle, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Aggro Icon on Unit
//--------------------------------------------------------------------------------------------------
bool gt_ShowAggroIcononUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_chosenUnit;

    // Variable Initialization
    lv_chosenUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chosenUnit = gv_pickedUnit;
    TextTagCreate(StringExternal("Param/Value/B35796C7"), 30, UnitGetPosition(lv_chosenUnit), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), lv_chosenUnit, 1.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    Wait(2.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowAggroIcononUnit_Init () {
    gt_ShowAggroIcononUnit = TriggerCreate("gt_ShowAggroIcononUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Horner Builds Player Base
//--------------------------------------------------------------------------------------------------
bool gt_HornerBuildsPlayerBase_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p07_HORNERBASE);
    AIToggleBulliesInRegion(gv_p07_HORNERBASE, RegionFromId(18), true);
    if ((gv_playerHasMercTech == false)) {
        AIToggleBulliesInRegion(gv_p07_HORNERBASE, RegionFromId(43), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HornerBuildsPlayerBase_Init () {
    gt_HornerBuildsPlayerBase = TriggerCreate("gt_HornerBuildsPlayerBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parade Plaza Reaction
//--------------------------------------------------------------------------------------------------
bool gt_ParadePlazaReaction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Odin"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_soundEmitterCheers, true);
    SoundPlayAtPoint(SoundLink("Emitter_CrowdPanic", -1), PlayerGroupAll(), Point(80.0, 80.0), 0.0, 100.0, 0.0);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_sneakAttackBegun = true;
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(gt_OdinStompsStuff, true);
    TriggerExecute(gt_StartGameStage1Timer, true, false);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(RegionGetCenter(RegionFromId(9)), 20.0), c_actorIntersectAgainstRadiusContact, "SetVisibility", "Doodad", "ScopeContains Balloons");
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(RegionGetCenter(RegionFromId(9)), 20.0), c_actorIntersectAgainstRadiusContact, "SetVisibility", "Doodad", "ScopeContains TickerTapeFX");
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(RegionGetCenter(RegionFromId(9)), 20.0), c_actorIntersectAgainstRadiusContact, "SetVisibility", "Doodad", "ScopeContains Fireworks");
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION_INFANTRY, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 99.0);
        gf_ShowUnitAggro(UnitGroupLoopCurrent());
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Passive", 1);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_odin), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p06_CIVILIANS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) == 0.0) && (UnitGetType(UnitGroupLoopCurrent()) != "Blimp") && (UnitGetType(UnitGroupLoopCurrent()) != "BlimpAds")) {
            libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault);
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 99.0);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, UnitGroupRandomUnit(UnitGroup("Hut", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_TransmissionPlazaMarineReactionQ, true, true);
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_CiviliansAttackedandCower, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParadePlazaReaction_Init () {
    gt_ParadePlazaReaction = TriggerCreate("gt_ParadePlazaReaction_Func");
    TriggerAddEventUnitStartedAttack(gt_ParadePlazaReaction, null);
    TriggerAddEventUnitAbility(gt_ParadePlazaReaction, null, AbilityCommand("OdinBarrage", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aggro Passive Units
//--------------------------------------------------------------------------------------------------
bool gt_AggroPassiveUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_p02_DOMINION_INFANTRY) || (UnitGetOwner(EventUnit()) == gv_p03_DOMINION_SIEGE) || (UnitGetOwner(EventUnit()) == gv_p04_DOMINION_AIR) || (UnitGetOwner(EventUnit()) == gv_p05_DOMINION_RAIDER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) == 0.0)) {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 99.0);
            gf_ShowUnitAggro(UnitGroupLoopCurrent());
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "Passive", 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ScanRangeBonus", UnitGroupLoopCurrent(), 1);
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV")) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_odin), c_orderQueueReplace);
            }
            else {
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnitTarget()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 0) == 0.0)) {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 99.0);
            gf_ShowUnitAggro(UnitGroupLoopCurrent());
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "Passive", 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ScanRangeBonus", UnitGroupLoopCurrent(), 1);
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV")) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_odin), c_orderQueueReplace);
            }
            else {
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AggroPassiveUnits_Init () {
    gt_AggroPassiveUnits = TriggerCreate("gt_AggroPassiveUnits_Func");
    TriggerAddEventUnitAttacked(gt_AggroPassiveUnits, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Attack Over
//--------------------------------------------------------------------------------------------------
bool gt_InitialAttackOver_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_odin, 0, 1);
    TriggerEnable(gt_OdinDiesMovetoStage2, false);
    TransmissionClear(gv_hornerTimeWarning);
    TriggerExecute(gt_ObjectiveDestroyComplete, true, true);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialAttackOver_Init () {
    gt_InitialAttackOver = TriggerCreate("gt_InitialAttackOver_Func");
    TriggerAddEventTimer(gt_InitialAttackOver, gv_distractionTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Dies, Move to Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_OdinDiesMovetoStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_missionStage1 == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_odinDead = true;
    gv_odinKillCount = libNtve_gf_UnitGetPropertyKills(gv_odin, c_unitPropCurrent);
    TimerWindowShow(gv_distractionTimerWindow, PlayerGroupAll(), false);
    TimerPause(gv_distractionTimer, true);
    TimerPause(gv__30SecondWarning, true);
    TimerPause(gv__90SecondWarning, true);
    TimerStart(gv_distractionTimer, 3.0, false, c_timeGame);
    libNtve_gf_ShareVisionofUnit(gv_odin, true, gv_p01_USER);
    UnitSetOwner(gv_odin, gv_p07_HORNERBASE, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinDiesMovetoStage2_Init () {
    gt_OdinDiesMovetoStage2 = TriggerCreate("gt_OdinDiesMovetoStage2_Func");
    TriggerAddEventUnitAbility(gt_OdinDiesMovetoStage2, UnitRefFromVariable("gv_odin"), AbilityCommand("OdinWreckage", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Primary Objective Leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_CreatePrimaryObjectiveLeaderboard_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    BoardCreate(2, 3, StringExternal("Param/Value/CB469595"), Color(100.00, 100.00, 100.00));
    gv_uploadBoard = BoardLastCreated();
    BoardSetState(gv_uploadBoard, PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardSetState(gv_uploadBoard, PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardSetGroupCount(gv_uploadBoard, 1);
    BoardRowSetGroup(gv_uploadBoard, 1, 1);
    BoardRowSetGroup(gv_uploadBoard, 2, 1);
    BoardRowSetGroup(gv_uploadBoard, 3, 1);
    BoardItemSetText(gv_uploadBoard, c_boardColGroups, 1, StringExternal("Param/Value/4F602271"));
    BoardItemSetText(gv_uploadBoard, 1, 1, StringExternal("Param/Value/D9C73D1B"));
    BoardItemSetText(gv_uploadBoard, 2, 1, StringExternal("Param/Value/FCB0FE8A"));
    BoardItemSetText(gv_uploadBoard, 1, 2, StringExternal("Param/Value/CCA9A3B1"));
    BoardItemSetText(gv_uploadBoard, 2, 2, StringExternal("Param/Value/7B98881E"));
    BoardItemSetText(gv_uploadBoard, 1, 3, StringExternal("Param/Value/47D958C6"));
    BoardItemSetText(gv_uploadBoard, 2, 3, StringExternal("Param/Value/9293FAA1"));
    BoardMinimizeShow(gv_uploadBoard, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePrimaryObjectiveLeaderboard_Init () {
    gt_CreatePrimaryObjectiveLeaderboard = TriggerCreate("gt_CreatePrimaryObjectiveLeaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Beacons and Map Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateBeaconsandMapPings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideUnit(UnitFromId(806), true);
    libNtve_gf_ShowHideUnit(UnitFromId(807), true);
    libNtve_gf_ShowHideUnit(UnitFromId(808), true);
    VisRevealerCreate(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(808)), 3.0));
    gv_sector1BeaconRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(806)), 3.0));
    gv_sector2BeaconRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(807)), 3.0));
    gv_sector3BeaconRevealer = VisRevealerLastCreated();
    PingCreate(PlayerGroupSingle(1), "PingNumeric1", UnitGetPosition(UnitFromId(808)), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0);
    gv_pingSector1Tower = PingLastCreated();
    PingSetTooltip(gv_pingSector1Tower, StringExternal("Param/Value/7F6061D4"));
    PingCreate(PlayerGroupSingle(1), "PingNumeric2", UnitGetPosition(UnitFromId(806)), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0);
    gv_pingSector2Tower = PingLastCreated();
    PingSetTooltip(gv_pingSector2Tower, StringExternal("Param/Value/1D6989D7"));
    PingCreate(PlayerGroupSingle(1), "PingNumeric3", UnitGetPosition(UnitFromId(807)), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0);
    gv_pingSector3Tower = PingLastCreated();
    PingSetTooltip(gv_pingSector3Tower, StringExternal("Param/Value/70C4D678"));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(UnitFromId(808)));
    gv_pingActor_Tower1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(UnitFromId(806)));
    gv_pingActor_Tower2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(UnitFromId(807)));
    gv_pingActor_Tower3 = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBeaconsandMapPings_Init () {
    gt_CreateBeaconsandMapPings = TriggerCreate("gt_CreateBeaconsandMapPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_OdinDiesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_missionStage1 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_odinDead = true;
    gv_odinKillCount = libNtve_gf_UnitGetPropertyKills(gv_odin, c_unitPropCurrent);
    SoundPlay(SoundLink("Thor_Build", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_MakeUnitInvulnerable(gv_odin, true);
    UnitSetOwner(gv_odin, gv_p07_HORNERBASE, true);
    UnitFlashSelection(gv_odin, 6.0);
    TriggerQueueEnter();
    CameraPan(gv_p01_USER, UnitGetPosition(gv_odin), 1.0, -1, 10, false);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_TransmissionTychusEjectsOutoftheOdin, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_TychusEjection, true, false);
    Wait(4.0, c_timeGame);
    UnitKill(gv_odin);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinDiesQ_Init () {
    gt_OdinDiesQ = TriggerCreate("gt_OdinDiesQ_Func");
    TriggerEnable(gt_OdinDiesQ, false);
    TriggerAddEventUnitAbility(gt_OdinDiesQ, UnitRefFromVariable("gv_odin"), AbilityCommand("OdinWreckage", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Flies In a Thor
//--------------------------------------------------------------------------------------------------
bool gt_SwannFliesInaThor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;
    unit lv_thor;

    // Variable Initialization
    lv_dropship = null;
    lv_thor = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(25.0, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner04MusicSwann", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p07_HORNERBASE, 7);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", c_unitCreateIgnorePlacement, gv_p07_HORNERBASE, PointFromId(1412));
    lv_dropship = UnitLastCreated();
    UnitSetState(lv_dropship, c_unitStateSelectable, true);
    libNtve_gf_MakeUnitInvulnerable(lv_dropship, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Thor", c_unitCreateIgnorePlacement, gv_p07_HORNERBASE, PointFromId(1412));
    lv_thor = UnitLastCreated();
    UnitIssueOrder(lv_dropship, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), lv_thor), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitSetPosition(lv_dropship, PointFromId(218), false);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_dropship, PointFromId(1525), PointFromId(218));
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p07_HORNERBASE, 1);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionSwannDropsInAThorQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwannFliesInaThor_Init () {
    gt_SwannFliesInaThor = TriggerCreate("gt_SwannFliesInaThor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thor Changes Owner
//--------------------------------------------------------------------------------------------------
bool gt_ThorChangesOwner_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p07_HORNERBASE))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SpecialOpsDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AttachModelToUnit(EventUnitCargo(), "BriefingUnitSelect", "Ref_Center");
    libNtve_gf_RescueUnit(EventUnitCargo(), gv_p01_USER, true);
    Wait(6.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThorChangesOwner_Init () {
    gt_ThorChangesOwner = TriggerCreate("gt_ThorChangesOwner_Func");
    TriggerAddEventUnitCargo(gt_ThorChangesOwner, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tychus Ejection
//--------------------------------------------------------------------------------------------------
bool gt_TychusEjection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tychusMissile;

    // Variable Initialization
    lv_tychusMissile = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "TychusEjectMissile", 0, gv_p07_HORNERBASE, UnitGetPosition(gv_odin), UnitGetFacing(gv_odin));
    lv_tychusMissile = UnitLastCreated();
    UnitSetHeight(lv_tychusMissile, 16.0, 2.5);
    Wait(4.0, c_timeGame);
    UnitRemove(lv_tychusMissile);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TychusEjection_Init () {
    gt_TychusEjection = TriggerCreate("gt_TychusEjection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 1
//--------------------------------------------------------------------------------------------------
bool gt_Statue1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_statue;
    fixed lv_statueMaxLife;
    actor lv_bullhornExclamation;

    // Variable Initialization
    lv_statue = null;
    lv_statueMaxLife = 0.0;
    lv_bullhornExclamation = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1078)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_statue = UnitFromId(1078);
    lv_statueMaxLife = UnitGetPropertyFixed(lv_statue, c_unitPropLife, c_unitPropCurrent);
    gv_statueCount = (gv_statueCount + 1);
    libNtve_gf_AttachModelToUnit(gv_statueBullhorns[1], "TalkIcon", "Ref_Overhead");
    lv_bullhornExclamation = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_TransmissionMengskStatuesQ, true, true);
    libNtve_gf_KillModel(lv_bullhornExclamation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue1_Init () {
    gt_Statue1 = TriggerCreate("gt_Statue1_Func");
    TriggerAddEventUnitRegion(gt_Statue1, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 2
//--------------------------------------------------------------------------------------------------
bool gt_Statue2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_statue;
    actor lv_bullhornExclamation;

    // Variable Initialization
    lv_statue = null;
    lv_bullhornExclamation = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(191)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_statue = UnitFromId(191);
    gv_statueCount = (gv_statueCount + 1);
    libNtve_gf_AttachModelToUnit(gv_statueBullhorns[2], "TalkIcon", "Ref_Overhead");
    lv_bullhornExclamation = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_TransmissionMengskStatuesQ, true, true);
    libNtve_gf_KillModel(lv_bullhornExclamation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue2_Init () {
    gt_Statue2 = TriggerCreate("gt_Statue2_Func");
    TriggerAddEventUnitRegion(gt_Statue2, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 3
//--------------------------------------------------------------------------------------------------
bool gt_Statue3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_statue;
    actor lv_bullhornExclamation;

    // Variable Initialization
    lv_statue = null;
    lv_bullhornExclamation = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1370)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_statue = UnitFromId(1370);
    gv_statueCount = (gv_statueCount + 1);
    libNtve_gf_AttachModelToUnit(gv_statueBullhorns[3], "TalkIcon", "Ref_Overhead");
    lv_bullhornExclamation = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_TransmissionMengskStatuesQ, true, true);
    libNtve_gf_KillModel(lv_bullhornExclamation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue3_Init () {
    gt_Statue3 = TriggerCreate("gt_Statue3_Func");
    TriggerAddEventUnitRegion(gt_Statue3, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 4
//--------------------------------------------------------------------------------------------------
bool gt_Statue4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_statue;
    actor lv_bullhornExclamation;

    // Variable Initialization
    lv_statue = null;
    lv_bullhornExclamation = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(242)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_statue = UnitFromId(242);
    gv_statueCount = (gv_statueCount + 1);
    libNtve_gf_AttachModelToUnit(gv_statueBullhorns[4], "TalkIcon", "Ref_Overhead");
    lv_bullhornExclamation = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_TransmissionMengskStatuesQ, true, true);
    libNtve_gf_KillModel(lv_bullhornExclamation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue4_Init () {
    gt_Statue4 = TriggerCreate("gt_Statue4_Func");
    TriggerAddEventUnitRegion(gt_Statue4, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 5
//--------------------------------------------------------------------------------------------------
bool gt_Statue5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_statue;
    actor lv_bullhornExclamation;

    // Variable Initialization
    lv_statue = null;
    lv_bullhornExclamation = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1364)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_statue = UnitFromId(1364);
    gv_statueCount = (gv_statueCount + 1);
    libNtve_gf_AttachModelToUnit(gv_statueBullhorns[5], "TalkIcon", "Ref_Overhead");
    lv_bullhornExclamation = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_TransmissionMengskStatuesQ, true, true);
    libNtve_gf_KillModel(lv_bullhornExclamation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue5_Init () {
    gt_Statue5 = TriggerCreate("gt_Statue5_Func");
    TriggerAddEventUnitRegion(gt_Statue5, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 6
//--------------------------------------------------------------------------------------------------
bool gt_Statue6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_statue;
    actor lv_bullhornExclamation;

    // Variable Initialization
    lv_statue = null;
    lv_bullhornExclamation = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(926)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_statue = UnitFromId(926);
    gv_statueCount = (gv_statueCount + 1);
    libNtve_gf_AttachModelToUnit(gv_statueBullhorns[6], "TalkIcon", "Ref_Overhead");
    lv_bullhornExclamation = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_TransmissionMengskStatuesQ, true, true);
    libNtve_gf_KillModel(lv_bullhornExclamation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue6_Init () {
    gt_Statue6 = TriggerCreate("gt_Statue6_Func");
    TriggerAddEventUnitRegion(gt_Statue6, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 1 - Kill Bullhorn
//--------------------------------------------------------------------------------------------------
bool gt_Statue1KillBullhorn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(1597));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue1KillBullhorn_Init () {
    gt_Statue1KillBullhorn = TriggerCreate("gt_Statue1KillBullhorn_Func");
    TriggerAddEventUnitDied(gt_Statue1KillBullhorn, UnitRefFromUnit(UnitFromId(1078)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 2 - Kill Bullhorn
//--------------------------------------------------------------------------------------------------
bool gt_Statue2KillBullhorn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(1612));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue2KillBullhorn_Init () {
    gt_Statue2KillBullhorn = TriggerCreate("gt_Statue2KillBullhorn_Func");
    TriggerAddEventUnitDied(gt_Statue2KillBullhorn, UnitRefFromUnit(UnitFromId(191)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 3 - Kill Bullhorn
//--------------------------------------------------------------------------------------------------
bool gt_Statue3KillBullhorn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(216));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue3KillBullhorn_Init () {
    gt_Statue3KillBullhorn = TriggerCreate("gt_Statue3KillBullhorn_Func");
    TriggerAddEventUnitDied(gt_Statue3KillBullhorn, UnitRefFromUnit(UnitFromId(1370)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 4 - Kill Bullhorn
//--------------------------------------------------------------------------------------------------
bool gt_Statue4KillBullhorn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(213));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue4KillBullhorn_Init () {
    gt_Statue4KillBullhorn = TriggerCreate("gt_Statue4KillBullhorn_Func");
    TriggerAddEventUnitDied(gt_Statue4KillBullhorn, UnitRefFromUnit(UnitFromId(242)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 5 - Kill Bullhorn
//--------------------------------------------------------------------------------------------------
bool gt_Statue5KillBullhorn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(217));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue5KillBullhorn_Init () {
    gt_Statue5KillBullhorn = TriggerCreate("gt_Statue5KillBullhorn_Func");
    TriggerAddEventUnitDied(gt_Statue5KillBullhorn, UnitRefFromUnit(UnitFromId(1364)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue 6 - Kill Bullhorn
//--------------------------------------------------------------------------------------------------
bool gt_Statue6KillBullhorn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(215));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Statue6KillBullhorn_Init () {
    gt_Statue6KillBullhorn = TriggerCreate("gt_Statue6KillBullhorn_Func");
    TriggerAddEventUnitDied(gt_Statue6KillBullhorn, UnitRefFromUnit(UnitFromId(926)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bullhorn Stop Sounds
//--------------------------------------------------------------------------------------------------
bool gt_BullhornStopSounds_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_statueBullhorns[1]) || (EventUnit() == gv_statueBullhorns[2]) || (EventUnit() == gv_statueBullhorns[3]) || (EventUnit() == gv_statueBullhorns[4]) || (EventUnit() == gv_statueBullhorns[5]) || (EventUnit() == gv_statueBullhorns[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClear(gv_statueTransmission01);
    TransmissionClear(gv_statueTransmission02);
    TransmissionClear(gv_statueTransmission03);
    TransmissionClear(gv_statueTransmission04);
    TransmissionClear(gv_statueTransmission05);
    TransmissionClear(gv_statueTransmission06);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BullhornStopSounds_Init () {
    gt_BullhornStopSounds = TriggerCreate("gt_BullhornStopSounds_Func");
    TriggerAddEventUnitDied(gt_BullhornStopSounds, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mister Universe Update A - Air Base Tower Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_pingActor_Tower1);
    gf_UploadData(UnitFromId(808), 1);
    if ((gv_transmissionProgress[1] < 150)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_pingSector1Tower);
    VisRevealerDestroy(gv_sector1BeaconRevealer);
    UnitRemove(UnitFromId(808));
    UnitSetOwner(UnitFromId(5), 0, true);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveAccessBroadcastTower1Complete, true, true);
    TriggerExecute(gt_ObjectiveAccessBroadcastTowersUpdateQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ_Init () {
    gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ = TriggerCreate("gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ_Func");
    TriggerEnable(gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ, false);
    TriggerAddEventUnitRegion(gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ, null, RegionCircle(UnitGetPosition(UnitFromId(808)), 2.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mister Universe Update B - Siege Base Tower Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_pingActor_Tower2);
    gf_UploadData(UnitFromId(806), 2);
    if ((gv_transmissionProgress[2] < 150)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_pingSector2Tower);
    VisRevealerDestroy(gv_sector2BeaconRevealer);
    UnitRemove(UnitFromId(806));
    UnitSetOwner(UnitFromId(358), 0, true);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveAccessBroadcastTower2Complete, true, true);
    TriggerExecute(gt_ObjectiveAccessBroadcastTowersUpdateQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ_Init () {
    gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ = TriggerCreate("gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ_Func");
    TriggerEnable(gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ, false);
    TriggerAddEventUnitRegion(gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ, null, RegionCircle(UnitGetPosition(UnitFromId(806)), 2.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Mister Universe Update C - Raider Base Tower Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_pingActor_Tower3);
    gf_UploadData(UnitFromId(807), 3);
    if ((gv_transmissionProgress[3] < 150)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_pingSector3Tower);
    VisRevealerDestroy(gv_sector3BeaconRevealer);
    UnitRemove(UnitFromId(807));
    UnitSetOwner(UnitFromId(4), 0, true);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveAccessBroadcastTower3Complete, true, true);
    TriggerExecute(gt_ObjectiveAccessBroadcastTowersUpdateQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ_Init () {
    gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ = TriggerCreate("gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ_Func");
    TriggerEnable(gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ, false);
    TriggerAddEventUnitRegion(gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ, null, RegionCircle(UnitGetPosition(UnitFromId(807)), 2.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Air Base Kill Team 1
//--------------------------------------------------------------------------------------------------
bool gt_SendAirBaseKillTeam1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Reaper", libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Hellion", PointFromId(1555), PointFromId(1075));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Reaper", 0, null, PointFromId(1555), PointFromId(1075));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), "Reaper", libNtve_gf_DifficultyValueInt(0, 0, 2, 1), "Hellion", PointFromId(1555), PointFromId(1075));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), "Reaper", 0, null, PointFromId(1555), PointFromId(1075));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), "Reaper", libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hellion", PointFromId(1557), PointFromId(1558));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Reaper", 0, null, PointFromId(1555), PointFromId(1075));
    gf_WaitForDropsAndAttack(UnitGetPosition(UnitFromId(808)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendAirBaseKillTeam1_Init () {
    gt_SendAirBaseKillTeam1 = TriggerCreate("gt_SendAirBaseKillTeam1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Air Base Kill Team 2
//--------------------------------------------------------------------------------------------------
bool gt_SendAirBaseKillTeam2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Diamondback", libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "SiegeTank", PointFromId(1556), PointFromId(1550));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Diamondback", libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "SiegeTank", PointFromId(1560), PointFromId(1559));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Diamondback", libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "SiegeTank", PointFromId(1560), PointFromId(1559));
    gf_WaitForDropsAndAttack(UnitGetPosition(UnitFromId(808)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendAirBaseKillTeam2_Init () {
    gt_SendAirBaseKillTeam2 = TriggerCreate("gt_SendAirBaseKillTeam2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Air Base Kill Team 3
//--------------------------------------------------------------------------------------------------
bool gt_SendAirBaseKillTeam3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Reaper", libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Goliath", PointFromId(1555), PointFromId(1075));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Reaper", 0, null, PointFromId(1555), PointFromId(1075));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 2, 1), "Reaper", libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Goliath", PointFromId(1555), PointFromId(1075));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), "Reaper", libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Goliath", PointFromId(1556), PointFromId(1550));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Reaper", 0, null, PointFromId(1556), PointFromId(1550));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 4, 2), "Reaper", libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Goliath", PointFromId(1556), PointFromId(1550));
    gf_WaitForDropsAndAttack(UnitGetPosition(UnitFromId(808)));
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        if ((RandomInt(0, 1) == 0)) {
            UnitCreate(1, "Raven", 0, gv_p08_DOMINION, PointFromId(1076), 270.0);
        }
        else {
            UnitCreate(1, "Raven", 0, gv_p08_DOMINION, PointFromId(1369), 270.0);
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        AIAttackWaveSetGatherPoint(gv_p08_DOMINION, UnitGetPosition(UnitFromId(808)));
        AIAttackWaveSetTargetRegion(gv_p08_DOMINION, RegionCircle(UnitGetPosition(UnitFromId(808)), 10.0), 0);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1414), false);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1413), false);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1415), false);
        AIAttackWaveUseUnit(gv_p08_DOMINION, UnitLastCreated());
        AIAttackWaveSend(gv_p08_DOMINION, 0, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendAirBaseKillTeam3_Init () {
    gt_SendAirBaseKillTeam3 = TriggerCreate("gt_SendAirBaseKillTeam3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Siege Base Kill Team 1
//--------------------------------------------------------------------------------------------------
bool gt_SendSiegeBaseKillTeam1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Reaper", libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Hellion", PointFromId(1562), PointFromId(1551));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Reaper", 0, null, PointFromId(1562), PointFromId(1551));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 2, 1), "Reaper", libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Hellion", PointFromId(1562), PointFromId(1551));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), "Reaper", libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hellion", PointFromId(1563), PointFromId(1564));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Reaper", 0, "Hellion", PointFromId(1563), PointFromId(1564));
    gf_WaitForDropsAndAttack(UnitGetPosition(UnitFromId(806)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendSiegeBaseKillTeam1_Init () {
    gt_SendSiegeBaseKillTeam1 = TriggerCreate("gt_SendSiegeBaseKillTeam1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Siege Base Kill Team 2
//--------------------------------------------------------------------------------------------------
bool gt_SendSiegeBaseKillTeam2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(3, 3, 6, 8), "VikingFighter", 0, gv_p08_DOMINION, PointFromId(1561), PointFromId(1552));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1552)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(806))), c_orderQueueAddToEnd);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        UnitCreate(1, "Raven", 0, gv_p08_DOMINION, libNtve_gf_RandomPointBetweenPoints(PointFromId(876), PointFromId(964)), 270.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        AIAttackWaveSetGatherPoint(gv_p08_DOMINION, UnitGetPosition(UnitFromId(806)));
        AIAttackWaveSetTargetRegion(gv_p08_DOMINION, RegionCircle(UnitGetPosition(UnitFromId(806)), 10.0), 0);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1416), false);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1418), false);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1417), false);
        AIAttackWaveUseUnit(gv_p08_DOMINION, UnitLastCreated());
        AIAttackWaveSend(gv_p08_DOMINION, 0, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendSiegeBaseKillTeam2_Init () {
    gt_SendSiegeBaseKillTeam2 = TriggerCreate("gt_SendSiegeBaseKillTeam2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Siege Base Kill Team 3
//--------------------------------------------------------------------------------------------------
bool gt_SendSiegeBaseKillTeam3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(2, 2, 4, 5), "VikingFighter", 0, gv_p08_DOMINION, PointFromId(1561), PointFromId(1552));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1552)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(806))), c_orderQueueAddToEnd);
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "Reaper", 0, null, PointFromId(1562), PointFromId(1551));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 1, 3), "Reaper", 0, null, PointFromId(1562), PointFromId(1551));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), "Hellion", 0, null, PointFromId(1563), PointFromId(1564));
    gf_WaitForDropsAndAttack(UnitGetPosition(UnitFromId(806)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendSiegeBaseKillTeam3_Init () {
    gt_SendSiegeBaseKillTeam3 = TriggerCreate("gt_SendSiegeBaseKillTeam3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Raider Base Kill Team 1
//--------------------------------------------------------------------------------------------------
bool gt_SendRaiderBaseKillTeam1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Diamondback", libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "SiegeTank", PointFromId(1566), PointFromId(1554));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 2, 0), "Diamondback", libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "SiegeTank", PointFromId(1566), PointFromId(1554));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "Diamondback", 0, null, PointFromId(1566), PointFromId(1554));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Diamondback", libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "SiegeTank", PointFromId(1567), PointFromId(1568));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Diamondback", 0, null, PointFromId(1567), PointFromId(1568));
    gf_WaitForDropsAndAttack(UnitGetPosition(UnitFromId(807)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendRaiderBaseKillTeam1_Init () {
    gt_SendRaiderBaseKillTeam1 = TriggerCreate("gt_SendRaiderBaseKillTeam1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Raider Base Kill Team 2
//--------------------------------------------------------------------------------------------------
bool gt_SendRaiderBaseKillTeam2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(3, 3, 4, 2), "VikingFighter", 0, gv_p08_DOMINION, PointFromId(1565), PointFromId(1553));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1553)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(807))), c_orderQueueAddToEnd);
    libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(0, 0, 4, 6), "Wraith", 0, gv_p08_DOMINION, PointFromId(1565), PointFromId(1553));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(807))), c_orderQueueAddToEnd);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        UnitCreate(1, "Raven", 0, gv_p08_DOMINION, libNtve_gf_RandomPointBetweenPoints(PointFromId(572), PointFromId(591)), 270.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        AIAttackWaveSetGatherPoint(gv_p08_DOMINION, UnitGetPosition(UnitFromId(807)));
        AIAttackWaveSetTargetRegion(gv_p08_DOMINION, RegionCircle(UnitGetPosition(UnitFromId(807)), 10.0), 0);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1419), false);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1516), false);
        AIAttackWaveAddWaypoint(gv_p08_DOMINION, PointFromId(1517), false);
        AIAttackWaveUseUnit(gv_p08_DOMINION, UnitLastCreated());
        AIAttackWaveSend(gv_p08_DOMINION, 0, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendRaiderBaseKillTeam2_Init () {
    gt_SendRaiderBaseKillTeam2 = TriggerCreate("gt_SendRaiderBaseKillTeam2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Raider Base Kill Team 3
//--------------------------------------------------------------------------------------------------
bool gt_SendRaiderBaseKillTeam3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackerCount;

    // Variable Initialization
    lv_attackerCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "VikingFighter", 0, gv_p08_DOMINION, PointFromId(1565), PointFromId(1553));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1553)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(807))), c_orderQueueAddToEnd);
    libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Battlecruiser", 0, gv_p08_DOMINION, PointFromId(1565), PointFromId(1553));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(807))), c_orderQueueAddToEnd);
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Diamondback", libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "SiegeTank", PointFromId(1566), PointFromId(1554));
    gf_DropKillTeamViaMedivac(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Diamondback", libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "SiegeTank", PointFromId(1567), PointFromId(1568));
    gf_WaitForDropsAndAttack(UnitGetPosition(UnitFromId(807)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendRaiderBaseKillTeam3_Init () {
    gt_SendRaiderBaseKillTeam3 = TriggerCreate("gt_SendRaiderBaseKillTeam3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AISetGroupScriptControlled(UnitGroup("SCV", gv_p03_DOMINION_SIEGE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false);
    AICampaignStart(gv_p02_DOMINION_INFANTRY);
    AICampaignStart(gv_p03_DOMINION_SIEGE);
    AICampaignStart(gv_p04_DOMINION_AIR);
    AICampaignStart(gv_p05_DOMINION_RAIDER);
    AICampaignStart(gv_p08_DOMINION);
    AIAttackWaveSetTargetPlayer(gv_p03_DOMINION_SIEGE, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p04_DOMINION_AIR, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p05_DOMINION_RAIDER, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetGatherPoint(gv_p03_DOMINION_SIEGE, PointFromId(1070));
    AIAttackWaveSetGatherPoint(gv_p04_DOMINION_AIR, PointFromId(1071));
    AIAttackWaveSetGatherPoint(gv_p05_DOMINION_RAIDER, PointFromId(1069));
    libNtve_gf_DeclareNextTown(gv_p02_DOMINION_INFANTRY, UnitGetPosition(UnitFromId(570)));
    AINearestTownBullyRebuild(gv_p02_DOMINION_INFANTRY, true);
    AINearestTownLimitWaveGather(gv_p02_DOMINION_INFANTRY, true);
    TriggerExecute(gt_P03AttackWavesSiege, true, false);
    TriggerExecute(gt_P04AttackWavesAir, true, false);
    TriggerExecute(gt_P05AttackWavesRaider, true, false);
    TriggerExecute(gt_AttackWaveTiming, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgrades_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(480.0, c_timeGame);
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "AresClassWeaponsSystemViking");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ClusterWarheads");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "AresClassWeaponsSystem");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "MaelstromRounds");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "StabilizerMedPacks");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ReaperU238Rounds");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "CombatShield");
        Wait(120.0, c_timeGame);
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranInfantryWeaponsLevel2");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranVehicleWeaponsLevel2");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranShipWeaponsLevel2");
        Wait(420.0, c_timeGame);
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranInfantryArmorsLevel2");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranVehicleArmorsLevel2");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "TerranShipArmorsLevel2");
        Wait(420.0, c_timeGame);
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranInfantryWeaponsLevel3");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranVehicleWeaponsLevel3");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranShipWeaponsLevel3");
        Wait(420.0, c_timeGame);
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranInfantryArmorsLevel3");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranVehicleArmorsLevel3");
        gf_AddUpgradeForDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranShipArmorsLevel3");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgrades_Init () {
    gt_StartUpgrades = TriggerCreate("gt_StartUpgrades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Timing
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveTiming_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    TriggerExecute(gt_FirstAttackWave, true, false);
    gf_WaitForNextWave();
    while (true) {
        gf_SendAnAttackWave();
        gf_WaitForNextWave();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveTiming_Init () {
    gt_AttackWaveTiming = TriggerCreate("gt_AttackWaveTiming_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackWave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_PlayerCanAttack(gv_p05_DOMINION_RAIDER) == true)) {
        gv_waveAttacker = gv_p05_DOMINION_RAIDER;
        AIAttackWaveAddUnits4(3, 3, 5, 7, "Marine");
        AIAttackWaveAddUnits4(3, 3, 4, 5, "Hellion");
        AIAttackWaveAddWaypoint(gv_p05_DOMINION_RAIDER, PointFromId(302), false);
        AIAttackWaveSend(gv_p05_DOMINION_RAIDER, gv_wavePrepTime, false);
        return true;
    }
    else {
    }
    if ((gf_PlayerCanAttack(gv_p04_DOMINION_AIR) == true)) {
        gv_waveAttacker = gv_p04_DOMINION_AIR;
        AIAttackWaveAddUnits4(2, 2, 3, 4, "VikingFighter");
        AIAttackWaveAddWaypoint(gv_p04_DOMINION_AIR, PointFromId(1220), false);
        AIAttackWaveSend(gv_p04_DOMINION_AIR, gv_wavePrepTime, false);
        return true;
    }
    else {
    }
    if ((gf_PlayerCanAttack(gv_p03_DOMINION_SIEGE) == true)) {
        gv_waveAttacker = gv_p03_DOMINION_SIEGE;
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Goliath");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Diamondback");
        AIAttackWaveAddWaypoint(gv_p03_DOMINION_SIEGE, PointFromId(1220), false);
        AIAttackWaveSend(gv_p03_DOMINION_SIEGE, gv_wavePrepTime, false);
        return true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackWave_Init () {
    gt_FirstAttackWave = TriggerCreate("gt_FirstAttackWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves (Siege)
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesSiege_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_PlayerCanAttack(gv_p03_DOMINION_SIEGE) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitForPermissionToAttack(gv_p03_DOMINION_SIEGE);
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Diamondback");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "SiegeTank");
    AIAttackWaveAddWaypoint(gv_p03_DOMINION_SIEGE, PointFromId(302), false);
    AIAttackWaveSend(gv_p03_DOMINION_SIEGE, gv_wavePrepTime, false);
    gf_WaitForPermissionToAttack(gv_p03_DOMINION_SIEGE);
    AIAttackWaveAddUnits4(2, 2, 4, 6, "Goliath");
    AIAttackWaveAddUnits4(1, 1, 3, 3, "SiegeTank");
    AIAttackWaveAddWaypoint(gv_p03_DOMINION_SIEGE, PointFromId(1220), false);
    AIAttackWaveSend(gv_p03_DOMINION_SIEGE, gv_wavePrepTime, false);
    while (true) {
        gf_WaitForPermissionToAttack(gv_p03_DOMINION_SIEGE);
        AIAttackWaveAddUnits4(4, 4, 6, 8, "Goliath");
        AIAttackWaveAddWaypoint(gv_p03_DOMINION_SIEGE, PointFromId(302), false);
        AIAttackWaveSend(gv_p03_DOMINION_SIEGE, gv_wavePrepTime, false);
        gf_WaitForPermissionToAttack(gv_p03_DOMINION_SIEGE);
        AIAttackWaveAddUnits4(1, 2, 1, 2, "Diamondback");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Goliath");
        AIAttackWaveAddUnits4(1, 1, 2, 1, "SiegeTank");
        AIAttackWaveAddWaypoint(gv_p03_DOMINION_SIEGE, PointFromId(302), false);
        AIAttackWaveSend(gv_p03_DOMINION_SIEGE, gv_wavePrepTime, false);
        gf_WaitForPermissionToAttack(gv_p03_DOMINION_SIEGE);
        AIAttackWaveAddUnits4(2, 2, 4, 5, "Goliath");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "SiegeTank");
        AIAttackWaveAddWaypoint(gv_p03_DOMINION_SIEGE, PointFromId(1220), false);
        AIAttackWaveSend(gv_p03_DOMINION_SIEGE, gv_wavePrepTime, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesSiege_Init () {
    gt_P03AttackWavesSiege = TriggerCreate("gt_P03AttackWavesSiege_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P04 Attack Waves (Air)
//--------------------------------------------------------------------------------------------------
bool gt_P04AttackWavesAir_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_PlayerCanAttack(gv_p04_DOMINION_AIR) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitForPermissionToAttack(gv_p04_DOMINION_AIR);
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Banshee");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "VikingFighter");
    AIAttackWaveAddWaypoint(gv_p04_DOMINION_AIR, PointFromId(1220), false);
    AIAttackWaveSend(gv_p04_DOMINION_AIR, gv_wavePrepTime, false);
    gf_WaitForPermissionToAttack(gv_p04_DOMINION_AIR);
    AIAttackWaveAddUnits4(4, 4, 6, 4, "VikingFighter");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Battlecruiser");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Raven");
    AIAttackWaveAddWaypoint(gv_p04_DOMINION_AIR, PointFromId(892), false);
    AIAttackWaveSend(gv_p04_DOMINION_AIR, gv_wavePrepTime, false);
    while (true) {
        gf_WaitForPermissionToAttack(gv_p04_DOMINION_AIR);
        AIAttackWaveAddUnits4(2, 2, 3, 4, "VikingFighter");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Wraith");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Banshee");
        AIAttackWaveAddWaypoint(gv_p04_DOMINION_AIR, PointFromId(892), false);
        AIAttackWaveSend(gv_p04_DOMINION_AIR, gv_wavePrepTime, false);
        gf_WaitForPermissionToAttack(gv_p04_DOMINION_AIR);
        AIAttackWaveAddUnits4(6, 6, 3, 3, "VikingFighter");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Battlecruiser");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Raven");
        AIAttackWaveAddWaypoint(gv_p04_DOMINION_AIR, PointFromId(1220), false);
        AIAttackWaveSend(gv_p04_DOMINION_AIR, gv_wavePrepTime, false);
        gf_WaitForPermissionToAttack(gv_p04_DOMINION_AIR);
        AIAttackWaveAddUnits4(3, 3, 4, 4, "Banshee");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Wraith");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "VikingFighter");
        AIAttackWaveAddWaypoint(gv_p04_DOMINION_AIR, PointFromId(892), false);
        AIAttackWaveSend(gv_p04_DOMINION_AIR, gv_wavePrepTime, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P04AttackWavesAir_Init () {
    gt_P04AttackWavesAir = TriggerCreate("gt_P04AttackWavesAir_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P05 Attack Waves (Raider)
//--------------------------------------------------------------------------------------------------
bool gt_P05AttackWavesRaider_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_PlayerCanAttack(gv_p05_DOMINION_RAIDER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitForPermissionToAttack(gv_p05_DOMINION_RAIDER);
    AIAttackWaveAddUnits4(5, 5, 8, 10, "Reaper");
    AIAttackWaveAddWaypoint(gv_p05_DOMINION_RAIDER, PointFromId(713), false);
    AIAttackWaveAddWaypoint(gv_p05_DOMINION_RAIDER, PointFromId(1541), false);
    AIAttackWaveSend(gv_p05_DOMINION_RAIDER, gv_wavePrepTime, false);
    gf_WaitForPermissionToAttack(gv_p05_DOMINION_RAIDER);
    AIAttackWaveAddUnits4(4, 4, 8, 11, "Marine");
    AIAttackWaveAddUnits4(2, 2, 4, 5, "Vulture");
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Ghost");
    AIAttackWaveAddWaypoint(gv_p05_DOMINION_RAIDER, PointFromId(302), false);
    AIAttackWaveSend(gv_p05_DOMINION_RAIDER, gv_wavePrepTime, false);
    while (true) {
        gf_WaitForPermissionToAttack(gv_p05_DOMINION_RAIDER);
        AIAttackWaveAddUnits4(8, 8, 11, 14, "Reaper");
        AIAttackWaveAddWaypoint(gv_p05_DOMINION_RAIDER, PointFromId(713), false);
        AIAttackWaveAddWaypoint(gv_p05_DOMINION_RAIDER, PointFromId(1541), false);
        AIAttackWaveSend(gv_p05_DOMINION_RAIDER, gv_wavePrepTime, false);
        gf_WaitForPermissionToAttack(gv_p05_DOMINION_RAIDER);
        AIAttackWaveAddUnits4(4, 4, 6, 8, "Hellion");
        AIAttackWaveAddUnits4(5, 5, 8, 10, "Vulture");
        AIAttackWaveAddWaypoint(gv_p05_DOMINION_RAIDER, PointFromId(302), false);
        AIAttackWaveSend(gv_p05_DOMINION_RAIDER, gv_wavePrepTime, false);
        gf_WaitForPermissionToAttack(gv_p05_DOMINION_RAIDER);
        AIAttackWaveAddUnits4(5, 5, 2, 0, "Vulture");
        AIAttackWaveAddUnits4(3, 3, 3, 4, "Ghost");
        AIAttackWaveAddUnits4(0, 0, 8, 11, "Marine");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Medic");
        AIAttackWaveAddWaypoint(gv_p05_DOMINION_RAIDER, PointFromId(302), false);
        AIAttackWaveSend(gv_p05_DOMINION_RAIDER, gv_wavePrepTime, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P05AttackWavesRaider_Init () {
    gt_P05AttackWavesRaider = TriggerCreate("gt_P05AttackWavesRaider_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate P02 Bullies
//--------------------------------------------------------------------------------------------------
bool gt_ActivateP02Bullies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_p02_DOMINION_INFANTRY, RegionFromId(25), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateP02Bullies_Init () {
    gt_ActivateP02Bullies = TriggerCreate("gt_ActivateP02Bullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p02_DOMINION_INFANTRY, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p03_DOMINION_SIEGE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p04_DOMINION_AIR, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p05_DOMINION_RAIDER, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p07_HORNERBASE, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p02_DOMINION_INFANTRY, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p03_DOMINION_SIEGE, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p04_DOMINION_AIR, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p05_DOMINION_RAIDER, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p07_HORNERBASE, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Destroy a Barracks, Starport and Factory
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyaBarracksStarportandFactory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_missionStage1 == true))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Barracks")) {
        gv_achievementBarracksDestroyed += 1;
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Factory")) {
        gv_achievementFactoryDestroyed += 1;
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Starport")) {
        gv_achievementStarportDestroyed += 1;
    }
    else {
    }
    if ((gv_achievementBarracksDestroyed >= 1) && (gv_achievementFactoryDestroyed >= 1) && (gv_achievementStarportDestroyed >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        AchievementAward(gv_p01_USER, "THorner04_2");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyaBarracksStarportandFactory_Init () {
    gt_AchievementDestroyaBarracksStarportandFactory = TriggerCreate("gt_AchievementDestroyaBarracksStarportandFactory_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroyaBarracksStarportandFactory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Broadcast Towers Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBroadcastTowersCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    if ((UnitIsAlive(gv_odin) == true)) {
        libNtve_gf_MakeUnitInvulnerable(gv_odin, true);
    }
    else {
    }
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBroadcastTowersCompleted_Init () {
    gt_VictoryBroadcastTowersCompleted = TriggerCreate("gt_VictoryBroadcastTowersCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_odin) == true)) {
        gv_odinKillCount = libNtve_gf_UnitGetPropertyKills(gv_odin, c_unitPropCurrent);
    }
    else {
    }
    if ((ObjectiveGetState(gv_objectiveAccessTower1) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveAccessTower2) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveAccessTower3) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "THorner04_1");
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_achievementHardTimer) != 0.0)) {
        AchievementAward(gv_p01_USER, "THorner04_3");
    }
    else {
    }
    VictoryPanelAddAchievement("THorner04_1");
    VictoryPanelAddAchievement("THorner04_2");
    VictoryPanelAddAchievement("THorner04_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/16C0437F"), StringExternal("Param/Value/DE6AF8A1"));
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/CF471179"), IntToText(gv_odinKillCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/10F24A77"), StringExternal("Param/Value/C51AE4DC"));
    if ((gv_secretsFound == 1)) {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/63E47237"), StringExternal("Param/Value/719688DC"));
    }
    else {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4377BBC3"), StringExternal("Param/Value/36760F8C"));
    }
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/E9217D45"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    UnitPauseAll(true);
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Unit Talk on Picked Unit
//--------------------------------------------------------------------------------------------------
bool gt_PlayUnitTalkonPickedUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_chosenUnit_Local;

    // Variable Initialization
    lv_chosenUnit_Local = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chosenUnit_Local = gv_pickedUnit;
    libNtve_gf_AttachModelToUnit(lv_chosenUnit_Local, "TalkIcon", "Ref_Overhead");
    Wait(3.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayUnitTalkonPickedUnit_Init () {
    gt_PlayUnitTalkonPickedUnit = TriggerCreate("gt_PlayUnitTalkonPickedUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Plaza Marine Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPlazaMarineReactionQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner04Marine00018", 0)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(1722), SoundLink("THorner04Marine00018", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner04Marine00019", 0)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(72), SoundLink("THorner04Marine00019", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner04Warfield00031", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Warfield00031", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPlazaMarineReactionQ_Init () {
    gt_TransmissionPlazaMarineReactionQ = TriggerCreate("gt_TransmissionPlazaMarineReactionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mengsk Statues Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMengskStatuesQ_Func (bool testConds, bool runActions) {
    int auto983624D2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto983624D2_val = gv_statueCount;
    if (auto983624D2_val == 1) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Arcturus00025", 0)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitGroupLoopCurrent(), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04Arcturus00025", 0), 0.0, c_transmissionDurationAdd, false);
        gv_statueTransmission01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else if (auto983624D2_val == 2) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Arcturus00001", 0)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitGroupLoopCurrent(), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04Arcturus00001", 0), 0.0, c_transmissionDurationAdd, false);
        gv_statueTransmission02 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else if (auto983624D2_val == 3) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Arcturus00032", 0)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitGroupLoopCurrent(), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04Arcturus00032", 0), 0.0, c_transmissionDurationAdd, false);
        gv_statueTransmission03 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else if (auto983624D2_val == 4) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Arcturus00033", 0)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitGroupLoopCurrent(), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04Arcturus00033", 0), 0.0, c_transmissionDurationAdd, false);
        gv_statueTransmission04 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else if (auto983624D2_val == 5) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Arcturus00026", 0)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitGroupLoopCurrent(), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04Arcturus00026", 0), 0.0, c_transmissionDurationAdd, false);
        gv_statueTransmission05 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMengskStatuesQ_Init () {
    gt_TransmissionMengskStatuesQ = TriggerCreate("gt_TransmissionMengskStatuesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tychus Ejects Out of the Odin
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTychusEjectsOutoftheOdin_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner04Tychus00021", 0)
    libCamp_gf_SendTransmissionCampaign(gv_odin, SoundLink("THorner04Tychus00021", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTychusEjectsOutoftheOdin_Init () {
    gt_TransmissionTychusEjectsOutoftheOdin = TriggerCreate("gt_TransmissionTychusEjectsOutoftheOdin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Swann Drops In A Thor Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSwannDropsInAThorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner04Swann00045", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Swann00045", 0), c_transmissionDurationAdd, 1.0, true);
    if ((gv_odinDead == false) && (UnitGetOwner(gv_odin) == gv_p01_USER)) {
        // Transmission - SoundLink("THorner04Tychus00047", 0)
        libCamp_gf_SendTransmissionCampaign(gv_odin, SoundLink("THorner04Tychus00047", 0), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSwannDropsInAThorQ_Init () {
    gt_TransmissionSwannDropsInAThorQ = TriggerCreate("gt_TransmissionSwannDropsInAThorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Civilian Squish Area 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCivilianSquishArea1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(10)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Civilian") || (UnitGetType(EventUnit()) == "CivilianFemale")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    gf_PlayUnitTalkIcon(UnitFromId(1095));
    // Transmission - SoundLink("THorner04CivilianFemale1Brunette00051", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(1095), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04CivilianFemale1Brunette00051", 0), 0.0, c_transmissionDurationAdd, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCivilianSquishArea1Q_Init () {
    gt_TransmissionCivilianSquishArea1Q = TriggerCreate("gt_TransmissionCivilianSquishArea1Q_Func");
    TriggerAddEventUnitDied(gt_TransmissionCivilianSquishArea1Q, null);
    TriggerAddEventUnitDamaged(gt_TransmissionCivilianSquishArea1Q, null, c_unitDamageTypeAny, c_unitDamageEither, EventUnitDamageEffect());
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Civilian Squish Area 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCivilianSquishArea2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(11)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Civilian") || (UnitGetType(EventUnit()) == "CivilianFemale")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    gf_PlayUnitTalkIcon(UnitFromId(1087));
    // Transmission - SoundLink("THorner04Civilian6WhiteBald00052", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(1087), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04Civilian6WhiteBald00052", 0), 0.0, c_transmissionDurationAdd, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCivilianSquishArea2Q_Init () {
    gt_TransmissionCivilianSquishArea2Q = TriggerCreate("gt_TransmissionCivilianSquishArea2Q_Func");
    TriggerAddEventUnitDied(gt_TransmissionCivilianSquishArea2Q, null);
    TriggerAddEventUnitDamaged(gt_TransmissionCivilianSquishArea2Q, null, c_unitDamageTypeAny, c_unitDamageEither, EventUnitDamageEffect());
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Civilian Squish Area 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCivilianSquishArea3Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(12)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Civilian") || (UnitGetType(EventUnit()) == "CivilianFemale")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    gf_PlayUnitTalkIcon(UnitFromId(1227));
    // Transmission - SoundLink("THorner04Civilian9Black00055", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(1227), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04Civilian9Black00055", 0), 0.0, c_transmissionDurationAdd, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCivilianSquishArea3Q_Init () {
    gt_TransmissionCivilianSquishArea3Q = TriggerCreate("gt_TransmissionCivilianSquishArea3Q_Func");
    TriggerAddEventUnitDied(gt_TransmissionCivilianSquishArea3Q, null);
    TriggerAddEventUnitDamaged(gt_TransmissionCivilianSquishArea3Q, null, c_unitDamageTypeAny, c_unitDamageEither, EventUnitDamageEffect());
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Civilian Squish Area 4 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCivilianSquishArea4Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(26)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Civilian") || (UnitGetType(EventUnit()) == "CivilianFemale")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    gf_PlayUnitTalkIcon(UnitFromId(1104));
    // Transmission - SoundLink("THorner04CivilianFemale400053", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(1104), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04CivilianFemale400053", 0), 0.0, c_transmissionDurationAdd, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCivilianSquishArea4Q_Init () {
    gt_TransmissionCivilianSquishArea4Q = TriggerCreate("gt_TransmissionCivilianSquishArea4Q_Func");
    TriggerAddEventUnitDied(gt_TransmissionCivilianSquishArea4Q, null);
    TriggerAddEventUnitDamaged(gt_TransmissionCivilianSquishArea4Q, null, c_unitDamageTypeAny, c_unitDamageEither, EventUnitDamageEffect());
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Civilian Squish Area 5 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCivilianSquishArea5Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(27)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Civilian") || (UnitGetType(EventUnit()) == "CivilianFemale")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    gf_PlayUnitTalkIcon(UnitFromId(1120));
    // Transmission - SoundLink("THorner04Civilian2WhitewMohawk00054", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(1120), true, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04Civilian2WhitewMohawk00054", 0), 0.0, c_transmissionDurationAdd, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCivilianSquishArea5Q_Init () {
    gt_TransmissionCivilianSquishArea5Q = TriggerCreate("gt_TransmissionCivilianSquishArea5Q_Func");
    TriggerAddEventUnitDied(gt_TransmissionCivilianSquishArea5Q, null);
    TriggerAddEventUnitDamaged(gt_TransmissionCivilianSquishArea5Q, null, c_unitDamageTypeAny, c_unitDamageEither, EventUnitDamageEffect());
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Odin Near Reaper Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOdinNearReaperQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 0.0))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Passive") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Reaper"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UnitSetCustomValue(EventUnit(), 1, 99.0);
    gf_PlayUnitTalkIcon(EventUnit());
    // Transmission - SoundLink("THorner04Reaper00004", 0)
    SoundPlay(SoundLink("THorner04Reaper00004", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOdinNearReaperQ_Init () {
    gt_TransmissionOdinNearReaperQ = TriggerCreate("gt_TransmissionOdinNearReaperQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionOdinNearReaperQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Odin Near Siege Tank Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOdinNearSiegeTankQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 0.0))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Passive") == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "SiegeTankSieged") || (UnitGetType(EventUnit()) == "SiegeTank")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UnitSetCustomValue(EventUnit(), 1, 99.0);
    gf_PlayUnitTalkIcon(EventUnit());
    // Transmission - SoundLink("THorner04SiegeTank00022", 0)
    SoundPlay(SoundLink("THorner04SiegeTank00022", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOdinNearSiegeTankQ_Init () {
    gt_TransmissionOdinNearSiegeTankQ = TriggerCreate("gt_TransmissionOdinNearSiegeTankQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionOdinNearSiegeTankQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Odin Near Viking Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOdinNearVikingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 0.0))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Passive") == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "VikingAssault") || (UnitGetType(EventUnit()) == "VikingFighter")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UnitSetCustomValue(EventUnit(), 1, 99.0);
    gf_PlayUnitTalkIcon(EventUnit());
    // Transmission - SoundLink("Viking_Attack", 3)
    SoundPlay(SoundLink("Viking_Attack", 3), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOdinNearVikingQ_Init () {
    gt_TransmissionOdinNearVikingQ = TriggerCreate("gt_TransmissionOdinNearVikingQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionOdinNearVikingQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Stage 2 Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStage2IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner04Horner00003", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Horner00003", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStage2IntroQ_Init () {
    gt_TransmissionStage2IntroQ = TriggerCreate("gt_TransmissionStage2IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Air Base Gank Squad Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAirBaseGankSquadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner04Warfield00042", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Warfield00042", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAirBaseGankSquadQ_Init () {
    gt_TransmissionAirBaseGankSquadQ = TriggerCreate("gt_TransmissionAirBaseGankSquadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Siege Base Gank Squad Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSiegeBaseGankSquadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner04Warfield00043", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Warfield00043", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSiegeBaseGankSquadQ_Init () {
    gt_TransmissionSiegeBaseGankSquadQ = TriggerCreate("gt_TransmissionSiegeBaseGankSquadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Raider Base Gank Squad Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRaiderBaseGankSquadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner04Warfield00044", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Warfield00044", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRaiderBaseGankSquadQ_Init () {
    gt_TransmissionRaiderBaseGankSquadQ = TriggerCreate("gt_TransmissionRaiderBaseGankSquadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Data Successfully Uploaded Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDataSuccessfullyUploadedQ_Func (bool testConds, bool runActions) {
    int auto54A87FC4_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto54A87FC4_val = gv_objectiveBroadcastTowersAccessed;
    if (auto54A87FC4_val == 1) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Raynor00024", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Raynor00024", 0), c_transmissionDurationAdd, 0.0, true);
        Wait(2.0, c_timeGame);
        SoundPlay(SoundLink("IncomingTransmission", 0), PlayerGroupAll(), 100.0, 0.0);
        Wait(SoundLengthSync(SoundLink("IncomingTransmission", 0)), c_timeGame);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner04MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THorner04Arcturus00038", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Arcturus00038", 0), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("THorner04Raynor00039", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Raynor00039", 0), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("THorner04Arcturus00040", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Arcturus00040", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/37412DFF"));
        TriggerQueueExit();
    }
    else if (auto54A87FC4_val == 2) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Raynor00027", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Raynor00027", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9A97EDD4"));
        TriggerQueueExit();
    }
    else if (auto54A87FC4_val == 3) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Raynor00028", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Raynor00028", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDataSuccessfullyUploadedQ_Init () {
    gt_TransmissionDataSuccessfullyUploadedQ = TriggerCreate("gt_TransmissionDataSuccessfullyUploadedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - 90s Left on Distraction Q
//--------------------------------------------------------------------------------------------------
bool gt_Transmission90sLeftonDistractionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_odinDead == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Horner00013", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Horner00013", 0), c_transmissionDurationAdd, 0.0, false);
        gv_hornerTimeWarning = TransmissionLastSent();
        TransmissionWait(gv_hornerTimeWarning, 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    if ((gv_odinDead == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        // Transmission - SoundLink("THorner04Tychus00014", 0)
        libCamp_gf_SendTransmissionCampaign(gv_odin, SoundLink("THorner04Tychus00014", 0), c_transmissionDurationAdd, 0.0, false);
        gv_hornerTimeWarning = TransmissionLastSent();
        TransmissionWait(gv_hornerTimeWarning, 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission90sLeftonDistractionQ_Init () {
    gt_Transmission90sLeftonDistractionQ = TriggerCreate("gt_Transmission90sLeftonDistractionQ_Func");
    TriggerAddEventTimer(gt_Transmission90sLeftonDistractionQ, gv__90SecondWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - 30s Left on Distraction Q
//--------------------------------------------------------------------------------------------------
bool gt_Transmission30sLeftonDistractionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_odinDead == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner04Horner00015", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Horner00015", 0), c_transmissionDurationAdd, 0.0, false);
        gv_hornerTimeWarning = TransmissionLastSent();
        TransmissionWait(gv_hornerTimeWarning, 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    if ((gv_odinDead == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        // Transmission - SoundLink("THorner04Tychus00016", 0)
        libCamp_gf_SendTransmissionCampaign(gv_odin, SoundLink("THorner04Tychus00016", 0), c_transmissionDurationAdd, 0.0, false);
        gv_hornerTimeWarning = TransmissionLastSent();
        TransmissionWait(gv_hornerTimeWarning, 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission30sLeftonDistractionQ_Init () {
    gt_Transmission30sLeftonDistractionQ = TriggerCreate("gt_Transmission30sLeftonDistractionQ_Func");
    TriggerAddEventTimer(gt_Transmission30sLeftonDistractionQ, gv__30SecondWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit Odin Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitOdinTipQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner04_Odin", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitOdinTipQ_Init () {
    gt_NewUnitOdinTipQ = TriggerCreate("gt_NewUnitOdinTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit Thor Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitThorTipQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Thor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner04_Thor", 1, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitThorTipQ_Init () {
    gt_NewUnitThorTipQ = TriggerCreate("gt_NewUnitThorTipQ_Func");
    TriggerAddEventUnitSelected(gt_NewUnitThorTipQ, null, gv_p01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Ability: Barrage Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewAbilityBarrageTipQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner04_Barrage", 3, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewAbilityBarrageTipQ_Init () {
    gt_NewAbilityBarrageTipQ = TriggerCreate("gt_NewAbilityBarrageTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Troops Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainTroopsTipQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner04_TrainTroops", 0, PlayerGroupAll());
    MinimapPing(PlayerGroupAll(), PointFromId(1022), 6.0, Color(0.00, 100.00, 100.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/2642EE49"), null, PointFromId(1022));
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainTroopsTipQ_Init () {
    gt_TrainTroopsTipQ = TriggerCreate("gt_TrainTroopsTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/CA64DF53"), StringExternal("Param/Value/159C9C00"), c_objectiveStateActive, true);
    gv_objectiveDestroyDominionForces = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(47, ObjectiveLastCreated(), StringExternal("Param/Value/5F35D842"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCreateQ_Init () {
    gt_ObjectiveDestroyCreateQ = TriggerCreate("gt_ObjectiveDestroyCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyCreateQ, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionForces, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyComplete_Init () {
    gt_ObjectiveDestroyComplete = TriggerCreate("gt_ObjectiveDestroyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Access Broadcast Towers Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAccessBroadcastTowersCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerEnable(gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ, true);
    TriggerEnable(gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ, true);
    TriggerEnable(gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ, true);
    ObjectiveCreate(StringExternal("Param/Value/05E3338B"), StringExternal("Param/Value/7C54A1E1"), c_objectiveStateActive, true);
    gv_objectiveAccessTower1 = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(48, ObjectiveLastCreated(), StringExternal("Param/Value/26108934"));
    ObjectiveCreate(StringExternal("Param/Value/7B03FE31"), StringExternal("Param/Value/A9280EFD"), c_objectiveStateActive, true);
    gv_objectiveAccessTower2 = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(48, ObjectiveLastCreated(), StringExternal("Param/Value/0A4F3766"));
    ObjectiveCreate(StringExternal("Param/Value/60581E90"), StringExternal("Param/Value/43AA9BFF"), c_objectiveStateActive, true);
    gv_objectiveAccessTower3 = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(48, ObjectiveLastCreated(), StringExternal("Param/Value/CE0A4A63"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAccessBroadcastTowersCreateQ_Init () {
    gt_ObjectiveAccessBroadcastTowersCreateQ = TriggerCreate("gt_ObjectiveAccessBroadcastTowersCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Access Broadcast Towers Update Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAccessBroadcastTowersUpdateQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveBroadcastTowersAccessed += 1;
    TriggerExecute(gt_ObjectiveAccessBroadcastTowersCreateQ, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_TransmissionDataSuccessfullyUploadedQ, true, false);
    TriggerQueueExit();
    if ((gv_objectiveBroadcastTowersAccessed == 2)) {
        TriggerExecute(gt_ActivateP02Bullies, true, false);
    }
    else {
    }
    if ((gv_objectiveBroadcastTowersAccessed == 3)) {
        TriggerExecute(gt_VictoryBroadcastTowersCompleted, true, false);
    }
    else {
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAccessBroadcastTowersUpdateQ_Init () {
    gt_ObjectiveAccessBroadcastTowersUpdateQ = TriggerCreate("gt_ObjectiveAccessBroadcastTowersUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Access Broadcast Tower 1 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAccessBroadcastTower1Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveAccessBroadcastTowersCreateQ, true, false);
    ObjectiveSetState(gv_objectiveAccessTower1, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAccessBroadcastTower1Complete_Init () {
    gt_ObjectiveAccessBroadcastTower1Complete = TriggerCreate("gt_ObjectiveAccessBroadcastTower1Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Access Broadcast Tower 2 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAccessBroadcastTower2Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveAccessBroadcastTowersCreateQ, true, false);
    ObjectiveSetState(gv_objectiveAccessTower2, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAccessBroadcastTower2Complete_Init () {
    gt_ObjectiveAccessBroadcastTower2Complete = TriggerCreate("gt_ObjectiveAccessBroadcastTower2Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Access Broadcast Tower 3 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAccessBroadcastTower3Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveAccessBroadcastTowersCreateQ, true, false);
    ObjectiveSetState(gv_objectiveAccessTower3, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAccessBroadcastTower3Complete_Init () {
    gt_ObjectiveAccessBroadcastTower3Complete = TriggerCreate("gt_ObjectiveAccessBroadcastTower3Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv__30SecondWarning, true);
    TimerPause(gv__90SecondWarning, true);
    TimerPause(gv_distractionTimer, true);
    TriggerStop(gt_StartGameStage1);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    UnitRemove(UnitFromId(1));
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p07_HORNERBASE, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION_INFANTRY, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_DOMINION_INFANTRY, 0);
    TriggerExecute(gt_BriefingParade, true, false);
    Wait(8.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1133), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1272), 15.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner04_00");
    // Transmission - SoundLink("THorner04BriefingHorner00001", -1)
    SoundPlay(SoundLink("THorner04BriefingHorner00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingHorner00001", -1))), c_timeReal);
    // Transmission - SoundLink("THorner04BriefingHorner00010", -1)
    SoundPlay(SoundLink("THorner04BriefingHorner00010", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingHorner00010", -1))), c_timeReal);
    // Transmission - SoundLink("THorner04BriefingRaynor00012", -1)
    SoundPlay(SoundLink("THorner04BriefingRaynor00012", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00012", -1))), c_timeReal);
    // Transmission - SoundLink("THorner04BriefingHorner00013", -1)
    SoundPlay(SoundLink("THorner04BriefingHorner00013", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingHorner00013", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingHorner00001", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingHorner00010", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00012", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingHorner00013", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    UnitGroupLoopBegin(gv_briefingParadeGroup);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_DOMINION_INFANTRY, 0);
    UnitRemove(UnitFromId(292));
    UnitRemove(UnitFromId(290));
    UnitRemove(UnitFromId(291));
    libNtve_gf_CreateUnitsAtPoint2(1, "Odin", 0, gv_p01_USER, PointFromId(1420));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1421)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1422));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1428)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1423));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1429)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1424));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1430)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1425));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1431)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1426));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1432)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1427));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1433)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hellion", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1436));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1434)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hellion", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1437));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1435)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1446));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1438)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1447));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1439)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1448));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1440)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1449));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1441)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1450));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1442)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1451));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1443)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hellion", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1452));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1444)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hellion", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1453));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.88);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1445)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, gv_p06_CIVILIANS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Stand Victory", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1375), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1025), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner04_01");
    // Transmission - SoundLink("THorner04BriefingRaynor00002", -1)
    SoundPlay(SoundLink("THorner04BriefingRaynor00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00002", -1))), c_timeReal);
    // Transmission - SoundLink("THorner04BriefingHorner00003", -1)
    SoundPlay(SoundLink("THorner04BriefingHorner00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingHorner00003", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingHorner00003", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coCe;

    // Variable Initialization
    lv_coCe = null;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenterFlying", 0, gv_p07_HORNERBASE, PointFromId(931));
    lv_coCe = UnitLastCreated();
    UnitCargoCreate(lv_coCe, "SCV", 5);
    UnitIssueOrder(lv_coCe, OrderTargetingPoint(AbilityCommand("CommandCenterLand", 0), PointFromId(34)), c_orderQueueReplace);
    UnitIssueOrder(lv_coCe, Order(AbilityCommand("CommandCenterTransport", 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_coCe, OrderTargetingUnit(AbilityCommand("Rally", 0), UnitFromId(10)), c_orderQueueReplace);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1223), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1224), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner04_02");
    // Transmission - SoundLink("THorner04BriefingRaynor00004", -1)
    SoundPlay(SoundLink("THorner04BriefingRaynor00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00004", -1))), c_timeReal);
    // Transmission - SoundLink("THorner04BriefingRaynor00008", -1)
    SoundPlay(SoundLink("THorner04BriefingRaynor00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00008", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1273), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1274), ((SoundLengthSync(SoundLink("THorner04BriefingHorner00011", -1)) + SoundLengthSync(SoundLink("THorner04BriefingHorner00005", -1))) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner04_03");
    // Transmission - SoundLink("THorner04BriefingHorner00011", -1)
    SoundPlay(SoundLink("THorner04BriefingHorner00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingHorner00011", -1))), c_timeReal);
    // Transmission - SoundLink("THorner04BriefingHorner00005", -1)
    SoundPlay(SoundLink("THorner04BriefingHorner00005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingHorner00005", -1))), c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1282), 7.0, -1, 10, true);
    // Transmission - SoundLink("THorner04BriefingHorner00006", -1)
    SoundPlay(SoundLink("THorner04BriefingHorner00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingHorner00006", -1))), c_timeReal);
    // Transmission - SoundLink("THorner04BriefingRaynor00007", -1)
    SoundPlay(SoundLink("THorner04BriefingRaynor00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00007", -1))), c_timeReal);
    // Transmission - SoundLink("THorner04BriefingRaynor00009", -1)
    SoundPlay(SoundLink("THorner04BriefingRaynor00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingHorner00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingHorner00005", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingHorner00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner04BriefingRaynor00009", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Parade
//--------------------------------------------------------------------------------------------------
bool gt_BriefingParade_Func (bool testConds, bool runActions) {
    int auto77C488A6_n;
    int auto77C488A6_i;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1134);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1142);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1208);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1256);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1257);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1258);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1259);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1260);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1261);
    lv_i += 1;
    gv_briefingParadePoints[lv_i] = PointFromId(1262);
    gv_briefingNumberOfParadePoints = lv_i;
    gf_CreateBriefingParadeUnit("Odin", gv_p01_USER, 0.0, 0.0);
    Wait(1.0, c_timeGame);
    auto77C488A6_n = 4;
    auto77C488A6_i = 1;
    while (auto77C488A6_i <= auto77C488A6_n) {
        Wait(2.0, c_timeGame);
        gf_CreateBriefingParadeUnit("Marine", gv_p02_DOMINION_INFANTRY, 0.0, 0.0);
        gf_CreateBriefingParadeUnit("Marine", gv_p02_DOMINION_INFANTRY, 1.5, 90.0);
        gf_CreateBriefingParadeUnit("Marine", gv_p02_DOMINION_INFANTRY, 1.5, -90.0);
        Wait(1.25, c_timeGame);
        gf_CreateBriefingParadeUnit("Marine", gv_p02_DOMINION_INFANTRY, 0.0, 0.0);
        gf_CreateBriefingParadeUnit("Marine", gv_p02_DOMINION_INFANTRY, 1.5, 90.0);
        gf_CreateBriefingParadeUnit("Marine", gv_p02_DOMINION_INFANTRY, 1.5, -90.0);
        Wait(2.0, c_timeGame);
        gf_CreateBriefingParadeUnit("Hellion", gv_p02_DOMINION_INFANTRY, 0.75, 90.0);
        gf_CreateBriefingParadeUnit("Hellion", gv_p02_DOMINION_INFANTRY, 0.75, -90.0);
        auto77C488A6_i = auto77C488A6_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingParade_Init () {
    gt_BriefingParade = TriggerCreate("gt_BriefingParade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pingSector1Base = c_invalidPingId;
    gv_pingSector2Base = c_invalidPingId;
    gv_pingSector3Base = c_invalidPingId;
    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1411), 0.0, -1, 10, true);
    SoundPlayAtPoint(SoundLink("Emitter_CrowdCheering", -1), PlayerGroupAll(), Point(80.0, 80.0), 0.0, 100.0, 0.0);
    gv_soundEmitterCheers = SoundLastPlayed();
    UnitGroupLoopBegin(UnitGroup(null, gv_p06_CIVILIANS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Stand Victory", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p07_HORNERBASE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_HornerBuildsPlayerBase, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner04MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner04Horner00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Horner00010", 0), c_transmissionDurationAdd, 0.5, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1362), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1393), 4.0, -1, 10, true);
    SoundPlay(SoundLink("TUI_StarmapMenuPopup", 2), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingWarning", PointFromId(1652), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingSector2Base = PingLastCreated();
    PingSetTooltip(gv_pingSector2Base, StringExternal("Param/Value/523513A8"));
    PingSetScale(gv_pingSector2Base, 1.0);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_DOMINION_SIEGE, 6);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1361), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1394), 4.0, -1, 10, true);
    SoundPlay(SoundLink("TUI_StarmapMenuPopup", 2), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingWarning", PointFromId(1654), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingSector1Base = PingLastCreated();
    PingSetTooltip(gv_pingSector1Base, StringExternal("Param/Value/8F359BA8"));
    PingSetScale(gv_pingSector1Base, 1.0);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_DOMINION_AIR, 6);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1392), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1395), 4.0, -1, 10, true);
    SoundPlay(SoundLink("TUI_StarmapMenuPopup", 2), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingWarning", PointFromId(1653), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingSector3Base = PingLastCreated();
    PingSetTooltip(gv_pingSector3Base, StringExternal("Param/Value/E2C19B85"));
    PingSetScale(gv_pingSector3Base, 1.0);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_DOMINION_RAIDER, 6);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1375), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1025), 9.0, -1, 10, true);
    SoundPlay(SoundLink("TUI_StarmapMenuPopup", 2), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_DOMINION_INFANTRY, 6);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("THorner04Raynor00011", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Raynor00011", 0), c_transmissionDurationAdd, 0.5, true);
    // Transmission - SoundLink("THorner04Tychus00012", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Tychus00012", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_DOMINION_INFANTRY, 6);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_DOMINION_SIEGE, 6);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_DOMINION_AIR, 6);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_DOMINION_RAIDER, 6);
    UnitGroupLoopBegin(gv_introHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    if ((gv_pingSector1Base == c_invalidPingId)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingWarning", PointFromId(1654), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        gv_pingSector1Base = PingLastCreated();
        PingSetTooltip(gv_pingSector1Base, StringExternal("Param/Value/574A6351"));
        PingSetScale(gv_pingSector1Base, 1.0);
    }
    else {
    }
    if ((gv_pingSector2Base == c_invalidPingId)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingWarning", PointFromId(1652), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        gv_pingSector2Base = PingLastCreated();
        PingSetTooltip(gv_pingSector2Base, StringExternal("Param/Value/1B8B3377"));
        PingSetScale(gv_pingSector2Base, 1.0);
    }
    else {
    }
    if ((gv_pingSector3Base == c_invalidPingId)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingWarning", PointFromId(1653), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        gv_pingSector3Base = PingLastCreated();
        PingSetTooltip(gv_pingSector3Base, StringExternal("Param/Value/10B0314C"));
        PingSetScale(gv_pingSector3Base, 1.0);
    }
    else {
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), UnitGetPosition(gv_odin), 1.5);
    UnitSelect(UnitFromId(1), gv_p01_USER, true);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGameStage1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, 0);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(RegionGetCenter(RegionFromId(9)), 20.0), c_actorIntersectAgainstRadiusContact, "SetVisibility", "Doodad", "ScopeContains Balloons");
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(RegionGetCenter(RegionFromId(9)), 20.0), c_actorIntersectAgainstRadiusContact, "SetVisibility", "Doodad", "ScopeContains TickerTapeFX");
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(RegionGetCenter(RegionFromId(9)), 20.0), c_actorIntersectAgainstRadiusContact, "SetVisibility", "Doodad", "ScopeContains Fireworks");
    UnitRemove(UnitFromId(963));
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION_INFANTRY, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p06_CIVILIANS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(true);
    AITimePause(true);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p07_HORNERBASE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    TriggerExecute(gt_RecreateBase, true, false);
    libNtve_gf_ShowHideUnit(UnitFromId(806), true);
    libNtve_gf_ShowHideUnit(UnitFromId(807), true);
    libNtve_gf_ShowHideUnit(UnitFromId(808), true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner04MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_midCinematicCompleted = false;
    if ((gv_odinDead == true)) {
        CameraPan(gv_p01_USER, UnitGetPosition(gv_odin), 0.0, -1, 10, false);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        Wait(1.0, c_timeReal);
        libNtve_gf_SwooshCamera(gv_p01_USER, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 42.0, UnitGetPosition(gv_odin), 8.0);
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Tychus00021", 0), c_transmissionDurationAdd, 1.0, true);
        TriggerExecute(gt_TychusEjection, true, false);
        Wait(4.0, c_timeGame);
        UnitKill(gv_odin);
        CameraApplyInfo(gv_p01_USER, CameraInfoFromId(925), 0.0, -1, 10, true);
    }
    else {
        UnitSetPosition(gv_odin, PointFromId(1480), false);
        UnitIssueOrder(gv_odin, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(19)), c_orderQueueReplace);
        CameraApplyInfo(gv_p01_USER, CameraInfoFromId(925), 0.0, -1, 10, true);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        Wait(1.0, c_timeReal);
    }
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(927), 15.0, -1, 10, true);
    // Transmission - SoundLink("THorner04Horner00005", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Horner00005", 0), c_transmissionDurationAdd, 1.0, true);
    // Transmission - SoundLink("THorner04Horner00006", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Horner00006", 0), c_transmissionDurationAdd, 1.0, true);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(UnitFromId(808)));
    gv_pingActor_Tower1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(UnitFromId(806)));
    gv_pingActor_Tower2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(UnitFromId(807)));
    gv_pingActor_Tower3 = libNtve_gf_ActorLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("THorner04Horner00023", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Horner00023", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(928), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(929), 15.0, -1, 10, true);
    if ((gv_odinDead == false)) {
        UnitIssueOrder(gv_odin, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(19)), c_orderQueueReplace);
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("THorner04Raynor00007", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Raynor00007", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(4.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_p07_HORNERBASE, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_p01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(18), gv_p01_USER);
    Wait(4.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), false, false);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AchievementDestroyaBarracksStarportandFactory, false);
    TriggerEnable(gt_AggroPassiveUnits, false);
    TriggerEnable(gt_RemoveDominionOutpostPings, false);
    TriggerEnable(gt_TransmissionOdinNearReaperQ, false);
    TriggerEnable(gt_TransmissionOdinNearSiegeTankQ, false);
    TriggerEnable(gt_TransmissionOdinNearVikingQ, false);
    TimerWindowDestroy(gv_distractionTimerWindow);
    VisRevealerDestroy(gv_korhalRevealer);
    ObjectiveShow(gv_objectiveDestroyDominionForces, PlayerGroupAll(), false);
    libNtve_gf_KillModel(gv_pingActor_Tower1);
    libNtve_gf_KillModel(gv_pingActor_Tower2);
    libNtve_gf_KillModel(gv_pingActor_Tower3);
    PingDestroy(gv_pingSector1Base);
    PingDestroy(gv_pingSector2Base);
    PingDestroy(gv_pingSector3Base);
    if ((gv_odinDead == false)) {
        libNtve_gf_ShowHideUnit(gv_odin, true);
        libNtve_gf_ChangeUnitDamage(gv_odin, 0, 0);
        UnitSetPosition(UnitFromId(1), PointFromId(19), false);
        libNtve_gf_MakeUnitFacePoint(gv_odin, PointFromId(1480), 0.0);
        TriggerEnable(gt_OdinDiesQ, true);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_p07_HORNERBASE, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Odin") && (UnitGetType(UnitGroupLoopCurrent()) != "OdinWreckage")) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ResetSCVPositions, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION_INFANTRY, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Passive", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ScanRangeBonus", 1);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        libNtve_gf_AICast(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_DOMINION_SIEGE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Passive", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ScanRangeBonus", 1);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        libNtve_gf_AICast(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p04_DOMINION_AIR, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Passive", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ScanRangeBonus", 1);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        libNtve_gf_AICast(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p05_DOMINION_RAIDER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Passive", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ScanRangeBonus", 1);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        libNtve_gf_AICast(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartUpgrades, true, false);
    Wait(0.5, c_timeReal);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 300);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_p01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_DOMINION_INFANTRY, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_DOMINION_SIEGE, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_DOMINION_AIR, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_DOMINION_RAIDER, 5);
    Wait(lv_fadeDuration, c_timeReal);
    gv_inCinematic = false;
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3DF4DD57"));
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_StartGameStage2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recreate Base
//--------------------------------------------------------------------------------------------------
bool gt_RecreateBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_merc;
    int lv_player;

    // Variable Initialization
    lv_merc = 0;
    lv_player = gv_p07_HORNERBASE;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p07_HORNERBASE, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Odin") && (UnitGetType(UnitGroupLoopCurrent()) != "OdinWreckage")) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Armory", 0, lv_player, RegionGetCenter(RegionFromId(32)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", 0, lv_player, RegionGetCenter(RegionFromId(29)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", 0, lv_player, RegionGetCenter(RegionFromId(22)));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, 50.0);
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MercCompound", 0, lv_player, RegionGetCenter(RegionFromId(43)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", 0, lv_player, RegionGetCenter(RegionFromId(28)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FactoryTechLab", 0, lv_player, RegionGetCenter(RegionFromId(38)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", 0, lv_player, RegionGetCenter(RegionFromId(34)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, lv_player, RegionGetCenter(RegionFromId(35)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, lv_player, RegionGetCenter(RegionFromId(36)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, lv_player, RegionGetCenter(RegionFromId(37)));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, lv_player, PointFromId(1527));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, lv_player, PointFromId(1528));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, lv_player, PointFromId(1529));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, lv_player, PointFromId(1530));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, lv_player, PointFromId(1535));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, lv_player, PointFromId(1536));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, lv_player, PointFromId(1537));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, lv_player, PointFromId(1538));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, lv_player, PointFromId(1539));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, lv_player, PointFromId(1540));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, lv_player, PointFromId(1543));
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, lv_player, RegionGetCenter(RegionFromId(42)));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecreateBase_Init () {
    gt_RecreateBase = TriggerCreate("gt_RecreateBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset SCV Positions
//--------------------------------------------------------------------------------------------------
bool gt_ResetSCVPositions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_sCVs;

    // Variable Initialization
    lv_sCVs = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sCVs = UnitGroup("SCV", gv_p01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupLoopBegin(lv_sCVs);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(1535));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(1536));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(1537));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(1538));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(1539));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(1540));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(1543));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetSCVPositions_Init () {
    gt_ResetSCVPositions = TriggerCreate("gt_ResetSCVPositions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p01_USER);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    AITimePause(true);
    TriggerEnable(gt_OdinStompsStuff, false);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupLoopBegin(gv_victoryHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION_INFANTRY, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    int autoCAF0B488_n;
    int autoCAF0B488_i;
    int auto93865D6C_n;
    int auto93865D6C_i;
    int auto80749DD1_n;
    int auto80749DD1_i;
    int auto5D3758A5_n;
    int auto5D3758A5_i;
    int autoCDBC80B9_n;
    int autoCDBC80B9_i;
    int autoAD9A938D_n;
    int autoAD9A938D_i;
    int autoEA5FC2B9_n;
    int autoEA5FC2B9_i;
    int auto776E3F06_n;
    int auto776E3F06_i;

    // Variable Declarations
    unit lv_statue;

    // Variable Initialization
    lv_statue = null;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1524), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1526), 12.0, -1, 10, true);
    libNtve_gf_SetAlliance(gv_p02_DOMINION_INFANTRY, gv_p06_CIVILIANS, 5);
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1219));
    libNtve_gf_CreateUnitsAtPoint2(1, "Barracks", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1007));
    libNtve_gf_CreateUnitsAtPoint2(1, "Barracks", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1006));
    libNtve_gf_CreateUnitsAtPoint2(1, "Barracks", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1615));
    libNtve_gf_CreateUnitsAtPoint2(1, "Bunker", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1614));
    UnitCargoCreate(UnitLastCreated(), "Marine", 2);
    UnitCargoCreate(UnitLastCreated(), "Marauder", 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "BarracksTechLab", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1027));
    libNtve_gf_CreateUnitsAtPoint2(1, "BarracksReactor", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1031));
    libNtve_gf_CreateUnitsAtPoint2(1, "AutoTurret", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1033));
    libNtve_gf_CreateUnitsAtPoint2(1, "AutoTurret", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1032));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1037));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1036));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1048));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1053));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1054));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1056));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1057));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1060));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1106));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1034));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1616));
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1038));
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1039));
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p02_DOMINION_INFANTRY, PointFromId(1657));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner04MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_VictoryTowerScene, true, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("THorner04Horner00008", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner04Horner00008", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(5.0, c_timeGame);
    autoCAF0B488_n = 12;
    autoCAF0B488_i = 1;
    while (autoCAF0B488_i <= autoCAF0B488_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p06_CIVILIANS, RegionRandomPoint(RegionFromId(31)));
        UnitBehaviorAdd(UnitLastCreated(), "CivilianEnableWeapon", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1035)), c_orderQueueReplace);
        autoCAF0B488_i = autoCAF0B488_i + 1;
    }
    auto93865D6C_n = 9;
    auto93865D6C_i = 1;
    while (auto93865D6C_i <= auto93865D6C_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p06_CIVILIANS, RegionRandomPoint(RegionFromId(31)));
        UnitBehaviorAdd(UnitLastCreated(), "CivilianEnableWeapon", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1219)), c_orderQueueReplace);
        auto93865D6C_i = auto93865D6C_i + 1;
    }
    auto80749DD1_n = 11;
    auto80749DD1_i = 1;
    while (auto80749DD1_i <= auto80749DD1_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p06_CIVILIANS, RegionRandomPoint(RegionFromId(3)));
        UnitBehaviorAdd(UnitLastCreated(), "CivilianEnableWeapon", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(565)), c_orderQueueReplace);
        auto80749DD1_i = auto80749DD1_i + 1;
    }
    auto5D3758A5_n = 16;
    auto5D3758A5_i = 1;
    while (auto5D3758A5_i <= auto5D3758A5_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p06_CIVILIANS, RegionRandomPoint(RegionFromId(3)));
        UnitBehaviorAdd(UnitLastCreated(), "CivilianEnableWeapon", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1219)), c_orderQueueReplace);
        auto5D3758A5_i = auto5D3758A5_i + 1;
    }
    autoCDBC80B9_n = 8;
    autoCDBC80B9_i = 1;
    while (autoCDBC80B9_i <= autoCDBC80B9_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p06_CIVILIANS, RegionRandomPoint(RegionFromId(33)));
        UnitBehaviorAdd(UnitLastCreated(), "CivilianEnableWeapon", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1132)), c_orderQueueReplace);
        autoCDBC80B9_i = autoCDBC80B9_i + 1;
    }
    autoAD9A938D_n = 13;
    autoAD9A938D_i = 1;
    while (autoAD9A938D_i <= autoAD9A938D_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p06_CIVILIANS, RegionRandomPoint(RegionFromId(33)));
        UnitBehaviorAdd(UnitLastCreated(), "CivilianEnableWeapon", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1132)), c_orderQueueReplace);
        autoAD9A938D_i = autoAD9A938D_i + 1;
    }
    autoEA5FC2B9_n = 9;
    autoEA5FC2B9_i = 1;
    while (autoEA5FC2B9_i <= autoEA5FC2B9_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p06_CIVILIANS, RegionRandomPoint(RegionFromId(5)));
        UnitBehaviorAdd(UnitLastCreated(), "CivilianEnableWeapon", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1219)), c_orderQueueReplace);
        autoEA5FC2B9_i = autoEA5FC2B9_i + 1;
    }
    auto776E3F06_n = 9;
    auto776E3F06_i = 1;
    while (auto776E3F06_i <= auto776E3F06_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p06_CIVILIANS, RegionRandomPoint(RegionFromId(39)));
        UnitBehaviorAdd(UnitLastCreated(), "CivilianEnableWeapon", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1219)), c_orderQueueReplace);
        auto776E3F06_i = auto776E3F06_i + 1;
    }
    Wait(0.2, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(555), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(881), 6.0, -1, 10, true);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1533), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1613), 6.0, -1, 10, true);
    Wait(4.0, c_timeGame);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Tower Scene
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTowerScene_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(358)), c_animNameDefault, "Cover Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.33, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(358)), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTowerScene_Init () {
    gt_VictoryTowerScene = TriggerCreate("gt_VictoryTowerScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGShortenTime_Init();
    gt_StartGameStage1_Init();
    gt_StartGameStage1Timer_Init();
    gt_StartGameStage2_Init();
    gt_CiviliansAttackedandCower_Init();
    gt_RemoveGarrisonedCivilians_Init();
    gt_CityAmbienceNorthSideVehicles_Init();
    gt_CityAmbienceSESideVehicles_Init();
    gt_CityAmbienceSWSideVehicles_Init();
    gt_CityAmbienceWestSideBlimp_Init();
    gt_CityAmbienceEastSideBlimp_Init();
    gt_CityAmbienceNorthSpawnVehicleRemoval_Init();
    gt_CityAmbienceSESpawnVehicleRemoval_Init();
    gt_CityAmbienceSWSpawnVehicleRemoval_Init();
    gt_CityAmbienceWestBlimpRemoval_Init();
    gt_CityAmbienceEastBlimpRemoval_Init();
    gt_OdinStompsStuff_Init();
    gt_RemoveDominionOutpostPings_Init();
    gt_ScienceFacilityBarragedSpawnSecretDocuments_Init();
    gt_SecretDocumentsRetrievedUnlockHorner05S_Init();
    gt_SCVBuildsSupplyDepot_Init();
    gt_SCVGoesIdle_Init();
    gt_ShowAggroIcononUnit_Init();
    gt_HornerBuildsPlayerBase_Init();
    gt_ParadePlazaReaction_Init();
    gt_AggroPassiveUnits_Init();
    gt_InitialAttackOver_Init();
    gt_OdinDiesMovetoStage2_Init();
    gt_CreatePrimaryObjectiveLeaderboard_Init();
    gt_CreateBeaconsandMapPings_Init();
    gt_OdinDiesQ_Init();
    gt_SwannFliesInaThor_Init();
    gt_ThorChangesOwner_Init();
    gt_TychusEjection_Init();
    gt_Statue1_Init();
    gt_Statue2_Init();
    gt_Statue3_Init();
    gt_Statue4_Init();
    gt_Statue5_Init();
    gt_Statue6_Init();
    gt_Statue1KillBullhorn_Init();
    gt_Statue2KillBullhorn_Init();
    gt_Statue3KillBullhorn_Init();
    gt_Statue4KillBullhorn_Init();
    gt_Statue5KillBullhorn_Init();
    gt_Statue6KillBullhorn_Init();
    gt_BullhornStopSounds_Init();
    gt_ObjectiveMisterUniverseUpdateAAirBaseTowerQ_Init();
    gt_ObjectiveMisterUniverseUpdateBSiegeBaseTowerQ_Init();
    gt_ObjectiveMisterUniverseUpdateCRaiderBaseTowerQ_Init();
    gt_SendAirBaseKillTeam1_Init();
    gt_SendAirBaseKillTeam2_Init();
    gt_SendAirBaseKillTeam3_Init();
    gt_SendSiegeBaseKillTeam1_Init();
    gt_SendSiegeBaseKillTeam2_Init();
    gt_SendSiegeBaseKillTeam3_Init();
    gt_SendRaiderBaseKillTeam1_Init();
    gt_SendRaiderBaseKillTeam2_Init();
    gt_SendRaiderBaseKillTeam3_Init();
    gt_StartAI_Init();
    gt_StartUpgrades_Init();
    gt_AttackWaveTiming_Init();
    gt_FirstAttackWave_Init();
    gt_P03AttackWavesSiege_Init();
    gt_P04AttackWavesAir_Init();
    gt_P05AttackWavesRaider_Init();
    gt_ActivateP02Bullies_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_AchievementDestroyaBarracksStarportandFactory_Init();
    gt_VictoryBroadcastTowersCompleted_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_PlayUnitTalkonPickedUnit_Init();
    gt_TransmissionPlazaMarineReactionQ_Init();
    gt_TransmissionMengskStatuesQ_Init();
    gt_TransmissionTychusEjectsOutoftheOdin_Init();
    gt_TransmissionSwannDropsInAThorQ_Init();
    gt_TransmissionCivilianSquishArea1Q_Init();
    gt_TransmissionCivilianSquishArea2Q_Init();
    gt_TransmissionCivilianSquishArea3Q_Init();
    gt_TransmissionCivilianSquishArea4Q_Init();
    gt_TransmissionCivilianSquishArea5Q_Init();
    gt_TransmissionOdinNearReaperQ_Init();
    gt_TransmissionOdinNearSiegeTankQ_Init();
    gt_TransmissionOdinNearVikingQ_Init();
    gt_TransmissionStage2IntroQ_Init();
    gt_TransmissionAirBaseGankSquadQ_Init();
    gt_TransmissionSiegeBaseGankSquadQ_Init();
    gt_TransmissionRaiderBaseGankSquadQ_Init();
    gt_TransmissionDataSuccessfullyUploadedQ_Init();
    gt_Transmission90sLeftonDistractionQ_Init();
    gt_Transmission30sLeftonDistractionQ_Init();
    gt_NewUnitOdinTipQ_Init();
    gt_NewUnitThorTipQ_Init();
    gt_NewAbilityBarrageTipQ_Init();
    gt_TrainTroopsTipQ_Init();
    gt_ObjectiveDestroyCreateQ_Init();
    gt_ObjectiveDestroyComplete_Init();
    gt_ObjectiveAccessBroadcastTowersCreateQ_Init();
    gt_ObjectiveAccessBroadcastTowersUpdateQ_Init();
    gt_ObjectiveAccessBroadcastTower1Complete_Init();
    gt_ObjectiveAccessBroadcastTower2Complete_Init();
    gt_ObjectiveAccessBroadcastTower3Complete_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingParade_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_RecreateBase_Init();
    gt_ResetSCVPositions_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryTowerScene_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
