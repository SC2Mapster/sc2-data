//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Gates of Hell
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p00_NEUTRAL_PALLETS = 0;
const int gv_p01_USER = 1;
const int gv_p02_ZERG_PURPLE_NE = 2;
const int gv_p03_DOMINION_RED = 3;
const int gv_p04_WARFIELD = 4;
const int gv_p05_ZERG_ORANGE_NW = 5;
const int gv_p06_ZERG_GREEN_SW = 6;
const int gv_p07_ZERG_PINK = 7;
const int gv_p08_RESCUABLE = 8;
const int gv_p09_ACTORDOMINION = 9;
const int gv_p10_ZERG_WHITEHIVE = 10;
const int gv_p11_ZERG_YELLOWSPORECANNON = 11;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_BriefingSlaughterArea {
    unitgroup lv_zergGroup;
    region lv_zergRegion;
    region lv_terranRegion;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_nydusOBJ01;
unit gv_nydusOBJ02;
unit gv_nydusOBJ03;
unit gv_warfieldShipFlying;
bool gv_gameOver;
bool gv_inCinematic;
unit gv_thor01;
unit gv_thor02;
unit gv_sandbag01;
unit gv_sandbag02;
unit gv_sandbag03;
unit gv_sandbag04;
unit gv_sandbag05;
unit gv_sandbag06;
unit gv_sandbag07;
unit gv_sandbag08;
unit gv_sandbag09;
unit gv_sandbag10;
bool gv_drop01Done;
playergroup gv_zergPlayers;
fixed gv_nydusWormMaximumHP;
int gv_dropPodFirstPing;
timer gv_dropPodTimer;
unitgroup gv_gankGroupDrop01;
unitgroup gv_gankGroupDrop02;
unitgroup gv_gankGroupDrop03;
unitgroup gv_gankGroupDrop04;
unitgroup gv_gankGroupDrop05;
unitgroup gv_gankGroupDrop06;
unitgroup gv_gankGroupDrop07;
unitgroup gv_gankGroupDrop08;
unitgroup gv_gankGroupDrop09;
unitgroup gv_gankGroupDrop10;
revealer gv_revealerGankDrop01;
revealer gv_revealerGankDrop02;
revealer gv_revealerGankDrop03;
revealer gv_revealerGankDrop04;
revealer gv_revealerGankDrop05;
revealer gv_revealerGankDrop06;
revealer gv_revealerGankDrop07;
revealer gv_revealerGankDrop08;
revealer gv_revealerGankDrop09;
revealer gv_revealerGankDrop10;
unit gv_gankStarportUltra;
int gv_rescueStarportPing;
int gv_rescueFactoryPing;
unitgroup gv_factoryAllUnits;
unitgroup gv_factoryDropPodUnits;
unitgroup gv_starportAllUnits;
unitgroup gv_starportDropPodUnits;
bool gv_factorySpawned;
bool gv_starportSpawned;
unitgroup gv_gankGroupRemoval;
unitgroup gv_nextRescuableGroup;
region[4][5] gv_rescuablesRegions;
unitgroup[4][5] gv_rescuableUnitGroup;
int[4][5] gv_rescuablePings;
point gv_rescuableBuildingDropPoint;
int gv_bDPSpeed;
fixed gv_bDPCurrentFlyingHeight;
fixed gv_bDPDeltaFlyingHeight;
fixed gv_bDPDeltaWait;
unit gv_bDPDroppedBuilding;
point gv_bDPLandingPoint;
int gv_bDPDropType;
int gv_leaderBoardDrops;
int gv_dropPodsRemaining;
int gv_achievementDropPodForcesRescued;
int gv_statStructuresRescued;
int gv_statSporeCannonsDestroyed;
int gv_statDropPodsRescued;
unitgroup gv_zergRushGroup01;
unitgroup gv_zergRushGroup02;
unitgroup gv_zergRushGroup03;
int gv_tempNydusPing;
point gv_tempNydusPoint;
int gv_tempNydusPlayer;
int gv_tempNydusPacks;
int gv_tempNydusPackSize;
fixed gv_tempNydusCooldown;
string gv_tempNydusType;
fixed gv_nydusSpawnDelay;
bool gv_stopFallingDebrisAndStuctures;
int gv_obejctiveTroopsSupplyTotal;
fixed gv_existingSupplyUpdate;
int gv_troopSupply;
unitgroup gv_sCVGroup;
bool gv_objectiveTroopsCompleted;
int gv_obejctiveNydusWormsTotal;
int gv_obejctiveNydusWormsUpdate;
int gv_objectiveNydusWorms;
gs_RECORD_BriefingSlaughterArea[5] gv_briefingSlaughterAreas;
bool gv_sandbagGet01;
bool gv_sandbagMovingToPlaceLeft;
int gv_sandbagsSwitchLeft;
bool gv_sandbagGet02;
bool gv_sandbagMovingToPlaceRight;
int gv_sandbagsSwitchRight;
int gv_pingNydus01;
int gv_pingNydus02;
int gv_pingNydus03;
actor gv_actorNydusTarget01;
actor gv_actorNydusTarget02;
actor gv_actorNydusTarget03;
unit gv_sCV01;
unit gv_sCV02;
unit gv_sCV03;
unit gv_sCV04;
unit gv_marine01;
unit gv_marine02;
unit gv_marine03;
unit gv_marine04;
actor gv_fire01;
actor gv_fire02;
actor gv_fire03;
actor gv_fire04;
actor gv_fire05;
unit gv_bunker01;
unit gv_bunker02;
unit gv_bunker03;
unit gv_bunker04;
unit gv_hydraSquish;
unitgroup gv_bunkerGroup01;
unitgroup gv_bunkerGroup02;
unitgroup gv_bunkerGroup03;
unitgroup gv_bunkerGroup04;
bool gv_midCinematicCompleted;
unitgroup gv_midHiddenUnitGroup;
bool gv_victoryCinematicCompleted;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_nydusOBJ01 = null;
    gv_nydusOBJ02 = null;
    gv_nydusOBJ03 = null;
    gv_warfieldShipFlying = null;
    gv_gameOver = false;
    gv_inCinematic = false;
    gv_thor01 = null;
    gv_thor02 = null;
    gv_sandbag01 = null;
    gv_sandbag02 = null;
    gv_sandbag03 = null;
    gv_sandbag04 = null;
    gv_sandbag05 = null;
    gv_sandbag06 = null;
    gv_sandbag07 = null;
    gv_sandbag08 = null;
    gv_sandbag09 = null;
    gv_sandbag10 = null;
    gv_drop01Done = false;
    gv_zergPlayers = PlayerGroupEmpty();
    gv_nydusWormMaximumHP = 0.0;
    gv_dropPodTimer = TimerCreate();
    gv_gankGroupDrop01 = UnitGroupEmpty();
    gv_gankGroupDrop02 = UnitGroupEmpty();
    gv_gankGroupDrop03 = UnitGroupEmpty();
    gv_gankGroupDrop04 = UnitGroupEmpty();
    gv_gankGroupDrop05 = UnitGroupEmpty();
    gv_gankGroupDrop06 = UnitGroupEmpty();
    gv_gankGroupDrop07 = UnitGroupEmpty();
    gv_gankGroupDrop08 = UnitGroupEmpty();
    gv_gankGroupDrop09 = UnitGroupEmpty();
    gv_gankGroupDrop10 = UnitGroupEmpty();
    gv_revealerGankDrop01 = null;
    gv_revealerGankDrop02 = null;
    gv_revealerGankDrop03 = null;
    gv_revealerGankDrop04 = null;
    gv_revealerGankDrop05 = null;
    gv_revealerGankDrop06 = null;
    gv_revealerGankDrop07 = null;
    gv_revealerGankDrop08 = null;
    gv_revealerGankDrop09 = null;
    gv_revealerGankDrop10 = null;
    gv_gankStarportUltra = null;
    gv_factoryAllUnits = UnitGroupEmpty();
    gv_factoryDropPodUnits = UnitGroupEmpty();
    gv_starportAllUnits = UnitGroupEmpty();
    gv_starportDropPodUnits = UnitGroupEmpty();
    gv_factorySpawned = false;
    gv_starportSpawned = false;
    gv_gankGroupRemoval = UnitGroupEmpty();
    gv_nextRescuableGroup = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 3) {
        init_j = 0;
        while (init_j <= 4) {
            gv_rescuablesRegions[init_i][init_j] = null;
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 3) {
        init_j = 0;
        while (init_j <= 4) {
            gv_rescuableUnitGroup[init_i][init_j] = UnitGroupEmpty();
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    gv_rescuableBuildingDropPoint = null;
    gv_bDPSpeed = 0;
    gv_bDPCurrentFlyingHeight = 0.0;
    gv_bDPDeltaFlyingHeight = 0.0;
    gv_bDPDeltaWait = 0.0;
    gv_bDPDroppedBuilding = null;
    gv_bDPLandingPoint = null;
    gv_leaderBoardDrops = c_boardNone;
    gv_dropPodsRemaining = 9;
    gv_achievementDropPodForcesRescued = 0;
    gv_statStructuresRescued = 0;
    gv_statSporeCannonsDestroyed = 0;
    gv_statDropPodsRescued = 0;
    gv_zergRushGroup01 = UnitGroupEmpty();
    gv_zergRushGroup02 = UnitGroupEmpty();
    gv_zergRushGroup03 = UnitGroupEmpty();
    gv_tempNydusPoint = null;
    gv_tempNydusPlayer = 0;
    gv_tempNydusPacks = 0;
    gv_tempNydusPackSize = 0;
    gv_tempNydusCooldown = 0.0;
    gv_tempNydusType = null;
    gv_nydusSpawnDelay = 18.0;
    gv_stopFallingDebrisAndStuctures = false;
    gv_obejctiveTroopsSupplyTotal = 100;
    gv_existingSupplyUpdate = 0.0;
    gv_troopSupply = c_invalidObjectiveId;
    gv_sCVGroup = UnitGroupEmpty();
    gv_objectiveTroopsCompleted = false;
    gv_obejctiveNydusWormsTotal = 3;
    gv_obejctiveNydusWormsUpdate = 0;
    gv_objectiveNydusWorms = c_invalidObjectiveId;
    init_i = 0;
    while (init_i <= 4) {
        gv_briefingSlaughterAreas[init_i].lv_zergGroup = UnitGroupEmpty();
        gv_briefingSlaughterAreas[init_i].lv_zergRegion = null;
        gv_briefingSlaughterAreas[init_i].lv_terranRegion = null;
        init_i = init_i + 1;
    }
    gv_sandbagGet01 = true;
    gv_sandbagMovingToPlaceLeft = true;
    gv_sandbagsSwitchLeft = 1;
    gv_sandbagGet02 = true;
    gv_sandbagMovingToPlaceRight = true;
    gv_sandbagsSwitchRight = 1;
    gv_pingNydus01 = c_invalidPingId;
    gv_pingNydus02 = c_invalidPingId;
    gv_pingNydus03 = c_invalidPingId;
    gv_actorNydusTarget01 = null;
    gv_actorNydusTarget02 = null;
    gv_actorNydusTarget03 = null;
    gv_sCV01 = null;
    gv_sCV02 = null;
    gv_sCV03 = null;
    gv_sCV04 = null;
    gv_marine01 = null;
    gv_marine02 = null;
    gv_marine03 = null;
    gv_marine04 = null;
    gv_fire01 = null;
    gv_fire02 = null;
    gv_fire03 = null;
    gv_fire04 = null;
    gv_fire05 = null;
    gv_bunker01 = null;
    gv_bunker02 = null;
    gv_bunker03 = null;
    gv_bunker04 = null;
    gv_hydraSquish = null;
    gv_bunkerGroup01 = UnitGroupEmpty();
    gv_bunkerGroup02 = UnitGroupEmpty();
    gv_bunkerGroup03 = UnitGroupEmpty();
    gv_bunkerGroup04 = UnitGroupEmpty();
    gv_midCinematicCompleted = false;
    gv_midHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryCinematicCompleted = false;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RescueUnits ();
void gf_CreateRescuable (int lp_region, int lp_index, fixed lp_delayTillNextDrop);
void gf_PrepareRescuableDrop (int lp_int, string lp_unitType);
void gf_PrepareGankTeam (int lp_num, string lp_gankUnitType, region lp_spawnRegion, unitgroup lp_unitGroup);
region gf_GetClosestRegionToSpawn (region lp_region);
region gf_GetClosestRegionToRetreat (point lp_point);
void gf_GoGank (unitgroup lp_gankers, region lp_gankRegion);
void gf_CreateBuildingDropPod (string lp_buildingType, point lp_landingPoint, int lp_buildingDropPodType, int lp_normalBuildingDropPodFlyability, fixed lp_buildingHP);
void gf_SpawnNydusWorm (point lp_spawnPoint, int lp_player, int lp_packs, int lp_packSize, string lp_type, fixed lp_cooldown);
void gf_AddUpgradetoZergPlayers (int lp_int, string lp_upgrade);
void gf_SpawnCrashingDoodad (point lp_crashPoint, string lp_crashingDoodadType);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_Init08Variables;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_FirstDropDialogue;
trigger gt_FirstDropPodSpawnQ;
trigger gt_FirstDropRescue;
trigger gt_LeaderboardInitiate;
trigger gt_DropPodallPodSpawnsQ;
trigger gt_Gank_Drop01Marines;
trigger gt_Gank_Drop02Marauder;
trigger gt_Gank_Drop03Factory;
trigger gt_Gank_Drop04Tanks;
trigger gt_Gank_Drop05Starport;
trigger gt_Gank_Drop06Goliaths;
trigger gt_Gank_Drop07SplitBanshees;
trigger gt_Gank_Drop08SplitViking;
trigger gt_Gank_Drop09SplitThors;
trigger gt_Gank_Drop10SplitBattlecruiser;
trigger gt_Gank_Drop01_Attacked;
trigger gt_Gank_Drop02_Attacked;
trigger gt_Gank_Drop03_Attacked_Factory;
trigger gt_Gank_Drop04_Attacked;
trigger gt_Gank_Drop05_Attacked_Starport;
trigger gt_Gank_Drop06_Attacked;
trigger gt_Gank_Drop07_Attacked;
trigger gt_Gank_Drop08_Attacked;
trigger gt_Gank_Drop09_Attacked;
trigger gt_Gank_Drop10_Attacked;
trigger gt_RescueFactorySpawnQ;
trigger gt_RescueFactoryQ;
trigger gt_RescueFactorySafety;
trigger gt_RescueStarportSpawnQ;
trigger gt_RescueStarportQ;
trigger gt_RescueStarportSafety;
trigger gt_SecondDropPodRescue;
trigger gt_PeriodicRescueCheck;
trigger gt_GankFlyerRemoval;
trigger gt_GankBurrowRemoval;
trigger gt_CreateBuildingDropPodActions;
trigger gt_DialogueCommanderTacticalAnalysisTheZergGreatlyOutnumberQ;
trigger gt_DialogueKeepMeUpdatedIfWeCanReachQ;
trigger gt_DialogueSirIveLocatedAnIncomingDropPodQ;
trigger gt_DialogueAlrightletsGetOutThereQ;
trigger gt_DialogueRaynorsRaidersFiveLinesQ;
trigger gt_DialogueLetsMoveQ;
trigger gt_DialogueSirIveDetectedaDropPodInYourVicinityQ;
trigger gt_DialogueSendingCoordinatesToANearbyDroppodQ;
trigger gt_DialogueSirAnotherDropPodIsComingDownQ;
trigger gt_DialogueYouveGotAnotherDropPodLandingNearByQ;
trigger gt_DialogueSirAnotherDropPodHasArrivedNearYourPerimeterQ;
trigger gt_DialogueSirIReadMultipleDropPodsEnteringTheAtmosphereQ;
trigger gt_DialogueTheresAnotherWaveOfDropPodsComingInQ;
trigger gt_DialogueCommanderTheLastOfTheDominionDropPodsQ;
trigger gt_DialogueSirWShouldMobilizeEverythingWeGotQ;
trigger gt_DialogueWeCanSalvageSomeOfTheWreckageFromtheDomBaseQ;
trigger gt_DialogueAtLeastABarracksMadeItDownQ;
trigger gt_DialogueGetThisFactoryBackToTheLandingZoneQ;
trigger gt_DialogueSomeAirPowerIsJustWhatWeNeedQ;
trigger gt_DialogueSomeInvasionplayedduringmidcinQ;
trigger gt_DialogueYouWereFoolsToComeHereQ;
trigger gt_DialogueWeveReachedTheCrashSiteQ;
trigger gt_DialogueWarfieldWontBeAliveForVeryMuchLongerQ;
trigger gt_DialogueYoureSureTalkingALotKerriganQ;
trigger gt_InfestationPitDies;
trigger gt_StorymodeTipsQ;
trigger gt_DominionTroopsTipQ;
trigger gt_DominionSuppliesTipQ;
trigger gt_LeaderboardCreate;
trigger gt_ZergStartAttack;
trigger gt_ZergAmbientAttackBothSidesNew;
trigger gt_MoveArea02;
trigger gt_AchievementKillallSporeCannons;
trigger gt_AchievementRescuealldroppods;
trigger gt_VictoryPrimaryObjectiveCompleted;
trigger gt_Victory;
trigger gt_DefeatAllTroopsDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StartAI;
trigger gt_StartUpgradesAdv;
trigger gt_StartUpgradesExp;
trigger gt_ZerglingRush;
trigger gt_P2_Zerg_PurpleAttackWAVES;
trigger gt_P5_Zerg_OrangeAttackWAVES;
trigger gt_P6_Zerg_GreenAttackWAVES;
trigger gt_NydusSpawningTrigger;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_SporeCannonShotsAmbient;
trigger gt_SporeCannonDeaths;
trigger gt_DominionSupplyShipDoodad01;
trigger gt_DominionSupplyShipDoodad02;
trigger gt_DominionSupplyShipDoodad03;
trigger gt_ResourcePickups;
trigger gt_NydusInfiniteSpawning01;
trigger gt_NydusInfiniteSpawning02;
trigger gt_NydusInfiniteSpawning03;
trigger gt_Barracks01;
trigger gt_Barracks02;
trigger gt_Factory01;
trigger gt_Factory02;
trigger gt_Battlecruiser01;
trigger gt_Battlecruiser02;
trigger gt_CreateFloatingDebris;
trigger gt_ZergNorthExtraGuys;
trigger gt_ZergNorthSmallExtraGuys;
trigger gt_ZergSouthExtraGuys;
trigger gt_ObjectiveTroopSupplyCreateQ;
trigger gt_ObjectiveTroopSupplyComplete;
trigger gt_ObjectiveTroopSupplyFailed;
trigger gt_ObjectiveFoodSupply;
trigger gt_ObjectiveTroopSupplyUpdate;
trigger gt_ObjectiveNydusWormsCreateHidden;
trigger gt_ObjectiveNydusWormsUpdate;
trigger gt_ObjectiveNydusWormsComplete;
trigger gt_ObjectiveNydusWormsFailed;
trigger gt_Nydus01Dies;
trigger gt_Nydus02Dies;
trigger gt_Nydus03Dies;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingZergCreation;
trigger gt_BriefingZergRespawn;
trigger gt_BriefingTerranInvasion;
trigger gt_SandbagsGetSandbagLeft;
trigger gt_SandbagsAtCrashSiteLeft;
trigger gt_SandbagsHasSandbagLeft;
trigger gt_SandbagsPlaceSandbag01;
trigger gt_SandbagsPlaceSandbag02;
trigger gt_SandbagsPlaceSandbag03;
trigger gt_SandbagsPlaceSandbag04;
trigger gt_SandbagsPlaceSandbag05;
trigger gt_SandbagsGetSandbagRight;
trigger gt_SandbagsAtCrashSiteRight;
trigger gt_SandbagsHasSandbagRight;
trigger gt_SandbagsPlaceSandbag06;
trigger gt_SandbagsPlaceSandbag07;
trigger gt_SandbagsPlaceSandbag08;
trigger gt_SandbagsPlaceSandbag09;
trigger gt_SandbagsPlaceSandbag010;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_NydusAttack01;
trigger gt_WarfieldCrashSurvivors;
trigger gt_Fire01;
trigger gt_Fire02;
trigger gt_Fire03;
trigger gt_ZerglingsRearAttackLightWaves;
trigger gt_HydraSquish;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_RescueUnits () {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
    if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == true)) {
        gv_statStructuresRescued += 1;
    }
    else {
        gv_achievementDropPodForcesRescued += 1;
    }
}

void gf_CreateRescuable (int lp_region, int lp_index, fixed lp_delayTillNextDrop) {
    int auto2FFACB24_val;

    // Variable Declarations
    int lv_int1;
    int lv_int2;
    region lv_region;
    unitgroup lv_unitgroup;

    // Variable Initialization
    lv_int1 = 0;
    lv_int2 = 0;
    lv_region = null;
    lv_unitgroup = UnitGroupEmpty();

    // Implementation
    auto2FFACB24_val = lp_region;
    if (auto2FFACB24_val == 0) {
        lv_int1 = 1;
    }
    else if (auto2FFACB24_val == 1) {
        lv_int1 = 2;
    }
    else if (auto2FFACB24_val == 2) {
        lv_int1 = 3;
    }
    else {
    }
    lv_int2 = lp_index;
    lv_region = gv_rescuablesRegions[lv_int1][lv_int2];
    libNtve_gf_AddUnitGroupToUnitGroup(gv_nextRescuableGroup, lv_unitgroup);
    UnitGroupClear(gv_nextRescuableGroup);
    if ((UnitGroupCount(gv_rescuableUnitGroup[lv_int1][lv_int2], c_unitCountAlive) == 0)) {
        libCamp_gf_CreateDropPod(0, RegionGetCenter(lv_region), lv_unitgroup, true);
        if ((CameraGetTarget(gv_p01_USER) != RegionGetCenter(RegionCircle(RegionGetCenter(lv_region), 10.0)))) {
            SoundPlay(SoundLink("Ghost_DropPodImpact", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
        }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(lv_region), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.7);
        gv_rescuablePings[lv_int1][lv_int2] = PingLastCreated();
        PingSetTooltip(gv_rescuablePings[lv_int1][lv_int2], StringExternal("Param/Value/7BE2BBA5"));
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/D9B277EB"), null, RegionGetCenter(lv_region));
        UnitGroupIssueOrder(lv_unitgroup, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopBegin(lv_unitgroup);
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "PalletMinerals") && (UnitGetType(UnitGroupLoopCurrent()) == "PalletGas")) {
                UnitGroupRemove(lv_unitgroup, UnitGroupLoopCurrent());
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        libNtve_gf_AddUnitGroupToUnitGroup(lv_unitgroup, gv_rescuableUnitGroup[lv_int1][lv_int2]);
        Wait(1.0, c_timeGame);
        if ((lp_delayTillNextDrop > 5.0)) {
            Wait((lp_delayTillNextDrop - 5.0), c_timeGame);
        }
        else {
            Wait(lp_delayTillNextDrop, c_timeGame);
        }
    }
    else {
    }
}

void gf_PrepareRescuableDrop (int lp_int, string lp_unitType) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(lp_int, lp_unitType, 0, gv_p08_RESCUABLE, PointFromId(313));
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_nextRescuableGroup);
}

void gf_PrepareGankTeam (int lp_num, string lp_gankUnitType, region lp_spawnRegion, unitgroup lp_unitGroup) {
    int auto0931D563_n;
    int auto0931D563_i;
    int autoAC8E8DC3_n;
    int autoAC8E8DC3_i;

    // Implementation
    if ((libNtve_gf_UnitMoverExists(lp_gankUnitType, "Fly") == true)) {
        autoAC8E8DC3_n = lp_num;
        autoAC8E8DC3_i = 1;
        while (autoAC8E8DC3_i <= autoAC8E8DC3_n) {
            UnitCreate(1, lp_gankUnitType, 0, gv_p07_ZERG_PINK, RegionRandomPoint(gf_GetClosestRegionToSpawn(lp_spawnRegion)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_spawnRegion)), c_orderQueueReplace);
            UnitGroupAdd(lp_unitGroup, UnitLastCreated());
            autoAC8E8DC3_i = autoAC8E8DC3_i + 1;
        }
    }
    else {
        auto0931D563_n = lp_num;
        auto0931D563_i = 1;
        while (auto0931D563_i <= auto0931D563_n) {
            UnitCreate(1, lp_gankUnitType, 0, gv_p07_ZERG_PINK, RegionRandomPoint(lp_spawnRegion), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "LarvaWander", UnitLastCreated(), 1);
            UnitGroupAdd(lp_unitGroup, UnitLastCreated());
            auto0931D563_i = auto0931D563_i + 1;
        }
    }
}

region gf_GetClosestRegionToSpawn (region lp_region) {
    // Variable Declarations
    fixed lv_distancetobase1;
    fixed lv_distancetobase2;
    fixed lv_distancetobase3;
    fixed lv_distancetobase4;

    // Variable Initialization
    lv_distancetobase1 = 0.0;
    lv_distancetobase2 = 0.0;
    lv_distancetobase3 = 0.0;
    lv_distancetobase4 = 0.0;

    // Implementation
    lv_distancetobase1 = DistanceBetweenPoints(RegionGetCenter(lp_region), RegionGetCenter(RegionFromId(52)));
    lv_distancetobase2 = DistanceBetweenPoints(RegionGetCenter(lp_region), RegionGetCenter(RegionFromId(53)));
    lv_distancetobase3 = DistanceBetweenPoints(RegionGetCenter(lp_region), RegionGetCenter(RegionFromId(55)));
    if ((lv_distancetobase1 <= lv_distancetobase2) && (lv_distancetobase1 <= lv_distancetobase3)) {
        return RegionFromId(52);
    }
    else {
    }
    if ((lv_distancetobase2 <= lv_distancetobase1) && (lv_distancetobase2 <= lv_distancetobase3)) {
        return RegionFromId(53);
    }
    else {
    }
    if ((lv_distancetobase3 <= lv_distancetobase1) && (lv_distancetobase3 <= lv_distancetobase2)) {
        return RegionFromId(55);
    }
    else {
    }
    return RegionFromId(52);
}

region gf_GetClosestRegionToRetreat (point lp_point) {
    // Variable Declarations
    fixed lv_distancetobase1;
    fixed lv_distancetobase2;
    fixed lv_distancetobase3;

    // Variable Initialization
    lv_distancetobase1 = 0.0;
    lv_distancetobase2 = 0.0;
    lv_distancetobase3 = 0.0;

    // Implementation
    lv_distancetobase1 = DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromId(16)));
    lv_distancetobase2 = DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromId(19)));
    lv_distancetobase3 = DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromId(20)));
    if ((lv_distancetobase1 <= lv_distancetobase2) && (lv_distancetobase1 <= lv_distancetobase3)) {
        return RegionFromId(16);
    }
    else {
    }
    if ((lv_distancetobase2 <= lv_distancetobase1) && (lv_distancetobase2 <= lv_distancetobase3)) {
        return RegionFromId(19);
    }
    else {
    }
    if ((lv_distancetobase3 <= lv_distancetobase1) && (lv_distancetobase3 <= lv_distancetobase2)) {
        return RegionFromId(20);
    }
    else {
    }
    return RegionFromId(16);
}

void gf_GoGank (unitgroup lp_gankers, region lp_gankRegion) {
    // Implementation
    UnitGroupLoopBegin(lp_gankers);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lp_gankRegion)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!(((UnitGroupCount(lp_gankers, c_unitCountAlive) == 0) || (UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, lp_gankRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)))) {
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_AddUnitGroupToUnitGroup(lp_gankers, gv_gankGroupRemoval);
    UnitGroupLoopBegin(lp_gankers);
    while (!UnitGroupLoopDone()) {
        if ((UnitMoverExists(UnitGroupLoopCurrent(), "Fly") == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lp_gankRegion)), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gf_GetClosestRegionToRetreat(UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lp_gankRegion)), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

void gf_CreateBuildingDropPod (string lp_buildingType, point lp_landingPoint, int lp_buildingDropPodType, int lp_normalBuildingDropPodFlyability, fixed lp_buildingHP) {
    // Variable Declarations
    fixed lv_initialHeight;
    fixed lv_totalDeltaHeight;

    // Variable Initialization
    lv_initialHeight = 0.0;
    lv_totalDeltaHeight = 0.0;

    // Implementation
    lv_initialHeight = 10.0;
    if ((lp_buildingDropPodType == 0)) {
        gv_bDPSpeed = 60;
        if ((lp_normalBuildingDropPodFlyability == 0)) {
            lv_totalDeltaHeight = (lv_initialHeight - 3.25);
        }
        else {
            lv_totalDeltaHeight = (lv_initialHeight - 0.0);
        }
    }
    else {
        gv_bDPSpeed = 25;
        lv_totalDeltaHeight = (lv_initialHeight - 1.0);
    }
    gv_bDPDeltaWait = (1.0 / IntToFixed(gv_bDPSpeed));
    gv_bDPDropType = lp_buildingDropPodType;
    gv_bDPLandingPoint = lp_landingPoint;
    gv_bDPCurrentFlyingHeight = lv_initialHeight;
    gv_bDPDeltaFlyingHeight = (lv_totalDeltaHeight / IntToFixed(gv_bDPSpeed));
    UnitCreate(1, lp_buildingType, 0, gv_p08_RESCUABLE, gv_bDPLandingPoint, 225.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lp_buildingHP);
    libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, lv_initialHeight);
    UnitSetPosition(UnitLastCreated(), lp_landingPoint, false);
    gv_bDPDroppedBuilding = UnitLastCreated();
    TriggerExecute(gt_CreateBuildingDropPodActions, true, false);
}

void gf_SpawnNydusWorm (point lp_spawnPoint, int lp_player, int lp_packs, int lp_packSize, string lp_type, fixed lp_cooldown) {
    // Implementation
    gv_tempNydusPlayer = lp_player;
    gv_tempNydusPoint = lp_spawnPoint;
    gv_tempNydusPacks = lp_packs;
    gv_tempNydusPackSize = lp_packSize;
    gv_tempNydusType = lp_type;
    gv_tempNydusCooldown = lp_cooldown;
    TriggerExecute(gt_NydusSpawningTrigger, true, false);
}

void gf_AddUpgradetoZergPlayers (int lp_int, string lp_upgrade) {
    // Implementation
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), lp_upgrade, lp_int);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
}

trigger auto_gf_SpawnCrashingDoodad_Trigger = null;
point auto_gf_SpawnCrashingDoodad_lp_crashPoint;
string auto_gf_SpawnCrashingDoodad_lp_crashingDoodadType;

void gf_SpawnCrashingDoodad (point lp_crashPoint, string lp_crashingDoodadType) {
    auto_gf_SpawnCrashingDoodad_lp_crashPoint = lp_crashPoint;
    auto_gf_SpawnCrashingDoodad_lp_crashingDoodadType = lp_crashingDoodadType;

    if (auto_gf_SpawnCrashingDoodad_Trigger == null) {
        auto_gf_SpawnCrashingDoodad_Trigger = TriggerCreate("auto_gf_SpawnCrashingDoodad_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnCrashingDoodad_Trigger, false, false);
}

bool auto_gf_SpawnCrashingDoodad_TriggerFunc (bool testConds, bool runActions) {
    point lp_crashPoint = auto_gf_SpawnCrashingDoodad_lp_crashPoint;
    string lp_crashingDoodadType = auto_gf_SpawnCrashingDoodad_lp_crashingDoodadType;

    // Variable Declarations
    actor lv_crashingDoodad;

    // Variable Initialization
    lv_crashingDoodad = null;

    // Implementation
    libNtve_gf_CreateActorAtPoint(lp_crashingDoodadType, RegionRandomPoint(RegionFromId(87)));
    lv_crashingDoodad = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeModelFaceAngle(lv_crashingDoodad, RandomFixed(135.0, 225.0));
    libNtve_gf_PlayAnimation(lv_crashingDoodad, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_crashingDoodad, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(26);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_Init08Variables, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p02_ZERG_PURPLE_NE, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p02_ZERG_PURPLE_NE, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p05_ZERG_ORANGE_NW, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p06_ZERG_GREEN_SW, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p07_ZERG_PINK, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p10_ZERG_WHITEHIVE, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p07_ZERG_PINK, "Burrow", 1);
    TechTreeUpgradeAddLevel(gv_p10_ZERG_WHITEHIVE, "Burrow", 1);
    TechTreeRestrictionsEnable(gv_p03_DOMINION_RED, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_ZERG_PURPLE_NE, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_DOMINION_RED, 1);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_WARFIELD, 0);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_ZERG_ORANGE_NW, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p06_ZERG_GREEN_SW, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p07_ZERG_PINK, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p08_RESCUABLE, 1);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p09_ACTORDOMINION, 8);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p10_ZERG_WHITEHIVE, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p10_ZERG_WHITEHIVE, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p11_ZERG_YELLOWSPORECANNON, 5);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p03_DOMINION_RED, 5);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p04_WARFIELD, 5);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p05_ZERG_ORANGE_NW, 2);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p06_ZERG_GREEN_SW, 2);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p07_ZERG_PINK, 2);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p08_RESCUABLE, 5);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p09_ACTORDOMINION, 5);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p10_ZERG_WHITEHIVE, 1);
    libNtve_gf_SetAlliance(gv_p02_ZERG_PURPLE_NE, gv_p11_ZERG_YELLOWSPORECANNON, 2);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_RED, gv_p04_WARFIELD, 0);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_RED, gv_p05_ZERG_ORANGE_NW, 5);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_RED, gv_p06_ZERG_GREEN_SW, 5);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_RED, gv_p07_ZERG_PINK, 5);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_RED, gv_p08_RESCUABLE, 8);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_RED, gv_p09_ACTORDOMINION, 8);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_RED, gv_p10_ZERG_WHITEHIVE, 5);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_RED, gv_p11_ZERG_YELLOWSPORECANNON, 5);
    libNtve_gf_SetAlliance(gv_p04_WARFIELD, gv_p05_ZERG_ORANGE_NW, 5);
    libNtve_gf_SetAlliance(gv_p04_WARFIELD, gv_p06_ZERG_GREEN_SW, 5);
    libNtve_gf_SetAlliance(gv_p04_WARFIELD, gv_p07_ZERG_PINK, 5);
    libNtve_gf_SetAlliance(gv_p04_WARFIELD, gv_p08_RESCUABLE, 7);
    libNtve_gf_SetAlliance(gv_p04_WARFIELD, gv_p09_ACTORDOMINION, 7);
    libNtve_gf_SetAlliance(gv_p04_WARFIELD, gv_p10_ZERG_WHITEHIVE, 5);
    libNtve_gf_SetAlliance(gv_p04_WARFIELD, gv_p11_ZERG_YELLOWSPORECANNON, 5);
    libNtve_gf_SetAlliance(gv_p05_ZERG_ORANGE_NW, gv_p06_ZERG_GREEN_SW, 2);
    libNtve_gf_SetAlliance(gv_p05_ZERG_ORANGE_NW, gv_p07_ZERG_PINK, 2);
    libNtve_gf_SetAlliance(gv_p05_ZERG_ORANGE_NW, gv_p08_RESCUABLE, 5);
    libNtve_gf_SetAlliance(gv_p05_ZERG_ORANGE_NW, gv_p09_ACTORDOMINION, 5);
    libNtve_gf_SetAlliance(gv_p05_ZERG_ORANGE_NW, gv_p10_ZERG_WHITEHIVE, 2);
    libNtve_gf_SetAlliance(gv_p05_ZERG_ORANGE_NW, gv_p11_ZERG_YELLOWSPORECANNON, 2);
    libNtve_gf_SetAlliance(gv_p06_ZERG_GREEN_SW, gv_p07_ZERG_PINK, 1);
    libNtve_gf_SetAlliance(gv_p06_ZERG_GREEN_SW, gv_p08_RESCUABLE, 5);
    libNtve_gf_SetAlliance(gv_p06_ZERG_GREEN_SW, gv_p09_ACTORDOMINION, 5);
    libNtve_gf_SetAlliance(gv_p06_ZERG_GREEN_SW, gv_p10_ZERG_WHITEHIVE, 2);
    libNtve_gf_SetAlliance(gv_p06_ZERG_GREEN_SW, gv_p11_ZERG_YELLOWSPORECANNON, 2);
    libNtve_gf_SetAlliance(gv_p07_ZERG_PINK, gv_p08_RESCUABLE, 5);
    libNtve_gf_SetAlliance(gv_p07_ZERG_PINK, gv_p09_ACTORDOMINION, 5);
    libNtve_gf_SetAlliance(gv_p07_ZERG_PINK, gv_p10_ZERG_WHITEHIVE, 2);
    libNtve_gf_SetAlliance(gv_p07_ZERG_PINK, gv_p11_ZERG_YELLOWSPORECANNON, 2);
    libNtve_gf_SetAlliance(gv_p08_RESCUABLE, gv_p09_ACTORDOMINION, 8);
    libNtve_gf_SetAlliance(gv_p08_RESCUABLE, gv_p10_ZERG_WHITEHIVE, 5);
    libNtve_gf_SetAlliance(gv_p08_RESCUABLE, gv_p11_ZERG_YELLOWSPORECANNON, 5);
    libNtve_gf_SetAlliance(gv_p09_ACTORDOMINION, gv_p10_ZERG_WHITEHIVE, 5);
    libNtve_gf_SetAlliance(gv_p09_ACTORDOMINION, gv_p11_ZERG_YELLOWSPORECANNON, 5);
    libNtve_gf_SetAlliance(gv_p10_ZERG_WHITEHIVE, gv_p11_ZERG_YELLOWSPORECANNON, 2);
    PlayerGroupAdd(gv_zergPlayers, gv_p02_ZERG_PURPLE_NE);
    PlayerGroupAdd(gv_zergPlayers, gv_p05_ZERG_ORANGE_NW);
    PlayerGroupAdd(gv_zergPlayers, gv_p06_ZERG_GREEN_SW);
    PlayerGroupAdd(gv_zergPlayers, gv_p07_ZERG_PINK);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_p03_DOMINION_RED, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_DOMINION_RED, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p02_ZERG_PURPLE_NE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p02_ZERG_PURPLE_NE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_ZERG_ORANGE_NW, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_ZERG_ORANGE_NW, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p06_ZERG_GREEN_SW, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p06_ZERG_GREEN_SW, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p07_ZERG_PINK, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p07_ZERG_PINK, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_p04_WARFIELD, c_playerStateShowScore, false);
    PlayerSetState(gv_p05_ZERG_ORANGE_NW, c_playerStateShowScore, false);
    PlayerSetState(gv_p06_ZERG_GREEN_SW, c_playerStateShowScore, false);
    PlayerSetState(gv_p07_ZERG_PINK, c_playerStateShowScore, false);
    PlayerSetState(gv_p09_ACTORDOMINION, c_playerStateShowScore, false);
    PlayerSetState(gv_p11_ZERG_YELLOWSPORECANNON, c_playerStateShowScore, false);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
    PlayerSetColorIndex(gv_p02_ZERG_PURPLE_NE, 4, true);
    PlayerSetColorIndex(gv_p05_ZERG_ORANGE_NW, 4, true);
    PlayerSetColorIndex(gv_p06_ZERG_GREEN_SW, 4, true);
    PlayerSetColorIndex(gv_p07_ZERG_PINK, 4, true);
    PlayerSetColorIndex(gv_p10_ZERG_WHITEHIVE, 4, true);
    PlayerSetColorIndex(gv_p11_ZERG_YELLOWSPORECANNON, 4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("InfestedCC", gv_p10_ZERG_WHITEHIVE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ColonyInfestation", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedBarracks", gv_p10_ZERG_WHITEHIVE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ColonyInfestation", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedBunker", gv_p10_ZERG_WHITEHIVE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ColonyInfestation", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Medic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_p03_DOMINION_RED, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_DOMINION_RED, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedTerranCampaign", gv_p10_ZERG_WHITEHIVE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitAbilityEnable(UnitGroupLoopCurrent(), "BurrowInfestedTerranCampaignDown", false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_sCVGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZerglingBurrowed", gv_p07_ZERG_PINK, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_zergRushGroup01, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZerglingBurrowed", gv_p07_ZERG_PINK, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_zergRushGroup02, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZerglingBurrowed", gv_p07_ZERG_PINK, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_zergRushGroup03, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_sandbag01 = UnitFromId(745);
    gv_sandbag02 = UnitFromId(1296);
    gv_sandbag03 = UnitFromId(743);
    gv_sandbag04 = UnitFromId(801);
    gv_sandbag05 = UnitFromId(854);
    gv_sandbag06 = UnitFromId(1217);
    gv_sandbag07 = UnitFromId(1379);
    gv_sandbag08 = UnitFromId(1380);
    gv_sandbag09 = UnitFromId(1381);
    gv_sandbag10 = UnitFromId(1383);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    FogSetDensity(0.2);
    FogSetColor(Color(0,0,0));
    CreepModify(PointFromId(8), 10.0, true, true);
    CreepModify(PointFromId(9), 10.0, true, true);
    CreepModify(PointFromId(122), 10.0, true, true);
    CreepModify(PointFromId(124), 10.0, true, true);
    CreepModify(PointFromId(125), 10.0, true, true);
    CreepModify(PointFromId(127), 10.0, true, true);
    CreepModify(PointFromId(128), 10.0, true, true);
    CreepModify(PointFromId(129), 10.0, true, true);
    CreepModify(PointFromId(132), 10.0, true, true);
    CreepModify(PointFromId(134), 10.0, true, true);
    CreepModify(PointFromId(136), 10.0, true, true);
    CreepModify(PointFromId(137), 10.0, true, true);
    CreepModify(PointFromId(22), 10.0, true, true);
    CreepModify(PointFromId(138), 10.0, true, true);
    CreepModify(PointFromId(139), 10.0, true, true);
    CreepModify(PointFromId(140), 10.0, true, true);
    CreepModify(PointFromId(145), 10.0, true, true);
    CreepModify(PointFromId(149), 10.0, true, true);
    CreepModify(PointFromId(150), 10.0, true, true);
    CreepModify(PointFromId(151), 10.0, true, true);
    CreepModify(PointFromId(153), 10.0, true, true);
    CreepModify(PointFromId(154), 10.0, true, true);
    CreepModify(PointFromId(154), 10.0, true, true);
    CreepModify(PointFromId(28), 10.0, true, true);
    CreepModify(PointFromId(155), 10.0, true, true);
    CreepModify(PointFromId(156), 10.0, true, true);
    CreepModify(PointFromId(157), 10.0, true, true);
    CreepModify(PointFromId(167), 10.0, true, true);
    CreepModify(PointFromId(33), 10.0, true, true);
    CreepModify(PointFromId(112), 10.0, true, true);
    CreepModify(PointFromId(113), 10.0, true, true);
    CreepModify(PointFromId(118), 10.0, true, true);
    CreepModify(PointFromId(119), 10.0, true, true);
    CreepModify(PointFromId(120), 10.0, true, true);
    CreepModify(PointFromId(105), 10.0, true, true);
    CreepModify(PointFromId(186), 10.0, true, true);
    CreepModify(PointFromId(196), 10.0, true, true);
    CreepModify(PointFromId(214), 10.0, true, true);
    CreepModify(PointFromId(215), 10.0, true, true);
    CreepModify(PointFromId(216), 10.0, true, true);
    CreepModify(PointFromId(217), 10.0, true, true);
    CreepModify(PointFromId(218), 10.0, true, true);
    CreepModify(PointFromId(220), 10.0, true, true);
    CreepModify(PointFromId(241), 10.0, true, true);
    CreepModify(PointFromId(242), 10.0, true, true);
    CreepModify(PointFromId(244), 10.0, true, true);
    CreepModify(PointFromId(187), 10.0, true, true);
    CreepModify(PointFromId(246), 10.0, true, true);
    CreepModify(PointFromId(247), 10.0, true, true);
    CreepModify(PointFromId(250), 10.0, true, true);
    CreepModify(PointFromId(302), 10.0, true, true);
    CreepModify(PointFromId(188), 10.0, true, true);
    CreepModify(PointFromId(189), 10.0, true, true);
    CreepModify(PointFromId(190), 10.0, true, true);
    CreepModify(PointFromId(191), 10.0, true, true);
    CreepModify(PointFromId(192), 10.0, true, true);
    CreepModify(PointFromId(193), 10.0, true, true);
    CreepModify(PointFromId(194), 10.0, true, true);
    CreepModify(PointFromId(19), 10.0, true, true);
    CreepModify(PointFromId(20), 10.0, true, true);
    CreepModify(PointFromId(37), 10.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(55, 0, 0, 0) == 55)) {
        PlayerModifyPropertyInt(gv_p02_ZERG_PURPLE_NE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p05_ZERG_ORANGE_NW, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p06_ZERG_GREEN_SW, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p07_ZERG_PINK, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p07_ZERG_PINK, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p08_RESCUABLE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p10_ZERG_WHITEHIVE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }
    else {
    }
    gf_AddUpgradetoZergPlayers(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
    gf_AddUpgradetoZergPlayers(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
    gf_AddUpgradetoZergPlayers(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergFlyerWeaponsLevel1");
    gf_AddUpgradetoZergPlayers(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergFlyerArmorsLevel1");
    gf_AddUpgradetoZergPlayers(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "zerglingmovementspeed");
    gf_AddUpgradetoZergPlayers(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "GlialReconstitution");
    UnitGroupLoopBegin(UnitGroup("SporeCannon", gv_p06_ZERG_GREEN_SW, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(400.0, 400.0, 700.0, 1000.0));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_nydusWormMaximumHP = libNtve_gf_DifficultyValueFixed(600.0, 1000.0, 1000.0, 1000.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1189));
    UnitSetScale(UnitLastCreated(), 130.0, 130.0, 130.0);
    gv_nydusOBJ01 = UnitLastCreated();
    UnitSetPropertyFixed(gv_nydusOBJ01, c_unitPropLifeMax, gv_nydusWormMaximumHP);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
    UnitSetScale(UnitLastCreated(), 130.0, 130.0, 130.0);
    gv_nydusOBJ02 = UnitLastCreated();
    UnitSetPropertyFixed(gv_nydusOBJ02, c_unitPropLifeMax, gv_nydusWormMaximumHP);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
    UnitSetScale(UnitLastCreated(), 130.0, 130.0, 130.0);
    gv_nydusOBJ03 = UnitLastCreated();
    UnitSetPropertyFixed(gv_nydusOBJ03, c_unitPropLifeMax, gv_nydusWormMaximumHP);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ01, false);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ02, false);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ03, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scourge", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCannon", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Vulture", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Variables
//--------------------------------------------------------------------------------------------------
bool gt_Init08Variables_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_rescuablesRegions[1][1] = RegionFromId(3);
    gv_rescuablesRegions[1][2] = RegionFromId(6);
    gv_rescuablesRegions[1][3] = RegionFromId(9);
    gv_rescuablesRegions[1][4] = RegionFromId(13);
    gv_rescuablesRegions[2][1] = RegionFromId(4);
    gv_rescuablesRegions[2][2] = RegionFromId(7);
    gv_rescuablesRegions[2][3] = RegionFromId(10);
    gv_rescuablesRegions[2][4] = RegionFromId(14);
    gv_rescuablesRegions[3][1] = RegionFromId(5);
    gv_rescuablesRegions[3][2] = RegionFromId(8);
    gv_rescuablesRegions[3][3] = RegionFromId(11);
    gv_rescuablesRegions[3][4] = RegionFromId(15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Variables_Init () {
    gt_Init08Variables = TriggerCreate("gt_Init08Variables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartUpgradesAdv, true, false);
    TriggerExecute(gt_StartUpgradesExp, true, false);
    Wait(0.2, c_timeGame);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/D729169D"), null, UnitGetPosition(UnitFromId(11)));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_p01_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveTroopSupplyCreateQ, true, false);
    TriggerExecute(gt_StorymodeTipsQ, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogueCommanderTacticalAnalysisTheZergGreatlyOutnumberQ, true, false);
    Wait(6.0, c_timeGame);
    TriggerEnable(gt_ZergAmbientAttackBothSidesNew, true);
    TriggerExecute(gt_ZergStartAttack, true, false);
    TriggerExecute(gt_DropPodallPodSpawnsQ, true, false);
    TriggerExecute(gt_ObjectiveNydusWormsCreateHidden, true, false);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_DialogueKeepMeUpdatedIfWeCanReachQ, true, false);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_FirstDropDialogue, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Drop Dialogue
//--------------------------------------------------------------------------------------------------
bool gt_FirstDropDialogue_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DialogueSirIveLocatedAnIncomingDropPodQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstDropDialogue_Init () {
    gt_FirstDropDialogue = TriggerCreate("gt_FirstDropDialogue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Drop Pod Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstDropPodSpawnQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroupTroops;

    // Variable Initialization
    lv_unitGroupTroops = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_p01_USER, RegionFromId(59), 5.0, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Marine", 0, gv_p08_RESCUABLE, PointFromId(29));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_unitGroupTroops);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(388), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_dropPodFirstPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/92BED181"));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/75330D98"), null, PointFromId(388));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 1.0, 100.0, 2.0);
    libCamp_gf_CreateDropPod(0, PointFromId(388), lv_unitGroupTroops, false);
    CameraPan(gv_p01_USER, PointWithOffset(PointFromId(1188), 0.0, 0.0), 1.5, -1, 10, true);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_DialogueAlrightletsGetOutThereQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstDropPodSpawnQ_Init () {
    gt_FirstDropPodSpawnQ = TriggerCreate("gt_FirstDropPodSpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Drop Rescue
//--------------------------------------------------------------------------------------------------
bool gt_FirstDropRescue_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_drop01Done == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_dropPodFirstPing);
    gv_statDropPodsRescued += 1;
    TriggerExecute(gt_AchievementRescuealldroppods, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1188)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogueRaynorsRaidersFiveLinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstDropRescue_Init () {
    gt_FirstDropRescue = TriggerCreate("gt_FirstDropRescue_Func");
    TriggerAddEventTimePeriodic(gt_FirstDropRescue, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Initiate
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardInitiate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_LeaderboardCreate, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DominionTroopsTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardInitiate_Init () {
    gt_LeaderboardInitiate = TriggerCreate("gt_LeaderboardInitiate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod all Pod Spawns Q
//--------------------------------------------------------------------------------------------------
bool gt_DropPodallPodSpawnsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(167.0, c_timeGame);
    TimerStart(gv_dropPodTimer, c_timerDurationInfinite, false, c_timeGame);
    gf_PrepareRescuableDrop(3, "Marauder");
    gf_PrepareRescuableDrop(2, "Marine");
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    TriggerExecute(gt_Gank_Drop02Marauder, true, false);
    TriggerExecute(gt_DialogueSirIveDetectedaDropPodInYourVicinityQ, true, false);
    gf_CreateRescuable(0, 1, 0.0);
    libNtve_gf_WaitForTimer(gv_dropPodTimer, 115.0, true);
    TimerStart(gv_dropPodTimer, c_timerDurationInfinite, false, c_timeGame);
    TriggerExecute(gt_RescueFactorySpawnQ, true, false);
    TriggerExecute(gt_DialogueSendingCoordinatesToANearbyDroppodQ, true, false);
    gf_CreateRescuable(1, 1, 0.0);
    libNtve_gf_WaitForTimer(gv_dropPodTimer, 150.0, true);
    TimerStart(gv_dropPodTimer, c_timerDurationInfinite, false, c_timeGame);
    gf_PrepareRescuableDrop(2, "SiegeTank");
    gf_PrepareRescuableDrop(4, "Marine");
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    TriggerExecute(gt_Gank_Drop04Tanks, true, false);
    TriggerExecute(gt_DialogueSirAnotherDropPodIsComingDownQ, true, false);
    gf_CreateRescuable(2, 1, 0.0);
    libNtve_gf_WaitForTimer(gv_dropPodTimer, 120.0, true);
    TimerStart(gv_dropPodTimer, c_timerDurationInfinite, false, c_timeGame);
    TriggerExecute(gt_RescueStarportSpawnQ, true, false);
    TriggerExecute(gt_DialogueSirAnotherDropPodHasArrivedNearYourPerimeterQ, true, false);
    libNtve_gf_WaitForTimer(gv_dropPodTimer, 150.0, true);
    TimerStart(gv_dropPodTimer, c_timerDurationInfinite, false, c_timeGame);
    gf_PrepareRescuableDrop(4, "Goliath");
    gf_PrepareRescuableDrop(4, "Marine");
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    TriggerExecute(gt_Gank_Drop06Goliaths, true, false);
    TriggerExecute(gt_DialogueYouveGotAnotherDropPodLandingNearByQ, true, false);
    gf_CreateRescuable(1, 1, 0.0);
    libNtve_gf_WaitForTimer(gv_dropPodTimer, 120.0, true);
    TimerStart(gv_dropPodTimer, c_timerDurationInfinite, false, c_timeGame);
    gf_PrepareRescuableDrop(3, "Banshee");
    gf_PrepareRescuableDrop(3, "Hellion");
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    TriggerExecute(gt_DialogueSirIReadMultipleDropPodsEnteringTheAtmosphereQ, true, false);
    TriggerExecute(gt_Gank_Drop07SplitBanshees, true, false);
    gf_CreateRescuable(0, 2, 1.0);
    gf_PrepareRescuableDrop(4, "VikingAssault");
    gf_PrepareRescuableDrop(2, "Hellion");
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    TriggerExecute(gt_Gank_Drop08SplitViking, true, false);
    gf_CreateRescuable(1, 2, 0.0);
    libNtve_gf_WaitForTimer(gv_dropPodTimer, 150.0, true);
    TimerStart(gv_dropPodTimer, c_timerDurationInfinite, false, c_timeGame);
    gf_PrepareRescuableDrop(8, "Marine");
    gf_PrepareRescuableDrop(1, "Thor");
    gv_thor01 = UnitLastCreated();
    gf_PrepareRescuableDrop(1, "Thor");
    gv_thor02 = UnitLastCreated();
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    TriggerExecute(gt_DialogueTheresAnotherWaveOfDropPodsComingInQ, true, false);
    TriggerExecute(gt_Gank_Drop09SplitThors, true, false);
    gf_CreateRescuable(1, 3, 1.0);
    gf_PrepareRescuableDrop(8, "Marine");
    gf_PrepareRescuableDrop(2, "Battlecruiser");
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    TriggerExecute(gt_Gank_Drop10SplitBattlecruiser, true, false);
    gf_CreateRescuable(0, 3, 0.0);
    libNtve_gf_WaitForTimer(gv_dropPodTimer, 20.0, true);
    TriggerExecute(gt_DialogueCommanderTheLastOfTheDominionDropPodsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodallPodSpawnsQ_Init () {
    gt_DropPodallPodSpawnsQ = TriggerCreate("gt_DropPodallPodSpawnsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop01 Marines
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop01Marines_Func (bool testConds, bool runActions) {
    int autoF82AF15F_n;
    int autoF82AF15F_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(6, 5, 6, 8), "ZerglingBurrowed", RegionFromId(30), gv_gankGroupDrop01);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "HydraliskBurrowed", RegionFromId(30), gv_gankGroupDrop01);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(30)), 12.0));
    gv_revealerGankDrop01 = VisRevealerLastCreated();
    autoF82AF15F_n = libNtve_gf_DifficultyValueInt(70, 70, 60, 60);
    autoF82AF15F_i = 1;
    while (autoF82AF15F_i <= autoF82AF15F_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        autoF82AF15F_i = autoF82AF15F_i + 1;
    }
    PingDestroy(gv_dropPodFirstPing);
    gf_GoGank(gv_gankGroupDrop01, RegionFromId(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop01Marines_Init () {
    gt_Gank_Drop01Marines = TriggerCreate("gt_Gank_Drop01Marines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop02 Marauder
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop02Marauder_Func (bool testConds, bool runActions) {
    int autoE25E057C_n;
    int autoE25E057C_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(13, 13, 15, 16), "ZerglingBurrowed", RegionFromId(21), gv_gankGroupDrop02);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(21)), 12.0));
    gv_revealerGankDrop02 = VisRevealerLastCreated();
    autoE25E057C_n = libNtve_gf_DifficultyValueInt(70, 70, 60, 60);
    autoE25E057C_i = 1;
    while (autoE25E057C_i <= autoE25E057C_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        autoE25E057C_i = autoE25E057C_i + 1;
    }
    gf_GoGank(gv_gankGroupDrop02, RegionFromId(3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop02Marauder_Init () {
    gt_Gank_Drop02Marauder = TriggerCreate("gt_Gank_Drop02Marauder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop03 Factory
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop03Factory_Func (bool testConds, bool runActions) {
    int autoB66C835D_n;
    int autoB66C835D_i;

    // Variable Declarations
    unit lv_gankSunken01;
    unit lv_gankSunken02;
    unit lv_gankSunken03;

    // Variable Initialization
    lv_gankSunken01 = null;
    lv_gankSunken02 = null;
    lv_gankSunken03 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(5, 4, 5, 4), "Hydralisk", RegionFromId(31), gv_gankGroupDrop03);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Roach", RegionFromId(31), gv_gankGroupDrop03);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(0, 0, 0, 3), "Baneling", RegionFromId(31), gv_gankGroupDrop03);
    UnitCreate(1, "SpineCrawlerUprooted", 0, gv_p07_ZERG_PINK, PointFromId(36), libNtve_gf_RandomAngle());
    lv_gankSunken01 = UnitLastCreated();
    UnitGroupAdd(gv_gankGroupDrop03, lv_gankSunken01);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        UnitCreate(1, "SpineCrawlerUprooted", 0, gv_p07_ZERG_PINK, PointFromId(29), libNtve_gf_RandomAngle());
        lv_gankSunken02 = UnitLastCreated();
        UnitGroupAdd(gv_gankGroupDrop03, lv_gankSunken02);
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitCreate(1, "SpineCrawlerUprooted", 0, gv_p07_ZERG_PINK, PointFromId(108), libNtve_gf_RandomAngle());
        lv_gankSunken03 = UnitLastCreated();
        UnitGroupAdd(gv_gankGroupDrop03, lv_gankSunken03);
    }
    else {
    }
    libCamp_gf_CreateDropPod(1, PointFromId(705), gv_gankGroupDrop03, false);
    Wait(5.0, c_timeGame);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(12)), 12.0));
    gv_revealerGankDrop03 = VisRevealerLastCreated();
    UnitGroupLoopBegin(gv_gankGroupDrop03);
    while (!UnitGroupLoopDone()) {
        UnitSetOwner(UnitGroupLoopCurrent(), gv_p07_ZERG_PINK, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 1.0, 100.0, 2.0);
    UnitIssueOrder(lv_gankSunken01, OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(498)), c_orderQueueReplace);
    UnitIssueOrder(lv_gankSunken02, OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(687)), c_orderQueueReplace);
    UnitIssueOrder(lv_gankSunken03, OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(700)), c_orderQueueReplace);
    autoB66C835D_n = libNtve_gf_DifficultyValueInt(70, 70, 60, 60);
    autoB66C835D_i = 1;
    while (autoB66C835D_i <= autoB66C835D_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        autoB66C835D_i = autoB66C835D_i + 1;
    }
    VisRevealerDestroy(gv_revealerGankDrop03);
    PingDestroy(gv_rescueFactoryPing);
    gf_GoGank(gv_gankGroupDrop03, RegionFromId(2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop03Factory_Init () {
    gt_Gank_Drop03Factory = TriggerCreate("gt_Gank_Drop03Factory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop04 Tanks
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop04Tanks_Func (bool testConds, bool runActions) {
    int auto9DF69CAF_n;
    int auto9DF69CAF_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(4, 4, 5, 1), "Mutalisk", RegionFromId(35), gv_gankGroupDrop04);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "BroodLord", RegionFromId(35), gv_gankGroupDrop04);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), "Hydralisk", RegionFromId(35), gv_gankGroupDrop04);
    Wait(5.0, c_timeGame);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(35)), 12.0));
    gv_revealerGankDrop04 = VisRevealerLastCreated();
    auto9DF69CAF_n = libNtve_gf_DifficultyValueInt(70, 70, 60, 60);
    auto9DF69CAF_i = 1;
    while (auto9DF69CAF_i <= auto9DF69CAF_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        auto9DF69CAF_i = auto9DF69CAF_i + 1;
    }
    gf_GoGank(gv_gankGroupDrop04, RegionFromId(5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop04Tanks_Init () {
    gt_Gank_Drop04Tanks = TriggerCreate("gt_Gank_Drop04Tanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop05 Starport
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop05Starport_Func (bool testConds, bool runActions) {
    int autoF72DB6CD_n;
    int autoF72DB6CD_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Corruptor", RegionFromId(37), gv_gankGroupDrop05);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), "Hydralisk", RegionFromId(37), gv_gankGroupDrop05);
    UnitCreate(1, "Ultralisk", 0, gv_p07_ZERG_PINK, PointFromId(29), 270.0);
    gv_gankStarportUltra = UnitLastCreated();
    UnitGroupAdd(gv_gankGroupDrop05, gv_gankStarportUltra);
    libCamp_gf_CreateDropPod(1, PointFromId(920), gv_gankGroupDrop05, false);
    Wait(5.0, c_timeGame);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(37)), 12.0));
    gv_revealerGankDrop05 = VisRevealerLastCreated();
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 1.0, 100.0, 2.0);
    Wait(0.5, c_timeGame);
    autoF72DB6CD_n = libNtve_gf_DifficultyValueInt(70, 70, 60, 60);
    autoF72DB6CD_i = 1;
    while (autoF72DB6CD_i <= autoF72DB6CD_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        autoF72DB6CD_i = autoF72DB6CD_i + 1;
    }
    PingDestroy(gv_rescueStarportPing);
    VisRevealerDestroy(gv_revealerGankDrop05);
    gf_GoGank(gv_gankGroupDrop05, RegionFromId(8));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop05Starport_Init () {
    gt_Gank_Drop05Starport = TriggerCreate("gt_Gank_Drop05Starport_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop06 Goliaths
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop06Goliaths_Func (bool testConds, bool runActions) {
    int autoC5A019C6_n;
    int autoC5A019C6_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 2, 0), "BanelingBurrowed", RegionFromId(32), gv_gankGroupDrop06);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(5, 5, 6, 2), "RoachBurrowed", RegionFromId(32), gv_gankGroupDrop06);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(12, 12, 14, 6), "Zergling", RegionFromId(32), gv_gankGroupDrop06);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Ultralisk", RegionFromId(32), gv_gankGroupDrop06);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(32)), 12.0));
    gv_revealerGankDrop06 = VisRevealerLastCreated();
    autoC5A019C6_n = libNtve_gf_DifficultyValueInt(70, 70, 60, 60);
    autoC5A019C6_i = 1;
    while (autoC5A019C6_i <= autoC5A019C6_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        autoC5A019C6_i = autoC5A019C6_i + 1;
    }
    gf_GoGank(gv_gankGroupDrop06, RegionFromId(4));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop06Goliaths_Init () {
    gt_Gank_Drop06Goliaths = TriggerCreate("gt_Gank_Drop06Goliaths_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop07 (Split) Banshees
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop07SplitBanshees_Func (bool testConds, bool runActions) {
    int autoDB437021_n;
    int autoDB437021_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(5, 5, 5, 6), "BanelingBurrowed", RegionFromId(22), gv_gankGroupDrop07);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(4, 4, 4, 4), "HydraliskBurrowed", RegionFromId(22), gv_gankGroupDrop07);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Mutalisk", RegionFromId(22), gv_gankGroupDrop07);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(22)), 12.0));
    gv_revealerGankDrop07 = VisRevealerLastCreated();
    autoDB437021_n = libNtve_gf_DifficultyValueInt(90, 90, 75, 75);
    autoDB437021_i = 1;
    while (autoDB437021_i <= autoDB437021_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        autoDB437021_i = autoDB437021_i + 1;
    }
    gf_GoGank(gv_gankGroupDrop07, RegionFromId(6));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop07SplitBanshees_Init () {
    gt_Gank_Drop07SplitBanshees = TriggerCreate("gt_Gank_Drop07SplitBanshees_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop08 (Split) Viking
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop08SplitViking_Func (bool testConds, bool runActions) {
    int auto344D604D_n;
    int auto344D604D_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(8, 8, 10, 12), "ZerglingBurrowed", RegionFromId(33), gv_gankGroupDrop08);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "RoachBurrowed", RegionFromId(33), gv_gankGroupDrop08);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "HydraliskBurrowed", RegionFromId(33), gv_gankGroupDrop08);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Mutalisk", RegionFromId(33), gv_gankGroupDrop08);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(33)), 12.0));
    gv_revealerGankDrop08 = VisRevealerLastCreated();
    auto344D604D_n = libNtve_gf_DifficultyValueInt(90, 90, 75, 75);
    auto344D604D_i = 1;
    while (auto344D604D_i <= auto344D604D_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        auto344D604D_i = auto344D604D_i + 1;
    }
    gf_GoGank(gv_gankGroupDrop08, RegionFromId(7));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop08SplitViking_Init () {
    gt_Gank_Drop08SplitViking = TriggerCreate("gt_Gank_Drop08SplitViking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop09 (Split) Thors
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop09SplitThors_Func (bool testConds, bool runActions) {
    int autoED0F0911_n;
    int autoED0F0911_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(22, 22, 0, 6), "ZerglingBurrowed", RegionFromId(34), gv_gankGroupDrop09);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(4, 4, 2, 0), "RoachBurrowed", RegionFromId(34), gv_gankGroupDrop09);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "UltraliskBurrowed", RegionFromId(34), gv_gankGroupDrop09);
    Wait(5.0, c_timeGame);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(34)), 12.0));
    gv_revealerGankDrop09 = VisRevealerLastCreated();
    autoED0F0911_n = libNtve_gf_DifficultyValueInt(90, 90, 75, 75);
    autoED0F0911_i = 1;
    while (autoED0F0911_i <= autoED0F0911_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        autoED0F0911_i = autoED0F0911_i + 1;
    }
    gf_GoGank(gv_gankGroupDrop09, RegionFromId(10));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop09SplitThors_Init () {
    gt_Gank_Drop09SplitThors = TriggerCreate("gt_Gank_Drop09SplitThors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop10 (Split) Battlecruiser
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop10SplitBattlecruiser_Func (bool testConds, bool runActions) {
    int auto3AFDCF5C_n;
    int auto3AFDCF5C_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(6, 6, 8, 10), "Mutalisk", RegionFromId(31), gv_gankGroupDrop10);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Corruptor", RegionFromId(31), gv_gankGroupDrop10);
    Wait(3.0, c_timeGame);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "HydraliskBurrowed", RegionFromId(31), gv_gankGroupDrop10);
    gf_PrepareGankTeam(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "RoachBurrowed", RegionFromId(31), gv_gankGroupDrop10);
    VisRevealerCreate(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(31)), 12.0));
    gv_revealerGankDrop10 = VisRevealerLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(31)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 12.0, 270.0);
    UnitGroupIssueOrder(gv_gankGroupDrop10, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
    auto3AFDCF5C_n = libNtve_gf_DifficultyValueInt(90, 90, 75, 75);
    auto3AFDCF5C_i = 1;
    while (auto3AFDCF5C_i <= auto3AFDCF5C_n) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        auto3AFDCF5C_i = auto3AFDCF5C_i + 1;
    }
    gf_GoGank(gv_gankGroupDrop10, RegionFromId(9));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop10SplitBattlecruiser_Init () {
    gt_Gank_Drop10SplitBattlecruiser = TriggerCreate("gt_Gank_Drop10SplitBattlecruiser_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop01_Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop01_Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop01, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop01, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop01_Attacked_Init () {
    gt_Gank_Drop01_Attacked = TriggerCreate("gt_Gank_Drop01_Attacked_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop01_Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop02_Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop02_Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop02, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop02, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop02_Attacked_Init () {
    gt_Gank_Drop02_Attacked = TriggerCreate("gt_Gank_Drop02_Attacked_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop02_Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop03_Attacked_Factory
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop03_Attacked_Factory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop03, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop03, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop03_Attacked_Factory_Init () {
    gt_Gank_Drop03_Attacked_Factory = TriggerCreate("gt_Gank_Drop03_Attacked_Factory_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop03_Attacked_Factory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop04_Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop04_Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop04, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop04, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop04);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop04_Attacked_Init () {
    gt_Gank_Drop04_Attacked = TriggerCreate("gt_Gank_Drop04_Attacked_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop04_Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop05_Attacked_Starport
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop05_Attacked_Starport_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop05, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop05, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop05);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop05_Attacked_Starport_Init () {
    gt_Gank_Drop05_Attacked_Starport = TriggerCreate("gt_Gank_Drop05_Attacked_Starport_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop05_Attacked_Starport, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop06_Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop06_Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop06, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop06, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop06);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop06_Attacked_Init () {
    gt_Gank_Drop06_Attacked = TriggerCreate("gt_Gank_Drop06_Attacked_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop06_Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop07_Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop07_Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop07, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop07, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop07);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop07_Attacked_Init () {
    gt_Gank_Drop07_Attacked = TriggerCreate("gt_Gank_Drop07_Attacked_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop07_Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop08_Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop08_Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop08, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop08, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop08);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop08_Attacked_Init () {
    gt_Gank_Drop08_Attacked = TriggerCreate("gt_Gank_Drop08_Attacked_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop08_Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop09_Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop09_Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop09, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop09, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop09);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop09_Attacked_Init () {
    gt_Gank_Drop09_Attacked = TriggerCreate("gt_Gank_Drop09_Attacked_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop09_Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank_Drop10_Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Gank_Drop10_Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupDrop10, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gankGroupDrop10, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    VisRevealerDestroy(gv_revealerGankDrop10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gank_Drop10_Attacked_Init () {
    gt_Gank_Drop10_Attacked = TriggerCreate("gt_Gank_Drop10_Attacked_Func");
    TriggerAddEventUnitAttacked(gt_Gank_Drop10_Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Factory Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_RescueFactorySpawnQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitgroupminerals;
    unitgroup lv_unitgroupgas;
    unitgroup lv_unitgrouptroops;

    // Variable Initialization
    lv_unitgroupminerals = UnitGroupEmpty();
    lv_unitgroupgas = UnitGroupEmpty();
    lv_unitgrouptroops = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    gf_CreateBuildingDropPod("Factory", PointFromId(59), 0, 0, 1250.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_factoryAllUnits);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(59), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_rescueFactoryPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C44B7588"));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/56E56ACD"), null, PointFromId(59));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 1.0, 100.0, 2.0);
    TriggerExecute(gt_Gank_Drop03Factory, true, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Vulture", 0, gv_p08_RESCUABLE, PointFromId(29));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_factoryAllUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_factoryDropPodUnits);
    libCamp_gf_CreateDropPod(0, PointFromId(389), gv_factoryDropPodUnits, true);
    gv_factorySpawned = true;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueFactorySpawnQ_Init () {
    gt_RescueFactorySpawnQ = TriggerCreate("gt_RescueFactorySpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Factory Q
//--------------------------------------------------------------------------------------------------
bool gt_RescueFactoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(gv_factoryAllUnits, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_factorySpawned == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_rescueFactoryPing);
    Wait(0.5, c_timeGame);
    gv_statDropPodsRescued += 1;
    TriggerExecute(gt_AchievementRescuealldroppods, true, false);
    UnitGroupLoopBegin(gv_factoryAllUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_p08_RESCUABLE)) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
            UnitGroupRemove(gv_factoryAllUnits, UnitGroupLoopCurrent());
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == true)) {
                gv_statStructuresRescued += 1;
            }
            else {
                gv_achievementDropPodForcesRescued += 1;
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_DialogueGetThisFactoryBackToTheLandingZoneQ, true, false);
    TriggerExecute(gt_RescueFactorySafety, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueFactoryQ_Init () {
    gt_RescueFactoryQ = TriggerCreate("gt_RescueFactoryQ_Func");
    TriggerAddEventTimePeriodic(gt_RescueFactoryQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Factory Safety
//--------------------------------------------------------------------------------------------------
bool gt_RescueFactorySafety_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_factorySpawned == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    UnitGroupLoopBegin(gv_factoryAllUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_p08_RESCUABLE)) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
            UnitGroupRemove(gv_factoryAllUnits, UnitGroupLoopCurrent());
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == true)) {
                gv_statStructuresRescued += 1;
            }
            else {
                gv_achievementDropPodForcesRescued += 1;
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueFactorySafety_Init () {
    gt_RescueFactorySafety = TriggerCreate("gt_RescueFactorySafety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Starport Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_RescueStarportSpawnQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitgroupminerals;
    unitgroup lv_unitgroupgas;
    unitgroup lv_unitgrouptroops;
    unit lv_medivac;
    unit lv_raven;

    // Variable Initialization
    lv_unitgroupminerals = UnitGroupEmpty();
    lv_unitgroupgas = UnitGroupEmpty();
    lv_unitgrouptroops = UnitGroupEmpty();
    lv_medivac = null;
    lv_raven = null;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gv_dropPodsRemaining = (gv_dropPodsRemaining - 1);
    gf_CreateBuildingDropPod("Starport", PointFromId(465), 0, 0, 1300.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_starportAllUnits);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(465), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_rescueStarportPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/87B5CFC3"));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/727F3595"), null, PointFromId(465));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 1.0, 100.0, 2.0);
    TriggerExecute(gt_Gank_Drop05Starport, true, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Raven", 0, gv_p08_RESCUABLE, PointFromId(29));
    lv_raven = UnitLastCreated();
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_starportAllUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_starportDropPodUnits);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, gv_p08_RESCUABLE, PointFromId(29));
    lv_medivac = UnitLastCreated();
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_starportAllUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_starportDropPodUnits);
    libCamp_gf_CreateDropPod(0, PointFromId(356), gv_starportDropPodUnits, true);
    if ((UnitGetOwner(lv_raven) != gv_p01_USER) && (UnitGetOwner(lv_medivac) != gv_p01_USER)) {
        UnitIssueOrder(lv_raven, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitIssueOrder(lv_medivac, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    else {
    }
    gv_starportSpawned = true;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueStarportSpawnQ_Init () {
    gt_RescueStarportSpawnQ = TriggerCreate("gt_RescueStarportSpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Starport Q
//--------------------------------------------------------------------------------------------------
bool gt_RescueStarportQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(gv_starportAllUnits, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_starportSpawned == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_rescueStarportPing);
    Wait(0.5, c_timeGame);
    gv_statDropPodsRescued += 1;
    TriggerExecute(gt_AchievementRescuealldroppods, true, false);
    UnitGroupLoopBegin(gv_starportAllUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_p08_RESCUABLE)) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
            UnitGroupRemove(gv_starportAllUnits, UnitGroupLoopCurrent());
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == true)) {
                gv_statStructuresRescued += 1;
            }
            else {
                gv_achievementDropPodForcesRescued += 1;
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_DialogueSomeAirPowerIsJustWhatWeNeedQ, true, false);
    TriggerExecute(gt_RescueStarportSafety, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueStarportQ_Init () {
    gt_RescueStarportQ = TriggerCreate("gt_RescueStarportQ_Func");
    TriggerAddEventTimePeriodic(gt_RescueStarportQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Starport Safety
//--------------------------------------------------------------------------------------------------
bool gt_RescueStarportSafety_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_starportSpawned == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    UnitGroupLoopBegin(gv_starportAllUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_p08_RESCUABLE)) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
            UnitGroupRemove(gv_starportAllUnits, UnitGroupLoopCurrent());
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == true)) {
                gv_statStructuresRescued += 1;
            }
            else {
                gv_achievementDropPodForcesRescued += 1;
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueStarportSafety_Init () {
    gt_RescueStarportSafety = TriggerCreate("gt_RescueStarportSafety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Drop Pod Rescue
//--------------------------------------------------------------------------------------------------
bool gt_SecondDropPodRescue_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1188)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_DialogueLetsMoveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondDropPodRescue_Init () {
    gt_SecondDropPodRescue = TriggerCreate("gt_SecondDropPodRescue_Func");
    TriggerAddEventTimePeriodic(gt_SecondDropPodRescue, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic Rescue Check
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicRescueCheck_Func (bool testConds, bool runActions) {
    int auto58BC7996_ae;
    int auto58BC7996_ai;
    int auto945795D0_ae;
    int auto945795D0_ai;

    // Variable Declarations
    int lv_a;
    int lv_b;
    unitgroup lv_unitGroup;
    int lv_int;

    // Variable Initialization
    lv_a = 0;
    lv_b = 0;
    lv_unitGroup = UnitGroupEmpty();
    lv_int = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto58BC7996_ae = 3;
    auto58BC7996_ai = 1;
    lv_a = 1;
    while ((auto58BC7996_ai >= 0 && lv_a <= auto58BC7996_ae) || (auto58BC7996_ai <= 0 && lv_a >= auto58BC7996_ae)) {
        auto945795D0_ae = 4;
        auto945795D0_ai = 1;
        lv_b = 1;
        while ((auto945795D0_ai >= 0 && lv_b <= auto945795D0_ae) || (auto945795D0_ai <= 0 && lv_b >= auto945795D0_ae)) {
            if ((UnitGroupCount(gv_rescuableUnitGroup[lv_a][lv_b], c_unitCountAlive) == 0)) {
                PingDestroy(gv_rescuablePings[lv_a][lv_b]);
            }
            else {
            }
            UnitGroupLoopBegin(gv_rescuableUnitGroup[lv_a][lv_b]);
            while (!UnitGroupLoopDone()) {
                if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 2.5), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                    libNtve_gf_AddUnitGroupToUnitGroup(gv_rescuableUnitGroup[lv_a][lv_b], lv_unitGroup);
                    UnitGroupClear(gv_rescuableUnitGroup[lv_a][lv_b]);
                }
                else {
                }
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            if (lv_b == auto945795D0_ae) {
                break;
            }
            lv_b = lv_b + auto945795D0_ai;
        }
        if (lv_a == auto58BC7996_ae) {
            break;
        }
        lv_a = lv_a + auto58BC7996_ai;
    }
    if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) >= 1)) {
        gv_statDropPodsRescued += 1;
        TriggerExecute(gt_AchievementRescuealldroppods, true, false);
        UnitGroupLoopBegin(lv_unitGroup);
        while (!UnitGroupLoopDone()) {
            gf_RescueUnits();
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicRescueCheck_Init () {
    gt_PeriodicRescueCheck = TriggerCreate("gt_PeriodicRescueCheck_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicRescueCheck, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank Flyer Removal
//--------------------------------------------------------------------------------------------------
bool gt_GankFlyerRemoval_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupRemoval, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GankFlyerRemoval_Init () {
    gt_GankFlyerRemoval = TriggerCreate("gt_GankFlyerRemoval_Func");
    TriggerAddEventUnitRegion(gt_GankFlyerRemoval, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_GankFlyerRemoval, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_GankFlyerRemoval, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gank Burrow Removal
//--------------------------------------------------------------------------------------------------
bool gt_GankBurrowRemoval_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gankGroupRemoval, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((libNtve_gf_UnitIsVisibleToPlayer(EventUnit(), gv_p01_USER) == false) || (UnitIsAlive(EventUnit()) == false))) {
            UnitRemove(EventUnit());
            break;
        }
        else {
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GankBurrowRemoval_Init () {
    gt_GankBurrowRemoval = TriggerCreate("gt_GankBurrowRemoval_Func");
    TriggerAddEventUnitAbility(gt_GankBurrowRemoval, null, AbilityCommand("BurrowZerglingDown", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Building Drop Pod Actions
//--------------------------------------------------------------------------------------------------
bool gt_CreateBuildingDropPodActions_Func (bool testConds, bool runActions) {
    int autoCF5FA138_val;
    int autoFA81D69F_n;
    int autoFA81D69F_i;

    // Variable Declarations
    int lv_speed;
    fixed lv_currentFlyingHeight;
    fixed lv_deltaFlyingHeight;
    unit lv_droppedBuilding;
    fixed lv_deltaWait;
    point lv_landingPoint;
    int lv_buildingDropType;

    // Variable Initialization
    lv_speed = 0;
    lv_currentFlyingHeight = 0.0;
    lv_deltaFlyingHeight = 0.0;
    lv_droppedBuilding = null;
    lv_deltaWait = 0.0;
    lv_landingPoint = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_speed = gv_bDPSpeed;
    lv_currentFlyingHeight = gv_bDPCurrentFlyingHeight;
    lv_deltaFlyingHeight = gv_bDPDeltaFlyingHeight;
    lv_droppedBuilding = gv_bDPDroppedBuilding;
    lv_deltaWait = gv_bDPDeltaWait;
    lv_landingPoint = gv_bDPLandingPoint;
    lv_buildingDropType = gv_bDPDropType;
    if ((lv_buildingDropType == 0)) {
        SoundPlay(SoundLink("Ghost_DropPodImpact", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitSetHeight(lv_droppedBuilding, 0.0, (IntToFixed(lv_speed) * lv_deltaWait));
        Wait((IntToFixed(lv_speed) * lv_deltaWait), c_timeGame);
        UnitIssueOrder(lv_droppedBuilding, OrderTargetingPoint(AbilityCommand("StarportLand", 0), lv_landingPoint), c_orderQueueReplace);
        UnitIssueOrder(lv_droppedBuilding, OrderTargetingPoint(AbilityCommand("BarracksLand", 0), lv_landingPoint), c_orderQueueReplace);
        UnitIssueOrder(lv_droppedBuilding, OrderTargetingPoint(AbilityCommand("SurveillanceStationLand", 0), lv_landingPoint), c_orderQueueReplace);
        UnitIssueOrder(lv_droppedBuilding, OrderTargetingPoint(AbilityCommand("CommandCenterLand", 0), lv_landingPoint), c_orderQueueReplace);
        UnitIssueOrder(lv_droppedBuilding, OrderTargetingPoint(AbilityCommand("FactoryLand", 0), lv_landingPoint), c_orderQueueReplace);
        Wait(0.2, c_timeGame);
        libNtve_gf_MakeUnitInvulnerable(lv_droppedBuilding, false);
        libNtve_gf_MakeUnitUncommandable(lv_droppedBuilding, false);
    }
    else {
    }
    if ((lv_buildingDropType == 1)) {
        SoundPlay(SoundLink("Ghost_NukeDrop", -1), PlayerGroupAll(), 100.0, 0.0);
        autoCF5FA138_val = RandomInt(0, 1);
        if (autoCF5FA138_val == 0) {
            UnitIssueOrder(lv_droppedBuilding, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_droppedBuilding), 8.0, RandomFixed(195.0, 255.0))), c_orderQueueReplace);
        }
        else if (autoCF5FA138_val == 1) {
            UnitIssueOrder(lv_droppedBuilding, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_droppedBuilding), 8.0, RandomFixed(285.0, 345.0))), c_orderQueueReplace);
        }
        else {
        }
        autoFA81D69F_n = lv_speed;
        autoFA81D69F_i = 1;
        while (autoFA81D69F_i <= autoFA81D69F_n) {
            lv_currentFlyingHeight = (lv_currentFlyingHeight - lv_deltaFlyingHeight);
            UnitSetPropertyFixed(lv_droppedBuilding, c_unitPropHeight, lv_currentFlyingHeight);
            Wait(lv_deltaWait, c_timeGame);
            autoFA81D69F_i = autoFA81D69F_i + 1;
        }
        while (!((UnitIsAlive(lv_droppedBuilding) == false))) {
            Wait(0.1, c_timeGame);
        }
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 2.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBuildingDropPodActions_Init () {
    gt_CreateBuildingDropPodActions = TriggerCreate("gt_CreateBuildingDropPodActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Commander,TacticalAnalysisTheZergGreatlyOutnumber Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueCommanderTacticalAnalysisTheZergGreatlyOutnumberQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(5.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Adjutant00040", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Adjutant00040", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueCommanderTacticalAnalysisTheZergGreatlyOutnumberQ_Init () {
    gt_DialogueCommanderTacticalAnalysisTheZergGreatlyOutnumberQ = TriggerCreate("gt_DialogueCommanderTacticalAnalysisTheZergGreatlyOutnumberQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue KeepMeUpdated/IfWeCanReach Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueKeepMeUpdatedIfWeCanReachQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Raynor00010", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00010", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian01Raynor00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00011", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueKeepMeUpdatedIfWeCanReachQ_Init () {
    gt_DialogueKeepMeUpdatedIfWeCanReachQ = TriggerCreate("gt_DialogueKeepMeUpdatedIfWeCanReachQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Sir,I'veLocatedAnIncomingDropPod Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSirIveLocatedAnIncomingDropPodQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00015", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00015", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerExecute(gt_FirstDropPodSpawnQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSirIveLocatedAnIncomingDropPodQ_Init () {
    gt_DialogueSirIveLocatedAnIncomingDropPodQ = TriggerCreate("gt_DialogueSirIveLocatedAnIncomingDropPodQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Alright, let'sGetOutThere Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueAlrightletsGetOutThereQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    gv_drop01Done = true;
    TriggerExecute(gt_Gank_Drop01Marines, true, false);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Raynor00026", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00026", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_LeaderboardInitiate, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueAlrightletsGetOutThereQ_Init () {
    gt_DialogueAlrightletsGetOutThereQ = TriggerCreate("gt_DialogueAlrightletsGetOutThereQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor'sRaiders!/FiveLines Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorsRaidersFiveLinesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_rescuableGroup;
    actor lv_actorSpeak01;

    // Variable Initialization
    lv_rescuableGroup = UnitGroupEmpty();
    lv_actorSpeak01 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p08_RESCUABLE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_RescueUnits();
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01DominionMarine500022", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01DominionMarine500022", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian01Raynor00001", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00001", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian01DominionMarine500002", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01DominionMarine500002", 0), c_transmissionDurationAdd, 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TValerian01Kerrigan00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Kerrigan00003", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian01Raynor00004", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00004", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/A4D52C0A"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorsRaidersFiveLinesQ_Init () {
    gt_DialogueRaynorsRaidersFiveLinesQ = TriggerCreate("gt_DialogueRaynorsRaidersFiveLinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Let's Move Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueLetsMoveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("THorner05SRaynor00046", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00046", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueLetsMoveQ_Init () {
    gt_DialogueLetsMoveQ = TriggerCreate("gt_DialogueLetsMoveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Sir,I'veDetectedaDropPodInYourVicinity Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSirIveDetectedaDropPodInYourVicinityQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00027", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00027", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSirIveDetectedaDropPodInYourVicinityQ_Init () {
    gt_DialogueSirIveDetectedaDropPodInYourVicinityQ = TriggerCreate("gt_DialogueSirIveDetectedaDropPodInYourVicinityQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue SendingCoordinatesToANearbyDroppod Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSendingCoordinatesToANearbyDroppodQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00031", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00031", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSendingCoordinatesToANearbyDroppodQ_Init () {
    gt_DialogueSendingCoordinatesToANearbyDroppodQ = TriggerCreate("gt_DialogueSendingCoordinatesToANearbyDroppodQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Sir,AnotherDropPodIsComingDown Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSirAnotherDropPodIsComingDownQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00032", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00032", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSirAnotherDropPodIsComingDownQ_Init () {
    gt_DialogueSirAnotherDropPodIsComingDownQ = TriggerCreate("gt_DialogueSirAnotherDropPodIsComingDownQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue You'veGotAnotherDropPodLandingNearBy Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueYouveGotAnotherDropPodLandingNearByQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00036", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00036", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueYouveGotAnotherDropPodLandingNearByQ_Init () {
    gt_DialogueYouveGotAnotherDropPodLandingNearByQ = TriggerCreate("gt_DialogueYouveGotAnotherDropPodLandingNearByQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Sir,AnotherDropPodHasArrivedNearYourPerimeter Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSirAnotherDropPodHasArrivedNearYourPerimeterQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00037", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00037", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSirAnotherDropPodHasArrivedNearYourPerimeterQ_Init () {
    gt_DialogueSirAnotherDropPodHasArrivedNearYourPerimeterQ = TriggerCreate("gt_DialogueSirAnotherDropPodHasArrivedNearYourPerimeterQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Sir,IReadMultipleDropPodsEnteringTheAtmosphere Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSirIReadMultipleDropPodsEnteringTheAtmosphereQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00044", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00044", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian01Raynor00045", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00045", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSirIReadMultipleDropPodsEnteringTheAtmosphereQ_Init () {
    gt_DialogueSirIReadMultipleDropPodsEnteringTheAtmosphereQ = TriggerCreate("gt_DialogueSirIReadMultipleDropPodsEnteringTheAtmosphereQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue There'sAnotherWaveOfDropPodsComingIn Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueTheresAnotherWaveOfDropPodsComingInQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00046", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00046", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueTheresAnotherWaveOfDropPodsComingInQ_Init () {
    gt_DialogueTheresAnotherWaveOfDropPodsComingInQ = TriggerCreate("gt_DialogueTheresAnotherWaveOfDropPodsComingInQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Commander,TheLastOfTheDominionDropPods Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueCommanderTheLastOfTheDominionDropPodsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_dropPodsRemaining <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    Wait(2.0, c_timeGame);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00047", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00047", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian01Raynor00050", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00050", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    SoundPlay(SoundLink("UI_TechConsole_Select", 0), PlayerGroupAll(), 100.0, 0.0);
    BoardDestroy(gv_leaderBoardDrops);
    TriggerExecute(gt_DialogueSirWShouldMobilizeEverythingWeGotQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueCommanderTheLastOfTheDominionDropPodsQ_Init () {
    gt_DialogueCommanderTheLastOfTheDominionDropPodsQ = TriggerCreate("gt_DialogueCommanderTheLastOfTheDominionDropPodsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Sir,WShouldMobilizeEverythingWeGot Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSirWShouldMobilizeEverythingWeGotQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_midCinematicCompleted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Horner00049", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Horner00049", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian01Kerrigan00009", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Kerrigan00009", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian01Raynor00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00012", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSirWShouldMobilizeEverythingWeGotQ_Init () {
    gt_DialogueSirWShouldMobilizeEverythingWeGotQ = TriggerCreate("gt_DialogueSirWShouldMobilizeEverythingWeGotQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue WeCanSalvageSomeOfTheWreckageFromtheDomBase Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueWeCanSalvageSomeOfTheWreckageFromtheDomBaseQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Raynor00038", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00038", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueWeCanSalvageSomeOfTheWreckageFromtheDomBaseQ_Init () {
    gt_DialogueWeCanSalvageSomeOfTheWreckageFromtheDomBaseQ = TriggerCreate("gt_DialogueWeCanSalvageSomeOfTheWreckageFromtheDomBaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue AtLeastABarracksMadeItDown Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueAtLeastABarracksMadeItDownQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Raynor00039", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00039", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueAtLeastABarracksMadeItDownQ_Init () {
    gt_DialogueAtLeastABarracksMadeItDownQ = TriggerCreate("gt_DialogueAtLeastABarracksMadeItDownQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue GetThisFactoryBackToTheLandingZone Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueGetThisFactoryBackToTheLandingZoneQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Raynor00042", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00042", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueGetThisFactoryBackToTheLandingZoneQ_Init () {
    gt_DialogueGetThisFactoryBackToTheLandingZoneQ = TriggerCreate("gt_DialogueGetThisFactoryBackToTheLandingZoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue SomeAirPowerIsJustWhatWeNeed Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSomeAirPowerIsJustWhatWeNeedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Raynor00043", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00043", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSomeAirPowerIsJustWhatWeNeedQ_Init () {
    gt_DialogueSomeAirPowerIsJustWhatWeNeedQ = TriggerCreate("gt_DialogueSomeAirPowerIsJustWhatWeNeedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue SomeInvasion (played during midcin) Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSomeInvasionplayedduringmidcinQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Kerrigan00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Kerrigan00013", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSomeInvasionplayedduringmidcinQ_Init () {
    gt_DialogueSomeInvasionplayedduringmidcinQ = TriggerCreate("gt_DialogueSomeInvasionplayedduringmidcinQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue YouWereFoolsToComeHere Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueYouWereFoolsToComeHereQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Kerrigan00028", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Kerrigan00028", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueYouWereFoolsToComeHereQ_Init () {
    gt_DialogueYouWereFoolsToComeHereQ = TriggerCreate("gt_DialogueYouWereFoolsToComeHereQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue We'veReachedTheCrashSite Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueWeveReachedTheCrashSiteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Tychus00008", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Tychus00008", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueWeveReachedTheCrashSiteQ_Init () {
    gt_DialogueWeveReachedTheCrashSiteQ = TriggerCreate("gt_DialogueWeveReachedTheCrashSiteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue WarfieldWon'tBeAliveForVeryMuchLonger Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueWarfieldWontBeAliveForVeryMuchLongerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Kerrigan00009", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Kerrigan00009", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueWarfieldWontBeAliveForVeryMuchLongerQ_Init () {
    gt_DialogueWarfieldWontBeAliveForVeryMuchLongerQ = TriggerCreate("gt_DialogueWarfieldWontBeAliveForVeryMuchLongerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue You'reSureTalkingALot,Kerrigan Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueYoureSureTalkingALotKerriganQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }
    else {
    }
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Raynor00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00012", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueYoureSureTalkingALotKerriganQ_Init () {
    gt_DialogueYoureSureTalkingALotKerriganQ = TriggerCreate("gt_DialogueYoureSureTalkingALotKerriganQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestation Pit Dies
//--------------------------------------------------------------------------------------------------
bool gt_InfestationPitDies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogueYouWereFoolsToComeHereQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestationPitDies_Init () {
    gt_InfestationPitDies = TriggerCreate("gt_InfestationPitDies_Func");
    TriggerAddEventUnitDied(gt_InfestationPitDies, UnitRefFromUnit(UnitFromId(1059)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storymode Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_StorymodeTipsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorymodeTipsQ_Init () {
    gt_StorymodeTipsQ = TriggerCreate("gt_StorymodeTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Troops Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionTroopsTipQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian01_DominionTroops", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionTroopsTipQ_Init () {
    gt_DominionTroopsTipQ = TriggerCreate("gt_DominionTroopsTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Supplies Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionSuppliesTipQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian01_DominionSupplies", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionSuppliesTipQ_Init () {
    gt_DominionSuppliesTipQ = TriggerCreate("gt_DominionSuppliesTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Create
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardCreate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_TechConsole_Select", 0), PlayerGroupAll(), 100.0, 0.0);
    BoardCreate(1, 1, StringExternal("Param/Value/896C3B49"), Color(0.00, 0.00, 100.00));
    BoardMinimizeShow(BoardLastCreated(), PlayerGroupAll(), false);
    gv_leaderBoardDrops = BoardLastCreated();
    BoardSetState(gv_leaderBoardDrops, PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardSetState(gv_leaderBoardDrops, PlayerGroupAll(), c_boardStateShowTitle, false);
    while (true) {
        BoardItemSetText(gv_leaderBoardDrops, 1, 1, (StringExternal("Param/Value/61E67D35") + IntToText(gv_dropPodsRemaining)));
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardCreate_Init () {
    gt_LeaderboardCreate = TriggerCreate("gt_LeaderboardCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZergStartAttack
//--------------------------------------------------------------------------------------------------
bool gt_ZergStartAttack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "ZerglingBurrowed", 0, gv_p06_ZERG_GREEN_SW, PointWithOffset(PointFromId(1219), 0.0, 0.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "ZerglingBurrowed", 0, gv_p06_ZERG_GREEN_SW, PointWithOffset(PointFromId(1220), 0.0, 0.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "ZerglingBurrowed", 0, gv_p06_ZERG_GREEN_SW, PointWithOffset(PointFromId(1222), 0.0, 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergStartAttack_Init () {
    gt_ZergStartAttack = TriggerCreate("gt_ZergStartAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZergAmbientAttackBothSides New
//--------------------------------------------------------------------------------------------------
bool gt_ZergAmbientAttackBothSidesNew_Func (bool testConds, bool runActions) {
    int auto113A4E1E_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto113A4E1E_val = RandomInt(0, 7);
    if (auto113A4E1E_val == 0) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1307));
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1307));
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    else if (auto113A4E1E_val == 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1308));
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1308));
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    else if (auto113A4E1E_val == 2) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1304));
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1304));
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    else if (auto113A4E1E_val == 3) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1309));
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(2.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1309));
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    else if (auto113A4E1E_val == 4) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1350));
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1350));
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    else if (auto113A4E1E_val == 5) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1351));
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(2.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p07_ZERG_PINK, PointFromId(1351));
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    else if (auto113A4E1E_val == 6) {
    }
    else if (auto113A4E1E_val == 7) {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAmbientAttackBothSidesNew_Init () {
    gt_ZergAmbientAttackBothSidesNew = TriggerCreate("gt_ZergAmbientAttackBothSidesNew_Func");
    TriggerEnable(gt_ZergAmbientAttackBothSidesNew, false);
    TriggerAddEventTimePeriodic(gt_ZergAmbientAttackBothSidesNew, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Area 02
//--------------------------------------------------------------------------------------------------
bool gt_MoveArea02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p10_ZERG_WHITEHIVE, RegionFromId(80), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(80))), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Baneling", gv_p05_ZERG_ORANGE_NW, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(83))), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveArea02_Init () {
    gt_MoveArea02 = TriggerCreate("gt_MoveArea02_Func");
    TriggerAddEventTimePeriodic(gt_MoveArea02, 6.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Kill all Spore Cannons
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKillallSporeCannons_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p11_ZERG_YELLOWSPORECANNON, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AchievementAward(gv_p01_USER, "TValerian01_2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKillallSporeCannons_Init () {
    gt_AchievementKillallSporeCannons = TriggerCreate("gt_AchievementKillallSporeCannons_Func");
    TriggerAddEventUnitDied(gt_AchievementKillallSporeCannons, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Rescue all drop pods
//--------------------------------------------------------------------------------------------------
bool gt_AchievementRescuealldroppods_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_statDropPodsRescued >= 10)) {
        AchievementAward(gv_p01_USER, "TValerian01_3");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementRescuealldroppods_Init () {
    gt_AchievementRescuealldroppods = TriggerCreate("gt_AchievementRescuealldroppods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Primary Objective Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerExecute(gt_ObjectiveNydusWormsComplete, true, false);
    Wait(2.0, c_timeReal);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveCompleted_Init () {
    gt_VictoryPrimaryObjectiveCompleted = TriggerCreate("gt_VictoryPrimaryObjectiveCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_troopSupply) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveNydusWorms) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "TValerian01_1");
    }
    else {
    }
    VictoryPanelAddAchievement("TValerian01_1");
    VictoryPanelAddAchievement("TValerian01_2");
    VictoryPanelAddAchievement("TValerian01_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B166A6AB"), StringExternal("Param/Value/F85003F3"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/11011B7E"), IntToText(gv_achievementDropPodForcesRescued));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E6C3018A"), IntToText(gv_statStructuresRescued));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/331EC825"), (IntToText(gv_statSporeCannonsDestroyed) + StringExternal("Param/Value/36030FF4") + IntToText(6)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/39F17C81"), (IntToText(gv_statDropPodsRescued) + StringExternal("Param/Value/EFD8E7F6") + IntToText(10)));
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat All Troops Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAllTroopsDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/46963DA5"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAllTroopsDead_Init () {
    gt_DefeatAllTroopsDead = TriggerCreate("gt_DefeatAllTroopsDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatAllTroopsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p02_ZERG_PURPLE_NE);
    AICampaignStart(gv_p05_ZERG_ORANGE_NW);
    AICampaignStart(gv_p06_ZERG_GREEN_SW);
    AICampaignStart(gv_p07_ZERG_PINK);
    AICampaignStart(gv_p10_ZERG_WHITEHIVE);
    AIAttackWaveSetTargetPlayer(gv_p02_ZERG_PURPLE_NE, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p05_ZERG_ORANGE_NW, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p06_ZERG_GREEN_SW, PlayerGroupSingle(gv_p01_USER));
    TriggerExecute(gt_ZerglingRush, true, false);
    TriggerExecute(gt_P5_Zerg_OrangeAttackWAVES, true, false);
    TriggerExecute(gt_P6_Zerg_GreenAttackWAVES, true, false);
    TriggerExecute(gt_P2_Zerg_PurpleAttackWAVES, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades Adv
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesAdv_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(240.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergGroundArmorsLevel1");
    Wait(240.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergFlyerArmorsLevel1");
    Wait(240.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "GlialReconstitution");
    gf_AddUpgradetoZergPlayers(1, "zerglingmovementspeed");
    Wait(240.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "hydraliskspeed");
    Wait(120.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergMeleeWeaponsLevel2");
    Wait(120.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergMissileWeaponsLevel2");
    Wait(120.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergFlyerWeaponsLevel2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesAdv_Init () {
    gt_StartUpgradesAdv = TriggerCreate("gt_StartUpgradesAdv_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades Exp
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesExp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(240.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergGroundArmorsLevel1");
    Wait(240.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergMeleeWeaponsLevel2");
    Wait(240.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "hydraliskspeed");
    Wait(240.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergFlyerWeaponsLevel2");
    Wait(120.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "OrganicCarapace");
    Wait(120.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergGroundArmorsLevel2");
    Wait(120.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergFlyerArmorsLevel2");
    Wait(120.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergGroundArmorsLevel3");
    Wait(120.0, c_timeGame);
    gf_AddUpgradetoZergPlayers(1, "ZergFlyerArmorsLevel3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesExp_Init () {
    gt_StartUpgradesExp = TriggerCreate("gt_StartUpgradesExp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Rush
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingRush_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(110.0, c_timeGame);
    UnitGroupLoopBegin(gv_zergRushGroup03);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetOwner(UnitGroupLoopCurrent(), gv_p05_ZERG_ORANGE_NW, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AISetGroupScriptControlled(gv_zergRushGroup03, false);
    AISetGroupSuicide(gv_zergRushGroup03, true);
    Wait(12.0, c_timeGame);
    UnitGroupLoopBegin(gv_zergRushGroup01);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetOwner(UnitGroupLoopCurrent(), gv_p05_ZERG_ORANGE_NW, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AISetGroupScriptControlled(gv_zergRushGroup01, false);
    AISetGroupSuicide(gv_zergRushGroup01, true);
    Wait(5.0, c_timeGame);
    UnitGroupLoopBegin(gv_zergRushGroup02);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetOwner(UnitGroupLoopCurrent(), gv_p05_ZERG_ORANGE_NW, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AISetGroupScriptControlled(gv_zergRushGroup02, false);
    AISetGroupSuicide(gv_zergRushGroup02, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingRush_Init () {
    gt_ZerglingRush = TriggerCreate("gt_ZerglingRush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2_Zerg_Purple Attack WAVES
//--------------------------------------------------------------------------------------------------
bool gt_P2_Zerg_PurpleAttackWAVES_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetGatherPoint(gv_p02_ZERG_PURPLE_NE, PointFromId(133));
    Wait(110.0, c_timeGame);
    AIAttackWaveAddUnits4(10, 10, 8, 8, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 3, "Roach");
    AIAttackWaveAddUnits4(2, 2, 4, 4, "Mutalisk");
    AIAttackWaveSend(gv_p02_ZERG_PURPLE_NE, 125, true);
    AIAttackWaveAddUnits4(2, 2, 4, 5, "Hydralisk");
    AIAttackWaveAddUnits4(6, 6, 10, 12, "Zergling");
    AIAttackWaveAddWaypoint(gv_p02_ZERG_PURPLE_NE, PointFromId(311), false);
    AIAttackWaveSend(gv_p02_ZERG_PURPLE_NE, 180, false);
    AIAttackWaveAddUnits4(3, 3, 5, 6, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
    AIAttackWaveSend(gv_p02_ZERG_PURPLE_NE, 180, true);
    AIAttackWaveAddUnits4(8, 8, 16, 10, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Ultralisk");
    AIAttackWaveSend(gv_p02_ZERG_PURPLE_NE, 275, false);
    Wait(175.0, c_timeAI);
    AIAttackWaveAddUnits4(8, 8, 12, 14, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 5, 7, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Infestor");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
    AIAttackWaveSend(gv_p02_ZERG_PURPLE_NE, 160, false);
    AIAttackWaveAddUnits4(8, 8, 12, 14, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 5, 8, "Mutalisk");
    AIAttackWaveAddWaypoint(gv_p02_ZERG_PURPLE_NE, PointFromId(311), false);
    AIAttackWaveSend(gv_p02_ZERG_PURPLE_NE, 160, true);
    AIAttackWaveAddUnits4(4, 4, 5, 7, "Mutalisk");
    AIAttackWaveAddUnits4(1, 1, 2, 3, "BroodLord");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
    AIAttackWaveSend(gv_p02_ZERG_PURPLE_NE, 140, false);
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Ultralisk");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Infestor");
    AIAttackWaveAddWaypoint(gv_p02_ZERG_PURPLE_NE, PointFromId(311), false);
    AIAttackWaveSend(gv_p02_ZERG_PURPLE_NE, 140, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2_Zerg_PurpleAttackWAVES_Init () {
    gt_P2_Zerg_PurpleAttackWAVES = TriggerCreate("gt_P2_Zerg_PurpleAttackWAVES_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P5_Zerg_Orange Attack WAVES
//--------------------------------------------------------------------------------------------------
bool gt_P5_Zerg_OrangeAttackWAVES_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetGatherPoint(gv_p05_ZERG_ORANGE_NW, PointFromId(131));
    AIAttackWaveAddUnits4(4, 4, 5, 5, "Baneling");
    AIAttackWaveAddUnits4(3, 3, 2, 3, "Roach");
    AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 220, true);
    AIAttackWaveAddUnits4(8, 8, 15, 20, "Zergling");
    AIAttackWaveAddUnits4(3, 3, 5, 6, "Mutalisk");
    AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 300, true);
    AIAttackWaveAddUnits4(3, 3, 3, 4, "Roach");
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Hydralisk");
    AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 120, true);
    AIAttackWaveAddUnits4(7, 7, 8, 8, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 3, 2, "Roach");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
    AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 100, true);
    AIAttackWaveAddUnits4(3, 3, 3, 3, "Roach");
    AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 135, false);
    AIAttackWaveAddUnits4(3, 3, 3, 4, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
    AIAttackWaveAddWaypoint(gv_p05_ZERG_ORANGE_NW, PointFromId(840), false);
    AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 135, true);
    AIAttackWaveAddUnits4(6, 6, 8, 12, "Zergling");
    AIAttackWaveAddUnits4(4, 4, 7, 10, "Baneling");
    AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 170, true);
    AIAttackWaveAddUnits4(10, 10, 9, 13, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Infestor");
    AIAttackWaveAddUnits4(0, 1, 1, 1, "Overseer");
    AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 170, true);
    while (true) {
        AIAttackWaveAddUnits4(8, 8, 9, 13, "Zergling");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Hydralisk");
        AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 140, true);
        AIAttackWaveAddUnits4(3, 3, 8, 10, "Roach");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Mutalisk");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_p05_ZERG_ORANGE_NW, 140, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P5_Zerg_OrangeAttackWAVES_Init () {
    gt_P5_Zerg_OrangeAttackWAVES = TriggerCreate("gt_P5_Zerg_OrangeAttackWAVES_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P6_Zerg_Green Attack WAVES
//--------------------------------------------------------------------------------------------------
bool gt_P6_Zerg_GreenAttackWAVES_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetGatherPoint(gv_p06_ZERG_GREEN_SW, PointFromId(31));
    AIAttackWaveAddUnits4(6, 8, 12, 15, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Hydralisk");
    AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 190, true);
    AIAttackWaveAddUnits4(4, 4, 5, 6, "Baneling");
    AIAttackWaveAddUnits4(3, 3, 4, 5, "Mutalisk");
    AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 220, true);
    AIAttackWaveAddUnits4(8, 8, 10, 6, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Hydralisk");
    AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 120, true);
    AIAttackWaveAddUnits4(6, 6, 8, 8, "Baneling");
    AIAttackWaveAddUnits4(2, 2, 5, 8, "Roach");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
    AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 135, true);
    AIAttackWaveAddUnits4(6, 6, 8, 12, "Zergling");
    AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 120, true);
    AIAttackWaveAddUnits4(3, 3, 7, 10, "Roach");
    AIAttackWaveAddUnits4(4, 4, 6, 8, "Baneling");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Infestor");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
    AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 95, true);
    AIAttackWaveAddUnits4(10, 10, 9, 13, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Hydralisk");
    AIAttackWaveAddUnits4(0, 1, 1, 1, "Overseer");
    AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 165, true);
    while (true) {
        AIAttackWaveAddUnits4(8, 8, 9, 13, "Zergling");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Hydralisk");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 140, true);
        AIAttackWaveAddUnits4(2, 2, 4, 5, "Roach");
        AIAttackWaveAddUnits4(4, 4, 5, 6, "Mutalisk");
        AIAttackWaveSend(gv_p06_ZERG_GREEN_SW, 140, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P6_Zerg_GreenAttackWAVES_Init () {
    gt_P6_Zerg_GreenAttackWAVES = TriggerCreate("gt_P6_Zerg_GreenAttackWAVES_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawning Trigger
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawningTrigger_Func (bool testConds, bool runActions) {
    int auto32E17CDC_n;
    int auto32E17CDC_i;

    // Variable Declarations
    unitgroup lv_waveUnits;
    unit lv_nydusWorm;
    int lv_player;
    point lv_point;
    int lv_packs;
    int lv_packSize;
    string lv_type;
    fixed lv_cooldown;

    // Variable Initialization
    lv_waveUnits = UnitGroupEmpty();
    lv_nydusWorm = null;
    lv_player = 0;
    lv_point = null;
    lv_packs = 0;
    lv_packSize = 0;
    lv_type = null;
    lv_cooldown = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = gv_tempNydusPoint;
    lv_player = gv_tempNydusPlayer;
    lv_packs = gv_tempNydusPacks;
    lv_packSize = gv_tempNydusPackSize;
    lv_type = gv_tempNydusType;
    lv_cooldown = gv_tempNydusCooldown;
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false) && (gv_inCinematic == false)) {
        CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, lv_player, lv_point);
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(gv_p01_USER, RegionCircle(lv_point, 4.0), 5.0, false);
    PingCreate(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_nydusWorm), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    gv_tempNydusPing = PingLastCreated();
    PingSetTooltip(gv_tempNydusPing, StringExternal("Param/Value/B3986079"));
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/22C55B0D"), null, lv_nydusWorm);
    Wait(3.7, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_nydusWorm) == false)) {
            PingDestroy(gv_tempNydusPing);
            return true;
        }
        else {
        }
        auto32E17CDC_n = lv_packs;
        auto32E17CDC_i = 1;
        while (auto32E17CDC_i <= auto32E17CDC_n) {
            if ((UnitIsAlive(lv_nydusWorm) == true)) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(lv_packSize, lv_type, 0, lv_player, UnitGetPosition(lv_nydusWorm));
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_waveUnits);
            }
            else {
            }
            Wait(0.5, c_timeGame);
            auto32E17CDC_i = auto32E17CDC_i + 1;
        }
        AIAttackWaveSetTargetPlayer(gv_p10_ZERG_WHITEHIVE, PlayerGroupSingle(gv_p01_USER));
        AIAttackWaveUseGroup(gv_p10_ZERG_WHITEHIVE, lv_waveUnits);
        AIAttackWaveSend(gv_p10_ZERG_WHITEHIVE, 0, false);
        UnitGroupClear(lv_waveUnits);
        Wait(lv_cooldown, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawningTrigger_Init () {
    gt_NydusSpawningTrigger = TriggerCreate("gt_NydusSpawningTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2332);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p02_ZERG_PURPLE_NE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p05_ZERG_ORANGE_NW, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p06_ZERG_GREEN_SW, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p07_ZERG_PINK, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2332);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p02_ZERG_PURPLE_NE, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p05_ZERG_ORANGE_NW, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p06_ZERG_GREEN_SW, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p07_ZERG_PINK, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Cannon Shots Ambient
//--------------------------------------------------------------------------------------------------
bool gt_SporeCannonShotsAmbient_Func (bool testConds, bool runActions) {
    int autoE29C4363_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SporeCannon", gv_p11_ZERG_YELLOWSPORECANNON, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        autoE29C4363_val = RandomInt(0, 8);
        if (autoE29C4363_val == 0) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(284)), c_orderQueueReplace);
        }
        else if (autoE29C4363_val == 1) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(307)), c_orderQueueReplace);
        }
        else if (autoE29C4363_val == 2) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(670)), c_orderQueueReplace);
        }
        else if (autoE29C4363_val == 3) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(747)), c_orderQueueReplace);
        }
        else if (autoE29C4363_val == 4) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(760)), c_orderQueueReplace);
        }
        else if (autoE29C4363_val == 5) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(882)), c_orderQueueReplace);
        }
        else if (autoE29C4363_val == 6) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1028)), c_orderQueueReplace);
        }
        else if (autoE29C4363_val == 7) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1091)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCannonShotsAmbient_Init () {
    gt_SporeCannonShotsAmbient = TriggerCreate("gt_SporeCannonShotsAmbient_Func");
    TriggerAddEventTimePeriodic(gt_SporeCannonShotsAmbient, 6.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Cannon Deaths
//--------------------------------------------------------------------------------------------------
bool gt_SporeCannonDeaths_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SporeCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statSporeCannonsDestroyed += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, gv_p00_NEUTRAL_PALLETS, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCannonDeaths_Init () {
    gt_SporeCannonDeaths = TriggerCreate("gt_SporeCannonDeaths_Func");
    TriggerAddEventUnitDied(gt_SporeCannonDeaths, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Supply Ship Doodad 01
//--------------------------------------------------------------------------------------------------
bool gt_DominionSupplyShipDoodad01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnit(), "Fly") == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(1.0, 3.0), c_timeGame);
    UnitKill(UnitFromId(492));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 1.0, 100.0, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionSupplyShipDoodad01_Init () {
    gt_DominionSupplyShipDoodad01 = TriggerCreate("gt_DominionSupplyShipDoodad01_Func");
    TriggerAddEventUnitRegion(gt_DominionSupplyShipDoodad01, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Supply Ship Doodad 02
//--------------------------------------------------------------------------------------------------
bool gt_DominionSupplyShipDoodad02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnit(), "Fly") == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(1.0, 3.0), c_timeGame);
    UnitKill(UnitFromId(494));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 1.0, 100.0, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionSupplyShipDoodad02_Init () {
    gt_DominionSupplyShipDoodad02 = TriggerCreate("gt_DominionSupplyShipDoodad02_Func");
    TriggerAddEventUnitRegion(gt_DominionSupplyShipDoodad02, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Supply Ship Doodad 03
//--------------------------------------------------------------------------------------------------
bool gt_DominionSupplyShipDoodad03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnit(), "Fly") == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(1.0, 3.0), c_timeGame);
    UnitKill(UnitFromId(495));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 1.0, 100.0, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionSupplyShipDoodad03_Init () {
    gt_DominionSupplyShipDoodad03 = TriggerCreate("gt_DominionSupplyShipDoodad03_Func");
    TriggerAddEventUnitRegion(gt_DominionSupplyShipDoodad03, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickups_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DominionSuppliesTipQ, true, false);
    if ((UnitGetType(EventUnit()) == "PalletMinerals")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "NaturalGas")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "PalletGas")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickups_Init () {
    gt_ResourcePickups = TriggerCreate("gt_ResourcePickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Infinite Spawning 01
//--------------------------------------------------------------------------------------------------
bool gt_NydusInfiniteSpawning01_Func (bool testConds, bool runActions) {
    int auto46CF8787_n;
    int auto46CF8787_i;
    int auto78445A44_n;
    int auto78445A44_i;
    int auto965022B8_n;
    int auto965022B8_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusOBJ01) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Zergling", gv_p10_ZERG_WHITEHIVE, RegionFromId(74), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAll) <= libNtve_gf_DifficultyValueInt(4, 4, 6, 6)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto46CF8787_n = libNtve_gf_DifficultyValueInt(4, 4, 3, 4);
    auto46CF8787_i = 1;
    while (auto46CF8787_i <= auto46CF8787_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ01), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ01));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ01) == false)) {
            return true;
        }
        else {
        }
        auto46CF8787_i = auto46CF8787_i + 1;
    }
    auto78445A44_n = 1;
    auto78445A44_i = 1;
    while (auto78445A44_i <= auto78445A44_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ01), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ01));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ01) == false)) {
            return true;
        }
        else {
        }
        auto78445A44_i = auto78445A44_i + 1;
    }
    auto965022B8_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
    auto965022B8_i = 1;
    while (auto965022B8_i <= auto965022B8_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ01), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ01));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ01) == false)) {
            return true;
        }
        else {
        }
        auto965022B8_i = auto965022B8_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusInfiniteSpawning01_Init () {
    gt_NydusInfiniteSpawning01 = TriggerCreate("gt_NydusInfiniteSpawning01_Func");
    TriggerEnable(gt_NydusInfiniteSpawning01, false);
    TriggerAddEventTimePeriodic(gt_NydusInfiniteSpawning01, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Infinite Spawning 02
//--------------------------------------------------------------------------------------------------
bool gt_NydusInfiniteSpawning02_Func (bool testConds, bool runActions) {
    int auto4305794D_n;
    int auto4305794D_i;
    int auto591F2305_n;
    int auto591F2305_i;
    int auto39F69CDF_n;
    int auto39F69CDF_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusOBJ02) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Zergling", gv_p10_ZERG_WHITEHIVE, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= libNtve_gf_DifficultyValueInt(4, 4, 6, 6)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4305794D_n = libNtve_gf_DifficultyValueInt(4, 4, 3, 4);
    auto4305794D_i = 1;
    while (auto4305794D_i <= auto4305794D_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ02), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ02));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ02) == false)) {
            return true;
        }
        else {
        }
        auto4305794D_i = auto4305794D_i + 1;
    }
    auto591F2305_n = 1;
    auto591F2305_i = 1;
    while (auto591F2305_i <= auto591F2305_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ02), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ02));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ02) == false)) {
            return true;
        }
        else {
        }
        auto591F2305_i = auto591F2305_i + 1;
    }
    auto39F69CDF_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
    auto39F69CDF_i = 1;
    while (auto39F69CDF_i <= auto39F69CDF_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ02), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ02));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ02) == false)) {
            return true;
        }
        else {
        }
        auto39F69CDF_i = auto39F69CDF_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusInfiniteSpawning02_Init () {
    gt_NydusInfiniteSpawning02 = TriggerCreate("gt_NydusInfiniteSpawning02_Func");
    TriggerEnable(gt_NydusInfiniteSpawning02, false);
    TriggerAddEventTimePeriodic(gt_NydusInfiniteSpawning02, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Infinite Spawning 03
//--------------------------------------------------------------------------------------------------
bool gt_NydusInfiniteSpawning03_Func (bool testConds, bool runActions) {
    int autoEAB5933F_n;
    int autoEAB5933F_i;
    int auto77017D47_n;
    int auto77017D47_i;
    int autoD56470FE_n;
    int autoD56470FE_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusOBJ03) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Zergling", gv_p10_ZERG_WHITEHIVE, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= libNtve_gf_DifficultyValueInt(4, 4, 6, 6)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEAB5933F_n = libNtve_gf_DifficultyValueInt(4, 4, 3, 4);
    autoEAB5933F_i = 1;
    while (autoEAB5933F_i <= autoEAB5933F_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ03), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ03));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ03) == false)) {
            return true;
        }
        else {
        }
        autoEAB5933F_i = autoEAB5933F_i + 1;
    }
    auto77017D47_n = 1;
    auto77017D47_i = 1;
    while (auto77017D47_i <= auto77017D47_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ03), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ03));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ03) == false)) {
            return true;
        }
        else {
        }
        auto77017D47_i = auto77017D47_i + 1;
    }
    autoD56470FE_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
    autoD56470FE_i = 1;
    while (autoD56470FE_i <= autoD56470FE_n) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusOBJ03), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_p10_ZERG_WHITEHIVE, UnitGetPosition(gv_nydusOBJ03));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_nydusOBJ03) == false)) {
            return true;
        }
        else {
        }
        autoD56470FE_i = autoD56470FE_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusInfiniteSpawning03_Init () {
    gt_NydusInfiniteSpawning03 = TriggerCreate("gt_NydusInfiniteSpawning03_Func");
    TriggerEnable(gt_NydusInfiniteSpawning03, false);
    TriggerAddEventTimePeriodic(gt_NydusInfiniteSpawning03, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barracks01
//--------------------------------------------------------------------------------------------------
bool gt_Barracks01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_crashBarracks01;

    // Variable Initialization
    lv_crashBarracks01 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_stopFallingDebrisAndStuctures == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateActorAtPoint("CharCrashingBarracks", PointFromId(1080));
    lv_crashBarracks01 = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeModelFaceAngle(lv_crashBarracks01, RandomFixed(135.0, 225.0));
    libNtve_gf_PlayAnimation(lv_crashBarracks01, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_crashBarracks01, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Barracks01_Init () {
    gt_Barracks01 = TriggerCreate("gt_Barracks01_Func");
    TriggerAddEventUnitRangePoint(gt_Barracks01, null, PointFromId(1080), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barracks02
//--------------------------------------------------------------------------------------------------
bool gt_Barracks02_Func (bool testConds, bool runActions) {
    int auto57982A3B_val;

    // Variable Declarations
    actor lv_crashBarracks02;

    // Variable Initialization
    lv_crashBarracks02 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_stopFallingDebrisAndStuctures == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateActorAtPoint("CharCrashingBarracks", PointFromId(267));
    lv_crashBarracks02 = libNtve_gf_ActorLastCreated();
    auto57982A3B_val = RandomInt(0, 1);
    if (auto57982A3B_val == 0) {
        libNtve_gf_MakeModelFaceAngle(lv_crashBarracks02, RandomFixed(135.0, 225.0));
    }
    else if (auto57982A3B_val == 1) {
        libNtve_gf_MakeModelFaceAngle(lv_crashBarracks02, RandomFixed(315.0, 45.0));
    }
    else {
    }
    libNtve_gf_PlayAnimation(lv_crashBarracks02, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_crashBarracks02, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Barracks02_Init () {
    gt_Barracks02 = TriggerCreate("gt_Barracks02_Func");
    TriggerAddEventUnitRangePoint(gt_Barracks02, null, PointFromId(267), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Factory01
//--------------------------------------------------------------------------------------------------
bool gt_Factory01_Func (bool testConds, bool runActions) {
    int auto4FF0DC47_val;

    // Variable Declarations
    actor lv_crashFactory01;

    // Variable Initialization
    lv_crashFactory01 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_stopFallingDebrisAndStuctures == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateActorAtPoint("CharCrashingFactory", PointFromId(268));
    lv_crashFactory01 = libNtve_gf_ActorLastCreated();
    auto4FF0DC47_val = RandomInt(0, 1);
    if (auto4FF0DC47_val == 0) {
        libNtve_gf_MakeModelFaceAngle(lv_crashFactory01, RandomFixed(135.0, 225.0));
    }
    else if (auto4FF0DC47_val == 1) {
        libNtve_gf_MakeModelFaceAngle(lv_crashFactory01, RandomFixed(315.0, 45.0));
    }
    else {
    }
    libNtve_gf_PlayAnimation(lv_crashFactory01, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_crashFactory01, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Factory01_Init () {
    gt_Factory01 = TriggerCreate("gt_Factory01_Func");
    TriggerAddEventUnitRangePoint(gt_Factory01, null, PointFromId(268), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Factory02
//--------------------------------------------------------------------------------------------------
bool gt_Factory02_Func (bool testConds, bool runActions) {
    int auto96A5988F_val;

    // Variable Declarations
    actor lv_crashFactory02;

    // Variable Initialization
    lv_crashFactory02 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_stopFallingDebrisAndStuctures == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateActorAtPoint("CharCrashingFactory", PointFromId(1145));
    lv_crashFactory02 = libNtve_gf_ActorLastCreated();
    auto96A5988F_val = RandomInt(0, 1);
    if (auto96A5988F_val == 0) {
        libNtve_gf_MakeModelFaceAngle(lv_crashFactory02, RandomFixed(135.0, 225.0));
    }
    else if (auto96A5988F_val == 1) {
        libNtve_gf_MakeModelFaceAngle(lv_crashFactory02, RandomFixed(315.0, 45.0));
    }
    else {
    }
    libNtve_gf_PlayAnimation(lv_crashFactory02, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_crashFactory02, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Factory02_Init () {
    gt_Factory02 = TriggerCreate("gt_Factory02_Func");
    TriggerAddEventUnitRangePoint(gt_Factory02, null, PointFromId(1145), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser01
//--------------------------------------------------------------------------------------------------
bool gt_Battlecruiser01_Func (bool testConds, bool runActions) {
    int autoD1E67D9F_val;

    // Variable Declarations
    actor lv_crashBattlecruiser01;

    // Variable Initialization
    lv_crashBattlecruiser01 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_stopFallingDebrisAndStuctures == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateActorAtPoint("CharCrashingBattlecruiser", PointFromId(1148));
    lv_crashBattlecruiser01 = libNtve_gf_ActorLastCreated();
    autoD1E67D9F_val = RandomInt(0, 1);
    if (autoD1E67D9F_val == 0) {
        libNtve_gf_MakeModelFaceAngle(lv_crashBattlecruiser01, RandomFixed(135.0, 225.0));
    }
    else if (autoD1E67D9F_val == 1) {
        libNtve_gf_MakeModelFaceAngle(lv_crashBattlecruiser01, RandomFixed(315.0, 45.0));
    }
    else {
    }
    libNtve_gf_PlayAnimation(lv_crashBattlecruiser01, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_crashBattlecruiser01, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Battlecruiser01_Init () {
    gt_Battlecruiser01 = TriggerCreate("gt_Battlecruiser01_Func");
    TriggerAddEventUnitRangePoint(gt_Battlecruiser01, null, PointFromId(1148), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser02
//--------------------------------------------------------------------------------------------------
bool gt_Battlecruiser02_Func (bool testConds, bool runActions) {
    int auto7B53D032_val;

    // Variable Declarations
    actor lv_crashBattlecruiser02;

    // Variable Initialization
    lv_crashBattlecruiser02 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_stopFallingDebrisAndStuctures == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateActorAtPoint("CharCrashingBattlecruiser", PointFromId(1149));
    lv_crashBattlecruiser02 = libNtve_gf_ActorLastCreated();
    auto7B53D032_val = RandomInt(0, 1);
    if (auto7B53D032_val == 0) {
        libNtve_gf_MakeModelFaceAngle(lv_crashBattlecruiser02, RandomFixed(135.0, 225.0));
    }
    else if (auto7B53D032_val == 1) {
        libNtve_gf_MakeModelFaceAngle(lv_crashBattlecruiser02, RandomFixed(315.0, 45.0));
    }
    else {
    }
    libNtve_gf_PlayAnimation(lv_crashBattlecruiser02, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_crashBattlecruiser02, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Battlecruiser02_Init () {
    gt_Battlecruiser02 = TriggerCreate("gt_Battlecruiser02_Func");
    TriggerAddEventUnitRangePoint(gt_Battlecruiser02, null, PointFromId(1149), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateFloatingDebris
//--------------------------------------------------------------------------------------------------
bool gt_CreateFloatingDebris_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_stopFallingDebrisAndStuctures == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnCrashingDoodad(PointFromId(1218), "CharCrashingDebris");
    Wait(1.0, c_timeGame);
    if ((gv_stopFallingDebrisAndStuctures == false)) {
        gf_SpawnCrashingDoodad(PointFromId(1218), "CharCrashingDebris");
    }
    else {
    }
    Wait(1.0, c_timeGame);
    if ((gv_stopFallingDebrisAndStuctures == false)) {
        gf_SpawnCrashingDoodad(PointFromId(1218), "CharCrashingDebris");
    }
    else {
    }
    Wait(1.0, c_timeGame);
    if ((gv_stopFallingDebrisAndStuctures == false)) {
        gf_SpawnCrashingDoodad(PointFromId(1218), "CharCrashingDebris");
    }
    else {
    }
    Wait(1.0, c_timeGame);
    if ((gv_stopFallingDebrisAndStuctures == false)) {
        gf_SpawnCrashingDoodad(PointFromId(1218), "CharCrashingDebris");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateFloatingDebris_Init () {
    gt_CreateFloatingDebris = TriggerCreate("gt_CreateFloatingDebris_Func");
    TriggerAddEventTimePeriodic(gt_CreateFloatingDebris, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg North Extra Guys
//--------------------------------------------------------------------------------------------------
bool gt_ZergNorthExtraGuys_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "ZerglingBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "ZerglingBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "ZerglingBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoachBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoachBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "BanelingBurrowed", 0, gv_p05_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(39)));
    AIToggleBulliesInRegion(gv_p05_ZERG_ORANGE_NW, RegionFromId(18), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergNorthExtraGuys_Init () {
    gt_ZergNorthExtraGuys = TriggerCreate("gt_ZergNorthExtraGuys_Func");
    TriggerAddEventUnitRegion(gt_ZergNorthExtraGuys, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg North Small Extra Guys
//--------------------------------------------------------------------------------------------------
bool gt_ZergNorthSmallExtraGuys_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "ZerglingBurrowed", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(42)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "ZerglingBurrowed", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(42)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "ZerglingBurrowed", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(42)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(42)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(42)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(42)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(42)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachBurrowed", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(42)));
    AIToggleBulliesInRegion(gv_p02_ZERG_PURPLE_NE, RegionFromId(18), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergNorthSmallExtraGuys_Init () {
    gt_ZergNorthSmallExtraGuys = TriggerCreate("gt_ZergNorthSmallExtraGuys_Func");
    TriggerAddEventUnitRegion(gt_ZergNorthSmallExtraGuys, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg South Extra Guys
//--------------------------------------------------------------------------------------------------
bool gt_ZergSouthExtraGuys_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "ZerglingBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "ZerglingBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "ZerglingBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoachBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoachBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "BanelingBurrowed", 0, gv_p06_ZERG_GREEN_SW, RegionRandomPoint(RegionFromId(40)));
    AIToggleBulliesInRegion(gv_p06_ZERG_GREEN_SW, RegionFromId(18), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSouthExtraGuys_Init () {
    gt_ZergSouthExtraGuys = TriggerCreate("gt_ZergSouthExtraGuys_Func");
    TriggerAddEventUnitRegion(gt_ZergSouthExtraGuys, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveTroopSupplyCreate Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTroopSupplyCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/CCBA874B") + FixedToText(gv_existingSupplyUpdate, 0) + StringExternal("Param/Value/D2C29749") + IntToText(gv_obejctiveTroopsSupplyTotal) + StringExternal("Param/Value/FFF89351")), StringExternal("Param/Value/ACD3FC1A"), c_objectiveStateActive, true);
    gv_troopSupply = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(88, gv_troopSupply, StringExternal("Param/Value/099D9D4B"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTroopSupplyCreateQ_Init () {
    gt_ObjectiveTroopSupplyCreateQ = TriggerCreate("gt_ObjectiveTroopSupplyCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveTroopSupplyComplete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTroopSupplyComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_objectiveTroopsCompleted = true;
    TriggerExecute(gt_ObjectiveTroopSupplyCreateQ, true, false);
    ObjectiveSetState(gv_troopSupply, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/FF1C27F9"));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTroopSupplyComplete_Init () {
    gt_ObjectiveTroopSupplyComplete = TriggerCreate("gt_ObjectiveTroopSupplyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveTroopSupplyFailed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTroopSupplyFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveTroopSupplyCreateQ, true, false);
    ObjectiveSetState(gv_troopSupply, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTroopSupplyFailed_Init () {
    gt_ObjectiveTroopSupplyFailed = TriggerCreate("gt_ObjectiveTroopSupplyFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveFoodSupply
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFoodSupply_Func (bool testConds, bool runActions) {
    unitgroup auto26EB6079_g;
    int auto26EB6079_u;
    unitgroup auto09A7124F_g;
    int auto09A7124F_u;

    // Variable Declarations
    unit lv_allUnits;
    unit lv_cargoUnits;

    // Variable Initialization
    lv_allUnits = null;
    lv_cargoUnits = null;

    // Conditions
    if (testConds) {
        if (!((gv_troopSupply != c_invalidObjectiveId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_existingSupplyUpdate = 0;
    auto26EB6079_g = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto26EB6079_u = 1;
    while (auto26EB6079_u <= UnitGroupCount(auto26EB6079_g, c_unitCountAll)) {
        lv_allUnits = UnitGroupUnit(auto26EB6079_g, auto26EB6079_u);
        gv_existingSupplyUpdate += UnitGetPropertyFixed(lv_allUnits, c_unitPropSuppliesUsed, c_unitPropCurrent);
        auto09A7124F_g = UnitCargoGroup(lv_allUnits);
        auto09A7124F_u = 1;
        while (auto09A7124F_u <= UnitGroupCount(auto09A7124F_g, c_unitCountAll)) {
            lv_cargoUnits = UnitGroupUnit(auto09A7124F_g, auto09A7124F_u);
            gv_existingSupplyUpdate += UnitGetPropertyFixed(lv_cargoUnits, c_unitPropSuppliesUsed, c_unitPropCurrent);
            if (lv_cargoUnits == UnitGroupUnit(auto09A7124F_g, auto09A7124F_u)) {
                auto09A7124F_u = auto09A7124F_u + 1;
            }
        }
        if (lv_allUnits == UnitGroupUnit(auto26EB6079_g, auto26EB6079_u)) {
            auto26EB6079_u = auto26EB6079_u + 1;
        }
    }
    TriggerExecute(gt_ObjectiveTroopSupplyUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFoodSupply_Init () {
    gt_ObjectiveFoodSupply = TriggerCreate("gt_ObjectiveFoodSupply_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveFoodSupply, 0.4, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveTroopSupplyUpdate
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTroopSupplyUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveTroopSupplyCreateQ, true, false);
    ObjectiveSetName(gv_troopSupply, (StringExternal("Param/Value/35A51023") + FixedToText(gv_existingSupplyUpdate, 0) + StringExternal("Param/Value/931B73B1") + (IntToText(gv_obejctiveTroopsSupplyTotal)) + StringExternal("Param/Value/A31AC52F")));
    if ((gv_existingSupplyUpdate >= IntToFixed(gv_obejctiveTroopsSupplyTotal))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ObjectiveFoodSupply, false);
        TriggerExecute(gt_ObjectiveTroopSupplyComplete, true, false);
        ObjectiveSetName(gv_troopSupply, (StringExternal("Param/Value/CF493A94") + FixedToText(100.0, 0) + StringExternal("Param/Value/93880367") + (IntToText(gv_obejctiveTroopsSupplyTotal)) + StringExternal("Param/Value/A3A377F1")));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTroopSupplyUpdate_Init () {
    gt_ObjectiveTroopSupplyUpdate = TriggerCreate("gt_ObjectiveTroopSupplyUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveNydusWorms Create Hidden
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNydusWormsCreateHidden_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate((StringExternal("Param/Value/C304BF9D") + IntToText(gv_obejctiveNydusWormsUpdate) + StringExternal("Param/Value/2DF13558") + IntToText(gv_obejctiveNydusWormsTotal) + StringExternal("Param/Value/F9F69467")), StringExternal("Param/Value/C5E5B9B1"), c_objectiveStateHidden, true);
    gv_objectiveNydusWorms = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(87, ObjectiveLastCreated(), StringExternal("Param/Value/F35D34B8"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNydusWormsCreateHidden_Init () {
    gt_ObjectiveNydusWormsCreateHidden = TriggerCreate("gt_ObjectiveNydusWormsCreateHidden_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveNydusWorms Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNydusWormsUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveNydusWormsCreateHidden, true, false);
    gv_obejctiveNydusWormsUpdate += 1;
    ObjectiveSetName(gv_objectiveNydusWorms, (StringExternal("Param/Value/2FB3E0A4") + IntToText(gv_obejctiveNydusWormsUpdate) + StringExternal("Param/Value/482E305A") + (IntToText(gv_obejctiveNydusWormsTotal)) + StringExternal("Param/Value/5D117C8B")));
    if ((gv_obejctiveNydusWormsUpdate == gv_obejctiveNydusWormsTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveNydusWormsComplete, true, false);
    }
    else {
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNydusWormsUpdate_Init () {
    gt_ObjectiveNydusWormsUpdate = TriggerCreate("gt_ObjectiveNydusWormsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveNydusWorms Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNydusWormsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveNydusWormsCreateHidden, true, false);
    ObjectiveSetState(gv_objectiveNydusWorms, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_VictoryPrimaryObjectiveCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNydusWormsComplete_Init () {
    gt_ObjectiveNydusWormsComplete = TriggerCreate("gt_ObjectiveNydusWormsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveNydusWorms Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNydusWormsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveNydusWormsCreateHidden, true, false);
    ObjectiveSetState(gv_objectiveNydusWorms, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNydusWormsFailed_Init () {
    gt_ObjectiveNydusWormsFailed = TriggerCreate("gt_ObjectiveNydusWormsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus01Dies
//--------------------------------------------------------------------------------------------------
bool gt_Nydus01Dies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nydusOBJ01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_actorNydusTarget01);
    PingDestroy(gv_pingNydus01);
    TriggerExecute(gt_ObjectiveNydusWormsUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nydus01Dies_Init () {
    gt_Nydus01Dies = TriggerCreate("gt_Nydus01Dies_Func");
    TriggerAddEventUnitDied(gt_Nydus01Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus02Dies
//--------------------------------------------------------------------------------------------------
bool gt_Nydus02Dies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nydusOBJ02))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_actorNydusTarget02);
    PingDestroy(gv_pingNydus02);
    TriggerExecute(gt_ObjectiveNydusWormsUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nydus02Dies_Init () {
    gt_Nydus02Dies = TriggerCreate("gt_Nydus02Dies_Func");
    TriggerAddEventUnitDied(gt_Nydus02Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus03Dies
//--------------------------------------------------------------------------------------------------
bool gt_Nydus03Dies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nydusOBJ03))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_actorNydusTarget03);
    PingDestroy(gv_pingNydus03);
    TriggerExecute(gt_ObjectiveNydusWormsUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nydus03Dies_Init () {
    gt_Nydus03Dies = TriggerCreate("gt_Nydus03Dies_Func");
    TriggerAddEventUnitDied(gt_Nydus03Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_IntroSequence);
    TriggerStop(gt_StartAI);
    TriggerStop(gt_DropPodallPodSpawnsQ);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetColorIndex(gv_p01_USER, 1, true);
    TechTreeUpgradeAddLevel(gv_p02_ZERG_PURPLE_NE, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p02_ZERG_PURPLE_NE, "zerglingmovementspeed", 1);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_p01_USER);
    PointSet(PointFromId(267), PointFromId(159));
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_ZERG_PURPLE_NE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p05_ZERG_ORANGE_NW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p06_ZERG_GREEN_SW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "SporeCannon")) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p10_ZERG_WHITEHIVE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitCreate(1, "SporeCrawler", 0, gv_p07_ZERG_PINK, PointFromId(109), 270.0);
    UnitCreate(1, "SporeCrawler", 0, gv_p07_ZERG_PINK, PointFromId(546), 270.0);
    UnitCreate(1, "SporeCrawler", 0, gv_p07_ZERG_PINK, PointFromId(1041), 270.0);
    UnitCreate(1, "SporeCrawler", 0, gv_p07_ZERG_PINK, PointFromId(1042), 270.0);
    UnitCreate(1, "SporeCrawler", 0, gv_p07_ZERG_PINK, PointFromId(1043), 270.0);
    UnitCreate(1, "SporeCrawler", 0, gv_p07_ZERG_PINK, PointFromId(1078), 270.0);
    UnitCreate(1, "SporeCrawler", 0, gv_p07_ZERG_PINK, PointFromId(1079), 270.0);
    UnitCreate(1, "SporeCrawler", 0, gv_p07_ZERG_PINK, PointFromId(163), 270.0);
    gv_briefingSlaughterAreas[1].lv_zergRegion = RegionFromId(90);
    gv_briefingSlaughterAreas[1].lv_terranRegion = RegionFromId(94);
    gv_briefingSlaughterAreas[2].lv_zergRegion = RegionFromId(91);
    gv_briefingSlaughterAreas[2].lv_terranRegion = RegionFromId(95);
    gv_briefingSlaughterAreas[3].lv_zergRegion = RegionFromId(92);
    gv_briefingSlaughterAreas[3].lv_terranRegion = RegionFromId(96);
    gv_briefingSlaughterAreas[4].lv_zergRegion = RegionFromId(93);
    gv_briefingSlaughterAreas[4].lv_terranRegion = RegionFromId(97);
    TriggerExecute(gt_BriefingZergCreation, true, false);
    TriggerExecute(gt_BriefingTerranInvasion, true, false);
    Wait(8.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1349), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1313), 14.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian01_00");
    CinematicFade(true, 5.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TValerian01BriefingMarine00013", -1)
    SoundPlay(SoundLink("TValerian01BriefingMarine00013", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00013", -1))), c_timeReal);
    // Transmission - SoundLink("TValerian01BriefingMarine00014", -1)
    SoundPlay(SoundLink("TValerian01BriefingMarine00014", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00014", -1))), c_timeReal);
    // Transmission - SoundLink("TValerian01BriefingMarine00015", -1)
    SoundPlay(SoundLink("TValerian01BriefingMarine00015", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00015", -1))), c_timeReal);
    // Transmission - SoundLink("TValerian01BriefingMarine00016", -1)
    SoundPlay(SoundLink("TValerian01BriefingMarine00016", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00016", -1))), c_timeReal);
    // Transmission - SoundLink("TValerian01BriefingMarine00017", -1)
    SoundPlay(SoundLink("TValerian01BriefingMarine00017", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00017", -1))), c_timeReal);
    // Transmission - SoundLink("TValerian01BriefingRaynor00001", -1)
    SoundPlay(SoundLink("TValerian01BriefingRaynor00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingRaynor00001", -1))), c_timeReal);
    // Transmission - SoundLink("TValerian01BriefingTychus00002", -1)
    SoundPlay(SoundLink("TValerian01BriefingTychus00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingTychus00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00013", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00014", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00015", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00016", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingMarine00017", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingRaynor00001", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingTychus00002", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    int autoBDDFF2D7_ae;
    int autoBDDFF2D7_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1147), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1146), (SoundLengthSync(SoundLink("TValerian01BriefingRaynor00007", -1)) + SoundLengthSync(SoundLink("TValerian01BriefingHorner00008", 0))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian01_01");
    // Transmission - SoundLink("TValerian01BriefingRaynor00007", -1)
    SoundPlay(SoundLink("TValerian01BriefingRaynor00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingRaynor00007", -1))), c_timeReal);
    // Transmission - SoundLink("TValerian01BriefingHorner00008", -1)
    SoundPlay(SoundLink("TValerian01BriefingHorner00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingHorner00008", -1))), c_timeReal);
    // Transmission - SoundLink("TValerian01BriefingRaynor00009", -1)
    SoundPlay(SoundLink("TValerian01BriefingRaynor00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian01BriefingRaynor00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingRaynor00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingHorner00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian01BriefingRaynor00009", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(gt_BriefingTerranInvasion);
    TriggerStop(gt_BriefingZergCreation);
    TriggerEnable(gt_BriefingZergRespawn, false);
    autoBDDFF2D7_ae = 4;
    autoBDDFF2D7_ai = 1;
    lv_i = 1;
    while ((autoBDDFF2D7_ai >= 0 && lv_i <= autoBDDFF2D7_ae) || (autoBDDFF2D7_ai <= 0 && lv_i >= autoBDDFF2D7_ae)) {
        UnitGroupLoopBegin(gv_briefingSlaughterAreas[lv_i].lv_zergGroup);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if (lv_i == autoBDDFF2D7_ae) {
            break;
        }
        lv_i = lv_i + autoBDDFF2D7_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zerg Creation
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZergCreation_Func (bool testConds, bool runActions) {
    int auto23251AE3_ae;
    int auto23251AE3_ai;
    int auto6BE4B5E9_ae;
    int auto6BE4B5E9_ai;

    // Variable Declarations
    point lv_randomSpot;
    int lv_i;

    // Variable Initialization
    lv_randomSpot = null;
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(12, "Zergling", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(90)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[1].lv_zergGroup);
    UnitCreate(4, "Hydralisk", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(90)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[1].lv_zergGroup);
    UnitCreate(4, "Roach", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(90)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[1].lv_zergGroup);
    UnitCreate(20, "Zergling", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(91)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[2].lv_zergGroup);
    UnitCreate(6, "Hydralisk", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(91)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[2].lv_zergGroup);
    UnitCreate(4, "Roach", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(91)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[2].lv_zergGroup);
    UnitCreate(12, "Zergling", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(92)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[3].lv_zergGroup);
    UnitCreate(4, "Hydralisk", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(92)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[3].lv_zergGroup);
    UnitCreate(4, "Roach", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(92)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[3].lv_zergGroup);
    UnitCreate(24, "Zergling", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(93)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[4].lv_zergGroup);
    UnitCreate(7, "Hydralisk", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(93)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[4].lv_zergGroup);
    UnitCreate(5, "Roach", 0, gv_p02_ZERG_PURPLE_NE, RegionRandomPoint(RegionFromId(93)), 270.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_briefingSlaughterAreas[4].lv_zergGroup);
    auto23251AE3_ae = 4;
    auto23251AE3_ai = 1;
    lv_i = 1;
    while ((auto23251AE3_ai >= 0 && lv_i <= auto23251AE3_ae) || (auto23251AE3_ai <= 0 && lv_i >= auto23251AE3_ae)) {
        UnitGroupLoopBegin(gv_briefingSlaughterAreas[lv_i].lv_zergGroup);
        while (!UnitGroupLoopDone()) {
            lv_randomSpot = RegionRandomPoint(gv_briefingSlaughterAreas[lv_i].lv_zergRegion);
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, PointGetX(lv_randomSpot));
            UnitSetCustomValue(UnitGroupLoopCurrent(), 1, PointGetY(lv_randomSpot));
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if (lv_i == auto23251AE3_ae) {
            break;
        }
        lv_i = lv_i + auto23251AE3_ai;
    }
    TriggerEnable(gt_BriefingZergRespawn, true);
    while (true) {
        auto6BE4B5E9_ae = 4;
        auto6BE4B5E9_ai = 1;
        lv_i = 1;
        while ((auto6BE4B5E9_ai >= 0 && lv_i <= auto6BE4B5E9_ae) || (auto6BE4B5E9_ai <= 0 && lv_i >= auto6BE4B5E9_ae)) {
            UnitGroupLoopBegin(gv_briefingSlaughterAreas[lv_i].lv_zergGroup);
            while (!UnitGroupLoopDone()) {
                if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(Point(UnitGetCustomValue(UnitGroupLoopCurrent(), 0), UnitGetCustomValue(UnitGroupLoopCurrent(), 1)), 1.0)) == true) && (RandomInt(1, 6) == 1)) {
                    lv_randomSpot = RegionRandomPoint(gv_briefingSlaughterAreas[lv_i].lv_zergRegion);
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 0, PointGetX(lv_randomSpot));
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 1, PointGetY(lv_randomSpot));
                }
                else {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(UnitGroupLoopCurrent(), 0), UnitGetCustomValue(UnitGroupLoopCurrent(), 1))), c_orderQueueReplace);
                }
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            if (lv_i == auto6BE4B5E9_ae) {
                break;
            }
            lv_i = lv_i + auto6BE4B5E9_ai;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZergCreation_Init () {
    gt_BriefingZergCreation = TriggerCreate("gt_BriefingZergCreation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zerg Respawn
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZergRespawn_Func (bool testConds, bool runActions) {
    int auto6EBA6C19_ae;
    int auto6EBA6C19_ai;

    // Variable Declarations
    point lv_randomSpot;
    int lv_i;
    int lv_index;

    // Variable Initialization
    lv_randomSpot = null;
    lv_i = 0;
    lv_index = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ZERG_PURPLE_NE))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6EBA6C19_ae = 4;
    auto6EBA6C19_ai = 1;
    lv_i = 1;
    while ((auto6EBA6C19_ai >= 0 && lv_i <= auto6EBA6C19_ae) || (auto6EBA6C19_ai <= 0 && lv_i >= auto6EBA6C19_ae)) {
        if ((UnitGroupHasUnit(gv_briefingSlaughterAreas[lv_i].lv_zergGroup, EventUnit()) == true)) {
            lv_index = lv_i;
            break;
        }
        else {
        }
        if (lv_i == auto6EBA6C19_ae) {
            break;
        }
        lv_i = lv_i + auto6EBA6C19_ai;
    }
    if ((lv_index == 0)) {
        return true;
    }
    else {
    }
    if ((lv_index <= 2)) {
        UnitCreate(1, UnitGetType(EventUnit()), 0, gv_p02_ZERG_PURPLE_NE, PointFromId(1377), 135.0);
    }
    else {
        if ((RandomInt(1, 2) == 1)) {
            UnitCreate(1, UnitGetType(EventUnit()), 0, gv_p02_ZERG_PURPLE_NE, PointFromId(13), 225.0);
        }
        else {
            UnitCreate(1, UnitGetType(EventUnit()), 0, gv_p02_ZERG_PURPLE_NE, PointFromId(1378), 225.0);
        }
    }
    lv_randomSpot = RegionRandomPoint(gv_briefingSlaughterAreas[lv_index].lv_zergRegion);
    UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_randomSpot));
    UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_randomSpot));
    UnitGroupAdd(gv_briefingSlaughterAreas[lv_index].lv_zergGroup, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZergRespawn_Init () {
    gt_BriefingZergRespawn = TriggerCreate("gt_BriefingZergRespawn_Func");
    TriggerEnable(gt_BriefingZergRespawn, false);
    TriggerAddEventUnitDied(gt_BriefingZergRespawn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Terran Invasion
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTerranInvasion_Func (bool testConds, bool runActions) {
    int auto89CC550B_ae;
    int auto89CC550B_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SporeCrawler", c_playerAny, gv_briefingSlaughterAreas[4].lv_terranRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (true) {
        Wait(1.0, c_timeGame);
        auto89CC550B_ae = 4;
        auto89CC550B_ai = 1;
        lv_i = 1;
        while ((auto89CC550B_ai >= 0 && lv_i <= auto89CC550B_ae) || (auto89CC550B_ai <= 0 && lv_i >= auto89CC550B_ae)) {
            if ((RandomInt(1, 5) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_p01_USER, RegionRandomPoint(gv_briefingSlaughterAreas[lv_i].lv_terranRegion), RegionGetCenter(gv_briefingSlaughterAreas[lv_i].lv_zergRegion));
                UnitCargoCreate(UnitLastCreated(), "Marine", 8);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), RegionRandomPoint(gv_briefingSlaughterAreas[lv_i].lv_zergRegion)), c_orderQueueReplace);
            }
            else {
            }
            if ((RandomInt(1, 5) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "VikingFighter", 0, gv_p01_USER, RegionRandomPoint(gv_briefingSlaughterAreas[lv_i].lv_terranRegion), RegionGetCenter(gv_briefingSlaughterAreas[lv_i].lv_zergRegion));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_briefingSlaughterAreas[lv_i].lv_zergRegion)), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
            }
            else {
            }
            if ((RandomInt(1, 5) == 1)) {
                UnitCreate(6, "Marine", 0, gv_p01_USER, PointFromId(313), 270.0);
                libCamp_gf_CreateDropPod(0, RegionRandomPoint(gv_briefingSlaughterAreas[lv_i].lv_zergRegion), UnitLastCreatedGroup(), false);
            }
            else {
            }
            if (lv_i == auto89CC550B_ae) {
                break;
            }
            lv_i = lv_i + auto89CC550B_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTerranInvasion_Init () {
    gt_BriefingTerranInvasion = TriggerCreate("gt_BriefingTerranInvasion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsGetSandbagLeft
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsGetSandbagLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_sandbagGet01 == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_sCV01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(536)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsGetSandbagLeft_Init () {
    gt_SandbagsGetSandbagLeft = TriggerCreate("gt_SandbagsGetSandbagLeft_Func");
    TriggerEnable(gt_SandbagsGetSandbagLeft, false);
    TriggerAddEventTimePeriodic(gt_SandbagsGetSandbagLeft, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsAtCrashSiteLeft
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsAtCrashSiteLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_sandbagGet01 == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV01), PointWithOffset(PointFromId(536), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sandbagGet01 = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsAtCrashSiteLeft_Init () {
    gt_SandbagsAtCrashSiteLeft = TriggerCreate("gt_SandbagsAtCrashSiteLeft_Func");
    TriggerEnable(gt_SandbagsAtCrashSiteLeft, false);
    TriggerAddEventTimePeriodic(gt_SandbagsAtCrashSiteLeft, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsHasSandbagLeft
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsHasSandbagLeft_Func (bool testConds, bool runActions) {
    int autoBB8EFCE8_val;

    // Conditions
    if (testConds) {
        if (!((gv_sandbagGet01 == false))) {
            return false;
        }

        if (!((gv_sandbagMovingToPlaceLeft == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBB8EFCE8_val = gv_sandbagsSwitchLeft;
    if (autoBB8EFCE8_val == 1) {
        UnitIssueOrder(gv_sCV01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(595)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV01, "CarrySandbags", gv_sCV01, 1);
        gv_sandbagsSwitchLeft = 2;
        gv_sandbagMovingToPlaceLeft = false;
    }
    else if (autoBB8EFCE8_val == 2) {
        UnitIssueOrder(gv_sCV01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(697)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV01, "CarrySandbags", gv_sCV01, 1);
        gv_sandbagsSwitchLeft = 3;
        gv_sandbagMovingToPlaceLeft = false;
    }
    else if (autoBB8EFCE8_val == 3) {
        UnitIssueOrder(gv_sCV01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(742)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV01, "CarrySandbags", gv_sCV01, 1);
        gv_sandbagsSwitchLeft = 4;
        gv_sandbagMovingToPlaceLeft = false;
    }
    else if (autoBB8EFCE8_val == 4) {
        UnitIssueOrder(gv_sCV01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(973)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV01, "CarrySandbags", gv_sCV01, 1);
        gv_sandbagsSwitchLeft = 5;
        gv_sandbagMovingToPlaceLeft = false;
    }
    else if (autoBB8EFCE8_val == 5) {
        UnitIssueOrder(gv_sCV01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1039)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV01, "CarrySandbags", gv_sCV01, 1);
        gv_sandbagsSwitchLeft = 6;
        gv_sandbagMovingToPlaceLeft = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsHasSandbagLeft_Init () {
    gt_SandbagsHasSandbagLeft = TriggerCreate("gt_SandbagsHasSandbagLeft_Func");
    TriggerEnable(gt_SandbagsHasSandbagLeft, false);
    TriggerAddEventTimePeriodic(gt_SandbagsHasSandbagLeft, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag01
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV01, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV01), PointWithOffset(PointFromId(595), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV01, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag01, true);
    gv_sandbagGet01 = true;
    gv_sandbagMovingToPlaceLeft = true;
    TriggerEnable(gt_SandbagsPlaceSandbag02, true);
    TriggerEnable(gt_SandbagsPlaceSandbag01, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag01_Init () {
    gt_SandbagsPlaceSandbag01 = TriggerCreate("gt_SandbagsPlaceSandbag01_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag01, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag01, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag02
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV01, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV01), PointWithOffset(PointFromId(697), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV01, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag02, true);
    gv_sandbagGet01 = true;
    gv_sandbagMovingToPlaceLeft = true;
    TriggerEnable(gt_SandbagsPlaceSandbag03, true);
    TriggerEnable(gt_SandbagsPlaceSandbag02, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag02_Init () {
    gt_SandbagsPlaceSandbag02 = TriggerCreate("gt_SandbagsPlaceSandbag02_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag02, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag02, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag03
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV01, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV01), PointWithOffset(PointFromId(742), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV01, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag03, true);
    gv_sandbagGet01 = true;
    gv_sandbagMovingToPlaceLeft = true;
    TriggerEnable(gt_SandbagsPlaceSandbag04, true);
    TriggerEnable(gt_SandbagsPlaceSandbag03, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag03_Init () {
    gt_SandbagsPlaceSandbag03 = TriggerCreate("gt_SandbagsPlaceSandbag03_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag03, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag03, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag04
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV01, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV01), PointWithOffset(PointFromId(973), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV01, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag04, true);
    gv_sandbagGet01 = true;
    gv_sandbagMovingToPlaceLeft = true;
    TriggerEnable(gt_SandbagsPlaceSandbag05, true);
    TriggerEnable(gt_SandbagsPlaceSandbag04, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag04_Init () {
    gt_SandbagsPlaceSandbag04 = TriggerCreate("gt_SandbagsPlaceSandbag04_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag04, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag04, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag05
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV01, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV01), PointWithOffset(PointFromId(1039), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV01, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag05, true);
    TriggerEnable(gt_SandbagsGetSandbagLeft, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag05_Init () {
    gt_SandbagsPlaceSandbag05 = TriggerCreate("gt_SandbagsPlaceSandbag05_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag05, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag05, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsGetSandbagRight
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsGetSandbagRight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_sandbagGet02 == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_sCV02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(536)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsGetSandbagRight_Init () {
    gt_SandbagsGetSandbagRight = TriggerCreate("gt_SandbagsGetSandbagRight_Func");
    TriggerEnable(gt_SandbagsGetSandbagRight, false);
    TriggerAddEventTimePeriodic(gt_SandbagsGetSandbagRight, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsAtCrashSiteRight
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsAtCrashSiteRight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_sandbagGet02 == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV02), PointWithOffset(PointFromId(536), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sandbagGet02 = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsAtCrashSiteRight_Init () {
    gt_SandbagsAtCrashSiteRight = TriggerCreate("gt_SandbagsAtCrashSiteRight_Func");
    TriggerEnable(gt_SandbagsAtCrashSiteRight, false);
    TriggerAddEventTimePeriodic(gt_SandbagsAtCrashSiteRight, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsHasSandbagRight
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsHasSandbagRight_Func (bool testConds, bool runActions) {
    int auto4C90C9D8_val;

    // Conditions
    if (testConds) {
        if (!((gv_sandbagGet02 == false))) {
            return false;
        }

        if (!((gv_sandbagMovingToPlaceRight == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4C90C9D8_val = gv_sandbagsSwitchRight;
    if (auto4C90C9D8_val == 1) {
        UnitIssueOrder(gv_sCV02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(863)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV02, "CarrySandbags", gv_sCV02, 1);
        gv_sandbagsSwitchRight = 2;
        gv_sandbagMovingToPlaceRight = false;
    }
    else if (auto4C90C9D8_val == 2) {
        UnitIssueOrder(gv_sCV02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1382)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV02, "CarrySandbags", gv_sCV02, 1);
        gv_sandbagsSwitchRight = 3;
        gv_sandbagMovingToPlaceRight = false;
    }
    else if (auto4C90C9D8_val == 3) {
        UnitIssueOrder(gv_sCV02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1384)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV02, "CarrySandbags", gv_sCV02, 1);
        gv_sandbagsSwitchRight = 4;
        gv_sandbagMovingToPlaceRight = false;
    }
    else if (auto4C90C9D8_val == 4) {
        UnitIssueOrder(gv_sCV02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1385)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV02, "CarrySandbags", gv_sCV02, 1);
        gv_sandbagsSwitchRight = 5;
        gv_sandbagMovingToPlaceRight = false;
    }
    else if (auto4C90C9D8_val == 5) {
        UnitIssueOrder(gv_sCV02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1386)), c_orderQueueReplace);
        UnitBehaviorAdd(gv_sCV02, "CarrySandbags", gv_sCV02, 1);
        gv_sandbagsSwitchRight = 6;
        gv_sandbagMovingToPlaceRight = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsHasSandbagRight_Init () {
    gt_SandbagsHasSandbagRight = TriggerCreate("gt_SandbagsHasSandbagRight_Func");
    TriggerEnable(gt_SandbagsHasSandbagRight, false);
    TriggerAddEventTimePeriodic(gt_SandbagsHasSandbagRight, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag06
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV02, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV02), PointWithOffset(PointFromId(863), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV02, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag06, true);
    gv_sandbagGet02 = true;
    gv_sandbagMovingToPlaceRight = true;
    TriggerEnable(gt_SandbagsPlaceSandbag07, true);
    TriggerEnable(gt_SandbagsPlaceSandbag06, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag06_Init () {
    gt_SandbagsPlaceSandbag06 = TriggerCreate("gt_SandbagsPlaceSandbag06_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag06, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag06, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag07
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV02, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV02), PointWithOffset(PointFromId(1382), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV02, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag07, true);
    gv_sandbagGet02 = true;
    gv_sandbagMovingToPlaceRight = true;
    TriggerEnable(gt_SandbagsPlaceSandbag08, true);
    TriggerEnable(gt_SandbagsPlaceSandbag07, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag07_Init () {
    gt_SandbagsPlaceSandbag07 = TriggerCreate("gt_SandbagsPlaceSandbag07_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag07, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag07, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag08
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV02, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV02), PointWithOffset(PointFromId(1384), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV02, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag08, true);
    gv_sandbagGet02 = true;
    gv_sandbagMovingToPlaceRight = true;
    TriggerEnable(gt_SandbagsPlaceSandbag09, true);
    TriggerEnable(gt_SandbagsPlaceSandbag08, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag08_Init () {
    gt_SandbagsPlaceSandbag08 = TriggerCreate("gt_SandbagsPlaceSandbag08_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag08, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag08, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag09
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag09_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV02, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV02), PointWithOffset(PointFromId(1385), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV02, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag09, true);
    gv_sandbagGet02 = true;
    gv_sandbagMovingToPlaceRight = true;
    TriggerEnable(gt_SandbagsPlaceSandbag010, true);
    TriggerEnable(gt_SandbagsPlaceSandbag09, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag09_Init () {
    gt_SandbagsPlaceSandbag09 = TriggerCreate("gt_SandbagsPlaceSandbag09_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag09, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag09, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SandbagsPlaceSandbag010
//--------------------------------------------------------------------------------------------------
bool gt_SandbagsPlaceSandbag010_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sandbagsUnhide;

    // Variable Initialization
    lv_sandbagsUnhide = 1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_sCV02, "CarrySandbags") == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_sCV02), PointWithOffset(PointFromId(1386), 0.0, 0.0)) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_sCV02, "CarrySandbags", 1);
    libNtve_gf_ShowHideUnit(gv_sandbag10, true);
    TriggerEnable(gt_SandbagsGetSandbagRight, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandbagsPlaceSandbag010_Init () {
    gt_SandbagsPlaceSandbag010 = TriggerCreate("gt_SandbagsPlaceSandbag010_Func");
    TriggerEnable(gt_SandbagsPlaceSandbag010, false);
    TriggerAddEventTimePeriodic(gt_SandbagsPlaceSandbag010, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TimerPause(gv_dropPodTimer, true);
    AITimePause(true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, 0);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_midHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupLoopBegin(gv_midHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1221), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1223), 13.0, -1, 10, true);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ01, true);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ02, true);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ03, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_DOMINION_RED, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(180), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "BattlecruiserHelios", 0, gv_p04_WARFIELD, PointFromId(375));
    gv_warfieldShipFlying = UnitLastCreated();
    libNtve_gf_PauseUnit(UnitFromId(1306), false);
    libNtve_gf_PauseUnit(UnitFromId(1022), false);
    libNtve_gf_PauseUnit(UnitFromId(994), false);
    libNtve_gf_PauseUnit(UnitFromId(1239), false);
    libNtve_gf_PauseUnit(UnitFromId(855), false);
    libNtve_gf_PauseUnit(UnitFromId(175), false);
    libNtve_gf_PauseUnit(UnitFromId(994), false);
    UnitSetPropertyFixed(gv_warfieldShipFlying, c_unitPropMovementSpeed, 5.0);
    UnitIssueOrder(gv_warfieldShipFlying, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(382)), c_orderQueueReplace);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian01MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerEnable(gt_NydusAttack01, true);
    UnitIssueOrder(UnitFromId(175), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1769)), c_orderQueueReplace);
    // Transmission - SoundLink("TValerian01Warfield00056", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Warfield00056", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(6.5, c_timeGame);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 1.5);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_WarfieldCrashSurvivors, true, false);
    // Transmission - SoundLink("TValerian01Warfield00020", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Warfield00020", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    // Transmission - SoundLink("TValerian01Warfield00021", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Warfield00021", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1194)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1194)), c_orderQueueReplace);
    // Transmission - SoundLink("TValerian01Raynor00006", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00006", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1194)), c_orderQueueReplace);
    libNtve_gf_AttachModelToUnit(gv_nydusOBJ01, "BriefingUnitSelectRed", "Head");
    gv_actorNydusTarget01 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(gv_nydusOBJ02, "BriefingUnitSelectRed", "Head");
    gv_actorNydusTarget02 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(gv_nydusOBJ03, "BriefingUnitSelectRed", "Head");
    gv_actorNydusTarget03 = libNtve_gf_ActorLastCreated();
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1243), 4.0, -1, 10, true);
    // Transmission - SoundLink("TValerian01Raynor00057", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Raynor00057", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1194)), c_orderQueueReplace);
    // Transmission - SoundLink("TValerian01Kerrigan00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Kerrigan00013", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1194)), c_orderQueueReplace);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    actor lv_heliosCrashed;
    unitgroup lv_marineGroup01;
    unitgroup lv_marineGroup02;

    // Variable Initialization
    lv_fadeDuration = 0.0;
    lv_heliosCrashed = null;
    lv_marineGroup01 = UnitGroupEmpty();
    lv_marineGroup02 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_actorNydusTarget01);
    libNtve_gf_KillModel(gv_actorNydusTarget02);
    libNtve_gf_KillModel(gv_actorNydusTarget03);
    UISetRestartLoadingScreen(ConversationDataStateText("Maps|TValerian01", "Loading Screen Restart 2"));
    TriggerStop(gt_Fire01);
    TimerPause(gv_dropPodTimer, false);
    AITimePause(false);
    TriggerEnable(gt_NydusAttack01, false);
    UnitGroupLoopBegin(gv_midHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    libNtve_gf_ShowHideUnit(UnitFromId(180), false);
    UnitRemove(gv_warfieldShipFlying);
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_DOMINION_RED, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_p03_DOMINION_RED, PointFromId(422));
    gv_bunker01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_p03_DOMINION_RED, PointFromId(349));
    gv_bunker02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_p03_DOMINION_RED, PointFromId(357));
    gv_bunker03 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_p03_DOMINION_RED, PointFromId(358));
    gv_bunker04 = UnitLastCreated();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    CameraRestore(gv_p01_USER, 0.0, -1, 10);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ01, true);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ02, true);
    libNtve_gf_ShowHideUnit(gv_nydusOBJ03, true);
    VisRevealArea(gv_p01_USER, RegionFromId(72), 1.0, false);
    VisRevealerCreate(gv_p01_USER, RegionFromId(69));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    VisRevealerCreate(gv_p01_USER, RegionFromId(68));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(1189), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_pingNydus01 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(1190), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_pingNydus02 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(1191), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_pingNydus03 = PingLastCreated();
    PingSetScale(gv_pingNydus01, 0.8);
    PingSetScale(gv_pingNydus02, 0.8);
    PingSetScale(gv_pingNydus03, 0.8);
    PingSetTooltip(gv_pingNydus01, StringExternal("Param/Value/79326190"));
    PingSetTooltip(gv_pingNydus02, StringExternal("Param/Value/ED6FFCB0"));
    PingSetTooltip(gv_pingNydus03, StringExternal("Param/Value/79C611F5"));
    libNtve_gf_AttachModelToUnit(gv_nydusOBJ01, "BriefingUnitSelectRed", "Head");
    gv_actorNydusTarget01 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(gv_nydusOBJ02, "BriefingUnitSelectRed", "Head");
    gv_actorNydusTarget02 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(gv_nydusOBJ03, "BriefingUnitSelectRed", "Head");
    gv_actorNydusTarget03 = libNtve_gf_ActorLastCreated();
    VisRevealerCreate(gv_p01_USER, RegionFromId(68));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1202));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1212));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1214));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    UnitGroupAdd(gv_bunkerGroup01, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    UnitGroupAdd(gv_bunkerGroup01, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    UnitGroupAdd(gv_bunkerGroup01, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    UnitGroupAdd(gv_bunkerGroup01, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    UnitGroupAdd(gv_bunkerGroup02, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    UnitGroupAdd(gv_bunkerGroup02, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    UnitGroupAdd(gv_bunkerGroup02, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1236));
    UnitGroupAdd(gv_bunkerGroup03, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_p03_DOMINION_RED, PointFromId(1092));
    UnitGroupAdd(gv_bunkerGroup03, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1764));
    UnitGroupAdd(gv_bunkerGroup03, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1768));
    UnitGroupAdd(gv_bunkerGroup04, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1275));
    UnitGroupAdd(gv_bunkerGroup04, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1276));
    UnitGroupAdd(gv_bunkerGroup04, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p03_DOMINION_RED, PointFromId(1151));
    gv_sCV02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p03_DOMINION_RED, PointFromId(1152));
    gv_sCV01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p03_DOMINION_RED, PointFromId(359));
    gv_sCV03 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p03_DOMINION_RED, PointFromId(361));
    gv_sCV04 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(350));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    ActorSend(gv_fire01, "Destroy");
    ActorSend(gv_fire02, "Destroy");
    ActorSend(gv_fire03, "Destroy");
    ActorSend(gv_fire04, "Destroy");
    ActorSend(gv_fire05, "Destroy");
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1197));
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    gv_midCinematicCompleted = true;
    ObjectiveShow(gv_objectiveNydusWorms, PlayerGroupAll(), true);
    TriggerExecute(gt_DialogueSirWShouldMobilizeEverythingWeGotQ, true, false);
    UnitGroupLoopBegin(gv_bunkerGroup01);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(gv_bunker01, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_bunkerGroup02);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(gv_bunker02, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_bunkerGroup03);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(gv_bunker03, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_bunkerGroup04);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(gv_bunker04, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateActorAtPoint("Crate", PointFromId(1029));
    libNtve_gf_CreateActorAtPoint("Crate", PointFromId(1089));
    libNtve_gf_CreateActorAtPoint("BraxisAlphaBarrels", PointFromId(1088));
    libNtve_gf_CreateActorAtPoint("BraxisAlphaBarrels", PointFromId(393));
    libNtve_gf_CreateActorAtPoint("Crate", PointFromId(403));
    libNtve_gf_CreateActorAtPoint("Crate", PointFromId(405));
    libNtve_gf_CreateActorAtPoint("Crate", PointFromId(1762));
    libNtve_gf_CreateActorAtPoint("Crate", PointFromId(1763));
    UnitCreate(1, "WreckedBattlecruiserHeliosFinal", 0, gv_p03_DOMINION_RED, PointFromId(1150), 60.0);
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_SandbagsGetSandbagLeft, true);
    TriggerEnable(gt_SandbagsAtCrashSiteLeft, true);
    TriggerEnable(gt_SandbagsHasSandbagLeft, true);
    TriggerEnable(gt_SandbagsPlaceSandbag01, true);
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_SandbagsGetSandbagRight, true);
    TriggerEnable(gt_SandbagsAtCrashSiteRight, true);
    TriggerEnable(gt_SandbagsHasSandbagRight, true);
    TriggerEnable(gt_SandbagsPlaceSandbag06, true);
    TriggerEnable(gt_ZerglingsRearAttackLightWaves, true);
    TriggerEnable(gt_NydusInfiniteSpawning01, true);
    TriggerEnable(gt_NydusInfiniteSpawning02, true);
    TriggerEnable(gt_NydusInfiniteSpawning03, true);
    CreepModify(PointFromId(141), 10.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Attack 01
//--------------------------------------------------------------------------------------------------
bool gt_NydusAttack01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_nydusOBJ01) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusOBJ02) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nydusOBJ03) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bunker01) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bunker02) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bunker03) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bunker04) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Zergling", c_playerAny, RegionFromId(74), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("BunkerAttack", 0), PointFromId(382)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusAttack01_Init () {
    gt_NydusAttack01 = TriggerCreate("gt_NydusAttack01_Func");
    TriggerEnable(gt_NydusAttack01, false);
    TriggerAddEventTimePeriodic(gt_NydusAttack01, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WarfieldCrashSurvivors
//--------------------------------------------------------------------------------------------------
bool gt_WarfieldCrashSurvivors_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    gv_sCV01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    gv_sCV02 = UnitLastCreated();
    UnitIssueOrder(gv_sCV01, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(422)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    gv_sCV03 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    gv_sCV04 = UnitLastCreated();
    UnitIssueOrder(gv_sCV02, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(349)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1193)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1215)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1090));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1236)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_p03_DOMINION_RED, PointFromId(1090));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1092)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1090));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1275)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1090));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1276)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(gv_sCV03, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(357)), c_orderQueueReplace);
    UnitIssueOrder(gv_sCV04, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(358)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1193)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1194)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1195)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1215)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1194)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p03_DOMINION_RED, PointFromId(1201));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1277)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p03_DOMINION_RED, PointFromId(1211));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1757)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarfieldCrashSurvivors_Init () {
    gt_WarfieldCrashSurvivors = TriggerCreate("gt_WarfieldCrashSurvivors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire01
//--------------------------------------------------------------------------------------------------
bool gt_Fire01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_warfieldShipFlying))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1758));
    gv_hydraSquish = UnitLastCreated();
    UnitIssueOrder(gv_hydraSquish, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1759)), c_orderQueueReplace);
    UnitIssueOrder(gv_warfieldShipFlying, Order(AbilityCommand("HeliosCrashMorph", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_warfieldShipFlying, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(382)), c_orderQueueAddToEnd);
    UnitSetHeight(gv_warfieldShipFlying, 0.0, 2.3);
    Wait(2.5, c_timeGame);
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1192));
    gv_fire05 = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fire01_Init () {
    gt_Fire01 = TriggerCreate("gt_Fire01_Func");
    TriggerAddEventUnitRegion(gt_Fire01, null, RegionFromId(64), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire02
//--------------------------------------------------------------------------------------------------
bool gt_Fire02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_warfieldShipFlying))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.2, c_timeGame);
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(848));
    gv_fire01 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1198));
    gv_fire02 = libNtve_gf_ActorLastCreated();
    UnitSetHeight(gv_warfieldShipFlying, 0.0, 0.0);
    UnitIssueOrder(gv_warfieldShipFlying, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitKill(gv_warfieldShipFlying);
    TriggerExecute(gt_Fire03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fire02_Init () {
    gt_Fire02 = TriggerCreate("gt_Fire02_Func");
    TriggerAddEventUnitRegion(gt_Fire02, null, RegionFromId(65), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire03
//--------------------------------------------------------------------------------------------------
bool gt_Fire03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_warfieldShipFlying))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1179));
    gv_fire03 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1199));
    gv_fire04 = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fire03_Init () {
    gt_Fire03 = TriggerCreate("gt_Fire03_Func");
    TriggerAddEventUnitRegion(gt_Fire03, null, RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZerglingsRearAttackLightWaves
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingsRearAttackLightWaves_Func (bool testConds, bool runActions) {
    int auto28C62511_val;
    int auto392E3774_val;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_bunker01) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bunker02) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bunker03) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bunker04) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto28C62511_val = RandomInt(0, 1);
    if (auto28C62511_val == 0) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(379));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(379));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(379));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    }
    else if (auto28C62511_val == 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(380));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(380));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
    }
    else {
    }
    auto392E3774_val = RandomInt(0, 2);
    if (auto392E3774_val == 0) {
        if ((UnitIsAlive(gv_nydusOBJ01) == true)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1189));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1189));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
        }
        else {
        }
    }
    else if (auto392E3774_val == 1) {
        if ((UnitIsAlive(gv_nydusOBJ02) == true)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1190));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1193)), c_orderQueueReplace);
        }
        else {
        }
    }
    else if (auto392E3774_val == 2) {
        if ((UnitIsAlive(gv_nydusOBJ03) == true)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1194)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1194)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p10_ZERG_WHITEHIVE, PointFromId(1191));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1194)), c_orderQueueReplace);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingsRearAttackLightWaves_Init () {
    gt_ZerglingsRearAttackLightWaves = TriggerCreate("gt_ZerglingsRearAttackLightWaves_Func");
    TriggerEnable(gt_ZerglingsRearAttackLightWaves, false);
    TriggerAddEventTimePeriodic(gt_ZerglingsRearAttackLightWaves, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hydra Squish
//--------------------------------------------------------------------------------------------------
bool gt_HydraSquish_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_hydraSquish))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_hydraSquish);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydraSquish_Init () {
    gt_HydraSquish = TriggerCreate("gt_HydraSquish_Func");
    TriggerAddEventUnitRegion(gt_HydraSquish, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueClear(c_triggerQueueKill);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TriggerStop(gt_DropPodallPodSpawnsQ);
    TimerPause(gv_dropPodTimer, true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TValerian01Tychus00008", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian01Tychus00008", 0), c_transmissionDurationAdd, 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_Init08Variables_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_FirstDropDialogue_Init();
    gt_FirstDropPodSpawnQ_Init();
    gt_FirstDropRescue_Init();
    gt_LeaderboardInitiate_Init();
    gt_DropPodallPodSpawnsQ_Init();
    gt_Gank_Drop01Marines_Init();
    gt_Gank_Drop02Marauder_Init();
    gt_Gank_Drop03Factory_Init();
    gt_Gank_Drop04Tanks_Init();
    gt_Gank_Drop05Starport_Init();
    gt_Gank_Drop06Goliaths_Init();
    gt_Gank_Drop07SplitBanshees_Init();
    gt_Gank_Drop08SplitViking_Init();
    gt_Gank_Drop09SplitThors_Init();
    gt_Gank_Drop10SplitBattlecruiser_Init();
    gt_Gank_Drop01_Attacked_Init();
    gt_Gank_Drop02_Attacked_Init();
    gt_Gank_Drop03_Attacked_Factory_Init();
    gt_Gank_Drop04_Attacked_Init();
    gt_Gank_Drop05_Attacked_Starport_Init();
    gt_Gank_Drop06_Attacked_Init();
    gt_Gank_Drop07_Attacked_Init();
    gt_Gank_Drop08_Attacked_Init();
    gt_Gank_Drop09_Attacked_Init();
    gt_Gank_Drop10_Attacked_Init();
    gt_RescueFactorySpawnQ_Init();
    gt_RescueFactoryQ_Init();
    gt_RescueFactorySafety_Init();
    gt_RescueStarportSpawnQ_Init();
    gt_RescueStarportQ_Init();
    gt_RescueStarportSafety_Init();
    gt_SecondDropPodRescue_Init();
    gt_PeriodicRescueCheck_Init();
    gt_GankFlyerRemoval_Init();
    gt_GankBurrowRemoval_Init();
    gt_CreateBuildingDropPodActions_Init();
    gt_DialogueCommanderTacticalAnalysisTheZergGreatlyOutnumberQ_Init();
    gt_DialogueKeepMeUpdatedIfWeCanReachQ_Init();
    gt_DialogueSirIveLocatedAnIncomingDropPodQ_Init();
    gt_DialogueAlrightletsGetOutThereQ_Init();
    gt_DialogueRaynorsRaidersFiveLinesQ_Init();
    gt_DialogueLetsMoveQ_Init();
    gt_DialogueSirIveDetectedaDropPodInYourVicinityQ_Init();
    gt_DialogueSendingCoordinatesToANearbyDroppodQ_Init();
    gt_DialogueSirAnotherDropPodIsComingDownQ_Init();
    gt_DialogueYouveGotAnotherDropPodLandingNearByQ_Init();
    gt_DialogueSirAnotherDropPodHasArrivedNearYourPerimeterQ_Init();
    gt_DialogueSirIReadMultipleDropPodsEnteringTheAtmosphereQ_Init();
    gt_DialogueTheresAnotherWaveOfDropPodsComingInQ_Init();
    gt_DialogueCommanderTheLastOfTheDominionDropPodsQ_Init();
    gt_DialogueSirWShouldMobilizeEverythingWeGotQ_Init();
    gt_DialogueWeCanSalvageSomeOfTheWreckageFromtheDomBaseQ_Init();
    gt_DialogueAtLeastABarracksMadeItDownQ_Init();
    gt_DialogueGetThisFactoryBackToTheLandingZoneQ_Init();
    gt_DialogueSomeAirPowerIsJustWhatWeNeedQ_Init();
    gt_DialogueSomeInvasionplayedduringmidcinQ_Init();
    gt_DialogueYouWereFoolsToComeHereQ_Init();
    gt_DialogueWeveReachedTheCrashSiteQ_Init();
    gt_DialogueWarfieldWontBeAliveForVeryMuchLongerQ_Init();
    gt_DialogueYoureSureTalkingALotKerriganQ_Init();
    gt_InfestationPitDies_Init();
    gt_StorymodeTipsQ_Init();
    gt_DominionTroopsTipQ_Init();
    gt_DominionSuppliesTipQ_Init();
    gt_LeaderboardCreate_Init();
    gt_ZergStartAttack_Init();
    gt_ZergAmbientAttackBothSidesNew_Init();
    gt_MoveArea02_Init();
    gt_AchievementKillallSporeCannons_Init();
    gt_AchievementRescuealldroppods_Init();
    gt_VictoryPrimaryObjectiveCompleted_Init();
    gt_Victory_Init();
    gt_DefeatAllTroopsDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StartAI_Init();
    gt_StartUpgradesAdv_Init();
    gt_StartUpgradesExp_Init();
    gt_ZerglingRush_Init();
    gt_P2_Zerg_PurpleAttackWAVES_Init();
    gt_P5_Zerg_OrangeAttackWAVES_Init();
    gt_P6_Zerg_GreenAttackWAVES_Init();
    gt_NydusSpawningTrigger_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_SporeCannonShotsAmbient_Init();
    gt_SporeCannonDeaths_Init();
    gt_DominionSupplyShipDoodad01_Init();
    gt_DominionSupplyShipDoodad02_Init();
    gt_DominionSupplyShipDoodad03_Init();
    gt_ResourcePickups_Init();
    gt_NydusInfiniteSpawning01_Init();
    gt_NydusInfiniteSpawning02_Init();
    gt_NydusInfiniteSpawning03_Init();
    gt_Barracks01_Init();
    gt_Barracks02_Init();
    gt_Factory01_Init();
    gt_Factory02_Init();
    gt_Battlecruiser01_Init();
    gt_Battlecruiser02_Init();
    gt_CreateFloatingDebris_Init();
    gt_ZergNorthExtraGuys_Init();
    gt_ZergNorthSmallExtraGuys_Init();
    gt_ZergSouthExtraGuys_Init();
    gt_ObjectiveTroopSupplyCreateQ_Init();
    gt_ObjectiveTroopSupplyComplete_Init();
    gt_ObjectiveTroopSupplyFailed_Init();
    gt_ObjectiveFoodSupply_Init();
    gt_ObjectiveTroopSupplyUpdate_Init();
    gt_ObjectiveNydusWormsCreateHidden_Init();
    gt_ObjectiveNydusWormsUpdate_Init();
    gt_ObjectiveNydusWormsComplete_Init();
    gt_ObjectiveNydusWormsFailed_Init();
    gt_Nydus01Dies_Init();
    gt_Nydus02Dies_Init();
    gt_Nydus03Dies_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingZergCreation_Init();
    gt_BriefingZergRespawn_Init();
    gt_BriefingTerranInvasion_Init();
    gt_SandbagsGetSandbagLeft_Init();
    gt_SandbagsAtCrashSiteLeft_Init();
    gt_SandbagsHasSandbagLeft_Init();
    gt_SandbagsPlaceSandbag01_Init();
    gt_SandbagsPlaceSandbag02_Init();
    gt_SandbagsPlaceSandbag03_Init();
    gt_SandbagsPlaceSandbag04_Init();
    gt_SandbagsPlaceSandbag05_Init();
    gt_SandbagsGetSandbagRight_Init();
    gt_SandbagsAtCrashSiteRight_Init();
    gt_SandbagsHasSandbagRight_Init();
    gt_SandbagsPlaceSandbag06_Init();
    gt_SandbagsPlaceSandbag07_Init();
    gt_SandbagsPlaceSandbag08_Init();
    gt_SandbagsPlaceSandbag09_Init();
    gt_SandbagsPlaceSandbag010_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_NydusAttack01_Init();
    gt_WarfieldCrashSurvivors_Init();
    gt_Fire01_Init();
    gt_Fire02_Init();
    gt_Fire03_Init();
    gt_ZerglingsRearAttackLightWaves_Init();
    gt_HydraSquish_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
