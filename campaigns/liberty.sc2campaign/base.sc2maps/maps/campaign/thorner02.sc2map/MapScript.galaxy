//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Cutthroat
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_ORLAN_ENEMY = 2;
const int gv_p03_MIRA_HAN = 3;
const int gv_p04_DOMINION = 4;
const int gv_p05_SCRAP = 5;
const int gv_p06_JUNKERS = 6;
const int gv_p07_DERELICT_STRUCTURES = 7;
const int gv_p08_RAYNOR_COMP = 8;
const int gv_p09_PROTOSS_RELICS = 9;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_inCinematic;
bool gv_gameOver;
playergroup gv_enemyPlayers;
playergroup gv_miraHanPlayers;
unitgroup gv_playerSCVs;
int gv_orlansFortressPing;
int gv_mERC_CONTRACT_PRICE;
int gv_merc_Contract_Price_Board;
bool gv_miraHanContractBought;
int gv_oRLANS_MINERAL_COUNT;
unit gv_ghostNukeSilo;
unitgroup gv_minerals_In_Expansion_1;
unitgroup gv_minerals_In_Expansion_2;
unitgroup gv_minerals_In_Expansion_3;
revealer gv_centerAreaRevealer;
int gv_pingCommandCenterSW;
int gv_pingCommandCenterSE;
int gv_pingCommandCenterNE;
unit[9] gv_initialElevatorBlockers;
unit gv_junker_NE;
unit gv_junker_S;
unit gv_junker_W;
int gv_salvageNumber;
int gv_salvageTotal;
unitgroup gv_huge_Scrap_1;
unitgroup gv_huge_Scrap_2;
unitgroup gv_huge_Scrap_3;
actor gv_nukeActor;
revealer gv_salvageRevealer;
actor gv_respawnSalvagePingActor2;
actor gv_respawnSalvagePingActor1;
actor gv_salvagePingActor;
region gv_respawnableSalvage;
int gv_achievementSCVsTrained;
int gv_spiderMineKillCount;
int gv_mineralsHarvested;
int gv_primaryObjectiveBuyContract;
int gv_primaryObjectiveDestroyOrlan;
int gv_bonusObjectiveFindContraband;
int gv_contrabandRelicsFound;
int gv_contrabandRelicsTotal;
unitgroup gv_briefingHiddenUnits;
bool gv_midCinematicCompleted;
unitgroup gv_midHiddenUnitGroup;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;
unitgroup gv_victoryRaynorsUnits;
unitgroup gv_victoryOrlansUnits;

void InitGlobals () {
    int init_i;

    gv_inCinematic = false;
    gv_gameOver = false;
    gv_enemyPlayers = PlayerGroupEmpty();
    gv_miraHanPlayers = PlayerGroupEmpty();
    gv_playerSCVs = UnitGroupEmpty();
    gv_mERC_CONTRACT_PRICE = 0;
    gv_merc_Contract_Price_Board = c_boardNone;
    gv_miraHanContractBought = false;
    gv_oRLANS_MINERAL_COUNT = 0;
    gv_ghostNukeSilo = null;
    gv_minerals_In_Expansion_1 = UnitGroupEmpty();
    gv_minerals_In_Expansion_2 = UnitGroupEmpty();
    gv_minerals_In_Expansion_3 = UnitGroupEmpty();
    gv_centerAreaRevealer = null;
    gv_pingCommandCenterSW = c_invalidPingId;
    gv_pingCommandCenterSE = c_invalidPingId;
    gv_pingCommandCenterNE = c_invalidPingId;
    init_i = 0;
    while (init_i <= 8) {
        gv_initialElevatorBlockers[init_i] = null;
        init_i = init_i + 1;
    }
    gv_junker_NE = null;
    gv_junker_S = null;
    gv_junker_W = null;
    gv_salvageNumber = 0;
    gv_salvageTotal = 0;
    gv_huge_Scrap_1 = UnitGroupEmpty();
    gv_huge_Scrap_2 = UnitGroupEmpty();
    gv_huge_Scrap_3 = UnitGroupEmpty();
    gv_nukeActor = null;
    gv_salvageRevealer = null;
    gv_respawnableSalvage = null;
    gv_achievementSCVsTrained = 0;
    gv_spiderMineKillCount = 0;
    gv_mineralsHarvested = 0;
    gv_primaryObjectiveBuyContract = c_invalidObjectiveId;
    gv_primaryObjectiveDestroyOrlan = c_invalidObjectiveId;
    gv_bonusObjectiveFindContraband = c_invalidObjectiveId;
    gv_contrabandRelicsFound = 0;
    gv_contrabandRelicsTotal = 0;
    gv_briefingHiddenUnits = UnitGroupEmpty();
    gv_midCinematicCompleted = false;
    gv_midHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryCinematicCompleted = false;
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryRaynorsUnits = UnitGroupEmpty();
    gv_victoryOrlansUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetOrlanCommandCenterText (unit lp_unit);
void gf_UNUSEDTEXTSTRINGS ();
bool gf_ScrapCanBeSalvaged (int lp_player, point lp_scrapPosition, fixed lp_distance);
void gf_SalvageScrap (unit lp_scrap, int lp_player, int lp_minerals, int lp_gas, bool lp_remove);
void gf_SpawnSalvageIfAreaIsClear (string lp_salvageType, region lp_salvageRegion);
void gf_GhostNukeEm (unit lp_nuker, point lp_nukeTarget, point lp_retreatTo);
void gf_OrlanAttackWaveWaypointWest ();
void gf_OrlanAttackWaveWaypointEast ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGameStage1;
trigger gt_StartGameStage2;
trigger gt_IntroLanding;
trigger gt_ChangeOwnerofIntroStructures;
trigger gt_ChangeOwnerofPreplacedStructures;
trigger gt_ChangeOwnerofDropshipUnits;
trigger gt_ChangeOwnerofSCVs;
trigger gt_CreateOrlanCommandCenterPings;
trigger gt_SuperCraneActivation;
trigger gt_CreateContractWindow;
trigger gt_UpdateContractWindow;
trigger gt_PlayerBuysContract;
trigger gt_MiraHanDestroyed;
trigger gt_MiraHanGivesVulturestoPlayer;
trigger gt_ChangeOwnerofVultureDropshipUnits;
trigger gt_OrlanMineralCount;
trigger gt_OrlanExpansion1Attacked;
trigger gt_OrlanExpansion2Attacked;
trigger gt_OrlanExpansion3Attacked;
trigger gt_JunkersStart;
trigger gt_JunkerNESpawn;
trigger gt_JunkerNEPitstop1;
trigger gt_JunkerNEPitstop2;
trigger gt_JunkerNEPitstop3;
trigger gt_JunkerNEDespawn;
trigger gt_JunkerSSpawn;
trigger gt_JunkerSPitstop1;
trigger gt_JunkerSPitstop2;
trigger gt_JunkerSDespawn;
trigger gt_JunkerWInitiate;
trigger gt_JunkerWPitstop1;
trigger gt_JunkerWPitstop2;
trigger gt_JunkerKilledSpawnScrap;
trigger gt_InitialScrapSpawn3x3;
trigger gt_ResourcePickups;
trigger gt_RespawnableScrapSalvaged3x3Site11;
trigger gt_RespawnableScrapSalvaged3x3Site12;
trigger gt_RespawnableScrapSalvaged3x3Site21;
trigger gt_RespawnableScrapSalvaged3x3Site22;
trigger gt_RespawnableScrapSalvaged3x3Site31;
trigger gt_RespawnableScrapSalvaged3x3Site32;
trigger gt_RespawnableScrapSalvaged3x3Site41;
trigger gt_RespawnableScrapSalvaged3x3Site42;
trigger gt_OrlanExpansion01DestroyedSE;
trigger gt_OrlanExpansion02DestroyedSW;
trigger gt_OrlanExpansion03DestroyedNE;
trigger gt_HugeScrapDestroyed;
trigger gt_OrlanGuardsSalvageSite1;
trigger gt_OrlanGuardsSalvageSite2;
trigger gt_OrlanGuardsSalvageSite3;
trigger gt_OrlanGuardsSalvageSite4;
trigger gt_RemoveRavenBully;
trigger gt_StartAI;
trigger gt_OrlanP02AttackWaves;
trigger gt_OrlanRetributiveNuke;
trigger gt_GhostDiesRemoveNukeActor;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_RemoveSalvagePing;
trigger gt_TransmissionRaynorIntroQ;
trigger gt_TransmissionHornerTalksAboutPlanetQ;
trigger gt_TransmissionRespawnableSalvageQ;
trigger gt_RemoveRespawnSalvagePings;
trigger gt_TransmissionMiraHanGivesVulturesQ;
trigger gt_TransmissionOrlanNukeQ;
trigger gt_TransmissionOrlanHalfwayDoneQ;
trigger gt_TransmissionOrlanAlmostDoneQ;
trigger gt_TransmissionContractHalfFilledQ;
trigger gt_TransmissionContractAlmostFilledQ;
trigger gt_CampaignTipsQ;
trigger gt_MercenaryContractTipQ;
trigger gt_NewUnitVultureTipQ;
trigger gt_NewAbilitySpiderMineTip;
trigger gt_StopOrlanTipQ;
trigger gt_SalvageTip;
trigger gt_AchievementNoSCVTraining;
trigger gt_Achievement25SpiderMineKills;
trigger gt_KillswithSpiderMines;
trigger gt_MineralsHarvestedBySCVs;
trigger gt_VictoryDestroyOrlanCompleted;
trigger gt_Victory;
trigger gt_VictoryCheat;
trigger gt_DefeatBaseDead;
trigger gt_DefeatMiraHanDead;
trigger gt_DefeatOrlanBuysContract;
trigger gt_Defeat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveBuyContractCreateQ;
trigger gt_ObjectiveBuyContractComplete;
trigger gt_ObjectiveBuyContractFailedQ;
trigger gt_ObjectiveDestroyOrlanCreateQ;
trigger gt_ObjectiveDestroyOrlanComplete;
trigger gt_ObjectiveDestroyOrlanFailedQ;
trigger gt_ObjectiveFindContrabandCreateQ;
trigger gt_ObjectiveFindContrabandUpdate;
trigger gt_ObjectiveFindContrabandComplete;
trigger gt_ObjectiveFindContrabandFailedQ;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene00Stuff;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingSalvage;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryScene;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetOrlanCommandCenterText (unit lp_unit) {
    // Implementation
    UnitSetInfoText(lp_unit, StringExternal("Param/Value/03FAE0EC"), StringExternal("Param/Value/16EA3C4A"), StringExternal("Param/Value/0DF11F79"));
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void gf_UNUSEDTEXTSTRINGS () {
    // Implementation
    UnitSetInfoText(UnitFromId(767), StringExternal("Param/Value/E0A46055"), StringExternal("Param/Value/53398AFD"), StringExternal("Param/Value/E34FDDD9"));
    UnitSetInfoText(UnitFromId(893), StringExternal("Param/Value/D5C8138A"), StringExternal("Param/Value/E63DF6EC"), StringExternal("Param/Value/D8EEADBA"));
}

bool gf_ScrapCanBeSalvaged (int lp_player, point lp_scrapPosition, fixed lp_distance) {
    unitgroup auto8FFA0729_g;
    int auto8FFA0729_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = null;

    // Implementation
    auto8FFA0729_g = UnitGroup(null, lp_player, RegionCircle(lp_scrapPosition, lp_distance), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8FFA0729_u = 1;
    while (auto8FFA0729_u <= UnitGroupCount(auto8FFA0729_g, c_unitCountAll)) {
        lv_u = UnitGroupUnit(auto8FFA0729_g, auto8FFA0729_u);
        if ((UnitGetType(lv_u) != "SpiderMine") && (UnitGetType(lv_u) != "SpiderMineBurrowed")) {
            return true;
        }
        else {
        }
        if (lv_u == UnitGroupUnit(auto8FFA0729_g, auto8FFA0729_u)) {
            auto8FFA0729_u = auto8FFA0729_u + 1;
        }
    }
    return false;
}

void gf_SalvageScrap (unit lp_scrap, int lp_player, int lp_minerals, int lp_gas, bool lp_remove) {
    // Implementation
    if ((lp_minerals > 0)) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(lp_scrap, c_playerPropMinerals, lp_minerals, lp_player);
    }
    else {
    }
    if ((lp_gas > 0)) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(lp_scrap, c_playerPropVespene, lp_gas, lp_player);
    }
    else {
    }
    if ((lp_remove == true)) {
        UnitRemove(lp_scrap);
    }
    else {
    }
}

trigger auto_gf_SpawnSalvageIfAreaIsClear_Trigger = null;
string auto_gf_SpawnSalvageIfAreaIsClear_lp_salvageType;
region auto_gf_SpawnSalvageIfAreaIsClear_lp_salvageRegion;

void gf_SpawnSalvageIfAreaIsClear (string lp_salvageType, region lp_salvageRegion) {
    auto_gf_SpawnSalvageIfAreaIsClear_lp_salvageType = lp_salvageType;
    auto_gf_SpawnSalvageIfAreaIsClear_lp_salvageRegion = lp_salvageRegion;

    if (auto_gf_SpawnSalvageIfAreaIsClear_Trigger == null) {
        auto_gf_SpawnSalvageIfAreaIsClear_Trigger = TriggerCreate("auto_gf_SpawnSalvageIfAreaIsClear_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnSalvageIfAreaIsClear_Trigger, false, false);
}

bool auto_gf_SpawnSalvageIfAreaIsClear_TriggerFunc (bool testConds, bool runActions) {
    string lp_salvageType = auto_gf_SpawnSalvageIfAreaIsClear_lp_salvageType;
    region lp_salvageRegion = auto_gf_SpawnSalvageIfAreaIsClear_lp_salvageRegion;

    // Variable Declarations
    actor lv_actorRegion;
    unit lv_elevatorBlocker;

    // Variable Initialization
    lv_actorRegion = null;
    lv_elevatorBlocker = null;

    // Implementation
    Wait(0.2, c_timeGame);
    if ((UnitGroupCount(UnitGroup(lp_salvageType, gv_p05_SCRAP, lp_salvageRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(lp_salvageRegion));
        lv_elevatorBlocker = UnitLastCreated();
        ActorRegionCreate(null, "TriggerRegion", lp_salvageRegion);
        lv_actorRegion = libNtve_gf_ActorLastCreated();
        ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Signal Down", "Doodad", "ScopeContains PortZionScrapElevatorLeft");
        Wait(1.75, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_salvageType, c_unitCreateIgnorePlacement, gv_p05_SCRAP, RegionGetCenter(lp_salvageRegion));
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/332D48ED"), StringExternal("Param/Value/364128DD"), StringExternal("Param/Value/E915DCCD"));
        ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Signal Up", "Doodad", "ScopeContains PortZionScrapElevatorLeft");
        Wait(1.75, c_timeGame);
        UnitRemove(lv_elevatorBlocker);
        ActorSend(lv_actorRegion, "Destroy");
    }
    else {
    }
    return true;
}

void gf_GhostNukeEm (unit lp_nuker, point lp_nukeTarget, point lp_retreatTo) {
    // Implementation
    if ((UnitIsAlive(UnitFromId(1226)) == true)) {
        UnitMagazineArm(gv_ghostNukeSilo, AbilityCommand("ArmSiloWithNuke", 0), 1);
        UnitIssueOrder(lp_nuker, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
        VisRevealArea(gv_p04_DOMINION, RegionCircle(lp_nukeTarget, 5.0), 20.0, false);
        UnitIssueOrder(lp_nuker, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), lp_nukeTarget), c_orderQueueReplace);
        UnitIssueOrder(lp_nuker, OrderTargetingPoint(AbilityCommand("move", 0), lp_retreatTo), c_orderQueueAddToEnd);
        UnitIssueOrder(lp_nuker, Order(AbilityCommand("GhostCloak", 1)), c_orderQueueAddToEnd);
        VisRevealArea(gv_p01_USER, RegionCircle(lp_nukeTarget, 8.0), 25.0, false);
        libNtve_gf_CreateModelAtPoint("GhostNukeIndicator", RegionGetCenter(RegionFromId(55)));
        gv_nukeActor = libNtve_gf_ActorLastCreated();
        TriggerEnable(gt_GhostDiesRemoveNukeActor, true);
    }
    else {
    }
}

void gf_OrlanAttackWaveWaypointWest () {
    // Implementation
    if ((gv_miraHanContractBought == true)) {
        AIAttackWaveAddWaypoint(gv_p02_ORLAN_ENEMY, PointFromId(191), false);
    }
    else {
        AIAttackWaveAddWaypoint(gv_p02_ORLAN_ENEMY, PointFromId(211), false);
    }
}

void gf_OrlanAttackWaveWaypointEast () {
    // Implementation
    if ((gv_miraHanContractBought == true)) {
        AIAttackWaveAddWaypoint(gv_p02_ORLAN_ENEMY, PointFromId(191), false);
    }
    else {
        AIAttackWaveAddWaypoint(gv_p02_ORLAN_ENEMY, PointFromId(212), false);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(13);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/A0D4A53F"), null, PointFromId(46));
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(gv_p02_ORLAN_ENEMY, "SiegeTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_p03_MIRA_HAN, "SiegeTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_p04_DOMINION, "PersonalCloaking", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_ORLAN_ENEMY, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_MIRA_HAN, 7);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_DOMINION, 5);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_SCRAP, 7);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p06_JUNKERS, 7);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p07_DERELICT_STRUCTURES, 7);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p08_RAYNOR_COMP, 1);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p09_PROTOSS_RELICS, 7);
    libNtve_gf_SetAlliance(gv_p02_ORLAN_ENEMY, gv_p03_MIRA_HAN, 7);
    libNtve_gf_SetAlliance(gv_p02_ORLAN_ENEMY, gv_p04_DOMINION, 2);
    libNtve_gf_SetAlliance(gv_p02_ORLAN_ENEMY, gv_p08_RAYNOR_COMP, 7);
    libNtve_gf_SetAlliance(gv_p02_ORLAN_ENEMY, gv_p05_SCRAP, 7);
    libNtve_gf_SetAlliance(gv_p02_ORLAN_ENEMY, gv_p06_JUNKERS, 7);
    libNtve_gf_SetAlliance(gv_p02_ORLAN_ENEMY, gv_p07_DERELICT_STRUCTURES, 7);
    libNtve_gf_SetAlliance(gv_p02_ORLAN_ENEMY, gv_p09_PROTOSS_RELICS, 7);
    libNtve_gf_SetAlliance(gv_p03_MIRA_HAN, gv_p04_DOMINION, 7);
    libNtve_gf_SetAlliance(gv_p03_MIRA_HAN, gv_p05_SCRAP, 7);
    libNtve_gf_SetAlliance(gv_p03_MIRA_HAN, gv_p06_JUNKERS, 7);
    libNtve_gf_SetAlliance(gv_p03_MIRA_HAN, gv_p07_DERELICT_STRUCTURES, 7);
    libNtve_gf_SetAlliance(gv_p03_MIRA_HAN, gv_p08_RAYNOR_COMP, 7);
    libNtve_gf_SetAlliance(gv_p03_MIRA_HAN, gv_p09_PROTOSS_RELICS, 7);
    libNtve_gf_SetAlliance(gv_p04_DOMINION, gv_p05_SCRAP, 7);
    libNtve_gf_SetAlliance(gv_p04_DOMINION, gv_p06_JUNKERS, 7);
    libNtve_gf_SetAlliance(gv_p05_SCRAP, gv_p06_JUNKERS, 7);
    libNtve_gf_SetAlliance(gv_p05_SCRAP, gv_p07_DERELICT_STRUCTURES, 7);
    libNtve_gf_SetAlliance(gv_p06_JUNKERS, gv_p07_DERELICT_STRUCTURES, 7);
    libNtve_gf_SetAlliance(gv_p06_JUNKERS, gv_p08_RAYNOR_COMP, 7);
    libNtve_gf_SetAlliance(gv_p06_JUNKERS, gv_p09_PROTOSS_RELICS, 7);
    PlayerGroupAdd(gv_enemyPlayers, gv_p02_ORLAN_ENEMY);
    PlayerGroupAdd(gv_enemyPlayers, gv_p04_DOMINION);
    PlayerGroupAdd(gv_miraHanPlayers, gv_p03_MIRA_HAN);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_p02_ORLAN_ENEMY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p02_ORLAN_ENEMY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_MIRA_HAN, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_MIRA_HAN, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    string auto1D02B692_val;

    // Variable Declarations
    bool lv_playerHasMercTech;
    int lv_merc;

    // Variable Initialization
    lv_playerHasMercTech = false;
    lv_merc = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ghostNukeSilo = UnitFromId(1327);
    UnitSetPropertyFixed(UnitFromId(1226), c_unitPropEnergyPercent, 100.0);
    libNtve_gf_ShowHideUnit(UnitFromId(1327), false);
    UnitCargoCreate(UnitFromId(271), "SCV", 5);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_playerSCVs);
    UnitCargoCreate(UnitFromId(1056), "Marine", 5);
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_p02_ORLAN_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_p03_MIRA_HAN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "WarPig", 4);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "AutoTurretTimedLife", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ProtossRelic", gv_p09_PROTOSS_RELICS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_contrabandRelicsTotal += 1;
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(20)));
    gv_initialElevatorBlockers[1] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(21)));
    gv_initialElevatorBlockers[2] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(12)));
    gv_initialElevatorBlockers[3] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(8)));
    gv_initialElevatorBlockers[4] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(13)));
    gv_initialElevatorBlockers[5] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(14)));
    gv_initialElevatorBlockers[6] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(18)));
    gv_initialElevatorBlockers[7] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(19)));
    gv_initialElevatorBlockers[8] = UnitLastCreated();
    UnitGroupLoopBegin(UnitGroup("Raven", gv_p02_ORLAN_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ProtossRelic", gv_p09_PROTOSS_RELICS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/57034AFD"), StringExternal("Param/Value/E4C2663E"), StringExternal("Param/Value/7F6AA35A"));
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
        }
        else {
            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/C92B9D15"), StringExternal("Param/Value/9D3B121D"), StringExternal("Param/Value/2A2F1DEC"));
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        gf_SetOrlanCommandCenterText(UnitFromId(767));
        gf_SetOrlanCommandCenterText(UnitFromId(894));
        gf_SetOrlanCommandCenterText(UnitFromId(893));
    }
    else {
        UnitSetInfoText(UnitFromId(767), StringExternal("Param/Value/B8443135"), StringExternal("Param/Value/8072BBF0"), StringExternal("Param/Value/BD509D57"));
        UnitSetInfoText(UnitFromId(894), StringExternal("Param/Value/5807D76A"), StringExternal("Param/Value/8903569B"), StringExternal("Param/Value/923FBA10"));
        UnitSetInfoText(UnitFromId(893), StringExternal("Param/Value/31A856E3"), StringExternal("Param/Value/8E76FFC9"), StringExternal("Param/Value/3D90DF9D"));
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_p05_SCRAP, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        auto1D02B692_val = UnitGetType(UnitGroupLoopCurrent());
        if (auto1D02B692_val == "ScrapSalvage1x1") {
            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/E4147BF2"), StringExternal("Param/Value/6D92663B"), StringExternal("Param/Value/1117E451"));
        }
        else if (auto1D02B692_val == "ScrapSalvage2x2") {
            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/E88A79BA"), StringExternal("Param/Value/5B8CE1E1"), StringExternal("Param/Value/42238026"));
        }
        else if (auto1D02B692_val == "ScrapHuge") {
            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/994D0392"), StringExternal("Param/Value/BB78BE99"), StringExternal("Param/Value/BA28B7AE"));
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MineralCrystal", gv_p05_SCRAP, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_minerals_In_Expansion_1, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MineralCrystal", gv_p05_SCRAP, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_minerals_In_Expansion_2, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MineralCrystal", gv_p05_SCRAP, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_minerals_In_Expansion_3, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ScrapSalvage1x1", gv_p05_SCRAP, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_huge_Scrap_1, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ScrapSalvage1x1", gv_p05_SCRAP, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_huge_Scrap_2, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ScrapSalvage1x1", gv_p05_SCRAP, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_huge_Scrap_3, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionPlayableMap(), "PortZionCrusherDoodad", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "PortZionScrapElevatorLeft", c_animNameDefault, "Morph", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "PortZionScrapElevatorRight", c_animNameDefault, "Morph", c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    VisRevealerCreate(gv_p01_USER, RegionFromId(52));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_centerAreaRevealer = VisRevealerLastCreated();
    VisExploreArea(gv_p01_USER, RegionFromId(15), true, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(53), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(3), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(23), RegionFromId(5), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(54), RegionFromId(6), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(7), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(9), gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p02_ORLAN_ENEMY, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p04_DOMINION, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }
    else {
    }
    gv_mERC_CONTRACT_PRICE = 6000;
    gv_oRLANS_MINERAL_COUNT = 0;
    PlayerModifyPropertyInt(gv_p02_ORLAN_ENEMY, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "JackhammerConcussionGrenades", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "MarauderLifeBoost", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "NeosteelFrame", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_miraHanPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CombatShield", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "MarineStimpack", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "NanobotInjectors", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "StabilizerMedPacks", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "JuggernautPlating", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel3", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Diamondback", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarPig", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HammerSecurity", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpartanCompany", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeBreakerSieged", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HelsAngelFighter", false, gv_p01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_p01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_p01_USER);
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("DukesRevenge", false, gv_p01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeReal);
    TriggerExecute(gt_IntroLanding, true, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1055)), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PlayerPauseAllCooldowns(gv_p01_USER, true);
    PlayerPauseAllCharges(gv_p01_USER, true);
    TriggerExecute(gt_StartGameStage1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerPauseAllCooldowns(gv_p01_USER, false);
    PlayerPauseAllCharges(gv_p01_USER, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner02MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_JunkersStart, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveBuyContractCreateQ, true, true);
    TriggerExecute(gt_TransmissionRaynorIntroQ, true, false);
    Wait(6.0, c_timeReal);
    TriggerExecute(gt_CreateOrlanCommandCenterPings, true, false);
    Wait(4.0, c_timeReal);
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerExecute(gt_MercenaryContractTipQ, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_StopOrlanTipQ, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_TransmissionHornerTalksAboutPlanetQ, true, true);
    TriggerExecute(gt_ObjectiveFindContrabandCreateQ, true, false);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_MiraHanGivesVulturestoPlayer, true, false);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1_Init () {
    gt_StartGameStage1 = TriggerCreate("gt_StartGameStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_OrlanRetributiveNuke, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(61), gv_p01_USER);
    MinimapPing(PlayerGroupAll(), PointFromId(47), 6.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/813453E8"), null, PointFromId(47));
    Wait(1.0, c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_achievementSCVsTrained == 0)) {
        AchievementAward(gv_p01_USER, "THorner02_3");
    }
    else {
    }
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyOrlanCreateQ, true, false);
    VisRevealArea(gv_p01_USER, RegionCircle(PointFromId(51), 6.0), 10.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingObjective", PointFromId(51), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_orlansFortressPing = PingLastCreated();
    PingSetTooltip(gv_orlansFortressPing, StringExternal("Param/Value/E1F86B1E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2_Init () {
    gt_StartGameStage2 = TriggerCreate("gt_StartGameStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Landing
//--------------------------------------------------------------------------------------------------
bool gt_IntroLanding_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(271), OrderTargetingPoint(AbilityCommand("CommandCenterLand", 0), PointFromId(46)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(271), Order(AbilityCommand("CommandCenterTransport", 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(274), OrderTargetingPoint(AbilityCommand("BarracksLand", 0), PointFromId(276)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(270), OrderTargetingPoint(AbilityCommand("FactoryLand", 0), PointFromId(275)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1056), OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), RegionGetCenter(RegionFromId(4))), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1056), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(100)), c_orderQueueAddToEnd);
    libNtve_gf_ShareVisionofUnit(UnitFromId(1056), false, gv_p01_USER);
    Wait(17.0, c_timeGame);
    UnitRemove(UnitFromId(1056));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroLanding_Init () {
    gt_IntroLanding = TriggerCreate("gt_IntroLanding_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner of Intro Structures
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerofIntroStructures_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p08_RAYNOR_COMP))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_RescueUnit(EventUnit(), gv_p01_USER, true);
    if ((UnitGetType(EventUnit()) == "CommandCenter")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, 50.0);
    }
    else {
    }
    TriggerExecute(gt_ChangeOwnerofPreplacedStructures, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerofIntroStructures_Init () {
    gt_ChangeOwnerofIntroStructures = TriggerCreate("gt_ChangeOwnerofIntroStructures_Func");
    TriggerAddEventUnitAbility(gt_ChangeOwnerofIntroStructures, null, AbilityCommand("FactoryLand", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ChangeOwnerofIntroStructures, null, AbilityCommand("BarracksLand", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ChangeOwnerofIntroStructures, null, AbilityCommand("CommandCenterLand", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner of Preplaced Structures
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerofPreplacedStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_selected;

    // Variable Initialization
    lv_selected = false;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p07_DERELICT_STRUCTURES, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerofPreplacedStructures_Init () {
    gt_ChangeOwnerofPreplacedStructures = TriggerCreate("gt_ChangeOwnerofPreplacedStructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner of Dropship Units
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerofDropshipUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p08_RAYNOR_COMP))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Marine")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_RescueUnit(EventUnit(), gv_p01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerofDropshipUnits_Init () {
    gt_ChangeOwnerofDropshipUnits = TriggerCreate("gt_ChangeOwnerofDropshipUnits_Func");
    TriggerAddEventUnitRegion(gt_ChangeOwnerofDropshipUnits, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner of SCVs
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerofSCVs_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CommandCenter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_playerSCVs);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerofSCVs_Init () {
    gt_ChangeOwnerofSCVs = TriggerCreate("gt_ChangeOwnerofSCVs_Func");
    TriggerAddEventUnitAbility(gt_ChangeOwnerofSCVs, null, AbilityCommand("CommandCenterTransport", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Orlan Command Center Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateOrlanCommandCenterPings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(893)), 8.0), 6.0, false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(767)), 8.0), 6.0, false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(894)), 8.0), 6.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(767)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/2A95D303"));
    gv_pingCommandCenterSW = PingLastCreated();
    Wait(0.5, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(894)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8A9CA656"));
    gv_pingCommandCenterSE = PingLastCreated();
    Wait(0.5, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(893)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/018921A4"));
    gv_pingCommandCenterNE = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateOrlanCommandCenterPings_Init () {
    gt_CreateOrlanCommandCenterPings = TriggerCreate("gt_CreateOrlanCommandCenterPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Super Crane Activation
//--------------------------------------------------------------------------------------------------
bool gt_SuperCraneActivation_Func (bool testConds, bool runActions) {
    int auto9A94EAEE_val;
    int autoD651B133_val;
    int auto9177EB0C_val;
    int auto9BB4536C_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization
    lv_random = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 2);
    auto9A94EAEE_val = lv_random;
    if (auto9A94EAEE_val == 1) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(23), "SuperCrane", c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (auto9A94EAEE_val == 2) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(23), "SuperCrane", c_animNameDefault, "Spell 01", c_animFlagNonLooping, c_animTimeDefault);
    }
    else {
    }
    Wait(RandomFixed(2.0, 4.0), c_timeGame);
    lv_random = RandomInt(1, 2);
    autoD651B133_val = lv_random;
    if (autoD651B133_val == 1) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(54), "SuperCrane", c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (autoD651B133_val == 2) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(54), "SuperCrane", c_animNameDefault, "Spell 01", c_animFlagNonLooping, c_animTimeDefault);
    }
    else {
    }
    Wait(RandomFixed(2.0, 4.0), c_timeGame);
    lv_random = RandomInt(1, 2);
    auto9177EB0C_val = lv_random;
    if (auto9177EB0C_val == 1) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(22), "SuperCrane", c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (auto9177EB0C_val == 2) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(22), "SuperCrane", c_animNameDefault, "Spell 01", c_animFlagNonLooping, c_animTimeDefault);
    }
    else {
    }
    Wait(RandomFixed(2.0, 4.0), c_timeGame);
    lv_random = RandomInt(1, 2);
    auto9BB4536C_val = lv_random;
    if (auto9BB4536C_val == 1) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(17), "SuperCrane", c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (auto9BB4536C_val == 2) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(17), "SuperCrane", c_animNameDefault, "Spell 01", c_animFlagNonLooping, c_animTimeDefault);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuperCraneActivation_Init () {
    gt_SuperCraneActivation = TriggerCreate("gt_SuperCraneActivation_Func");
    TriggerAddEventTimePeriodic(gt_SuperCraneActivation, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Contract Window
//--------------------------------------------------------------------------------------------------
bool gt_CreateContractWindow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(1, 4, StringExternal("Param/Value/BECFC09F"), Color(0.00, 100.00, 0.00));
    gv_merc_Contract_Price_Board = BoardLastCreated();
    BoardSetState(gv_merc_Contract_Price_Board, PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardItemSetText(gv_merc_Contract_Price_Board, 1, c_boardRowHeader, (StringExternal("Param/Value/B4F093E9") + IntToText(gv_mERC_CONTRACT_PRICE) + StringExternal("Param/Value/7B4624DB")));
    BoardItemSetProgressShow(gv_merc_Contract_Price_Board, 1, 2, true);
    BoardItemSetText(gv_merc_Contract_Price_Board, 1, 1, (StringExternal("Param/Value/DB71EC73") + IntToText(PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals))));
    BoardItemSetTextColor(gv_merc_Contract_Price_Board, 1, 1, Color(0.00, 100.00, 100.00));
    BoardItemSetFontSize(gv_merc_Contract_Price_Board, 1, 1, 18);
    BoardItemSetProgressRange(gv_merc_Contract_Price_Board, 1, 2, 0.0, IntToFixed(gv_mERC_CONTRACT_PRICE));
    BoardItemSetProgressColor(gv_merc_Contract_Price_Board, 1, 2, Color(0.00, 100.00, 100.00), 1);
    BoardItemSetProgressShow(gv_merc_Contract_Price_Board, 1, 4, true);
    BoardItemSetText(gv_merc_Contract_Price_Board, 1, 3, (StringExternal("Param/Value/A79B6B3E") + IntToText(gv_oRLANS_MINERAL_COUNT)));
    BoardItemSetTextColor(gv_merc_Contract_Price_Board, 1, 3, Color(75.29, 0.00, 0.00));
    BoardItemSetFontSize(gv_merc_Contract_Price_Board, 1, 3, 18);
    BoardItemSetProgressRange(gv_merc_Contract_Price_Board, 1, 4, 0.0, IntToFixed(gv_mERC_CONTRACT_PRICE));
    BoardItemSetProgressColor(gv_merc_Contract_Price_Board, 1, 4, Color(100.00, 0.00, 0.00), 1);
    BoardItemSetProgressValue(gv_merc_Contract_Price_Board, 1, 2, IntToFixed(PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals)));
    BoardItemSetProgressValue(gv_merc_Contract_Price_Board, 1, 4, IntToFixed(gv_oRLANS_MINERAL_COUNT));
    BoardItemSetIcon(gv_merc_Contract_Price_Board, 1, 2, "Assets\\Textures\\icon-mineral-terran.dds", false);
    BoardItemSetIcon(gv_merc_Contract_Price_Board, 1, 4, "Assets\\Textures\\icon-mineral-zerg.dds", false);
    BoardMinimizeShow(gv_merc_Contract_Price_Board, PlayerGroupAll(), false);
    SoundPlay(SoundLink("TUI_StarmapMenuPopup", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(gt_OrlanMineralCount, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateContractWindow_Init () {
    gt_CreateContractWindow = TriggerCreate("gt_CreateContractWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Contract Window
//--------------------------------------------------------------------------------------------------
bool gt_UpdateContractWindow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetProgressValue(gv_merc_Contract_Price_Board, 1, 2, IntToFixed(PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals)));
    BoardItemSetProgressValue(gv_merc_Contract_Price_Board, 1, 4, IntToFixed(gv_oRLANS_MINERAL_COUNT));
    BoardItemSetText(gv_merc_Contract_Price_Board, 1, 1, (StringExternal("Param/Value/BC8609EA") + IntToText(PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals))));
    BoardItemSetText(gv_merc_Contract_Price_Board, 1, 3, (StringExternal("Param/Value/92B49FB8") + IntToText(gv_oRLANS_MINERAL_COUNT)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateContractWindow_Init () {
    gt_UpdateContractWindow = TriggerCreate("gt_UpdateContractWindow_Func");
    TriggerAddEventTimePeriodic(gt_UpdateContractWindow, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Contract
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysContract_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_miraHanContractBought == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) >= gv_mERC_CONTRACT_PRICE))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_miraHanContractBought = true;
    UISetRestartLoadingScreen(ConversationDataStateText("Maps|THorner02", "Loading Screen Restart 2"));
    TriggerEnable(gt_OrlanMineralCount, false);
    TriggerEnable(gt_MiraHanDestroyed, false);
    TriggerStop(gt_MiraHanDestroyed);
    TriggerEnable(gt_UpdateContractWindow, false);
    TriggerEnable(gt_AchievementNoSCVTraining, false);
    PingDestroy(gv_pingCommandCenterSW);
    PingDestroy(gv_pingCommandCenterSE);
    PingDestroy(gv_pingCommandCenterNE);
    UnitClearInfoText(UnitFromId(893));
    UnitClearInfoText(UnitFromId(894));
    UnitClearInfoText(UnitFromId(767));
    BoardDestroy(gv_merc_Contract_Price_Board);
    SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupAll(), 100.0, 0.0);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSubtract, gv_mERC_CONTRACT_PRICE);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_MIRA_HAN, 1);
    TriggerExecute(gt_ObjectiveBuyContractComplete, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysContract_Init () {
    gt_PlayerBuysContract = TriggerCreate("gt_PlayerBuysContract_Func");
    TriggerAddEventTimePeriodic(gt_PlayerBuysContract, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mira Han Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_MiraHanDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p03_MIRA_HAN, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveBuyContractFailedQ, true, true);
    BoardDestroy(gv_merc_Contract_Price_Board);
    TriggerExecute(gt_DefeatMiraHanDead, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiraHanDestroyed_Init () {
    gt_MiraHanDestroyed = TriggerCreate("gt_MiraHanDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_MiraHanDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mira Han Gives Vultures to Player
//--------------------------------------------------------------------------------------------------
bool gt_MiraHanGivesVulturestoPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vultureGroup;
    unit lv_medivac;

    // Variable Initialization
    lv_vultureGroup = UnitGroupEmpty();
    lv_medivac = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_p03_MIRA_HAN, PointFromId(1242));
    lv_medivac = UnitLastCreated();
    UnitCargoCreate(lv_medivac, "Vulture", 4);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_medivac, PointFromId(1243), PointFromId(1242));
    Wait(6.0, c_timeGame);
    TriggerExecute(gt_TransmissionMiraHanGivesVulturesQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiraHanGivesVulturestoPlayer_Init () {
    gt_MiraHanGivesVulturestoPlayer = TriggerCreate("gt_MiraHanGivesVulturestoPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner of Vulture Dropship Units
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerofVultureDropshipUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p03_MIRA_HAN))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Vulture")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_RescueUnit(EventUnit(), gv_p01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerofVultureDropshipUnits_Init () {
    gt_ChangeOwnerofVultureDropshipUnits = TriggerCreate("gt_ChangeOwnerofVultureDropshipUnits_Func");
    TriggerAddEventUnitRegion(gt_ChangeOwnerofVultureDropshipUnits, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Mineral Count
//--------------------------------------------------------------------------------------------------
bool gt_OrlanMineralCount_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ORLAN_ENEMY))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_oRLANS_MINERAL_COUNT += 5;
    if ((gv_oRLANS_MINERAL_COUNT >= gv_mERC_CONTRACT_PRICE)) {
        TriggerEnable(TriggerGetCurrent(), false);
        PingDestroy(gv_pingCommandCenterSW);
        PingDestroy(gv_pingCommandCenterSE);
        PingDestroy(gv_pingCommandCenterNE);
        UnitClearInfoText(UnitFromId(893));
        UnitClearInfoText(UnitFromId(894));
        UnitClearInfoText(UnitFromId(767));
        BoardDestroy(gv_merc_Contract_Price_Board);
        libNtve_gf_HideScreenButton(false, 1);
        gv_miraHanContractBought = true;
        TriggerEnable(gt_MiraHanDestroyed, false);
        TriggerEnable(gt_UpdateContractWindow, false);
        TriggerExecute(gt_ObjectiveBuyContractFailedQ, true, false);
        TriggerEnable(gt_DefeatOrlanBuysContract, true);
        TriggerExecute(gt_DefeatOrlanBuysContract, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanMineralCount_Init () {
    gt_OrlanMineralCount = TriggerCreate("gt_OrlanMineralCount_Func");
    TriggerEnable(gt_OrlanMineralCount, false);
    TriggerAddEventUnitAbility(gt_OrlanMineralCount, null, AbilityCommand("SCVHarvest", 1), c_abilHarvestStageDropOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Expansion 1 Attacked
//--------------------------------------------------------------------------------------------------
bool gt_OrlanExpansion1Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((RegionContainsPoint(RegionFromId(47), UnitGetPosition(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ORLAN_ENEMY))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitGroupLoopBegin(UnitGroup(null, 2, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_p01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanExpansion1Attacked_Init () {
    gt_OrlanExpansion1Attacked = TriggerCreate("gt_OrlanExpansion1Attacked_Func");
    TriggerAddEventUnitDied(gt_OrlanExpansion1Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Expansion 2 Attacked
//--------------------------------------------------------------------------------------------------
bool gt_OrlanExpansion2Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((RegionContainsPoint(RegionFromId(48), UnitGetPosition(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ORLAN_ENEMY))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitGroupLoopBegin(UnitGroup(null, 2, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_p01_USER, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, 2, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_p01_USER, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanExpansion2Attacked_Init () {
    gt_OrlanExpansion2Attacked = TriggerCreate("gt_OrlanExpansion2Attacked_Func");
    TriggerAddEventUnitDied(gt_OrlanExpansion2Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Expansion 3 Attacked
//--------------------------------------------------------------------------------------------------
bool gt_OrlanExpansion3Attacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((RegionContainsPoint(RegionFromId(49), UnitGetPosition(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ORLAN_ENEMY))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitGroupLoopBegin(UnitGroup(null, 2, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_p01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanExpansion3Attacked_Init () {
    gt_OrlanExpansion3Attacked = TriggerCreate("gt_OrlanExpansion3Attacked_Func");
    TriggerAddEventUnitDied(gt_OrlanExpansion3Attacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junkers Start
//--------------------------------------------------------------------------------------------------
bool gt_JunkersStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_JunkerWInitiate, true, false);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_JunkerNESpawn, true, false);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_JunkerSSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkersStart_Init () {
    gt_JunkersStart = TriggerCreate("gt_JunkersStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker NE Spawn
//--------------------------------------------------------------------------------------------------
bool gt_JunkerNESpawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "PortJunker", 0, gv_p06_JUNKERS, RegionRandomPoint(RegionFromId(28)), PointFromId(838));
    gv_junker_NE = UnitLastCreated();
    UnitIssueOrder(gv_junker_NE, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(838)), c_orderQueueReplace);
    UnitIssueOrder(gv_junker_NE, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(840)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_junker_NE, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(841)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_junker_NE, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(32))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerNESpawn_Init () {
    gt_JunkerNESpawn = TriggerCreate("gt_JunkerNESpawn_Func");
    TriggerAddEventTimePeriodic(gt_JunkerNESpawn, 180.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker NE Pitstop 1
//--------------------------------------------------------------------------------------------------
bool gt_JunkerNEPitstop1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.3, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(842)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(843)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(33))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerNEPitstop1_Init () {
    gt_JunkerNEPitstop1 = TriggerCreate("gt_JunkerNEPitstop1_Func");
    TriggerAddEventUnitRegion(gt_JunkerNEPitstop1, null, RegionFromId(32), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker NE Pitstop 2
//--------------------------------------------------------------------------------------------------
bool gt_JunkerNEPitstop2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(19.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(844)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(845)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(34))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerNEPitstop2_Init () {
    gt_JunkerNEPitstop2 = TriggerCreate("gt_JunkerNEPitstop2_Func");
    TriggerAddEventUnitRegion(gt_JunkerNEPitstop2, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker NE Pitstop 3
//--------------------------------------------------------------------------------------------------
bool gt_JunkerNEPitstop3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.3, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(31))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerNEPitstop3_Init () {
    gt_JunkerNEPitstop3 = TriggerCreate("gt_JunkerNEPitstop3_Func");
    TriggerAddEventUnitRegion(gt_JunkerNEPitstop3, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker NE Despawn
//--------------------------------------------------------------------------------------------------
bool gt_JunkerNEDespawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerNEDespawn_Init () {
    gt_JunkerNEDespawn = TriggerCreate("gt_JunkerNEDespawn_Func");
    TriggerAddEventUnitRegion(gt_JunkerNEDespawn, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker S Spawn
//--------------------------------------------------------------------------------------------------
bool gt_JunkerSSpawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "PortJunker", 0, gv_p06_JUNKERS, RegionRandomPoint(RegionFromId(29)), PointFromId(847));
    gv_junker_S = UnitLastCreated();
    UnitIssueOrder(gv_junker_S, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(847)), c_orderQueueReplace);
    UnitIssueOrder(gv_junker_S, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(848)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_junker_S, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(36))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerSSpawn_Init () {
    gt_JunkerSSpawn = TriggerCreate("gt_JunkerSSpawn_Func");
    TriggerAddEventTimePeriodic(gt_JunkerSSpawn, 205.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker S Pitstop 1
//--------------------------------------------------------------------------------------------------
bool gt_JunkerSPitstop1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.3, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(849)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(850)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(851)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(37))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerSPitstop1_Init () {
    gt_JunkerSPitstop1 = TriggerCreate("gt_JunkerSPitstop1_Func");
    TriggerAddEventUnitRegion(gt_JunkerSPitstop1, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker S Pitstop 2
//--------------------------------------------------------------------------------------------------
bool gt_JunkerSPitstop2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.3, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(852)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(853)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(35))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerSPitstop2_Init () {
    gt_JunkerSPitstop2 = TriggerCreate("gt_JunkerSPitstop2_Func");
    TriggerAddEventUnitRegion(gt_JunkerSPitstop2, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker S Despawn
//--------------------------------------------------------------------------------------------------
bool gt_JunkerSDespawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerSDespawn_Init () {
    gt_JunkerSDespawn = TriggerCreate("gt_JunkerSDespawn_Func");
    TriggerAddEventUnitRegion(gt_JunkerSDespawn, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker W Initiate
//--------------------------------------------------------------------------------------------------
bool gt_JunkerWInitiate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_junker_W = UnitFromId(818);
    UnitIssueOrder(gv_junker_W, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(38))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerWInitiate_Init () {
    gt_JunkerWInitiate = TriggerCreate("gt_JunkerWInitiate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker W Pitstop 1
//--------------------------------------------------------------------------------------------------
bool gt_JunkerWPitstop1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(19.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(855)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(856)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(857)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(858)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(40))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerWPitstop1_Init () {
    gt_JunkerWPitstop1 = TriggerCreate("gt_JunkerWPitstop1_Func");
    TriggerAddEventUnitRegion(gt_JunkerWPitstop1, null, RegionFromId(38), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker W Pitstop 2
//--------------------------------------------------------------------------------------------------
bool gt_JunkerWPitstop2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p06_JUNKERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p06_JUNKERS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(19.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(858)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(857)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(856)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(855)), c_orderQueueAddToEnd);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(38))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerWPitstop2_Init () {
    gt_JunkerWPitstop2 = TriggerCreate("gt_JunkerWPitstop2_Func");
    TriggerAddEventUnitRegion(gt_JunkerWPitstop2, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker Killed - Spawn Scrap
//--------------------------------------------------------------------------------------------------
bool gt_JunkerKilledSpawnScrap_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PortJunker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "ScrapSalvage1x1", 0, gv_p05_SCRAP, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerKilledSpawnScrap_Init () {
    gt_JunkerKilledSpawnScrap = TriggerCreate("gt_JunkerKilledSpawnScrap_Func");
    TriggerAddEventUnitDied(gt_JunkerKilledSpawnScrap, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Scrap Spawn (3x3)
//--------------------------------------------------------------------------------------------------
bool gt_InitialScrapSpawn3x3_Func (bool testConds, bool runActions) {
    int auto9501A72F_ae;
    int auto9501A72F_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(20));
    gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(21));
    gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(12));
    gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(8));
    gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(13));
    gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(14));
    gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(18));
    gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(19));
    auto9501A72F_ae = 8;
    auto9501A72F_ai = 1;
    lv_i = 1;
    while ((auto9501A72F_ai >= 0 && lv_i <= auto9501A72F_ae) || (auto9501A72F_ai <= 0 && lv_i >= auto9501A72F_ae)) {
        UnitRemove(gv_initialElevatorBlockers[lv_i]);
        if (lv_i == auto9501A72F_ae) {
            break;
        }
        lv_i = lv_i + auto9501A72F_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialScrapSpawn3x3_Init () {
    gt_InitialScrapSpawn3x3 = TriggerCreate("gt_InitialScrapSpawn3x3_Func");
    TriggerAddEventUnitRegion(gt_InitialScrapSpawn3x3, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_InitialScrapSpawn3x3, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_InitialScrapSpawn3x3, null, RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_InitialScrapSpawn3x3, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickups_Func (bool testConds, bool runActions) {
    string auto4ABEF2E3_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4ABEF2E3_val = UnitGetType(EventUnit());
    if (auto4ABEF2E3_val == "NaturalMinerals") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, UnitGetOwner(EventUnitTargetUnit()));
        gv_salvageTotal += 100;
    }
    else if (auto4ABEF2E3_val == "MineralCrystal") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, UnitGetOwner(EventUnitTargetUnit()));
        gv_salvageTotal += 100;
    }
    else if (auto4ABEF2E3_val == "PalletMinerals") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, UnitGetOwner(EventUnitTargetUnit()));
        gv_salvageTotal += 100;
    }
    else if (auto4ABEF2E3_val == "PalletGas") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else if (auto4ABEF2E3_val == "ScrapSalvage1x1") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 25, UnitGetOwner(EventUnitTargetUnit()));
        gv_salvageTotal += 25;
    }
    else if (auto4ABEF2E3_val == "ScrapSalvage2x2") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 75, UnitGetOwner(EventUnitTargetUnit()));
        gv_salvageTotal += 75;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickups_Init () {
    gt_ResourcePickups = TriggerCreate("gt_ResourcePickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawnable Scrap Salvaged (3x3) - Site 1-1
//--------------------------------------------------------------------------------------------------
bool gt_RespawnableScrapSalvaged3x3Site11_Func (bool testConds, bool runActions) {
    unitgroup autoD087E88F_g;
    int autoD087E88F_u;

    // Variable Declarations
    unit lv_scrap;
    point lv_scrapPoint;

    // Variable Initialization
    lv_scrap = null;
    lv_scrapPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD087E88F_g = UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD087E88F_u = 1;
    while (autoD087E88F_u <= UnitGroupCount(autoD087E88F_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(autoD087E88F_g, autoD087E88F_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.5) == true)) {
            lv_scrapPoint = UnitGetPosition(lv_scrap);
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 150, 0, true);
            gv_salvageTotal += 150;
            Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 160.0, 180.0), c_timeGame);
            while (!((gf_ScrapCanBeSalvaged(gv_p01_USER, lv_scrapPoint, 8.0) == false))) {
                Wait(5.0, c_timeGame);
            }
            gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(20));
            TriggerExecute(gt_OrlanGuardsSalvageSite1, true, false);
            return true;
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(autoD087E88F_g, autoD087E88F_u)) {
            autoD087E88F_u = autoD087E88F_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnableScrapSalvaged3x3Site11_Init () {
    gt_RespawnableScrapSalvaged3x3Site11 = TriggerCreate("gt_RespawnableScrapSalvaged3x3Site11_Func");
    TriggerAddEventTimePeriodic(gt_RespawnableScrapSalvaged3x3Site11, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawnable Scrap Salvaged (3x3) - Site 1-2
//--------------------------------------------------------------------------------------------------
bool gt_RespawnableScrapSalvaged3x3Site12_Func (bool testConds, bool runActions) {
    unitgroup autoA6BEA67F_g;
    int autoA6BEA67F_u;

    // Variable Declarations
    unit lv_scrap;
    point lv_scrapPoint;

    // Variable Initialization
    lv_scrap = null;
    lv_scrapPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA6BEA67F_g = UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA6BEA67F_u = 1;
    while (autoA6BEA67F_u <= UnitGroupCount(autoA6BEA67F_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(autoA6BEA67F_g, autoA6BEA67F_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.5) == true)) {
            lv_scrapPoint = UnitGetPosition(lv_scrap);
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 150, 0, true);
            gv_salvageTotal += 150;
            Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 160.0, 180.0), c_timeGame);
            while (!((gf_ScrapCanBeSalvaged(gv_p01_USER, lv_scrapPoint, 8.0) == false))) {
                Wait(5.0, c_timeGame);
            }
            gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(21));
            TriggerExecute(gt_OrlanGuardsSalvageSite1, true, false);
            return true;
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(autoA6BEA67F_g, autoA6BEA67F_u)) {
            autoA6BEA67F_u = autoA6BEA67F_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnableScrapSalvaged3x3Site12_Init () {
    gt_RespawnableScrapSalvaged3x3Site12 = TriggerCreate("gt_RespawnableScrapSalvaged3x3Site12_Func");
    TriggerAddEventTimePeriodic(gt_RespawnableScrapSalvaged3x3Site12, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawnable Scrap Salvaged (3x3) - Site 2-1
//--------------------------------------------------------------------------------------------------
bool gt_RespawnableScrapSalvaged3x3Site21_Func (bool testConds, bool runActions) {
    unitgroup autoA5C67F99_g;
    int autoA5C67F99_u;

    // Variable Declarations
    unit lv_scrap;
    point lv_scrapPoint;

    // Variable Initialization
    lv_scrap = null;
    lv_scrapPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA5C67F99_g = UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA5C67F99_u = 1;
    while (autoA5C67F99_u <= UnitGroupCount(autoA5C67F99_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(autoA5C67F99_g, autoA5C67F99_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.5) == true)) {
            lv_scrapPoint = UnitGetPosition(lv_scrap);
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 150, 0, true);
            gv_salvageTotal += 150;
            Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 160.0, 180.0), c_timeGame);
            while (!((gf_ScrapCanBeSalvaged(gv_p01_USER, lv_scrapPoint, 8.0) == false))) {
                Wait(5.0, c_timeGame);
            }
            gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(12));
            TriggerExecute(gt_OrlanGuardsSalvageSite2, true, false);
            return true;
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(autoA5C67F99_g, autoA5C67F99_u)) {
            autoA5C67F99_u = autoA5C67F99_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnableScrapSalvaged3x3Site21_Init () {
    gt_RespawnableScrapSalvaged3x3Site21 = TriggerCreate("gt_RespawnableScrapSalvaged3x3Site21_Func");
    TriggerAddEventTimePeriodic(gt_RespawnableScrapSalvaged3x3Site21, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawnable Scrap Salvaged (3x3) - Site 2-2
//--------------------------------------------------------------------------------------------------
bool gt_RespawnableScrapSalvaged3x3Site22_Func (bool testConds, bool runActions) {
    unitgroup auto9ECE2071_g;
    int auto9ECE2071_u;

    // Variable Declarations
    unit lv_scrap;
    point lv_scrapPoint;

    // Variable Initialization
    lv_scrap = null;
    lv_scrapPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9ECE2071_g = UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9ECE2071_u = 1;
    while (auto9ECE2071_u <= UnitGroupCount(auto9ECE2071_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(auto9ECE2071_g, auto9ECE2071_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.5) == true)) {
            lv_scrapPoint = UnitGetPosition(lv_scrap);
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 150, 0, true);
            gv_salvageTotal += 150;
            Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 160.0, 180.0), c_timeGame);
            while (!((gf_ScrapCanBeSalvaged(gv_p01_USER, lv_scrapPoint, 8.0) == false))) {
                Wait(5.0, c_timeGame);
            }
            gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(8));
            TriggerExecute(gt_OrlanGuardsSalvageSite2, true, false);
            return true;
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(auto9ECE2071_g, auto9ECE2071_u)) {
            auto9ECE2071_u = auto9ECE2071_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnableScrapSalvaged3x3Site22_Init () {
    gt_RespawnableScrapSalvaged3x3Site22 = TriggerCreate("gt_RespawnableScrapSalvaged3x3Site22_Func");
    TriggerAddEventTimePeriodic(gt_RespawnableScrapSalvaged3x3Site22, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawnable Scrap Salvaged (3x3) - Site 3-1
//--------------------------------------------------------------------------------------------------
bool gt_RespawnableScrapSalvaged3x3Site31_Func (bool testConds, bool runActions) {
    unitgroup autoC4529C9A_g;
    int autoC4529C9A_u;

    // Variable Declarations
    unit lv_scrap;
    point lv_scrapPoint;

    // Variable Initialization
    lv_scrap = null;
    lv_scrapPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4529C9A_g = UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4529C9A_u = 1;
    while (autoC4529C9A_u <= UnitGroupCount(autoC4529C9A_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(autoC4529C9A_g, autoC4529C9A_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.5) == true)) {
            lv_scrapPoint = UnitGetPosition(lv_scrap);
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 150, 0, true);
            gv_salvageTotal += 150;
            Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 160.0, 180.0), c_timeGame);
            while (!((gf_ScrapCanBeSalvaged(gv_p01_USER, lv_scrapPoint, 8.0) == false))) {
                Wait(5.0, c_timeGame);
            }
            gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(13));
            TriggerExecute(gt_OrlanGuardsSalvageSite3, true, false);
            return true;
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(autoC4529C9A_g, autoC4529C9A_u)) {
            autoC4529C9A_u = autoC4529C9A_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnableScrapSalvaged3x3Site31_Init () {
    gt_RespawnableScrapSalvaged3x3Site31 = TriggerCreate("gt_RespawnableScrapSalvaged3x3Site31_Func");
    TriggerAddEventTimePeriodic(gt_RespawnableScrapSalvaged3x3Site31, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawnable Scrap Salvaged (3x3) - Site 3-2
//--------------------------------------------------------------------------------------------------
bool gt_RespawnableScrapSalvaged3x3Site32_Func (bool testConds, bool runActions) {
    unitgroup auto6F333A7B_g;
    int auto6F333A7B_u;

    // Variable Declarations
    unit lv_scrap;
    point lv_scrapPoint;

    // Variable Initialization
    lv_scrap = null;
    lv_scrapPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F333A7B_g = UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6F333A7B_u = 1;
    while (auto6F333A7B_u <= UnitGroupCount(auto6F333A7B_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(auto6F333A7B_g, auto6F333A7B_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.5) == true)) {
            lv_scrapPoint = UnitGetPosition(lv_scrap);
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 150, 0, true);
            gv_salvageTotal += 150;
            Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 160.0, 180.0), c_timeGame);
            while (!((gf_ScrapCanBeSalvaged(gv_p01_USER, lv_scrapPoint, 8.0) == false))) {
                Wait(5.0, c_timeGame);
            }
            gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(14));
            TriggerExecute(gt_OrlanGuardsSalvageSite3, true, false);
            return true;
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(auto6F333A7B_g, auto6F333A7B_u)) {
            auto6F333A7B_u = auto6F333A7B_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnableScrapSalvaged3x3Site32_Init () {
    gt_RespawnableScrapSalvaged3x3Site32 = TriggerCreate("gt_RespawnableScrapSalvaged3x3Site32_Func");
    TriggerAddEventTimePeriodic(gt_RespawnableScrapSalvaged3x3Site32, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawnable Scrap Salvaged (3x3) - Site 4-1
//--------------------------------------------------------------------------------------------------
bool gt_RespawnableScrapSalvaged3x3Site41_Func (bool testConds, bool runActions) {
    unitgroup auto030F5601_g;
    int auto030F5601_u;

    // Variable Declarations
    unit lv_scrap;
    point lv_scrapPoint;

    // Variable Initialization
    lv_scrap = null;
    lv_scrapPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto030F5601_g = UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto030F5601_u = 1;
    while (auto030F5601_u <= UnitGroupCount(auto030F5601_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(auto030F5601_g, auto030F5601_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.5) == true)) {
            lv_scrapPoint = UnitGetPosition(lv_scrap);
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 150, 0, true);
            gv_salvageTotal += 150;
            Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 160.0, 180.0), c_timeGame);
            while (!((gf_ScrapCanBeSalvaged(gv_p01_USER, lv_scrapPoint, 8.0) == false))) {
                Wait(5.0, c_timeGame);
            }
            gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(18));
            TriggerExecute(gt_OrlanGuardsSalvageSite4, true, false);
            return true;
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(auto030F5601_g, auto030F5601_u)) {
            auto030F5601_u = auto030F5601_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnableScrapSalvaged3x3Site41_Init () {
    gt_RespawnableScrapSalvaged3x3Site41 = TriggerCreate("gt_RespawnableScrapSalvaged3x3Site41_Func");
    TriggerAddEventTimePeriodic(gt_RespawnableScrapSalvaged3x3Site41, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawnable Scrap Salvaged (3x3) - Site 4-2
//--------------------------------------------------------------------------------------------------
bool gt_RespawnableScrapSalvaged3x3Site42_Func (bool testConds, bool runActions) {
    unitgroup auto0D5DAD66_g;
    int auto0D5DAD66_u;

    // Variable Declarations
    unit lv_scrap;
    point lv_scrapPoint;

    // Variable Initialization
    lv_scrap = null;
    lv_scrapPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0D5DAD66_g = UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0D5DAD66_u = 1;
    while (auto0D5DAD66_u <= UnitGroupCount(auto0D5DAD66_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(auto0D5DAD66_g, auto0D5DAD66_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.5) == true)) {
            lv_scrapPoint = UnitGetPosition(lv_scrap);
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 150, 0, true);
            gv_salvageTotal += 150;
            Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 160.0, 180.0), c_timeGame);
            while (!((gf_ScrapCanBeSalvaged(gv_p01_USER, lv_scrapPoint, 8.0) == false))) {
                Wait(5.0, c_timeGame);
            }
            gf_SpawnSalvageIfAreaIsClear("ScrapSalvage3x3", RegionFromId(19));
            TriggerExecute(gt_OrlanGuardsSalvageSite4, true, false);
            return true;
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(auto0D5DAD66_g, auto0D5DAD66_u)) {
            auto0D5DAD66_u = auto0D5DAD66_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnableScrapSalvaged3x3Site42_Init () {
    gt_RespawnableScrapSalvaged3x3Site42 = TriggerCreate("gt_RespawnableScrapSalvaged3x3Site42_Func");
    TriggerAddEventTimePeriodic(gt_RespawnableScrapSalvaged3x3Site42, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Expansion 01 Destroyed (SE)
//--------------------------------------------------------------------------------------------------
bool gt_OrlanExpansion01DestroyedSE_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_pingCommandCenterSE);
    UnitGroupLoopBegin(gv_minerals_In_Expansion_1);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanExpansion01DestroyedSE_Init () {
    gt_OrlanExpansion01DestroyedSE = TriggerCreate("gt_OrlanExpansion01DestroyedSE_Func");
    TriggerAddEventUnitDied(gt_OrlanExpansion01DestroyedSE, UnitRefFromUnit(UnitFromId(894)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Expansion 02 Destroyed (SW)
//--------------------------------------------------------------------------------------------------
bool gt_OrlanExpansion02DestroyedSW_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_pingCommandCenterSW);
    UnitGroupLoopBegin(gv_minerals_In_Expansion_2);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanExpansion02DestroyedSW_Init () {
    gt_OrlanExpansion02DestroyedSW = TriggerCreate("gt_OrlanExpansion02DestroyedSW_Func");
    TriggerAddEventUnitDied(gt_OrlanExpansion02DestroyedSW, UnitRefFromUnit(UnitFromId(767)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Expansion 03 Destroyed (NE)
//--------------------------------------------------------------------------------------------------
bool gt_OrlanExpansion03DestroyedNE_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_pingCommandCenterNE);
    UnitGroupLoopBegin(gv_minerals_In_Expansion_3);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanExpansion03DestroyedNE_Init () {
    gt_OrlanExpansion03DestroyedNE = TriggerCreate("gt_OrlanExpansion03DestroyedNE_Func");
    TriggerAddEventUnitDied(gt_OrlanExpansion03DestroyedNE, UnitRefFromUnit(UnitFromId(893)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Huge Scrap Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_HugeScrapDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ScrapHuge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == UnitFromId(127))) {
        UnitGroupLoopBegin(gv_huge_Scrap_1);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((EventUnit() == UnitFromId(193))) {
        UnitGroupLoopBegin(gv_huge_Scrap_2);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((EventUnit() == UnitFromId(243))) {
        UnitGroupLoopBegin(gv_huge_Scrap_3);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HugeScrapDestroyed_Init () {
    gt_HugeScrapDestroyed = TriggerCreate("gt_HugeScrapDestroyed_Func");
    TriggerAddEventUnitDied(gt_HugeScrapDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Guards Salvage Site 1
//--------------------------------------------------------------------------------------------------
bool gt_OrlanGuardsSalvageSite1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_raven;
    int lv_random;
    point lv_point;

    // Variable Initialization
    lv_raven = null;
    lv_random = 0;
    lv_point = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("AutoTurret", gv_p02_ORLAN_ENEMY, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Raven", 0, gv_p02_ORLAN_ENEMY, PointFromId(784));
    lv_raven = UnitLastCreated();
    AISetUnitScriptControlled(lv_raven, true);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(606)), c_orderQueueReplace);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("AutoTurret", 0), PointFromId(606)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueAddToEnd);
    Wait(110.0, c_timeGame);
    TriggerEnable(gt_OrlanGuardsSalvageSite1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanGuardsSalvageSite1_Init () {
    gt_OrlanGuardsSalvageSite1 = TriggerCreate("gt_OrlanGuardsSalvageSite1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Guards Salvage Site 2
//--------------------------------------------------------------------------------------------------
bool gt_OrlanGuardsSalvageSite2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_raven;
    int lv_random;
    point lv_point;

    // Variable Initialization
    lv_raven = null;
    lv_random = 0;
    lv_point = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(6), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("AutoTurret", gv_p02_ORLAN_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Raven", 0, gv_p02_ORLAN_ENEMY, PointFromId(784));
    lv_raven = UnitLastCreated();
    AISetUnitScriptControlled(lv_raven, true);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(634)), c_orderQueueReplace);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("AutoTurret", 0), PointFromId(634)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueAddToEnd);
    Wait(110.0, c_timeGame);
    TriggerEnable(gt_OrlanGuardsSalvageSite2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanGuardsSalvageSite2_Init () {
    gt_OrlanGuardsSalvageSite2 = TriggerCreate("gt_OrlanGuardsSalvageSite2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Guards Salvage Site 3
//--------------------------------------------------------------------------------------------------
bool gt_OrlanGuardsSalvageSite3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_raven;
    int lv_random;
    point lv_point;

    // Variable Initialization
    lv_raven = null;
    lv_random = 0;
    lv_point = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(7), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("AutoTurret", gv_p02_ORLAN_ENEMY, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Raven", 0, gv_p02_ORLAN_ENEMY, PointFromId(785));
    lv_raven = UnitLastCreated();
    AISetUnitScriptControlled(lv_raven, true);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(607)), c_orderQueueReplace);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("AutoTurret", 0), PointFromId(607)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueAddToEnd);
    Wait(110.0, c_timeGame);
    TriggerEnable(gt_OrlanGuardsSalvageSite3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanGuardsSalvageSite3_Init () {
    gt_OrlanGuardsSalvageSite3 = TriggerCreate("gt_OrlanGuardsSalvageSite3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Guards Salvage Site 4
//--------------------------------------------------------------------------------------------------
bool gt_OrlanGuardsSalvageSite4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_raven;
    int lv_random;
    point lv_point;

    // Variable Initialization
    lv_raven = null;
    lv_random = 0;
    lv_point = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("ScrapSalvage3x3", gv_p05_SCRAP, RegionFromId(9), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("AutoTurret", gv_p02_ORLAN_ENEMY, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Raven", 0, gv_p02_ORLAN_ENEMY, PointFromId(805));
    lv_raven = UnitLastCreated();
    AISetUnitScriptControlled(lv_raven, true);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(804)), c_orderQueueReplace);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("AutoTurret", 0), PointFromId(804)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(806)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(25))), c_orderQueueAddToEnd);
    Wait(110.0, c_timeGame);
    TriggerEnable(gt_OrlanGuardsSalvageSite4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanGuardsSalvageSite4_Init () {
    gt_OrlanGuardsSalvageSite4 = TriggerCreate("gt_OrlanGuardsSalvageSite4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Raven Bully
//--------------------------------------------------------------------------------------------------
bool gt_RemoveRavenBully_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p02_ORLAN_ENEMY))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Raven"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveRavenBully_Init () {
    gt_RemoveRavenBully = TriggerCreate("gt_RemoveRavenBully_Func");
    TriggerAddEventUnitRegion(gt_RemoveRavenBully, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_RemoveRavenBully, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p02_ORLAN_ENEMY);
    AICampaignStart(gv_p03_MIRA_HAN);
    AINearestTownBullyRebuild(gv_p02_ORLAN_ENEMY, true);
    TriggerExecute(gt_OrlanP02AttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan P02 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_OrlanP02AttackWaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetGatherPoint(gv_p02_ORLAN_ENEMY, PointFromId(269));
    AIAttackWaveSetTargetPlayer(gv_p02_ORLAN_ENEMY, PlayerGroupSingle(gv_p01_USER));
    Wait(60.0, c_timeAI);
    AIAttackWaveAddUnits4(3, 3, 5, 8, "Marine");
    AIAttackWaveAddWaypoint(gv_p02_ORLAN_ENEMY, PointFromId(211), false);
    AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
    Wait(30.0, c_timeAI);
    AIAttackWaveAddUnits4(5, 5, 6, 8, "Marine");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Medic");
    AIAttackWaveAddWaypoint(gv_p02_ORLAN_ENEMY, PointFromId(211), false);
    AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
    Wait(30.0, c_timeAI);
    AIAttackWaveAddUnits4(6, 6, 7, 9, "Marine");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Firebat");
    AIAttackWaveAddWaypoint(gv_p02_ORLAN_ENEMY, PointFromId(212), false);
    AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    AIAttackWaveAddUnits4(6, 6, 7, 10, "Marine");
    AIAttackWaveAddUnits4(1, 1, 0, 0, "Firebat");
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Medic");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Goliath");
    gf_OrlanAttackWaveWaypointEast();
    AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    AIAttackWaveAddUnits4(5, 5, 7, 14, "Marine");
    AIAttackWaveAddUnits4(3, 3, 2, 2, "Firebat");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Goliath");
    gf_OrlanAttackWaveWaypointWest();
    AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel3", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel3", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel3", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    AIAttackWaveAddUnits4(6, 6, 8, 12, "Marine");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "SiegeTank");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Goliath");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Raven");
    gf_OrlanAttackWaveWaypointWest();
    AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
    Wait(30.0, c_timeAI);
    AIAttackWaveAddUnits4(7, 7, 9, 12, "Marine");
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Medic");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Wraith");
    gf_OrlanAttackWaveWaypointEast();
    AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
    while (true) {
        Wait(30.0, c_timeAI);
        AIAttackWaveAddUnits4(8, 8, 9, 10, "Marine");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Firebat");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Medic");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Raven");
        gf_OrlanAttackWaveWaypointEast();
        AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
        AIAttackWaveAddUnits4(4, 4, 8, 12, "Marine");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Goliath");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "SiegeTank");
        gf_OrlanAttackWaveWaypointWest();
        AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
        AIAttackWaveAddUnits4(7, 7, 9, 12, "Marine");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Wraith");
        AIAttackWaveAddUnits4(0, 0, 2, 2, "Medic");
        gf_OrlanAttackWaveWaypointWest();
        AIAttackWaveSend(gv_p02_ORLAN_ENEMY, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanP02AttackWaves_Init () {
    gt_OrlanP02AttackWaves = TriggerCreate("gt_OrlanP02AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orlan Retributive Nuke
//--------------------------------------------------------------------------------------------------
bool gt_OrlanRetributiveNuke_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1226)) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionOrlanNukeQ, true, false);
    gf_GhostNukeEm(UnitFromId(1226), RegionGetCenter(RegionFromId(55)), PointFromId(1241));
    Wait(20.0, c_timeGame);
    libNtve_gf_KillModel(gv_nukeActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrlanRetributiveNuke_Init () {
    gt_OrlanRetributiveNuke = TriggerCreate("gt_OrlanRetributiveNuke_Func");
    TriggerAddEventTimePeriodic(gt_OrlanRetributiveNuke, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Dies, Remove Nuke Actor
//--------------------------------------------------------------------------------------------------
bool gt_GhostDiesRemoveNukeActor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_nukeActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostDiesRemoveNukeActor_Init () {
    gt_GhostDiesRemoveNukeActor = TriggerCreate("gt_GhostDiesRemoveNukeActor_Func");
    TriggerEnable(gt_GhostDiesRemoveNukeActor, false);
    TriggerAddEventUnitDied(gt_GhostDiesRemoveNukeActor, UnitRefFromUnit(UnitFromId(1226)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p02_ORLAN_ENEMY, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p03_MIRA_HAN, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p02_ORLAN_ENEMY, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p03_MIRA_HAN, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Salvage Ping
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSalvagePing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("ScrapSalvage2x2", gv_p05_SCRAP, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_salvagePingActor);
    VisRevealerDestroy(gv_salvageRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSalvagePing_Init () {
    gt_RemoveSalvagePing = TriggerCreate("gt_RemoveSalvagePing_Func");
    TriggerAddEventUnitAbility(gt_RemoveSalvagePing, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Raynor Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRaynorIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner02Raynor00001", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Raynor00001", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRaynorIntroQ_Init () {
    gt_TransmissionRaynorIntroQ = TriggerCreate("gt_TransmissionRaynorIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Horner Talks About Planet Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHornerTalksAboutPlanetQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(327)) == true)) {
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/6AF13D92"), null, UnitGetPosition(UnitFromId(327)));
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(UnitFromId(327)));
        gv_salvagePingActor = libNtve_gf_ActorLastCreated();
        VisRevealerCreate(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(327)), 3.0));
        gv_salvageRevealer = VisRevealerLastCreated();
    }
    else {
    }
    TriggerQueueEnter();
    TriggerExecute(gt_SalvageTip, true, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner02Horner00016", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Horner00016", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHornerTalksAboutPlanetQ_Init () {
    gt_TransmissionHornerTalksAboutPlanetQ = TriggerCreate("gt_TransmissionHornerTalksAboutPlanetQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Respawnable Salvage Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRespawnableSalvageQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_respawnableSalvage = EventUnitRegion();
    TriggerEnable(gt_RemoveRespawnSalvagePings, true);
    if ((EventUnitRegion() == RegionFromId(5))) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(20)));
        gv_respawnSalvagePingActor1 = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(21)));
        gv_respawnSalvagePingActor2 = libNtve_gf_ActorLastCreated();
        VisRevealArea(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(20)), 5.0), 6.0, false);
        VisRevealArea(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(21)), 5.0), 6.0, false);
    }
    else {
    }
    if ((EventUnitRegion() == RegionFromId(6))) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(12)));
        gv_respawnSalvagePingActor1 = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(8)));
        gv_respawnSalvagePingActor2 = libNtve_gf_ActorLastCreated();
        VisRevealArea(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(12)), 5.0), 6.0, false);
        VisRevealArea(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(8)), 5.0), 6.0, false);
    }
    else {
    }
    if ((EventUnitRegion() == RegionFromId(7))) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(13)));
        gv_respawnSalvagePingActor1 = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(14)));
        gv_respawnSalvagePingActor2 = libNtve_gf_ActorLastCreated();
        VisRevealArea(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(13)), 5.0), 6.0, false);
        VisRevealArea(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(14)), 5.0), 6.0, false);
    }
    else {
    }
    if ((EventUnitRegion() == RegionFromId(9))) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(18)));
        gv_respawnSalvagePingActor1 = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(19)));
        gv_respawnSalvagePingActor2 = libNtve_gf_ActorLastCreated();
        VisRevealArea(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(18)), 5.0), 6.0, false);
        VisRevealArea(gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(19)), 5.0), 6.0, false);
    }
    else {
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/E41F86F3"), null, RegionGetCenter(EventUnitRegion()));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(EventUnitRegion()), 6.0, Color(0.00, 100.00, 0.00));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner02Horner00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Horner00010", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRespawnableSalvageQ_Init () {
    gt_TransmissionRespawnableSalvageQ = TriggerCreate("gt_TransmissionRespawnableSalvageQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionRespawnableSalvageQ, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_TransmissionRespawnableSalvageQ, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_TransmissionRespawnableSalvageQ, null, RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_TransmissionRespawnableSalvageQ, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Respawn Salvage Pings
//--------------------------------------------------------------------------------------------------
bool gt_RemoveRespawnSalvagePings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), gv_respawnableSalvage) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_respawnSalvagePingActor1);
    libNtve_gf_KillModel(gv_respawnSalvagePingActor2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveRespawnSalvagePings_Init () {
    gt_RemoveRespawnSalvagePings = TriggerCreate("gt_RemoveRespawnSalvagePings_Func");
    TriggerEnable(gt_RemoveRespawnSalvagePings, false);
    TriggerAddEventUnitRegion(gt_RemoveRespawnSalvagePings, null, RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_RemoveRespawnSalvagePings, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_RemoveRespawnSalvagePings, null, RegionFromId(12), true);
    TriggerAddEventUnitRegion(gt_RemoveRespawnSalvagePings, null, RegionFromId(8), true);
    TriggerAddEventUnitRegion(gt_RemoveRespawnSalvagePings, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_RemoveRespawnSalvagePings, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_RemoveRespawnSalvagePings, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_RemoveRespawnSalvagePings, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mira Han Gives Vultures Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMiraHanGivesVulturesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("IncomingTransmission", -1)), c_timeReal);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/4950C282"), null, PointFromId(1243));
    // Transmission - SoundLink("THorner02Han00017", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Han00017", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_EnableCampaignTechUnit(true, 11, gv_p01_USER);
    // Transmission - SoundLink("THorner02Tychus00023", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Tychus00023", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner02Raynor00024", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Raynor00024", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerExecute(gt_NewUnitVultureTipQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMiraHanGivesVulturesQ_Init () {
    gt_TransmissionMiraHanGivesVulturesQ = TriggerCreate("gt_TransmissionMiraHanGivesVulturesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Orlan Nuke Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOrlanNukeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner02Orlan00013", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Orlan00013", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOrlanNukeQ_Init () {
    gt_TransmissionOrlanNukeQ = TriggerCreate("gt_TransmissionOrlanNukeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Orlan Halfway Done Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOrlanHalfwayDoneQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_TransmissionContractHalfFilledQ) == false))) {
            return false;
        }

        if (!((IntToFixed(gv_oRLANS_MINERAL_COUNT) >= (IntToFixed(gv_mERC_CONTRACT_PRICE) / 2.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner02Han00004", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Han00004", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOrlanHalfwayDoneQ_Init () {
    gt_TransmissionOrlanHalfwayDoneQ = TriggerCreate("gt_TransmissionOrlanHalfwayDoneQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionOrlanHalfwayDoneQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Orlan Almost Done Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOrlanAlmostDoneQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_TransmissionContractAlmostFilledQ) == false))) {
            return false;
        }

        if (!((IntToFixed(gv_oRLANS_MINERAL_COUNT) >= (IntToFixed(gv_mERC_CONTRACT_PRICE) - 1000.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner02Han00018", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Han00018", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOrlanAlmostDoneQ_Init () {
    gt_TransmissionOrlanAlmostDoneQ = TriggerCreate("gt_TransmissionOrlanAlmostDoneQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionOrlanAlmostDoneQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Contract Half Filled Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionContractHalfFilledQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_TransmissionOrlanHalfwayDoneQ) == false))) {
            return false;
        }

        if (!((IntToFixed(PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals)) >= (IntToFixed(gv_mERC_CONTRACT_PRICE) / 2.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner02Han00002", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Han00002", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionContractHalfFilledQ_Init () {
    gt_TransmissionContractHalfFilledQ = TriggerCreate("gt_TransmissionContractHalfFilledQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionContractHalfFilledQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Contract Almost Filled Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionContractAlmostFilledQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_TransmissionOrlanAlmostDoneQ) == false))) {
            return false;
        }

        if (!((IntToFixed(PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals)) >= (IntToFixed(gv_mERC_CONTRACT_PRICE) - 1000.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner02Han00003", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Han00003", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionContractAlmostFilledQ_Init () {
    gt_TransmissionContractAlmostFilledQ = TriggerCreate("gt_TransmissionContractAlmostFilledQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionContractAlmostFilledQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mercenary Contract Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_MercenaryContractTipQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner02_MercContract", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercenaryContractTipQ_Init () {
    gt_MercenaryContractTipQ = TriggerCreate("gt_MercenaryContractTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit: Vulture Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitVultureTipQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner02_Vultures", 1, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerExecute(gt_NewAbilitySpiderMineTip, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitVultureTipQ_Init () {
    gt_NewUnitVultureTipQ = TriggerCreate("gt_NewUnitVultureTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Ability: Spider Mine Tip
//--------------------------------------------------------------------------------------------------
bool gt_NewAbilitySpiderMineTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner02_SpiderMines", 3, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewAbilitySpiderMineTip_Init () {
    gt_NewAbilitySpiderMineTip = TriggerCreate("gt_NewAbilitySpiderMineTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Orlan Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_StopOrlanTipQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner02_StopOrlan", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StopOrlanTipQ_Init () {
    gt_StopOrlanTipQ = TriggerCreate("gt_StopOrlanTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage Tip
//--------------------------------------------------------------------------------------------------
bool gt_SalvageTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner02_Scrap", 0, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageTip_Init () {
    gt_SalvageTip = TriggerCreate("gt_SalvageTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - No SCV Training
//--------------------------------------------------------------------------------------------------
bool gt_AchievementNoSCVTraining_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementSCVsTrained += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementNoSCVTraining_Init () {
    gt_AchievementNoSCVTraining = TriggerCreate("gt_AchievementNoSCVTraining_Func");
    TriggerAddEventUnitTrainProgress(gt_AchievementNoSCVTraining, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - 25 Spider Mine Kills
//--------------------------------------------------------------------------------------------------
bool gt_Achievement25SpiderMineKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_spiderMineKillCount >= 25))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AchievementAward(gv_p01_USER, "THorner02_2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Achievement25SpiderMineKills_Init () {
    gt_Achievement25SpiderMineKills = TriggerCreate("gt_Achievement25SpiderMineKills_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kills with Spider Mines
//--------------------------------------------------------------------------------------------------
bool gt_KillswithSpiderMines_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "SpiderMine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spiderMineKillCount += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        TriggerExecute(gt_Achievement25SpiderMineKills, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillswithSpiderMines_Init () {
    gt_KillswithSpiderMines = TriggerCreate("gt_KillswithSpiderMines_Func");
    TriggerAddEventUnitDied(gt_KillswithSpiderMines, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minerals Harvested By SCVs
//--------------------------------------------------------------------------------------------------
bool gt_MineralsHarvestedBySCVs_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mineralsHarvested += 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralsHarvestedBySCVs_Init () {
    gt_MineralsHarvestedBySCVs = TriggerCreate("gt_MineralsHarvestedBySCVs_Func");
    TriggerAddEventUnitAbility(gt_MineralsHarvestedBySCVs, null, AbilityCommand("SCVHarvest", 1), c_abilHarvestStageDropOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Orlan Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyOrlanCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ORLAN_ENEMY))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(UnitFromId(90), c_unitPropLife, c_unitPropCurrent) <= 200.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    PingDestroy(gv_orlansFortressPing);
    libNtve_gf_ChangeUnitDamage(UnitFromId(90), 0, 1);
    TriggerExecute(gt_ObjectiveBuyContractComplete, true, true);
    TriggerExecute(gt_ObjectiveDestroyOrlanComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyOrlanCompleted_Init () {
    gt_VictoryDestroyOrlanCompleted = TriggerCreate("gt_VictoryDestroyOrlanCompleted_Func");
    TriggerAddEventUnitDamaged(gt_VictoryDestroyOrlanCompleted, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_primaryObjectiveBuyContract) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_primaryObjectiveDestroyOrlan) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_bonusObjectiveFindContraband) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "THorner02_1");
    }
    else {
    }
    VictoryPanelAddAchievement("THorner02_1");
    VictoryPanelAddAchievement("THorner02_2");
    VictoryPanelAddAchievement("THorner02_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BCDBD54A"), StringExternal("Param/Value/A41B1BD8"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/72CDDCCB"), FormatNumber(gv_salvageTotal));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A8244073"), FormatNumber(gv_mineralsHarvested));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6C4C2088"), FormatNumber(gv_spiderMineKillCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/04B51D63"), StringExternal("Param/Value/65743651"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/825A8B19"), (IntToText(gv_contrabandRelicsFound) + StringExternal("Param/Value/1B75B417") + IntToText(gv_contrabandRelicsTotal)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6DF56EB6"), IntToText(gv_contrabandRelicsFound));
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/359DECC7"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Mira Han Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatMiraHanDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/306B371C"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatMiraHanDead_Init () {
    gt_DefeatMiraHanDead = TriggerCreate("gt_DefeatMiraHanDead_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Orlan Buys Contract
//--------------------------------------------------------------------------------------------------
bool gt_DefeatOrlanBuysContract_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/5B13ECF2"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatOrlanBuysContract_Init () {
    gt_DefeatOrlanBuysContract = TriggerCreate("gt_DefeatOrlanBuysContract_Func");
    TriggerEnable(gt_DefeatOrlanBuysContract, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Buy Contract Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBuyContractCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/1589E053") + TextReplaceWord(StringExternal("Param/Value/D33401E3"), StringExternal("Param/Value/9590FC4A"), IntToText(gv_mERC_CONTRACT_PRICE), c_stringReplaceAll, c_stringCase) + StringExternal("Param/Value/E8C55C35")), StringExternal("Param/Value/EADB19A4"), c_objectiveStateActive, true);
    gv_primaryObjectiveBuyContract = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(38, ObjectiveLastCreated(), StringExternal("Param/Value/024F788C"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_CreateContractWindow, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBuyContractCreateQ_Init () {
    gt_ObjectiveBuyContractCreateQ = TriggerCreate("gt_ObjectiveBuyContractCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Buy Contract Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBuyContractComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveBuyContractCreateQ, true, false);
    ObjectiveSetState(gv_primaryObjectiveBuyContract, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBuyContractComplete_Init () {
    gt_ObjectiveBuyContractComplete = TriggerCreate("gt_ObjectiveBuyContractComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Buy Contract Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBuyContractFailedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveBuyContractCreateQ, true, false);
    TriggerQueueEnter();
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBuyContractFailedQ_Init () {
    gt_ObjectiveBuyContractFailedQ = TriggerCreate("gt_ObjectiveBuyContractFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Orlan Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyOrlanCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/9FFE53DF"), StringExternal("Param/Value/149F8BF7"), c_objectiveStateActive, true);
    gv_primaryObjectiveDestroyOrlan = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(39, ObjectiveLastCreated(), StringExternal("Param/Value/088E0A54"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyOrlanCreateQ_Init () {
    gt_ObjectiveDestroyOrlanCreateQ = TriggerCreate("gt_ObjectiveDestroyOrlanCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Orlan Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyOrlanComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyOrlanCreateQ, true, false);
    ObjectiveSetState(gv_primaryObjectiveDestroyOrlan, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyOrlanComplete_Init () {
    gt_ObjectiveDestroyOrlanComplete = TriggerCreate("gt_ObjectiveDestroyOrlanComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Orlan Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyOrlanFailedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyOrlanCreateQ, true, false);
    TriggerQueueEnter();
    ObjectiveSetState(gv_primaryObjectiveDestroyOrlan, c_objectiveStateFailed);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyOrlanFailedQ_Init () {
    gt_ObjectiveDestroyOrlanFailedQ = TriggerCreate("gt_ObjectiveDestroyOrlanFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Contraband Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindContrabandCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/29858229") + libCamp_gf_StoryResearchSupplementTextForObjective(2, 0, gv_contrabandRelicsTotal, gv_contrabandRelicsFound) + StringExternal("Param/Value/D6816819")), StringExternal("Param/Value/BBBD9501"), c_objectiveStateActive, false);
    gv_bonusObjectiveFindContraband = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(40, ObjectiveLastCreated(), StringExternal("Param/Value/46EFAF90"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindContrabandCreateQ_Init () {
    gt_ObjectiveFindContrabandCreateQ = TriggerCreate("gt_ObjectiveFindContrabandCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Contraband Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindContrabandUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ProtossRelic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_contrabandRelicsFound += 1;
    TriggerExecute(gt_ObjectiveFindContrabandCreateQ, true, false);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/D16B38BA"), null, UnitGetPosition(EventUnit()));
    libCamp_gf_DisplayResearchPointsGiventoPlayer(2, EventUnit(), gv_p01_USER);
    UnitKill(EventUnit());
    ObjectiveSetName(gv_bonusObjectiveFindContraband, (StringExternal("Param/Value/057D9AD4") + libCamp_gf_StoryResearchSupplementTextForObjective(2, 0, gv_contrabandRelicsTotal, gv_contrabandRelicsFound)));
    if ((gv_contrabandRelicsFound == gv_contrabandRelicsTotal)) {
        TriggerExecute(gt_ObjectiveFindContrabandComplete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindContrabandUpdate_Init () {
    gt_ObjectiveFindContrabandUpdate = TriggerCreate("gt_ObjectiveFindContrabandUpdate_Func");
    TriggerAddEventUnitAbility(gt_ObjectiveFindContrabandUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Contraband Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindContrabandComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindContrabandCreateQ, true, false);
    ObjectiveSetState(gv_bonusObjectiveFindContraband, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindContrabandComplete_Init () {
    gt_ObjectiveFindContrabandComplete = TriggerCreate("gt_ObjectiveFindContrabandComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Contraband Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindContrabandFailedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindContrabandCreateQ, true, false);
    TriggerQueueEnter();
    ObjectiveSetState(gv_bonusObjectiveFindContraband, c_objectiveStateFailed);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindContrabandFailedQ_Init () {
    gt_ObjectiveFindContrabandFailedQ = TriggerCreate("gt_ObjectiveFindContrabandFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameStage1);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    AITimePause(true);
    GameTimeOfDayPause(true);
    AIToggleBulliesInRegion(gv_p02_ORLAN_ENEMY, RegionEntireMap(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_ORLAN_ENEMY, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_briefingHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_MIRA_HAN, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_briefingHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_briefingHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingScene00Stuff, true, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(627), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(628), 16.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner02_00");
    // Transmission - SoundLink("THorner02BriefingHorner00001", 0)
    SoundPlay(SoundLink("THorner02BriefingHorner00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingHorner00001", -1))), c_timeReal);
    // Transmission - SoundLink("THorner02BriefingHorner00011", 0)
    SoundPlay(SoundLink("THorner02BriefingHorner00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingHorner00011", -1))), c_timeReal);
    // Transmission - SoundLink("THorner02BriefingRaynor00018", 0)
    SoundPlay(SoundLink("THorner02BriefingRaynor00018", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00018", -1))), c_timeReal);
    // Transmission - SoundLink("THorner02BriefingRaynor00002", 0)
    SoundPlay(SoundLink("THorner02BriefingRaynor00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingHorner00001", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingHorner00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00018", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00002", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 Stuff
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00Stuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_goliath;

    // Variable Initialization
    lv_goliath = null;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(5, "Marine", 0, gv_p02_ORLAN_ENEMY, PointFromId(629));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(630)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(631)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(632)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(633)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(3, "Goliath", 0, gv_p02_ORLAN_ENEMY, PointFromId(629));
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 2.25);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(630)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(631)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(632)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(633)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(5, "Marine", 0, gv_p02_ORLAN_ENEMY, PointFromId(629));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(630)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(631)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(632)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(633)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00Stuff_Init () {
    gt_BriefingScene00Stuff = TriggerCreate("gt_BriefingScene00Stuff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_briefingHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_p02_ORLAN_ENEMY);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1523), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1524), 16.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner02_01");
    // Transmission - SoundLink("THorner02BriefingHan00005", 0)
    SoundPlay(SoundLink("THorner02BriefingHan00005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingHan00005", -1))), c_timeReal);
    // Transmission - SoundLink("THorner02BriefingRaynor00006", 0)
    SoundPlay(SoundLink("THorner02BriefingRaynor00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingHan00005", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00006", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_briefingHiddenUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_BriefingSalvage, true);
    TriggerEnable(gt_TransmissionRespawnableSalvageQ, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Vulture", 0, gv_p01_USER, PointFromId(1522));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(951))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(125))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(49))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(528))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(590))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(485))), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(615), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(617), 7.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner02_02");
    // Transmission - SoundLink("THorner02BriefingHorner00007", 0)
    SoundPlay(SoundLink("THorner02BriefingHorner00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingHorner00007", -1))), c_timeReal);
    // Transmission - SoundLink("THorner02BriefingHorner00008", 0)
    SoundPlay(SoundLink("THorner02BriefingHorner00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingHorner00008", -1))), c_timeReal);
    // Transmission - SoundLink("THorner02BriefingRaynor00009", 0)
    SoundPlay(SoundLink("THorner02BriefingRaynor00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00009", -1))), c_timeReal);
    // Transmission - SoundLink("THorner02BriefingRaynor00013", 0)
    SoundPlay(SoundLink("THorner02BriefingRaynor00013", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00013", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingHorner00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingHorner00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner02BriefingRaynor00013", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Salvage
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSalvage_Func (bool testConds, bool runActions) {
    unitgroup autoE9B0E8B4_g;
    int autoE9B0E8B4_u;
    unitgroup auto15A1E7E5_g;
    int auto15A1E7E5_u;
    unitgroup auto6B122027_g;
    int auto6B122027_u;
    unitgroup auto4DE01A4A_g;
    int auto4DE01A4A_u;

    // Variable Declarations
    unit lv_scrap;

    // Variable Initialization
    lv_scrap = null;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE9B0E8B4_g = UnitGroup("ScrapSalvage1x1", gv_p05_SCRAP, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9B0E8B4_u = 1;
    while (autoE9B0E8B4_u <= UnitGroupCount(autoE9B0E8B4_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(autoE9B0E8B4_g, autoE9B0E8B4_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.0) == true)) {
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 25, 0, true);
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(autoE9B0E8B4_g, autoE9B0E8B4_u)) {
            autoE9B0E8B4_u = autoE9B0E8B4_u + 1;
        }
    }
    auto15A1E7E5_g = UnitGroup("ScrapSalvage2x2", gv_p05_SCRAP, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto15A1E7E5_u = 1;
    while (auto15A1E7E5_u <= UnitGroupCount(auto15A1E7E5_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(auto15A1E7E5_g, auto15A1E7E5_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 3.0) == true)) {
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 75, 0, true);
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(auto15A1E7E5_g, auto15A1E7E5_u)) {
            auto15A1E7E5_u = auto15A1E7E5_u + 1;
        }
    }
    auto6B122027_g = UnitGroup("MineralCrystal", gv_p05_SCRAP, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B122027_u = 1;
    while (auto6B122027_u <= UnitGroupCount(auto6B122027_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(auto6B122027_g, auto6B122027_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.0) == true)) {
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 100, 0, true);
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(auto6B122027_g, auto6B122027_u)) {
            auto6B122027_u = auto6B122027_u + 1;
        }
    }
    auto4DE01A4A_g = UnitGroup("PalletGas", gv_p05_SCRAP, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4DE01A4A_u = 1;
    while (auto4DE01A4A_u <= UnitGroupCount(auto4DE01A4A_g, c_unitCountAll)) {
        lv_scrap = UnitGroupUnit(auto4DE01A4A_g, auto4DE01A4A_u);
        if ((gf_ScrapCanBeSalvaged(gv_p01_USER, UnitGetPosition(lv_scrap), 2.0) == true)) {
            gf_SalvageScrap(lv_scrap, gv_p01_USER, 0, 25, true);
        }
        else {
        }
        if (lv_scrap == UnitGroupUnit(auto4DE01A4A_g, auto4DE01A4A_u)) {
            auto4DE01A4A_u = auto4DE01A4A_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSalvage_Init () {
    gt_BriefingSalvage = TriggerCreate("gt_BriefingSalvage_Func");
    TriggerEnable(gt_BriefingSalvage, false);
    TriggerAddEventTimePeriodic(gt_BriefingSalvage, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, 0);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_midHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupLoopBegin(gv_midHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1566), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1567), 15.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner02MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("THorner02Raynor00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Raynor00011", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner02Han00022", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Han00022", -1), c_transmissionDurationAdd, 0.0, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_MIRA_HAN, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_p01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    // Transmission - SoundLink("THorner02Orlan00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Orlan00012", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_midHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_MIRA_HAN, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), 1) == false) && (UnitGetType(UnitGroupLoopCurrent()) == "SCV")) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
            UnitSetOwner(UnitGroupLoopCurrent(), gv_p01_USER, true);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    CameraRestore(gv_p01_USER, 0.0, -1, 10);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGameStage2, true, false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/FF684E25"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p01_USER);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    BoardDestroy(gv_merc_Contract_Price_Board);
    libNtve_gf_HideScreenButton(false, 1);
    UnitRemove(UnitFromId(928));
    UnitRemove(UnitFromId(1026));
    UnitPauseAll(true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupLoopBegin(gv_victoryHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_ORLAN_ENEMY, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_ORLAN_ENEMY, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(UnitFromId(90), false);
    UnitSetPropertyFixed(UnitFromId(95), c_unitPropLifePercent, 40.0);
    UnitSetPropertyFixed(UnitFromId(93), c_unitPropLifePercent, 35.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    int auto8F0800B9_n;
    int auto8F0800B9_i;
    int autoFF454F62_n;
    int autoFF454F62_i;
    int autoB1BE1F29_n;
    int autoB1BE1F29_i;
    int autoD1099EB0_n;
    int autoD1099EB0_i;

    // Variable Declarations
    unit lv_mercFort;
    unit lv_orlan;

    // Variable Initialization
    lv_mercFort = null;
    lv_orlan = null;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(621), 0.0, -1, 10, true);
    UnitKill(UnitFromId(222));
    UnitKill(UnitFromId(183));
    auto8F0800B9_n = 9;
    auto8F0800B9_i = 1;
    while (auto8F0800B9_i <= auto8F0800B9_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Vulture", 0, gv_p01_USER, RegionRandomPoint(RegionFromId(26)));
        UnitGroupAdd(gv_victoryRaynorsUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(51)), c_orderQueueReplace);
        auto8F0800B9_i = auto8F0800B9_i + 1;
    }
    autoFF454F62_n = 5;
    autoFF454F62_i = 1;
    while (autoFF454F62_i <= autoFF454F62_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, RegionRandomPoint(RegionFromId(26)));
        UnitGroupAdd(gv_victoryRaynorsUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(51)), c_orderQueueReplace);
        autoFF454F62_i = autoFF454F62_i + 1;
    }
    autoB1BE1F29_n = 4;
    autoB1BE1F29_i = 1;
    while (autoB1BE1F29_i <= autoB1BE1F29_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_p01_USER, RegionRandomPoint(RegionFromId(10)));
        UnitGroupAdd(gv_victoryRaynorsUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(51)), c_orderQueueReplace);
        autoB1BE1F29_i = autoB1BE1F29_i + 1;
    }
    autoD1099EB0_n = 3;
    autoD1099EB0_i = 1;
    while (autoD1099EB0_i <= autoD1099EB0_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p01_USER, RegionRandomPoint(RegionFromId(10)));
        UnitGroupAdd(gv_victoryRaynorsUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(51)), c_orderQueueReplace);
        autoD1099EB0_i = autoD1099EB0_i + 1;
    }
    UnitGroupIssueOrder(gv_victoryRaynorsUnits, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(51)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(5, "Marine", 0, gv_p02_ORLAN_ENEMY, PointFromId(623));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victoryOrlansUnits);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(4, "Marine", 0, gv_p02_ORLAN_ENEMY, PointFromId(624));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victoryOrlansUnits);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner02MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(622), 12.0, -1, 10, true);
    Wait(4.0, c_timeGame);
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Orlan00019", 0), c_transmissionDurationAdd, 0.0, true);
    TriggerExecute(gt_VictoryScene, true, false);
    libNtve_gf_PauseUnit(UnitFromId(90), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(90), true);
    SoundPlay(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p08_RAYNOR_COMP, PointFromId(625));
    lv_orlan = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_orlan), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Raynor00020", 0), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(626), 8.0, -1, 10, true);
    if ((gv_miraHanContractBought == true)) {
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Raynor00014", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Han00021", 0), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner02Raynor00015", 0), c_transmissionDurationAdd, 0.0, true);
    }
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), false, false);
    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Variable Initialization
    lv_fadeDuratioin = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Scene
//--------------------------------------------------------------------------------------------------
bool gt_VictoryScene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vultures;

    // Variable Initialization
    lv_vultures = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_victoryRaynorsUnits, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(gv_victoryOrlansUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        Wait(0.25, c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_ORLAN_ENEMY, 7);
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Vulture", gv_p01_USER, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_vultures, UnitGroupLoopCurrent());
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.25);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(lv_vultures, 2), OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(90)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(lv_vultures, 4), OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(90)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(lv_vultures, 5), OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(90)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryScene_Init () {
    gt_VictoryScene = TriggerCreate("gt_VictoryScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGameStage1_Init();
    gt_StartGameStage2_Init();
    gt_IntroLanding_Init();
    gt_ChangeOwnerofIntroStructures_Init();
    gt_ChangeOwnerofPreplacedStructures_Init();
    gt_ChangeOwnerofDropshipUnits_Init();
    gt_ChangeOwnerofSCVs_Init();
    gt_CreateOrlanCommandCenterPings_Init();
    gt_SuperCraneActivation_Init();
    gt_CreateContractWindow_Init();
    gt_UpdateContractWindow_Init();
    gt_PlayerBuysContract_Init();
    gt_MiraHanDestroyed_Init();
    gt_MiraHanGivesVulturestoPlayer_Init();
    gt_ChangeOwnerofVultureDropshipUnits_Init();
    gt_OrlanMineralCount_Init();
    gt_OrlanExpansion1Attacked_Init();
    gt_OrlanExpansion2Attacked_Init();
    gt_OrlanExpansion3Attacked_Init();
    gt_JunkersStart_Init();
    gt_JunkerNESpawn_Init();
    gt_JunkerNEPitstop1_Init();
    gt_JunkerNEPitstop2_Init();
    gt_JunkerNEPitstop3_Init();
    gt_JunkerNEDespawn_Init();
    gt_JunkerSSpawn_Init();
    gt_JunkerSPitstop1_Init();
    gt_JunkerSPitstop2_Init();
    gt_JunkerSDespawn_Init();
    gt_JunkerWInitiate_Init();
    gt_JunkerWPitstop1_Init();
    gt_JunkerWPitstop2_Init();
    gt_JunkerKilledSpawnScrap_Init();
    gt_InitialScrapSpawn3x3_Init();
    gt_ResourcePickups_Init();
    gt_RespawnableScrapSalvaged3x3Site11_Init();
    gt_RespawnableScrapSalvaged3x3Site12_Init();
    gt_RespawnableScrapSalvaged3x3Site21_Init();
    gt_RespawnableScrapSalvaged3x3Site22_Init();
    gt_RespawnableScrapSalvaged3x3Site31_Init();
    gt_RespawnableScrapSalvaged3x3Site32_Init();
    gt_RespawnableScrapSalvaged3x3Site41_Init();
    gt_RespawnableScrapSalvaged3x3Site42_Init();
    gt_OrlanExpansion01DestroyedSE_Init();
    gt_OrlanExpansion02DestroyedSW_Init();
    gt_OrlanExpansion03DestroyedNE_Init();
    gt_HugeScrapDestroyed_Init();
    gt_OrlanGuardsSalvageSite1_Init();
    gt_OrlanGuardsSalvageSite2_Init();
    gt_OrlanGuardsSalvageSite3_Init();
    gt_OrlanGuardsSalvageSite4_Init();
    gt_RemoveRavenBully_Init();
    gt_StartAI_Init();
    gt_OrlanP02AttackWaves_Init();
    gt_OrlanRetributiveNuke_Init();
    gt_GhostDiesRemoveNukeActor_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_RemoveSalvagePing_Init();
    gt_TransmissionRaynorIntroQ_Init();
    gt_TransmissionHornerTalksAboutPlanetQ_Init();
    gt_TransmissionRespawnableSalvageQ_Init();
    gt_RemoveRespawnSalvagePings_Init();
    gt_TransmissionMiraHanGivesVulturesQ_Init();
    gt_TransmissionOrlanNukeQ_Init();
    gt_TransmissionOrlanHalfwayDoneQ_Init();
    gt_TransmissionOrlanAlmostDoneQ_Init();
    gt_TransmissionContractHalfFilledQ_Init();
    gt_TransmissionContractAlmostFilledQ_Init();
    gt_CampaignTipsQ_Init();
    gt_MercenaryContractTipQ_Init();
    gt_NewUnitVultureTipQ_Init();
    gt_NewAbilitySpiderMineTip_Init();
    gt_StopOrlanTipQ_Init();
    gt_SalvageTip_Init();
    gt_AchievementNoSCVTraining_Init();
    gt_Achievement25SpiderMineKills_Init();
    gt_KillswithSpiderMines_Init();
    gt_MineralsHarvestedBySCVs_Init();
    gt_VictoryDestroyOrlanCompleted_Init();
    gt_Victory_Init();
    gt_VictoryCheat_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatMiraHanDead_Init();
    gt_DefeatOrlanBuysContract_Init();
    gt_Defeat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveBuyContractCreateQ_Init();
    gt_ObjectiveBuyContractComplete_Init();
    gt_ObjectiveBuyContractFailedQ_Init();
    gt_ObjectiveDestroyOrlanCreateQ_Init();
    gt_ObjectiveDestroyOrlanComplete_Init();
    gt_ObjectiveDestroyOrlanFailedQ_Init();
    gt_ObjectiveFindContrabandCreateQ_Init();
    gt_ObjectiveFindContrabandUpdate_Init();
    gt_ObjectiveFindContrabandComplete_Init();
    gt_ObjectiveFindContrabandFailedQ_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene00Stuff_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingSalvage_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryScene_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
