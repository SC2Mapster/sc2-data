//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Reckoning
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "aiEC423AC6"
include "ai17BA421C"
include "ai7AC59A6F"
include "ai392DEDDF"
include "ai05FE0989"
include "aiAFDBFFDC"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_PLAYER_01_USER = 1;
const int gv_PLAYER_02_DOMINION_RED = 2;
const int gv_PLAYER_03_DOMINION_BLUE = 3;
const int gv_PLAYER_04_DOMINION_PURPLE = 4;
const int gv_PLAYER_05_DOMINION_TEAL = 5;
const int gv_PLAYER_07_DOMINION_GREEN22 = 9;
const int gv_PLAYER_07_DOMINION_GREEN23 = 10;
const int gv_pLAYER_08_IZSHA = 14;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_RepairSCV {
    unit lv_sCV;
    point lv_homePoint;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_kerrigan;
playergroup gv_dominionPlayerGroup;
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unitgroup gv_zagaraReinforcements;
int gv_perfPausedCount;
region[21] gv_perfPausedRegions;
unitgroup[21] gv_perfPausedUnits;
region[21] gv_perfRevealRegions;
gs_RECORD_RepairSCV[16] gv_repairSCVs;
int gv_numberOfRepairSCVs;
int gv_objectiveRescueBrood2222;
int[4] gv_lanePing;
bool gv_lane1Paused;
bool gv_lane2Paused;
bool gv_lane3Paused;
unitgroup gv_dominionPatrolRightGroup;
unitgroup gv_dominionPatrolLeftGroup;
unitgroup gv_palaceTurrets;
unit gv_hYPERION;
unitgroup gv_hyperionVictims;
bool gv_hyperionFirstAttackTransmision;
int gv_odinPing;
bool gv_hyperionDamaged;
timer gv_achievementTimedRunTimer;
int gv_kerriganKills;
fixed gv_totalHyperionDamage;
int gv_largestZergForce;
int gv_raynorKills;
bool gv_odinSent;
int gv_player2WavesSent;
int gv_objectiveDestroyDominionBase;
int gv_palaceGatePing;
int gv_objectiveRescueBrood223;
int gv_hyperionPing;
int gv_objectiveRescueBrood222;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit[64] gv_introUnits;
point[64] gv_introUnitPositions;
fixed[64] gv_introUnitFacings;
sound gv_introTerranSound;
sound gv_introTerranAmb;
sound gv_introZergSound;
int gv_numberOfIntroUnits;
unit gv_cinematicHyperion;
bool gv_introMusicCompleted;
unit gv_midHyperion;
bool gv_midMusicCompleted;
unit gv_victoryKerrigan;
sound gv_victoryZergSound1;
sound gv_victoryZergSound2;
sound gv_victoryZergSound3;

void InitGlobals () {
    int init_i;

    gv_dominionPlayerGroup = PlayerGroupEmpty();
    gv_zagaraReinforcements = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_perfPausedUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_lanePing[init_i] = c_invalidPingId;
    }
    gv_lane1Paused = true;
    gv_lane2Paused = true;
    gv_lane3Paused = true;
    gv_dominionPatrolRightGroup = UnitGroupEmpty();
    gv_dominionPatrolLeftGroup = UnitGroupEmpty();
    gv_palaceTurrets = UnitGroupEmpty();
    gv_hYPERION = UnitFromId(370);
    gv_hyperionVictims = UnitGroupEmpty();
    gv_odinPing = c_invalidPingId;
    gv_achievementTimedRunTimer = TimerCreate();
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_palaceGatePing = c_invalidPingId;
    gv_objectiveRescueBrood223 = c_invalidObjectiveId;
    gv_hyperionPing = c_invalidPingId;
    gv_objectiveRescueBrood222 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits);
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void gf_RepairStructurewithSCV (int lp_index, unit lp_structure);
void gf_UnloadNydusAnim (unit lp_cHOSEN_NYDUS);
void gf_CreatePatrolUnit (string lp_unitType, point lp_unitSpawnPoint, point lp_unitFacingPoint, unitgroup lp_unitGroup);
void gf_IntroMoveUnits (region lp_originalRegion, point lp_movePoint, fixed lp_delay);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PerformanceHandler;
trigger gt_PauseUnitsAgain;
trigger gt_ShowMapCheatUsed;
trigger gt_StartGameQ;
trigger gt_StartHarvesting;
trigger gt_EliteForceIntroQ;
trigger gt_TipEliteForcesQ;
trigger gt_HandleKerriganDeath;
trigger gt_KerriganIsKilledQ;
trigger gt_AugustgradGateIntrosQ;
trigger gt_AugustgradGateIntroProximity;
trigger gt_CreateAugustgradGatePings;
trigger gt_Lane1;
trigger gt_Lane1SpawnLoop;
trigger gt_Lane2;
trigger gt_Lane2SpawnLoop;
trigger gt_Lane3;
trigger gt_Lane3SpawnLoop;
trigger gt_LaneSpectacleStart;
trigger gt_LanePauseLoop;
trigger gt_SCVRepairScript;
trigger gt_Lane1ClearedQ;
trigger gt_Lane2ClearedQ;
trigger gt_Lane3ClearedQ;
trigger gt_ZagaraUpgrades;
trigger gt_CreateDominionPatrolRightSide;
trigger gt_CreateDominionPatrolLeftSide;
trigger gt_BridgeControl;
trigger gt_DominionLeft2Deactivate;
trigger gt_DominionRight1Deactivate;
trigger gt_DominionRight2Deactivate;
trigger gt_DominionMiddle1Deactivate;
trigger gt_DominionMiddle2Deactivate;
trigger gt_CreatePalacePing;
trigger gt_DominionRight1DestroyedQ;
trigger gt_DominionLeft2DestroyedQ;
trigger gt_PalaceGateat90;
trigger gt_TransmissionPalaceGateat90Q;
trigger gt_PalaceGateat50;
trigger gt_TransmissionPalaceGateat50Q;
trigger gt_HyperionTrigger;
trigger gt_HyperionIntroQ;
trigger gt_HyperionAttacked;
trigger gt_HyperionAttackedQ;
trigger gt_HyperionAttackedFirstTimeQ;
trigger gt_HyperionLowHealthQ;
trigger gt_HyperionSCVRespawn;
trigger gt_HyperionBigAttack1Q;
trigger gt_HyperionBigAttack2Q;
trigger gt_HyperionBigAttack3Q;
trigger gt_OdinDiesQ;
trigger gt_RaynorAttackPrepTiming;
trigger gt_RaynorAttackPrepQ;
trigger gt_TotalHyperionDamage;
trigger gt_DefeatBaseDead;
trigger gt_DefeatHyperionDies;
trigger gt_VictoryDestroyPalaceGateCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_PlayerAbortsMission;
trigger gt_AchievementHyperionDamageTaken;
trigger gt_AchievementTimedRunNH;
trigger gt_AchievementDestroytheOdinH;
trigger gt_LargestZergForce;
trigger gt_RaynorKills;
trigger gt_StartAI;
trigger gt_StartUpgradesNormal;
trigger gt_StartUpgradesHard;
trigger gt_AIGiveResources;
trigger gt_Player2SendsAIWave;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveDestroyPalaceGateCreate;
trigger gt_ObjectiveDestroyPalaceGateComplete;
trigger gt_ObjectiveDestroyPalaceGateFailed;
trigger gt_ObjectiveHyperionMustSurviveCreate;
trigger gt_ObjectiveHyperionMustSurviveComplete;
trigger gt_ObjectiveHyperionMustSurviveFailed;
trigger gt_ObjectiveClearOuterLanesCreate;
trigger gt_ObjectiveClearOuterLanesUpdate;
trigger gt_ObjectiveClearOuterLanesComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanupNotSkipped;
trigger gt_IntroCleanupSkipped;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidHyperionMovement;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerg;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiEC423AC6") { aiEC423AC6_start(p); }
    if (cai_playerAI[p] == "ai17BA421C") { ai17BA421C_start(p); }
    if (cai_playerAI[p] == "ai7AC59A6F") { ai7AC59A6F_start(p); }
    if (cai_playerAI[p] == "ai392DEDDF") { ai392DEDDF_start(p); }
    if (cai_playerAI[p] == "ai05FE0989") { ai05FE0989_start(p); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { aiAFDBFFDC_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { aiEC423AC6_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai17BA421C") { ai17BA421C_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai7AC59A6F") { ai7AC59A6F_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai392DEDDF") { ai392DEDDF_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai05FE0989") { ai05FE0989_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { aiAFDBFFDC_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { return aiEC423AC6_getCustomData(p); }
    if (cai_playerAI[p] == "ai17BA421C") { return ai17BA421C_getCustomData(p); }
    if (cai_playerAI[p] == "ai7AC59A6F") { return ai7AC59A6F_getCustomData(p); }
    if (cai_playerAI[p] == "ai392DEDDF") { return ai392DEDDF_getCustomData(p); }
    if (cai_playerAI[p] == "ai05FE0989") { return ai05FE0989_getCustomData(p); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { return aiAFDBFFDC_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { return aiEC423AC6_getLastWave(p); }
    if (cai_playerAI[p] == "ai17BA421C") { return ai17BA421C_getLastWave(p); }
    if (cai_playerAI[p] == "ai7AC59A6F") { return ai7AC59A6F_getLastWave(p); }
    if (cai_playerAI[p] == "ai392DEDDF") { return ai392DEDDF_getLastWave(p); }
    if (cai_playerAI[p] == "ai05FE0989") { return ai05FE0989_getLastWave(p); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { return aiAFDBFFDC_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { aiEC423AC6_waves_run(p, target); }
    if (cai_playerAI[p] == "ai17BA421C") { ai17BA421C_waves_run(p, target); }
    if (cai_playerAI[p] == "ai7AC59A6F") { ai7AC59A6F_waves_run(p, target); }
    if (cai_playerAI[p] == "ai392DEDDF") { ai392DEDDF_waves_run(p, target); }
    if (cai_playerAI[p] == "ai05FE0989") { ai05FE0989_waves_run(p, target); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { aiAFDBFFDC_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { aiEC423AC6_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai17BA421C") { ai17BA421C_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai7AC59A6F") { ai7AC59A6F_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai392DEDDF") { ai392DEDDF_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai05FE0989") { ai05FE0989_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { aiAFDBFFDC_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiEC423AC6") { aiEC423AC6_waves_stop(); }
    if (ai == "ai17BA421C") { ai17BA421C_waves_stop(); }
    if (ai == "ai7AC59A6F") { ai7AC59A6F_waves_stop(); }
    if (ai == "ai392DEDDF") { ai392DEDDF_waves_stop(); }
    if (ai == "ai05FE0989") { ai05FE0989_waves_stop(); }
    if (ai == "aiAFDBFFDC") { aiAFDBFFDC_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { aiEC423AC6_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai17BA421C") { ai17BA421C_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai7AC59A6F") { ai7AC59A6F_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai392DEDDF") { ai392DEDDF_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai05FE0989") { ai05FE0989_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { aiAFDBFFDC_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { aiEC423AC6_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai17BA421C") { ai17BA421C_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai7AC59A6F") { ai7AC59A6F_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai392DEDDF") { ai392DEDDF_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai05FE0989") { ai05FE0989_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { aiAFDBFFDC_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { return aiEC423AC6_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai17BA421C") { return ai17BA421C_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai7AC59A6F") { return ai7AC59A6F_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai392DEDDF") { return ai392DEDDF_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai05FE0989") { return ai05FE0989_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { return aiAFDBFFDC_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { return aiEC423AC6_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai17BA421C") { return ai17BA421C_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai7AC59A6F") { return ai7AC59A6F_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai392DEDDF") { return ai392DEDDF_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai05FE0989") { return ai05FE0989_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { return aiAFDBFFDC_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiEC423AC6") { return aiEC423AC6_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai17BA421C") { return ai17BA421C_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai7AC59A6F") { return ai7AC59A6F_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai392DEDDF") { return ai392DEDDF_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai05FE0989") { return ai05FE0989_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiAFDBFFDC") { return aiAFDBFFDC_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiEC423AC6", 2);
    cai_start("ai17BA421C", 3);
    cai_start("ai7AC59A6F", 4);
    cai_start("ai392DEDDF", 14);
    cai_start("ai05FE0989", 5);
    cai_start("aiAFDBFFDC", 9);
    AICampaignStart(10);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 9);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 9);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 9);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    PlayerGroupAdd(target, 5);
    cai_waves_run(14, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 9);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    PlayerGroupAdd(target, 5);
    cai_waves_run(9, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits) {
    int auto8C0D3942_val;

    // Variable Declarations
    point lv_moveTo;
    point lv_moveToA;
    point lv_moveToB;
    unitgroup lv_enemies;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = gf_EnemiesWithinRange(lp_diamondback, 4.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) >= 1)) {
        lv_moveTo = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)));
        if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveTo) >= 1000)) {
            lv_moveToA = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) + 45.0));
            lv_moveToB = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) - 45.0));
            if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000) && (PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                auto8C0D3942_val = RandomInt(1, 2);
                if (auto8C0D3942_val == 1) {
                    lv_moveTo = lv_moveToA;
                }
                else if (auto8C0D3942_val == 2) {
                    lv_moveTo = lv_moveToB;
                }
                else {
                }
            }
            else {
                if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) > 1000)) {
                    lv_moveTo = lv_moveToB;
                }
                else {
                }
                if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) > 1000)) {
                    lv_moveTo = lv_moveToA;
                }
                else {
                }
            }
        }
        else {
        }
        UnitIssueOrder(lp_diamondback, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveTo), c_orderQueueReplace);
        Wait(1.5, c_timeGame);
        AISetUnitScriptControlled(lp_diamondback, false);
    }
    else {
    }
}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

trigger auto_gf_RepairStructurewithSCV_Trigger = null;
int auto_gf_RepairStructurewithSCV_lp_index;
unit auto_gf_RepairStructurewithSCV_lp_structure;

void gf_RepairStructurewithSCV (int lp_index, unit lp_structure) {
    auto_gf_RepairStructurewithSCV_lp_index = lp_index;
    auto_gf_RepairStructurewithSCV_lp_structure = lp_structure;

    if (auto_gf_RepairStructurewithSCV_Trigger == null) {
        auto_gf_RepairStructurewithSCV_Trigger = TriggerCreate("auto_gf_RepairStructurewithSCV_TriggerFunc");
    }

    TriggerExecute(auto_gf_RepairStructurewithSCV_Trigger, false, false);
}

bool auto_gf_RepairStructurewithSCV_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_RepairStructurewithSCV_lp_index;
    unit lp_structure = auto_gf_RepairStructurewithSCV_lp_structure;

    // Implementation
    UnitSetCustomValue(gv_repairSCVs[lp_index].lv_sCV, 0, 2.0);
    UnitSetCustomValue(lp_structure, 0, 2.0);
    while (true) {
        if (((UnitIsAlive(gv_repairSCVs[lp_index].lv_sCV) == false) || (UnitIsAlive(lp_structure) == false) || (UnitGetPropertyFixed(lp_structure, c_unitPropLifePercent, c_unitPropCurrent) > 99.0))) {
            break;
        }
        else {
        }
        UnitIssueOrder(gv_repairSCVs[lp_index].lv_sCV, OrderTargetingUnit(AbilityCommand("Repair", 0), lp_structure), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
    }
    UnitSetCustomValue(gv_repairSCVs[lp_index].lv_sCV, 0, 0.0);
    UnitSetCustomValue(lp_structure, 0, 0.0);
    UnitIssueOrder(gv_repairSCVs[lp_index].lv_sCV, OrderTargetingPoint(AbilityCommand("move", 0), gv_repairSCVs[lp_index].lv_homePoint), c_orderQueueReplace);
    return true;
}

trigger auto_gf_UnloadNydusAnim_Trigger = null;
unit auto_gf_UnloadNydusAnim_lp_cHOSEN_NYDUS;

void gf_UnloadNydusAnim (unit lp_cHOSEN_NYDUS) {
    auto_gf_UnloadNydusAnim_lp_cHOSEN_NYDUS = lp_cHOSEN_NYDUS;

    if (auto_gf_UnloadNydusAnim_Trigger == null) {
        auto_gf_UnloadNydusAnim_Trigger = TriggerCreate("auto_gf_UnloadNydusAnim_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnloadNydusAnim_Trigger, false, false);
}

bool auto_gf_UnloadNydusAnim_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_NYDUS = auto_gf_UnloadNydusAnim_lp_cHOSEN_NYDUS;

    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cHOSEN_NYDUS), c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupSingle(gv_PLAYER_01_USER), UnitGetPosition(lp_cHOSEN_NYDUS), 0.0, 100.0, 0.0);
    return true;
}

void gf_CreatePatrolUnit (string lp_unitType, point lp_unitSpawnPoint, point lp_unitFacingPoint, unitgroup lp_unitGroup) {
    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, lp_unitType, c_unitCreateIgnorePlacement, gv_PLAYER_02_DOMINION_RED, lp_unitSpawnPoint, lp_unitFacingPoint);
    UnitBehaviorAdd(UnitLastCreated(), "PatrolSpeed", UnitLastCreated(), 1);
    UnitGroupAdd(lp_unitGroup, UnitLastCreated());
    AISetUnitScriptControlled(UnitLastCreated(), true);
}

trigger auto_gf_IntroMoveUnits_Trigger = null;
region auto_gf_IntroMoveUnits_lp_originalRegion;
point auto_gf_IntroMoveUnits_lp_movePoint;
fixed auto_gf_IntroMoveUnits_lp_delay;

void gf_IntroMoveUnits (region lp_originalRegion, point lp_movePoint, fixed lp_delay) {
    auto_gf_IntroMoveUnits_lp_originalRegion = lp_originalRegion;
    auto_gf_IntroMoveUnits_lp_movePoint = lp_movePoint;
    auto_gf_IntroMoveUnits_lp_delay = lp_delay;

    if (auto_gf_IntroMoveUnits_Trigger == null) {
        auto_gf_IntroMoveUnits_Trigger = TriggerCreate("auto_gf_IntroMoveUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_IntroMoveUnits_Trigger, false, false);
}

bool auto_gf_IntroMoveUnits_TriggerFunc (bool testConds, bool runActions) {
    region lp_originalRegion = auto_gf_IntroMoveUnits_lp_originalRegion;
    point lp_movePoint = auto_gf_IntroMoveUnits_lp_movePoint;
    fixed lp_delay = auto_gf_IntroMoveUnits_lp_delay;

    // Variable Declarations
    int lv_startValue;
    int lv_finalValue;

    // Variable Initialization

    // Implementation
    lv_startValue = (gv_numberOfIntroUnits + 1);
    UnitGroupLoopBegin(UnitGroup(null, gv_PLAYER_01_USER, lp_originalRegion, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Larva")) {
            gv_numberOfIntroUnits += 1;
            if ((gv_numberOfIntroUnits > 63)) {
                return true;
            }
            else {
            }
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
            gv_introUnits[gv_numberOfIntroUnits] = UnitGroupLoopCurrent();
            gv_introUnitPositions[gv_numberOfIntroUnits] = UnitGetPosition(UnitGroupLoopCurrent());
            gv_introUnitFacings[gv_numberOfIntroUnits] = UnitGetFacing(UnitGroupLoopCurrent());
            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), DistanceBetweenPoints(RegionGetCenter(lp_originalRegion), lp_movePoint), AngleBetweenPoints(RegionGetCenter(lp_originalRegion), lp_movePoint)), false);
            libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), gv_introUnitPositions[gv_numberOfIntroUnits], 0.0);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    lv_finalValue = gv_numberOfIntroUnits;
    Wait(lp_delay, c_timeGame);
    if ((gv_inCinematic == false)) {
        return true;
    }
    else {
    }
    IntLoopBegin(lv_startValue, lv_finalValue);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitIssueOrder(gv_introUnits[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 0), gv_introUnitPositions[IntLoopCurrent()]), c_orderQueueReplace);
        UnitIssueOrder(gv_introUnits[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(gv_introUnitPositions[IntLoopCurrent()], 1.0, gv_introUnitFacings[IntLoopCurrent()])), c_orderQueueAddToEnd);
    }
    IntLoopEnd();
    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_inCinematic == false)) {
            return true;
        }
        else {
        }
        IntLoopBegin(lv_startValue, lv_finalValue);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((gv_introUnits[IntLoopCurrent()] != gv_kerrigan) && (libNtve_gf_UnitInRegion(gv_introUnits[IntLoopCurrent()], RegionCircle(gv_introUnitPositions[IntLoopCurrent()], 0.5)) == false)) {
                UnitIssueOrder(gv_introUnits[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 0), gv_introUnitPositions[IntLoopCurrent()]), c_orderQueueReplace);
                UnitIssueOrder(gv_introUnits[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(gv_introUnitPositions[IntLoopCurrent()], 1.0, gv_introUnitFacings[IntLoopCurrent()])), c_orderQueueAddToEnd);
            }
            else {
            }
        }
        IntLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZKorhal3");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(gv_PLAYER_07_DOMINION_GREEN22, "ShieldWall", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_PLAYER_07_DOMINION_GREEN22, "AuxiliaryMedBots", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_PLAYER_07_DOMINION_GREEN22, "AresClassWeaponsSystem", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_PLAYER_07_DOMINION_GREEN22, "MultilockTargetingSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_PLAYER_07_DOMINION_GREEN22, "SiegeTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_PLAYER_07_DOMINION_GREEN22, "YamatoCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_PLAYER_07_DOMINION_GREEN22, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_PLAYER_07_DOMINION_GREEN22, "NeosteelFrame", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_PLAYER_01_USER, gv_PLAYER_07_DOMINION_GREEN22, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_PLAYER_01_USER, gv_pLAYER_08_IZSHA, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_PLAYER_07_DOMINION_GREEN22, gv_pLAYER_08_IZSHA, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetAlliance(gv_PLAYER_07_DOMINION_GREEN22, c_allianceIdPushable, gv_PLAYER_01_USER, true);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_PLAYER_02_DOMINION_RED);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_PLAYER_03_DOMINION_BLUE);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_PLAYER_04_DOMINION_PURPLE);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_PLAYER_05_DOMINION_TEAL);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_PLAYER_07_DOMINION_GREEN23);
    libNtve_gf_SetPlayerGroupAlliance(gv_dominionPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerModifyPropertyInt(gv_PLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 350);
    PlayerModifyPropertyInt(gv_PLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_PLAYER_07_DOMINION_GREEN22, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_PLAYER_07_DOMINION_GREEN22, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 1, true);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 10000);
        TechTreeUnitAllow(PlayerGroupLoopCurrent(), "BarracksTechReactor", true);
        TechTreeUnitAllow(PlayerGroupLoopCurrent(), "FactoryTechReactor", true);
        TechTreeUnitAllow(PlayerGroupLoopCurrent(), "StarportTechReactor", true);
    }
    PlayerGroupLoopEnd();
    PlayerSetState(gv_PLAYER_02_DOMINION_RED, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_PLAYER_03_DOMINION_BLUE, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_PLAYER_04_DOMINION_PURPLE, c_playerStateFoodIgnored, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(1077), gv_PLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 45.0, 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(2150), PointFromId(495));
    UnitGroupLoopBegin(UnitGroup(null, gv_PLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Queen")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 50.0);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        }
        UnitGroupLoopEnd();
    }
    PlayerGroupLoopEnd();
    UnitSetTeamColorIndex(UnitFromId(1800), 5);
    UnitIssueOrder(UnitFromId(47), Order(AbilityCommand("ExtendingBridgeNEWide8", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "MengskMarine", 4);
    }
    UnitGroupLoopEnd();
    UnitMagazineArm(UnitFromId(941), AbilityCommand("ArmSiloWithNuke", 0), libHots_gf_DifficultyValueInt2(1, 1, 2));
    UnitMagazineArm(UnitFromId(824), AbilityCommand("ArmSiloWithNuke", 0), libHots_gf_DifficultyValueInt2(1, 1, 2));
    gv_hyperionVictims = UnitGroup(null, gv_PLAYER_03_DOMINION_BLUE, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_ShowHideUnit(gv_hYPERION, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_PLAYER_07_DOMINION_GREEN22, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_SCVRepairScript, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalPalaceTurretLeft", c_unitCreateIgnorePlacement, gv_PLAYER_02_DOMINION_RED, PointFromId(1));
    UnitGroupAdd(gv_palaceTurrets, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalPalaceTurretRight", c_unitCreateIgnorePlacement, gv_PLAYER_02_DOMINION_RED, PointFromId(373));
    UnitGroupAdd(gv_palaceTurrets, UnitLastCreated());
    UnitGroupLoopBegin(gv_palaceTurrets);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateCursorable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("GreaterNydusWorm", gv_pLAYER_08_IZSHA, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, true, true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZKorhal03MusicMain";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(3), RegionFromId(3), gv_PLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(27), gv_PLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(59), RegionFromId(59), gv_PLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(UnitFromId(675), c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(3000.0, 3000.0, 5000.0));
    UnitSetPropertyFixed(UnitFromId(675), c_unitPropLifePercent, 100.0);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CombatShield", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "PunisherGrenades", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "SiegeTech", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "AresClassWeaponsSystemViking", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "AresClassWeaponsSystem", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "HailstormMissilePods", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "NeoSteelFrame", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShrikeTurret", 1);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("OdinBarrage", 0), false);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ClusterWarheads", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "MedivacRapidDeployment", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "GhostMoebiusReactor", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "DualFusionWelders", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "FireSuppressionSystems", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "HiSecAutoTracking", 1);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Korhal03 Singular Tip");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("ScienceVessel", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("WarHound", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskMarauder", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskThor", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskGoliath", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskReaper", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskMedic", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskBanshee", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskHellion", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskBC", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskFirebat", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskDiamondback", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskSiegeTank", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskVikingFighter", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskMarine", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", false, gv_PLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Odin", false, gv_PLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("PsiDisruptor", false, gv_PLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Handler
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceHandler_Func (bool testConds, bool runActions) {
    int auto7735AF4B_ae;
    int auto7735AF4B_ai;
    int auto5F9D53DA_ae;
    int auto5F9D53DA_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(36);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(49);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(37);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(57);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(38);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(54);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(39);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(58);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(40);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(64);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(42);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(61);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(43);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(56);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(44);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(53);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(50);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(55);
    auto7735AF4B_ae = gv_perfPausedCount;
    auto7735AF4B_ai = 1;
    lv_index = 1;
    for ( ; ( (auto7735AF4B_ai >= 0 && lv_index <= auto7735AF4B_ae) || (auto7735AF4B_ai <= 0 && lv_index >= auto7735AF4B_ae) ) ; lv_index += auto7735AF4B_ai ) {
        gv_perfPausedUnits[lv_index] = UnitGroupAlliance(gv_PLAYER_01_USER, c_unitAllianceEnemy, gv_perfPausedRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupLoopBegin(gv_perfPausedUnits[lv_index]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitFilterMatch(UnitGroupLoopCurrent(), gv_PLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && ((UnitGetType(UnitGroupLoopCurrent()) == "Odin") || (UnitGetType(UnitGroupLoopCurrent()) == "Factory") || (UnitGetType(UnitGroupLoopCurrent()) == "Barracks") || (UnitGetType(UnitGroupLoopCurrent()) == "Starport") || (UnitGetType(UnitGroupLoopCurrent()) == "BarracksReactor") || (UnitGetType(UnitGroupLoopCurrent()) == "FactoryTechLab") || (UnitGetType(UnitGroupLoopCurrent()) == "StarportTechLab") || (UnitGetType(UnitGroupLoopCurrent()) == "BarracksTechReactor") || (UnitGetType(UnitGroupLoopCurrent()) == "FactoryTechReactor") || (UnitGetType(UnitGroupLoopCurrent()) == "StarportTechReactor"))) {
                UnitGroupRemove(gv_perfPausedUnits[lv_index], UnitGroupLoopCurrent());
            }
            else {
                libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
                libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
            }
        }
        UnitGroupLoopEnd();
    }
    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        auto5F9D53DA_ae = gv_perfPausedCount;
        auto5F9D53DA_ai = 1;
        lv_index = 1;
        for ( ; ( (auto5F9D53DA_ai >= 0 && lv_index <= auto5F9D53DA_ae) || (auto5F9D53DA_ai <= 0 && lv_index >= auto5F9D53DA_ae) ) ; lv_index += auto5F9D53DA_ai ) {
            if ((gv_perfRevealRegions[lv_index] != null) && ((UnitGroupCount(UnitGroup(null, gv_PLAYER_01_USER, gv_perfRevealRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_PLAYER_07_DOMINION_GREEN22, gv_perfRevealRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_08_IZSHA, gv_perfRevealRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
                UnitGroupLoopBegin(gv_perfPausedUnits[lv_index]);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                    libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
                    UnitGroupRemove(gv_perfPausedUnits[lv_index], UnitGroupLoopCurrent());
                    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true) && (VisIsVisibleForPlayer(gv_PLAYER_01_USER, UnitGetPosition(UnitGroupLoopCurrent())) == true)) {
                        TextExpressionSetToken("Param/Expression/771E00B5", "A", UnitTypeGetName(UnitGetType(UnitGroupLoopCurrent())));
                        TextExpressionSetToken("Param/Expression/771E00B5", "B", FixedToText(PointGetX(UnitGetPosition(UnitGroupLoopCurrent())), 1));
                        TextExpressionSetToken("Param/Expression/771E00B5", "C", FixedToText(PointGetY(UnitGetPosition(UnitGroupLoopCurrent())), 1));
                        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/771E00B5"), true);
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                gv_perfRevealRegions[lv_index] = null;
            }
            else {
            }
        }
        Wait(0.25, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceHandler_Init () {
    gt_PerformanceHandler = TriggerCreate("gt_PerformanceHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pause Units Again
//--------------------------------------------------------------------------------------------------
bool gt_PauseUnitsAgain_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, gv_perfPausedCount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_perfRevealRegions[IntLoopCurrent()] != null)) {
            UnitGroupLoopBegin(gv_perfPausedUnits[IntLoopCurrent()]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
            }
            UnitGroupLoopEnd();
        }
        else {
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PauseUnitsAgain_Init () {
    gt_PauseUnitsAgain = TriggerCreate("gt_PauseUnitsAgain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Map Cheat Used
//--------------------------------------------------------------------------------------------------
bool gt_ShowMapCheatUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_PerformanceHandler);
    IntLoopBegin(1, gv_perfPausedCount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gv_perfRevealRegions[IntLoopCurrent()] = null;
        UnitGroupLoopBegin(gv_perfPausedUnits[IntLoopCurrent()]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitGroupRemove(gv_perfPausedUnits[IntLoopCurrent()], UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    IntLoopEnd();
    TriggerExecute(gt_Lane1, true, false);
    TriggerExecute(gt_Lane2, true, false);
    TriggerExecute(gt_Lane3, true, false);
    TriggerStop(gt_LanePauseLoop);
    TriggerEnable(gt_LanePauseLoop, false);
    TriggerEnable(gt_LaneSpectacleStart, false);
    gv_lane1Paused = false;
    gv_lane2Paused = false;
    gv_lane3Paused = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowMapCheatUsed_Init () {
    gt_ShowMapCheatUsed = TriggerCreate("gt_ShowMapCheatUsed_Func");
    TriggerAddEventCheatUsed(gt_ShowMapCheatUsed, gv_PLAYER_01_USER, c_gameCheatShowmap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(180.0, 9);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(205), 240.0);
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
    }
    else {
    }
    UIAlertPoint("Trigger", gv_PLAYER_01_USER, StringExternal("Param/Value/10019ECC"), null, UnitGetPosition(gv_kerrigan));
    TriggerExecute(gt_StartHarvesting, true, false);
    TimerStart(gv_achievementTimedRunTimer, 1500.0, false, c_timeAI);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyPalaceGateCreate, true, true);
    TriggerQueueExit();
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_EliteForceIntroQ, true, true);
    TriggerExecute(gt_TipEliteForcesQ, true, false);
    Wait(110.0, c_timeAI);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Harvesting
//--------------------------------------------------------------------------------------------------
bool gt_StartHarvesting_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(51), RegionFromId(52));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartHarvesting_Init () {
    gt_StartHarvesting = TriggerCreate("gt_StartHarvesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elite Force Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_EliteForceIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00051", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EliteForceIntroQ_Init () {
    gt_EliteForceIntroQ = TriggerCreate("gt_EliteForceIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Elite Forces Q
//--------------------------------------------------------------------------------------------------
bool gt_TipEliteForcesQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_CreateTipCampaign("Elite Forces", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipEliteForcesQ_Init () {
    gt_TipEliteForcesQ = TriggerCreate("gt_TipEliteForcesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Kerrigan Death
//--------------------------------------------------------------------------------------------------
bool gt_HandleKerriganDeath_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    TriggerExecute(gt_KerriganIsKilledQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleKerriganDeath_Init () {
    gt_HandleKerriganDeath = TriggerCreate("gt_HandleKerriganDeath_Func");
    TriggerAddEventUnitDied(gt_HandleKerriganDeath, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Is Killed Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganIsKilledQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganIsKilledQ_Init () {
    gt_KerriganIsKilledQ = TriggerCreate("gt_KerriganIsKilledQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Augustgrad Gate Intros Q
//--------------------------------------------------------------------------------------------------
bool gt_AugustgradGateIntrosQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveClearOuterLanesCreate, true, true);
    TriggerExecute(gt_CreateAugustgradGatePings, true, false);
    libNtve_gf_SetAlliance(gv_PLAYER_01_USER, gv_pLAYER_08_IZSHA, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00002", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00003", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AugustgradGateIntrosQ_Init () {
    gt_AugustgradGateIntrosQ = TriggerCreate("gt_AugustgradGateIntrosQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Augustgrad Gate Intro Proximity
//--------------------------------------------------------------------------------------------------
bool gt_AugustgradGateIntroProximity_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_PLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_PLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AugustgradGateIntrosQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AugustgradGateIntroProximity_Init () {
    gt_AugustgradGateIntroProximity = TriggerCreate("gt_AugustgradGateIntroProximity_Func");
    TriggerAddEventUnitRegion(gt_AugustgradGateIntroProximity, null, RegionFromId(27), true);
    TriggerAddEventUnitRegion(gt_AugustgradGateIntroProximity, null, RegionFromId(41), true);
    TriggerAddEventUnitRegion(gt_AugustgradGateIntroProximity, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Augustgrad Gate Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateAugustgradGatePings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_LanePauseLoop);
    gv_lane1Paused = false;
    gv_lane2Paused = false;
    gv_lane3Paused = false;
    if ((UnitGroupCount(UnitGroupAlliance(gv_PLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(16), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(8)), StringExternal("Param/Value/1C3B9AFC"));
        gv_lanePing[1] = PingLastCreated();
        VisRevealArea(gv_PLAYER_01_USER, RegionCircle(PingGetPosition(PingLastCreated()), 8.0), 10.0, false);
        Wait(0.5, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroupAlliance(gv_PLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(8), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(289)), StringExternal("Param/Value/40832EE5"));
        gv_lanePing[2] = PingLastCreated();
        VisRevealArea(gv_PLAYER_01_USER, RegionCircle(PingGetPosition(PingLastCreated()), 8.0), 10.0, false);
        Wait(0.5, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroupAlliance(gv_PLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(18), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(141)), StringExternal("Param/Value/8963E359"));
        gv_lanePing[3] = PingLastCreated();
        VisRevealArea(gv_PLAYER_01_USER, RegionCircle(PingGetPosition(PingLastCreated()), 8.0), 10.0, false);
    }
    else {
    }
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_LanePauseLoop, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateAugustgradGatePings_Init () {
    gt_CreateAugustgradGatePings = TriggerCreate("gt_CreateAugustgradGatePings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 1
//--------------------------------------------------------------------------------------------------
bool gt_Lane1_Func (bool testConds, bool runActions) {
    int auto15D222B5_ae;
    int auto15D222B5_ai;
    int auto5C2AC2E4_ae;
    int auto5C2AC2E4_ai;
    int auto751BB1CF_ae;
    int auto751BB1CF_ai;
    int auto1583CBDC_ae;
    int auto1583CBDC_ai;
    int auto0B76062F_ae;
    int auto0B76062F_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Lane1SpawnLoop, true, false);
    while (!((gv_gameOver == false) && (UnitGroupCount(UnitGroupAlliance(gv_PLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(16), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    libNtve_gf_PauseUnit(UnitFromId(2667), false);
    libNtve_gf_ShowHideUnit(UnitFromId(2667), true);
    auto15D222B5_ae = gv_numberOfRepairSCVs;
    auto15D222B5_ai = 1;
    lv_i = 1;
    for ( ; ( (auto15D222B5_ai >= 0 && lv_i <= auto15D222B5_ae) || (auto15D222B5_ai <= 0 && lv_i >= auto15D222B5_ae) ) ; lv_i += auto15D222B5_ai ) {
        if ((UnitGetOwner(gv_repairSCVs[lv_i].lv_sCV) == gv_PLAYER_04_DOMINION_PURPLE)) {
            AISetUnitScriptControlled(gv_repairSCVs[lv_i].lv_sCV, false);
        }
        else {
        }
    }
    TriggerStop(gt_Lane1SpawnLoop);
    AIToggleBulliesInRegion(gv_PLAYER_04_DOMINION_PURPLE, RegionFromId(16), false);
    PingDestroy(gv_lanePing[1]);
    TriggerExecute(gt_Lane1ClearedQ, true, false);
    TriggerExecute(gt_ObjectiveClearOuterLanesUpdate, true, false);
    auto5C2AC2E4_ae = 15;
    auto5C2AC2E4_ai = 1;
    lv_i = 1;
    for ( ; ( (auto5C2AC2E4_ai >= 0 && lv_i <= auto5C2AC2E4_ae) || (auto5C2AC2E4_ai <= 0 && lv_i >= auto5C2AC2E4_ae) ) ; lv_i += auto5C2AC2E4_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2667));
        Wait(0.1, c_timeAI);
    }
    auto751BB1CF_ae = 40;
    auto751BB1CF_ai = 1;
    lv_i = 1;
    for ( ; ( (auto751BB1CF_ai >= 0 && lv_i <= auto751BB1CF_ae) || (auto751BB1CF_ai <= 0 && lv_i >= auto751BB1CF_ae) ) ; lv_i += auto751BB1CF_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2667));
        Wait(0.1, c_timeAI);
    }
    auto1583CBDC_ae = 15;
    auto1583CBDC_ai = 1;
    lv_i = 1;
    for ( ; ( (auto1583CBDC_ai >= 0 && lv_i <= auto1583CBDC_ae) || (auto1583CBDC_ai <= 0 && lv_i >= auto1583CBDC_ae) ) ; lv_i += auto1583CBDC_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2667));
        Wait(0.1, c_timeAI);
    }
    while (true) {
        Wait(60.0, c_timeAI);
        while (!((UnitGroupCount(gv_zagaraReinforcements, c_unitCountAlive) < 100))) {
            Wait(1.0, c_timeAI);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2667));
        Wait(0.1, c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2667));
        Wait(0.1, c_timeAI);
        auto0B76062F_ae = 6;
        auto0B76062F_ai = 1;
        lv_i = 1;
        for ( ; ( (auto0B76062F_ai >= 0 && lv_i <= auto0B76062F_ae) || (auto0B76062F_ai <= 0 && lv_i >= auto0B76062F_ae) ) ; lv_i += auto0B76062F_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            gf_UnloadNydusAnim(UnitFromId(2667));
            Wait(0.1, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane1_Init () {
    gt_Lane1 = TriggerCreate("gt_Lane1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 1 Spawn Loop
//--------------------------------------------------------------------------------------------------
bool gt_Lane1SpawnLoop_Func (bool testConds, bool runActions) {
    int auto09B2BEF0_ae;
    int auto09B2BEF0_ai;
    int auto2288E6C3_ae;
    int auto2288E6C3_ai;
    int auto31035550_ae;
    int auto31035550_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        while (((gv_lane1Paused == true) || (UnitGroupCount(gv_zagaraReinforcements, c_unitCountAlive) >= 100))) {
            if ((gv_lane1Paused == true)) {
                libNtve_gf_PauseUnit(UnitFromId(2667), true);
                libNtve_gf_ShowHideUnit(UnitFromId(2667), false);
            }
            else {
            }
            Wait(1.0, c_timeAI);
        }
        libNtve_gf_PauseUnit(UnitFromId(2667), false);
        libNtve_gf_ShowHideUnit(UnitFromId(2667), true);
        gf_UnloadNydusAnim(UnitFromId(2667));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(0.1, c_timeAI);
        gf_UnloadNydusAnim(UnitFromId(2667));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(0.1, c_timeAI);
        auto09B2BEF0_ae = 6;
        auto09B2BEF0_ai = 1;
        lv_i = 1;
        for ( ; ( (auto09B2BEF0_ai >= 0 && lv_i <= auto09B2BEF0_ae) || (auto09B2BEF0_ai <= 0 && lv_i >= auto09B2BEF0_ae) ) ; lv_i += auto09B2BEF0_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2667));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        auto2288E6C3_ae = 6;
        auto2288E6C3_ai = 1;
        lv_i = 1;
        for ( ; ( (auto2288E6C3_ai >= 0 && lv_i <= auto2288E6C3_ae) || (auto2288E6C3_ai <= 0 && lv_i >= auto2288E6C3_ae) ) ; lv_i += auto2288E6C3_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2667));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        auto31035550_ae = 6;
        auto31035550_ai = 1;
        lv_i = 1;
        for ( ; ( (auto31035550_ai >= 0 && lv_i <= auto31035550_ae) || (auto31035550_ai <= 0 && lv_i >= auto31035550_ae) ) ; lv_i += auto31035550_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2667));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(6)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane1SpawnLoop_Init () {
    gt_Lane1SpawnLoop = TriggerCreate("gt_Lane1SpawnLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 2
//--------------------------------------------------------------------------------------------------
bool gt_Lane2_Func (bool testConds, bool runActions) {
    int auto06D8CCC3_ae;
    int auto06D8CCC3_ai;
    int auto8292FCC8_ae;
    int auto8292FCC8_ai;
    int autoFE9A47CC_ae;
    int autoFE9A47CC_ai;
    int auto19296274_ae;
    int auto19296274_ai;
    int auto075A3D20_ae;
    int auto075A3D20_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Lane2SpawnLoop, true, false);
    while (!((gv_gameOver == false) && (UnitGroupCount(UnitGroupAlliance(gv_PLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(8), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    auto06D8CCC3_ae = gv_numberOfRepairSCVs;
    auto06D8CCC3_ai = 1;
    lv_i = 1;
    for ( ; ( (auto06D8CCC3_ai >= 0 && lv_i <= auto06D8CCC3_ae) || (auto06D8CCC3_ai <= 0 && lv_i >= auto06D8CCC3_ae) ) ; lv_i += auto06D8CCC3_ai ) {
        if ((UnitGetOwner(gv_repairSCVs[lv_i].lv_sCV) == gv_PLAYER_03_DOMINION_BLUE)) {
            AISetUnitScriptControlled(gv_repairSCVs[lv_i].lv_sCV, false);
        }
        else {
        }
    }
    TriggerStop(gt_Lane2SpawnLoop);
    AIToggleBulliesInRegion(gv_PLAYER_03_DOMINION_BLUE, RegionFromId(8), false);
    PingDestroy(gv_lanePing[2]);
    TriggerExecute(gt_Lane2ClearedQ, true, false);
    TriggerExecute(gt_ObjectiveClearOuterLanesUpdate, true, false);
    auto8292FCC8_ae = 40;
    auto8292FCC8_ai = 1;
    lv_i = 1;
    for ( ; ( (auto8292FCC8_ai >= 0 && lv_i <= auto8292FCC8_ae) || (auto8292FCC8_ai <= 0 && lv_i >= auto8292FCC8_ae) ) ; lv_i += auto8292FCC8_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2666));
        Wait(0.1, c_timeAI);
    }
    autoFE9A47CC_ae = 15;
    autoFE9A47CC_ai = 1;
    lv_i = 1;
    for ( ; ( (autoFE9A47CC_ai >= 0 && lv_i <= autoFE9A47CC_ae) || (autoFE9A47CC_ai <= 0 && lv_i >= autoFE9A47CC_ae) ) ; lv_i += autoFE9A47CC_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2666));
        Wait(0.1, c_timeAI);
    }
    auto19296274_ae = 12;
    auto19296274_ai = 1;
    lv_i = 1;
    for ( ; ( (auto19296274_ai >= 0 && lv_i <= auto19296274_ae) || (auto19296274_ai <= 0 && lv_i >= auto19296274_ae) ) ; lv_i += auto19296274_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(7)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2666));
        Wait(0.1, c_timeAI);
    }
    while (true) {
        Wait(60.0, c_timeAI);
        while (!((UnitGroupCount(gv_zagaraReinforcements, c_unitCountAlive) < 100))) {
            Wait(1.0, c_timeAI);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2666));
        Wait(0.1, c_timeAI);
        auto075A3D20_ae = 3;
        auto075A3D20_ai = 1;
        lv_i = 1;
        for ( ; ( (auto075A3D20_ai >= 0 && lv_i <= auto075A3D20_ae) || (auto075A3D20_ai <= 0 && lv_i >= auto075A3D20_ae) ) ; lv_i += auto075A3D20_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            gf_UnloadNydusAnim(UnitFromId(2666));
            Wait(0.1, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane2_Init () {
    gt_Lane2 = TriggerCreate("gt_Lane2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 2 Spawn Loop
//--------------------------------------------------------------------------------------------------
bool gt_Lane2SpawnLoop_Func (bool testConds, bool runActions) {
    int autoEB1573C4_ae;
    int autoEB1573C4_ai;
    int auto62A06BA1_ae;
    int auto62A06BA1_ai;
    int autoA1A275C8_ae;
    int autoA1A275C8_ai;
    int auto27572791_ae;
    int auto27572791_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        while (((gv_lane2Paused == true) || (UnitGroupCount(gv_zagaraReinforcements, c_unitCountAlive) >= 100))) {
            if ((gv_lane2Paused == true)) {
                libNtve_gf_PauseUnit(UnitFromId(2666), true);
                libNtve_gf_ShowHideUnit(UnitFromId(2666), false);
            }
            else {
            }
            Wait(1.0, c_timeAI);
        }
        libNtve_gf_PauseUnit(UnitFromId(2666), false);
        libNtve_gf_ShowHideUnit(UnitFromId(2666), true);
        gf_UnloadNydusAnim(UnitFromId(2666));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(0.1, c_timeAI);
        autoEB1573C4_ae = 3;
        autoEB1573C4_ai = 1;
        lv_i = 1;
        for ( ; ( (autoEB1573C4_ai >= 0 && lv_i <= autoEB1573C4_ae) || (autoEB1573C4_ai <= 0 && lv_i >= autoEB1573C4_ae) ) ; lv_i += autoEB1573C4_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2666));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        auto62A06BA1_ae = 3;
        auto62A06BA1_ai = 1;
        lv_i = 1;
        for ( ; ( (auto62A06BA1_ai >= 0 && lv_i <= auto62A06BA1_ae) || (auto62A06BA1_ai <= 0 && lv_i >= auto62A06BA1_ae) ) ; lv_i += auto62A06BA1_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2666));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        autoA1A275C8_ae = 3;
        autoA1A275C8_ai = 1;
        lv_i = 1;
        for ( ; ( (autoA1A275C8_ai >= 0 && lv_i <= autoA1A275C8_ae) || (autoA1A275C8_ai <= 0 && lv_i >= autoA1A275C8_ae) ) ; lv_i += autoA1A275C8_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2666));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        auto27572791_ae = 3;
        auto27572791_ai = 1;
        lv_i = 1;
        for ( ; ( (auto27572791_ai >= 0 && lv_i <= auto27572791_ae) || (auto27572791_ai <= 0 && lv_i >= auto27572791_ae) ) ; lv_i += auto27572791_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2666));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(5)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        if (((gv_lane1Paused == true) || (UnitGroupCount(gv_zagaraReinforcements, c_unitCountAlive) >= 100))) {
            libNtve_gf_PauseUnit(UnitFromId(2666), true);
            libNtve_gf_ShowHideUnit(UnitFromId(2666), false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane2SpawnLoop_Init () {
    gt_Lane2SpawnLoop = TriggerCreate("gt_Lane2SpawnLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 3
//--------------------------------------------------------------------------------------------------
bool gt_Lane3_Func (bool testConds, bool runActions) {
    int auto8A1A87E8_ae;
    int auto8A1A87E8_ai;
    int auto01746541_ae;
    int auto01746541_ai;
    int autoF08A8335_ae;
    int autoF08A8335_ai;
    int auto2AE184A4_ae;
    int auto2AE184A4_ai;
    int autoB18C7702_ae;
    int autoB18C7702_ai;
    int auto09AC3B32_ae;
    int auto09AC3B32_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Lane3SpawnLoop, true, false);
    while (!((gv_gameOver == false) && (UnitGroupCount(UnitGroupAlliance(gv_PLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(18), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    auto8A1A87E8_ae = gv_numberOfRepairSCVs;
    auto8A1A87E8_ai = 1;
    lv_i = 1;
    for ( ; ( (auto8A1A87E8_ai >= 0 && lv_i <= auto8A1A87E8_ae) || (auto8A1A87E8_ai <= 0 && lv_i >= auto8A1A87E8_ae) ) ; lv_i += auto8A1A87E8_ai ) {
        if ((UnitGetOwner(gv_repairSCVs[lv_i].lv_sCV) == gv_PLAYER_05_DOMINION_TEAL)) {
            AISetUnitScriptControlled(gv_repairSCVs[lv_i].lv_sCV, false);
        }
        else {
        }
    }
    TriggerStop(gt_Lane3SpawnLoop);
    AIToggleBulliesInRegion(gv_PLAYER_05_DOMINION_TEAL, RegionFromId(18), false);
    PingDestroy(gv_lanePing[3]);
    TriggerExecute(gt_Lane3ClearedQ, true, false);
    TriggerExecute(gt_ObjectiveClearOuterLanesUpdate, true, false);
    auto01746541_ae = 25;
    auto01746541_ai = 1;
    lv_i = 1;
    for ( ; ( (auto01746541_ai >= 0 && lv_i <= auto01746541_ae) || (auto01746541_ai <= 0 && lv_i >= auto01746541_ae) ) ; lv_i += auto01746541_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2665));
        Wait(0.1, c_timeAI);
    }
    autoF08A8335_ae = 10;
    autoF08A8335_ai = 1;
    lv_i = 1;
    for ( ; ( (autoF08A8335_ai >= 0 && lv_i <= autoF08A8335_ae) || (autoF08A8335_ai <= 0 && lv_i >= autoF08A8335_ae) ) ; lv_i += autoF08A8335_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalHydralisk", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2665));
        Wait(0.1, c_timeAI);
    }
    auto2AE184A4_ae = 6;
    auto2AE184A4_ai = 1;
    lv_i = 1;
    for ( ; ( (auto2AE184A4_ai >= 0 && lv_i <= auto2AE184A4_ae) || (auto2AE184A4_ai <= 0 && lv_i >= auto2AE184A4_ae) ) ; lv_i += auto2AE184A4_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2665));
        Wait(0.1, c_timeAI);
    }
    autoB18C7702_ae = 6;
    autoB18C7702_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB18C7702_ai >= 0 && lv_i <= autoB18C7702_ae) || (autoB18C7702_ai <= 0 && lv_i >= autoB18C7702_ae) ) ; lv_i += autoB18C7702_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalFlyer", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2665));
        Wait(0.1, c_timeAI);
    }
    while (true) {
        Wait(60.0, c_timeAI);
        while (!((UnitGroupCount(gv_zagaraReinforcements, c_unitCountAlive) < 100))) {
            Wait(1.0, c_timeAI);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalHydralisk", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        gf_UnloadNydusAnim(UnitFromId(2665));
        Wait(0.1, c_timeAI);
        auto09AC3B32_ae = 4;
        auto09AC3B32_ai = 1;
        lv_i = 1;
        for ( ; ( (auto09AC3B32_ai >= 0 && lv_i <= auto09AC3B32_ae) || (auto09AC3B32_ai <= 0 && lv_i >= auto09AC3B32_ae) ) ; lv_i += auto09AC3B32_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            gf_UnloadNydusAnim(UnitFromId(2665));
            Wait(0.1, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane3_Init () {
    gt_Lane3 = TriggerCreate("gt_Lane3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 3 Spawn Loop
//--------------------------------------------------------------------------------------------------
bool gt_Lane3SpawnLoop_Func (bool testConds, bool runActions) {
    int autoD065E013_ae;
    int autoD065E013_ai;
    int auto0EF9C00E_ae;
    int auto0EF9C00E_ai;
    int autoF0746625_ae;
    int autoF0746625_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        while (((gv_lane3Paused == true) || (UnitGroupCount(gv_zagaraReinforcements, c_unitCountAlive) >= 100))) {
            if ((gv_lane3Paused == true)) {
                libNtve_gf_PauseUnit(UnitFromId(2665), true);
                libNtve_gf_ShowHideUnit(UnitFromId(2665), false);
            }
            else {
            }
            Wait(1.0, c_timeAI);
        }
        libNtve_gf_PauseUnit(UnitFromId(2665), false);
        libNtve_gf_ShowHideUnit(UnitFromId(2665), true);
        gf_UnloadNydusAnim(UnitFromId(2665));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalHydralisk", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
        UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
        Wait(0.1, c_timeAI);
        autoD065E013_ae = 4;
        autoD065E013_ai = 1;
        lv_i = 1;
        for ( ; ( (autoD065E013_ai >= 0 && lv_i <= autoD065E013_ae) || (autoD065E013_ai <= 0 && lv_i >= autoD065E013_ae) ) ; lv_i += autoD065E013_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2665));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        auto0EF9C00E_ae = 4;
        auto0EF9C00E_ai = 1;
        lv_i = 1;
        for ( ; ( (auto0EF9C00E_ai >= 0 && lv_i <= auto0EF9C00E_ae) || (auto0EF9C00E_ai <= 0 && lv_i >= auto0EF9C00E_ae) ) ; lv_i += auto0EF9C00E_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2665));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
        autoF0746625_ae = 4;
        autoF0746625_ai = 1;
        lv_i = 1;
        for ( ; ( (autoF0746625_ai >= 0 && lv_i <= autoF0746625_ae) || (autoF0746625_ai <= 0 && lv_i >= autoF0746625_ae) ) ; lv_i += autoF0746625_ai ) {
            gf_UnloadNydusAnim(UnitFromId(2665));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, gv_pLAYER_08_IZSHA, RegionRandomPoint(RegionFromId(4)));
            UnitGroupAdd(gv_zagaraReinforcements, UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.1, c_timeAI);
        }
        Wait(6.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane3SpawnLoop_Init () {
    gt_Lane3SpawnLoop = TriggerCreate("gt_Lane3SpawnLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane Spectacle Start
//--------------------------------------------------------------------------------------------------
bool gt_LaneSpectacleStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_gateBullies;

    // Variable Initialization
    lv_gateBullies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_PLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_PLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_LanePauseLoop, true, false);
    UnitGroupAddUnitGroup(lv_gateBullies, UnitGroup(null, gv_PLAYER_04_DOMINION_PURPLE, RegionFromId(16), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    UnitGroupAddUnitGroup(lv_gateBullies, UnitGroup(null, gv_PLAYER_03_DOMINION_BLUE, RegionFromId(8), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    UnitGroupAddUnitGroup(lv_gateBullies, UnitGroup(null, gv_PLAYER_05_DOMINION_TEAL, RegionFromId(18), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    UnitGroupLoopBegin(lv_gateBullies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_Lane1, true, false);
    TriggerExecute(gt_Lane2, true, false);
    TriggerExecute(gt_Lane3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaneSpectacleStart_Init () {
    gt_LaneSpectacleStart = TriggerCreate("gt_LaneSpectacleStart_Func");
    TriggerAddEventUnitRegion(gt_LaneSpectacleStart, null, RegionFromId(45), true);
    TriggerAddEventUnitRegion(gt_LaneSpectacleStart, null, RegionFromId(46), true);
    TriggerAddEventUnitRegion(gt_LaneSpectacleStart, null, RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane Pause Loop
//--------------------------------------------------------------------------------------------------
bool gt_LanePauseLoop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((gv_gameOver == true) || (libSwaC_gf_MissionObjectiveStateCheck("ZKorhal03Objective02", libSwaC_ge_MissionObjectiveState_Completed) == true))) {
            return true;
        }
        else {
        }
        if ((TriggerIsEnabled(gt_Lane1SpawnLoop) == true) && (UnitGroupCount(UnitGroup(null, gv_PLAYER_01_USER, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            gv_lane1Paused = false;
        }
        else {
            gv_lane1Paused = true;
        }
        if ((TriggerIsEnabled(gt_Lane2SpawnLoop) == true) && (UnitGroupCount(UnitGroup(null, gv_PLAYER_01_USER, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            gv_lane2Paused = false;
        }
        else {
            gv_lane2Paused = true;
        }
        if ((TriggerIsEnabled(gt_Lane3SpawnLoop) == true) && (UnitGroupCount(UnitGroup(null, gv_PLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            gv_lane3Paused = false;
        }
        else {
            gv_lane3Paused = true;
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LanePauseLoop_Init () {
    gt_LanePauseLoop = TriggerCreate("gt_LanePauseLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Repair Script
//--------------------------------------------------------------------------------------------------
bool gt_SCVRepairScript_Func (bool testConds, bool runActions) {
    int auto845D0671_ae;
    int auto845D0671_ai;
    int auto15044914_ae;
    int auto15044914_ai;
    int auto47C37C27_ae;
    int auto47C37C27_ai;

    // Variable Declarations
    int lv_i;
    bool lv_sCVFound;
    int lv_yellowEnd;
    int lv_blueEnd;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SCV", gv_PLAYER_04_DOMINION_PURPLE, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_numberOfRepairSCVs += 1;
        gv_repairSCVs[gv_numberOfRepairSCVs].lv_sCV = UnitGroupLoopCurrent();
        gv_repairSCVs[gv_numberOfRepairSCVs].lv_homePoint = UnitGetPosition(UnitGroupLoopCurrent());
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    lv_yellowEnd = gv_numberOfRepairSCVs;
    UnitGroupLoopBegin(UnitGroup("SCV", gv_PLAYER_03_DOMINION_BLUE, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_numberOfRepairSCVs += 1;
        gv_repairSCVs[gv_numberOfRepairSCVs].lv_sCV = UnitGroupLoopCurrent();
        gv_repairSCVs[gv_numberOfRepairSCVs].lv_homePoint = UnitGetPosition(UnitGroupLoopCurrent());
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    lv_blueEnd = gv_numberOfRepairSCVs;
    UnitGroupLoopBegin(UnitGroup("SCV", gv_PLAYER_05_DOMINION_TEAL, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_numberOfRepairSCVs += 1;
        gv_repairSCVs[gv_numberOfRepairSCVs].lv_sCV = UnitGroupLoopCurrent();
        gv_repairSCVs[gv_numberOfRepairSCVs].lv_homePoint = UnitGetPosition(UnitGroupLoopCurrent());
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    while (true) {
        Wait(1.0, c_timeAI);
        UnitGroupLoopBegin(UnitGroup(null, gv_PLAYER_04_DOMINION_PURPLE, RegionFromId(16), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) <= 99.0) && (UnitGetCustomValue(UnitGroupLoopCurrent(), 0) < 1)) {
                lv_sCVFound = false;
                auto845D0671_ae = lv_yellowEnd;
                auto845D0671_ai = 1;
                lv_i = 1;
                for ( ; ( (auto845D0671_ai >= 0 && lv_i <= auto845D0671_ae) || (auto845D0671_ai <= 0 && lv_i >= auto845D0671_ae) ) ; lv_i += auto845D0671_ai ) {
                    if ((UnitIsAlive(gv_repairSCVs[lv_i].lv_sCV) == true) && (UnitGetCustomValue(gv_repairSCVs[lv_i].lv_sCV, 0) < 1)) {
                        gf_RepairStructurewithSCV(lv_i, UnitGroupLoopCurrent());
                        lv_sCVFound = true;
                        break;
                    }
                    else {
                    }
                }
                if ((lv_sCVFound == false)) {
                    break;
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, gv_PLAYER_03_DOMINION_BLUE, RegionFromId(8), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) <= 99.0) && (UnitGetCustomValue(UnitGroupLoopCurrent(), 0) < 1)) {
                lv_sCVFound = false;
                auto15044914_ae = lv_blueEnd;
                auto15044914_ai = 1;
                lv_i = (lv_yellowEnd + 1);
                for ( ; ( (auto15044914_ai >= 0 && lv_i <= auto15044914_ae) || (auto15044914_ai <= 0 && lv_i >= auto15044914_ae) ) ; lv_i += auto15044914_ai ) {
                    if ((UnitIsAlive(gv_repairSCVs[lv_i].lv_sCV) == true) && (UnitGetCustomValue(gv_repairSCVs[lv_i].lv_sCV, 0) < 1)) {
                        gf_RepairStructurewithSCV(lv_i, UnitGroupLoopCurrent());
                        lv_sCVFound = true;
                        break;
                    }
                    else {
                    }
                }
                if ((lv_sCVFound == false)) {
                    break;
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, gv_PLAYER_05_DOMINION_TEAL, RegionFromId(18), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) <= 99.0) && (UnitGetCustomValue(UnitGroupLoopCurrent(), 0) < 1)) {
                lv_sCVFound = false;
                auto47C37C27_ae = gv_numberOfRepairSCVs;
                auto47C37C27_ai = 1;
                lv_i = (lv_blueEnd + 1);
                for ( ; ( (auto47C37C27_ai >= 0 && lv_i <= auto47C37C27_ae) || (auto47C37C27_ai <= 0 && lv_i >= auto47C37C27_ae) ) ; lv_i += auto47C37C27_ai ) {
                    if ((UnitIsAlive(gv_repairSCVs[lv_i].lv_sCV) == true) && (UnitGetCustomValue(gv_repairSCVs[lv_i].lv_sCV, 0) < 1)) {
                        gf_RepairStructurewithSCV(lv_i, UnitGroupLoopCurrent());
                        lv_sCVFound = true;
                        break;
                    }
                    else {
                    }
                }
                if ((lv_sCVFound == false)) {
                    break;
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVRepairScript_Init () {
    gt_SCVRepairScript = TriggerCreate("gt_SCVRepairScript_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 1 Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_Lane1ClearedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00010", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane1ClearedQ_Init () {
    gt_Lane1ClearedQ = TriggerCreate("gt_Lane1ClearedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 2 Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_Lane2ClearedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00149", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane2ClearedQ_Init () {
    gt_Lane2ClearedQ = TriggerCreate("gt_Lane2ClearedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lane 3 Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_Lane3ClearedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00148", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lane3ClearedQ_Init () {
    gt_Lane3ClearedQ = TriggerCreate("gt_Lane3ClearedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraUpgrades_Func (bool testConds, bool runActions) {
    int auto5DB3DC2E_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DB3DC2E_val = gv_objectiveRescueBrood2222;
    if (auto5DB3DC2E_val == 1) {
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergMissileWeaponsLevel1", 1);
    }
    else if (auto5DB3DC2E_val == 2) {
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergMissileWeaponsLevel2", 1);
    }
    else if (auto5DB3DC2E_val == 3) {
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergGroundArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_08_IZSHA, "ZergMissileWeaponsLevel3", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraUpgrades_Init () {
    gt_ZagaraUpgrades = TriggerCreate("gt_ZagaraUpgrades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Dominion Patrol - Right Side
//--------------------------------------------------------------------------------------------------
bool gt_CreateDominionPatrolRightSide_Func (bool testConds, bool runActions) {
    int auto540E0C13_ae;
    int auto540E0C13_ai;
    int autoE23AD02D_ae;
    int autoE23AD02D_ai;

    // Variable Declarations
    unit[9] lv_patrollers;
    point[9] lv_patrollerPointsA;
    point[9] lv_patrollerPointsB;
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreatePatrolUnit("MengskHellion", PointFromId(728), PointFromId(877), gv_dominionPatrolRightGroup);
    lv_patrollers[1] = UnitLastCreated();
    lv_patrollerPointsA[1] = PointFromId(728);
    lv_patrollerPointsB[1] = PointFromId(877);
    gf_CreatePatrolUnit("MengskHellion", PointFromId(730), PointFromId(878), gv_dominionPatrolRightGroup);
    lv_patrollers[2] = UnitLastCreated();
    lv_patrollerPointsA[2] = PointFromId(730);
    lv_patrollerPointsB[2] = PointFromId(878);
    gf_CreatePatrolUnit("MengskGoliath", PointFromId(734), PointFromId(879), gv_dominionPatrolRightGroup);
    lv_patrollers[3] = UnitLastCreated();
    lv_patrollerPointsA[3] = PointFromId(734);
    lv_patrollerPointsB[3] = PointFromId(879);
    gf_CreatePatrolUnit("MengskGoliath", PointFromId(735), PointFromId(880), gv_dominionPatrolRightGroup);
    lv_patrollers[4] = UnitLastCreated();
    lv_patrollerPointsA[4] = PointFromId(735);
    lv_patrollerPointsB[4] = PointFromId(880);
    Wait(2.0, c_timeGame);
    while (true) {
        auto540E0C13_ae = 4;
        auto540E0C13_ai = 1;
        lv_i = 1;
        for ( ; ( (auto540E0C13_ai >= 0 && lv_i <= auto540E0C13_ae) || (auto540E0C13_ai <= 0 && lv_i >= auto540E0C13_ae) ) ; lv_i += auto540E0C13_ai ) {
            if ((UnitGetOwner(lv_patrollers[lv_i]) != gv_PLAYER_01_USER)) {
                UnitIssueOrder(lv_patrollers[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), lv_patrollerPointsB[lv_i]), c_orderQueueReplace);
            }
            else {
                UnitGroupRemove(gv_dominionPatrolRightGroup, lv_patrollers[lv_i]);
            }
        }
        Wait(12.0, c_timeAI);
        autoE23AD02D_ae = 4;
        autoE23AD02D_ai = 1;
        lv_i = 1;
        for ( ; ( (autoE23AD02D_ai >= 0 && lv_i <= autoE23AD02D_ae) || (autoE23AD02D_ai <= 0 && lv_i >= autoE23AD02D_ae) ) ; lv_i += autoE23AD02D_ai ) {
            if ((UnitGetOwner(lv_patrollers[lv_i]) != gv_PLAYER_01_USER)) {
                UnitIssueOrder(lv_patrollers[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), lv_patrollerPointsA[lv_i]), c_orderQueueReplace);
            }
            else {
                UnitGroupRemove(gv_dominionPatrolRightGroup, lv_patrollers[lv_i]);
            }
        }
        Wait(12.0, c_timeAI);
        if ((UnitGroupCount(gv_dominionPatrolRightGroup, c_unitCountAlive) == 0)) {
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateDominionPatrolRightSide_Init () {
    gt_CreateDominionPatrolRightSide = TriggerCreate("gt_CreateDominionPatrolRightSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Dominion Patrol - Left Side
//--------------------------------------------------------------------------------------------------
bool gt_CreateDominionPatrolLeftSide_Func (bool testConds, bool runActions) {
    int autoBECF3AAF_ae;
    int autoBECF3AAF_ai;
    int auto75779DAB_ae;
    int auto75779DAB_ai;

    // Variable Declarations
    unit[9] lv_patrollers;
    point[9] lv_patrollerPointsA;
    point[9] lv_patrollerPointsB;
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreatePatrolUnit("MengskHellion", PointFromId(884), PointFromId(891), gv_dominionPatrolLeftGroup);
    lv_patrollers[1] = UnitLastCreated();
    lv_patrollerPointsA[1] = PointFromId(884);
    lv_patrollerPointsB[1] = PointFromId(891);
    gf_CreatePatrolUnit("MengskHellion", PointFromId(885), PointFromId(892), gv_dominionPatrolLeftGroup);
    lv_patrollers[2] = UnitLastCreated();
    lv_patrollerPointsA[2] = PointFromId(885);
    lv_patrollerPointsB[2] = PointFromId(892);
    gf_CreatePatrolUnit("MengskGoliath", PointFromId(886), PointFromId(893), gv_dominionPatrolLeftGroup);
    lv_patrollers[3] = UnitLastCreated();
    lv_patrollerPointsA[3] = PointFromId(886);
    lv_patrollerPointsB[3] = PointFromId(893);
    gf_CreatePatrolUnit("MengskGoliath", PointFromId(887), PointFromId(894), gv_dominionPatrolLeftGroup);
    lv_patrollers[4] = UnitLastCreated();
    lv_patrollerPointsA[4] = PointFromId(887);
    lv_patrollerPointsB[4] = PointFromId(894);
    Wait(2.0, c_timeGame);
    while (true) {
        autoBECF3AAF_ae = 4;
        autoBECF3AAF_ai = 1;
        lv_i = 1;
        for ( ; ( (autoBECF3AAF_ai >= 0 && lv_i <= autoBECF3AAF_ae) || (autoBECF3AAF_ai <= 0 && lv_i >= autoBECF3AAF_ae) ) ; lv_i += autoBECF3AAF_ai ) {
            if ((UnitGetOwner(lv_patrollers[lv_i]) != gv_PLAYER_01_USER)) {
                UnitIssueOrder(lv_patrollers[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), lv_patrollerPointsB[lv_i]), c_orderQueueReplace);
            }
            else {
                UnitGroupRemove(gv_dominionPatrolLeftGroup, lv_patrollers[lv_i]);
            }
        }
        Wait(10.0, c_timeAI);
        auto75779DAB_ae = 4;
        auto75779DAB_ai = 1;
        lv_i = 1;
        for ( ; ( (auto75779DAB_ai >= 0 && lv_i <= auto75779DAB_ae) || (auto75779DAB_ai <= 0 && lv_i >= auto75779DAB_ae) ) ; lv_i += auto75779DAB_ai ) {
            if ((UnitGetOwner(lv_patrollers[lv_i]) != gv_PLAYER_01_USER)) {
                UnitIssueOrder(lv_patrollers[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), lv_patrollerPointsA[lv_i]), c_orderQueueReplace);
            }
            else {
                UnitGroupRemove(gv_dominionPatrolLeftGroup, lv_patrollers[lv_i]);
            }
        }
        Wait(10.0, c_timeAI);
        if ((UnitGroupCount(gv_dominionPatrolLeftGroup, c_unitCountAlive) == 0)) {
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateDominionPatrolLeftSide_Init () {
    gt_CreateDominionPatrolLeftSide = TriggerCreate("gt_CreateDominionPatrolLeftSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Control
//--------------------------------------------------------------------------------------------------
bool gt_BridgeControl_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(14)));
    ActorSend(ActorFromDoodad(DoodadFromId(1817)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1816)), "SetVisibility");
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(15)));
    ActorSend(ActorFromDoodad(DoodadFromId(1815)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1814)), "SetVisibility");
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(29)));
    ActorSend(ActorFromDoodad(DoodadFromId(1813)), "SetVisibility");
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(30)));
    ActorSend(ActorFromDoodad(DoodadFromId(1812)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1811)), "SetVisibility");
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(33)));
    ActorSend(ActorFromDoodad(DoodadFromId(1810)), "SetVisibility");
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(34)));
    ActorSend(ActorFromDoodad(DoodadFromId(1809)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1808)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1807)), "SetVisibility");
    libNtve_gf_PauseUnit(UnitFromId(47), false);
    UnitIssueOrder(UnitFromId(47), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeControl_Init () {
    gt_BridgeControl = TriggerCreate("gt_BridgeControl_Func");
    TriggerAddEventUnitDied(gt_BridgeControl, UnitRefFromUnit(UnitFromId(1800)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Left 2 Deactivate
//--------------------------------------------------------------------------------------------------
bool gt_DominionLeft2Deactivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_PLAYER_03_DOMINION_BLUE, RegionFromId(23), false);
    AIAttackWaveSetGatherPoint(gv_PLAYER_03_DOMINION_BLUE, PointFromId(793));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionLeft2Deactivate_Init () {
    gt_DominionLeft2Deactivate = TriggerCreate("gt_DominionLeft2Deactivate_Func");
    TriggerAddEventUnitDied(gt_DominionLeft2Deactivate, UnitRefFromUnit(UnitFromId(121)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Right 1 Deactivate
//--------------------------------------------------------------------------------------------------
bool gt_DominionRight1Deactivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_PLAYER_04_DOMINION_PURPLE, RegionFromId(20), false);
    AIAttackWaveSetGatherPoint(gv_PLAYER_04_DOMINION_PURPLE, PointFromId(812));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionRight1Deactivate_Init () {
    gt_DominionRight1Deactivate = TriggerCreate("gt_DominionRight1Deactivate_Func");
    TriggerAddEventUnitDied(gt_DominionRight1Deactivate, UnitRefFromUnit(UnitFromId(7)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Right 2 Deactivate
//--------------------------------------------------------------------------------------------------
bool gt_DominionRight2Deactivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_PLAYER_04_DOMINION_PURPLE, RegionFromId(22), false);
    AIAttackWaveSetGatherPoint(gv_PLAYER_04_DOMINION_PURPLE, PointFromId(973));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionRight2Deactivate_Init () {
    gt_DominionRight2Deactivate = TriggerCreate("gt_DominionRight2Deactivate_Func");
    TriggerAddEventUnitDied(gt_DominionRight2Deactivate, UnitRefFromUnit(UnitFromId(95)));
    TriggerAddEventUnitDied(gt_DominionRight2Deactivate, UnitRefFromUnit(UnitFromId(625)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Middle 1 Deactivate
//--------------------------------------------------------------------------------------------------
bool gt_DominionMiddle1Deactivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_PLAYER_02_DOMINION_RED, RegionFromId(2), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionMiddle1Deactivate_Init () {
    gt_DominionMiddle1Deactivate = TriggerCreate("gt_DominionMiddle1Deactivate_Func");
    TriggerAddEventUnitDied(gt_DominionMiddle1Deactivate, UnitRefFromUnit(UnitFromId(2395)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Middle 2 Deactivate
//--------------------------------------------------------------------------------------------------
bool gt_DominionMiddle2Deactivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_PLAYER_02_DOMINION_RED, RegionFromId(32), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionMiddle2Deactivate_Init () {
    gt_DominionMiddle2Deactivate = TriggerCreate("gt_DominionMiddle2Deactivate_Func");
    TriggerAddEventUnitDied(gt_DominionMiddle2Deactivate, UnitRefFromUnit(UnitFromId(91)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Palace Ping
//--------------------------------------------------------------------------------------------------
bool gt_CreatePalacePing_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(675)), StringExternal("Param/Value/1EB92790"));
    gv_palaceGatePing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePalacePing_Init () {
    gt_CreatePalacePing = TriggerCreate("gt_CreatePalacePing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Right 1 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionRight1DestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_PLAYER_04_DOMINION_PURPLE, RegionFromId(20), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionRight1DestroyedQ_Init () {
    gt_DominionRight1DestroyedQ = TriggerCreate("gt_DominionRight1DestroyedQ_Func");
    TriggerAddEventTimePeriodic(gt_DominionRight1DestroyedQ, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Left 2 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionLeft2DestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_PLAYER_03_DOMINION_BLUE, RegionFromId(23), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionLeft2DestroyedQ_Init () {
    gt_DominionLeft2DestroyedQ = TriggerCreate("gt_DominionLeft2DestroyedQ_Func");
    TriggerAddEventTimePeriodic(gt_DominionLeft2DestroyedQ, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Palace Gate at 90%
//--------------------------------------------------------------------------------------------------
bool gt_PalaceGateat90_Func (bool testConds, bool runActions) {
    int auto70C8CF3C_n;
    int auto70C8CF3C_i;
    int autoF6C2E039_n;
    int autoF6C2E039_i;
    int auto3F680807_n;
    int auto3F680807_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(UnitFromId(675), c_unitPropLifePercent, c_unitPropCurrent) < 90.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionPalaceGateat90Q, true, false);
    auto70C8CF3C_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (auto70C8CF3C_i = 1; auto70C8CF3C_i <= auto70C8CF3C_n; auto70C8CF3C_i += 1) {
        UnitCreate(3, "MengskMarine", 0, gv_PLAYER_02_DOMINION_RED, PointFromId(690), 225.0);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, RegionRandomPoint(RegionFromId(25)), UnitLastCreatedGroup(), false, gv_PLAYER_02_DOMINION_RED);
        Wait(0.5, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    autoF6C2E039_n = libHots_gf_DifficultyValueInt2(2, 2, 3);
    for (autoF6C2E039_i = 1; autoF6C2E039_i <= autoF6C2E039_n; autoF6C2E039_i += 1) {
        UnitCreate(3, "MengskMarine", 0, gv_PLAYER_02_DOMINION_RED, PointFromId(690), 225.0);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, RegionRandomPoint(RegionFromId(25)), UnitLastCreatedGroup(), false, gv_PLAYER_02_DOMINION_RED);
        Wait(0.5, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    auto3F680807_n = libHots_gf_DifficultyValueInt2(2, 2, 3);
    for (auto3F680807_i = 1; auto3F680807_i <= auto3F680807_n; auto3F680807_i += 1) {
        UnitCreate(3, "MengskMarine", 0, gv_PLAYER_02_DOMINION_RED, PointFromId(690), 225.0);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, RegionRandomPoint(RegionFromId(25)), UnitLastCreatedGroup(), false, gv_PLAYER_02_DOMINION_RED);
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PalaceGateat90_Init () {
    gt_PalaceGateat90 = TriggerCreate("gt_PalaceGateat90_Func");
    TriggerAddEventUnitAttacked(gt_PalaceGateat90, UnitRefFromUnit(UnitFromId(675)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Palace Gate at 90% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPalaceGateat90Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPalaceGateat90Q_Init () {
    gt_TransmissionPalaceGateat90Q = TriggerCreate("gt_TransmissionPalaceGateat90Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Palace Gate at 50%
//--------------------------------------------------------------------------------------------------
bool gt_PalaceGateat50_Func (bool testConds, bool runActions) {
    int auto155F6FD0_n;
    int auto155F6FD0_i;
    int auto69AC3BCE_n;
    int auto69AC3BCE_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(UnitFromId(675), c_unitPropLifePercent, c_unitPropCurrent) < 50.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionPalaceGateat50Q, true, false);
    auto155F6FD0_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (auto155F6FD0_i = 1; auto155F6FD0_i <= auto155F6FD0_n; auto155F6FD0_i += 1) {
        UnitCreate(2, "MengskMarauder", 0, gv_PLAYER_02_DOMINION_RED, PointFromId(690), 225.0);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, RegionRandomPoint(RegionFromId(25)), UnitLastCreatedGroup(), false, gv_PLAYER_02_DOMINION_RED);
        Wait(0.5, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    auto69AC3BCE_n = libHots_gf_DifficultyValueInt2(3, 3, 4);
    for (auto69AC3BCE_i = 1; auto69AC3BCE_i <= auto69AC3BCE_n; auto69AC3BCE_i += 1) {
        UnitCreate(3, "MengskMarine", 0, gv_PLAYER_02_DOMINION_RED, PointFromId(690), 225.0);
        libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Terran, RegionRandomPoint(RegionFromId(25)), UnitLastCreatedGroup(), false, gv_PLAYER_02_DOMINION_RED);
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PalaceGateat50_Init () {
    gt_PalaceGateat50 = TriggerCreate("gt_PalaceGateat50_Func");
    TriggerAddEventUnitAttacked(gt_PalaceGateat50, UnitRefFromUnit(UnitFromId(675)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Palace Gate at 50% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPalaceGateat50Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPalaceGateat50Q_Init () {
    gt_TransmissionPalaceGateat50Q = TriggerCreate("gt_TransmissionPalaceGateat50Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Trigger
//--------------------------------------------------------------------------------------------------
bool gt_HyperionTrigger_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_PLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_PLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionTrigger_Init () {
    gt_HyperionTrigger = TriggerCreate("gt_HyperionTrigger_Func");
    TriggerAddEventUnitRegion(gt_HyperionTrigger, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveCreate, true, true);
    Wait(6.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00115", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00116", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00146", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionIntroQ_Init () {
    gt_HyperionIntroQ = TriggerCreate("gt_HyperionIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Attacked
//--------------------------------------------------------------------------------------------------
bool gt_HyperionAttacked_Func (bool testConds, bool runActions) {
    int auto3DF5FCC4_n;
    int auto3DF5FCC4_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) != gv_PLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_hyperionFirstAttackTransmision == false)) {
        gv_hyperionFirstAttackTransmision = true;
        TriggerExecute(gt_HyperionAttackedFirstTimeQ, true, true);
    }
    else {
        TriggerExecute(gt_HyperionAttackedQ, true, true);
    }
    Wait(10.0, c_timeAI);
    auto3DF5FCC4_n = 50;
    for (auto3DF5FCC4_i = 1; auto3DF5FCC4_i <= auto3DF5FCC4_n; auto3DF5FCC4_i += 1) {
        if ((UnitGetPropertyFixed(gv_hYPERION, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
            TriggerExecute(gt_HyperionLowHealthQ, true, true);
            Wait(30.0, c_timeAI);
            break;
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionAttacked_Init () {
    gt_HyperionAttacked = TriggerCreate("gt_HyperionAttacked_Func");
    TriggerAddEventUnitAttacked(gt_HyperionAttacked, UnitRefFromVariable("gv_hYPERION"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionAttackedQ_Func (bool testConds, bool runActions) {
    int auto882E661D_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_PLAYER_01_USER, StringExternal("Param/Value/A0FB34D1"), null, UnitGetPosition(gv_hYPERION));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_hYPERION), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto882E661D_val = RandomInt(1, 3);
    if (auto882E661D_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00071", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto882E661D_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00072", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto882E661D_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00073", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionAttackedQ_Init () {
    gt_HyperionAttackedQ = TriggerCreate("gt_HyperionAttackedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Attacked First Time Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionAttackedFirstTimeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_PLAYER_01_USER, StringExternal("Param/Value/AF9EB277"), null, UnitGetPosition(gv_hYPERION));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_hYPERION), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00118", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00117", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionAttackedFirstTimeQ_Init () {
    gt_HyperionAttackedFirstTimeQ = TriggerCreate("gt_HyperionAttackedFirstTimeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Low Health Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionLowHealthQ_Func (bool testConds, bool runActions) {
    int auto91565E32_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_PLAYER_01_USER, StringExternal("Param/Value/AA33E61F"), null, UnitGetPosition(gv_hYPERION));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_hYPERION), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto91565E32_val = RandomInt(1, 2);
    if (auto91565E32_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00074", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto91565E32_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00088", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionLowHealthQ_Init () {
    gt_HyperionLowHealthQ = TriggerCreate("gt_HyperionLowHealthQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion SCV Respawn
//--------------------------------------------------------------------------------------------------
bool gt_HyperionSCVRespawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(gv_hYPERION) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("SCV", gv_PLAYER_07_DOMINION_GREEN22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "SCV", 0, gv_PLAYER_07_DOMINION_GREEN22, PointFromId(2), 315.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionSCVRespawn_Init () {
    gt_HyperionSCVRespawn = TriggerCreate("gt_HyperionSCVRespawn_Func");
    TriggerAddEventTimePeriodic(gt_HyperionSCVRespawn, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Big Attack 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBigAttack1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;
    int lv_skipTimer;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(625.0, c_timeAI);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/DD0C4B19"));
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00075", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00070", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (true) {
        lv_skipTimer += 1;
        if ((lv_skipTimer > 30)) {
            return true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroup(null, gv_PLAYER_02_DOMINION_RED, RegionCircle(PointFromId(809), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            return true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroup("MengskVikingFighter", gv_PLAYER_02_DOMINION_RED, RegionCircle(PointFromId(809), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive) >= 3)) {
            break;
        }
        else {
        }
        if ((gv_player2WavesSent >= 5)) {
            break;
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(809), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lv_attackGroup));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/47B5F2AE"));
    while (true) {
        lv_skipTimer += 1;
        if ((lv_skipTimer > 60)) {
            PingDestroy(PingLastCreated());
            return true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroup(null, gv_PLAYER_02_DOMINION_RED, RegionCircle(PointFromId(809), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            PingDestroy(PingLastCreated());
            return true;
        }
        else {
        }
        if ((gv_player2WavesSent >= 5)) {
            break;
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    lv_attackGroup = AIGetUnitsInWavesWithTarget(gv_PLAYER_02_DOMINION_RED, AIWaveTargetPoint(PointFromId(2)));
    UnitGroupLoopBegin(lv_attackGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "MengskVikingFighter") && (UnitGetType(UnitGroupLoopCurrent()) != "MengskVikingAssault") && (UnitGetType(UnitGroupLoopCurrent()) != "MengskBanshee")) {
            UnitGroupRemove(lv_attackGroup, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true)) {
        PingDestroy(PingLastCreated());
        return true;
    }
    else {
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lv_attackGroup));
    }
    while (true) {
        Wait(0.2, c_timeAI);
        UnitGroupLoopBegin(lv_attackGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetOwner(UnitGroupLoopCurrent()) != gv_PLAYER_02_DOMINION_RED)) {
                UnitGroupRemove(lv_attackGroup, UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if (((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true) || (gv_gameOver == true))) {
            PingDestroy(PingLastCreated());
            return true;
        }
        else {
        }
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lv_attackGroup));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBigAttack1Q_Init () {
    gt_HyperionBigAttack1Q = TriggerCreate("gt_HyperionBigAttack1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Big Attack 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBigAttack2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;
    int lv_skipTimer;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(910.0, c_timeAI);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3CD8D145"));
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00089", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00081", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (true) {
        lv_skipTimer += 1;
        if ((lv_skipTimer > 30)) {
            return true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroup(null, gv_PLAYER_02_DOMINION_RED, RegionCircle(PointFromId(809), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            return true;
        }
        else {
        }
        if (((UnitGroupCount(UnitGroup("MengskSiegeTank", gv_PLAYER_02_DOMINION_RED, RegionCircle(PointFromId(809), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("MengskSiegeTankSieged", gv_PLAYER_02_DOMINION_RED, RegionCircle(PointFromId(809), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2), c_unitCountAlive) >= 1))) {
            break;
        }
        else {
        }
        if ((gv_player2WavesSent >= 8)) {
            break;
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(809), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lv_attackGroup));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5AF16DC3"));
    while (true) {
        lv_skipTimer += 1;
        if ((lv_skipTimer > 60)) {
            PingDestroy(PingLastCreated());
            return true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroup(null, gv_PLAYER_02_DOMINION_RED, RegionCircle(PointFromId(809), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            PingDestroy(PingLastCreated());
            return true;
        }
        else {
        }
        if ((gv_player2WavesSent >= 8)) {
            break;
        }
        else {
        }
        Wait(1.0, c_timeAI);
    }
    lv_attackGroup = AIGetUnitsInWavesWithTarget(gv_PLAYER_02_DOMINION_RED, AIWaveTargetPoint(PointFromId(2)));
    UnitGroupLoopBegin(lv_attackGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "MengskSiegeTankSieged") && (UnitGetType(UnitGroupLoopCurrent()) != "MengskSiegeTank") && (UnitGetType(UnitGroupLoopCurrent()) != "MengskMarine") && (UnitGetType(UnitGroupLoopCurrent()) != "MengskBC")) {
            UnitGroupRemove(lv_attackGroup, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true)) {
        PingDestroy(PingLastCreated());
        return true;
    }
    else {
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lv_attackGroup));
    }
    while (true) {
        Wait(0.2, c_timeAI);
        UnitGroupLoopBegin(lv_attackGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetOwner(UnitGroupLoopCurrent()) != gv_PLAYER_02_DOMINION_RED)) {
                UnitGroupRemove(lv_attackGroup, UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if (((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true) || (gv_gameOver == true))) {
            PingDestroy(PingLastCreated());
            return true;
        }
        else {
        }
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lv_attackGroup));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBigAttack2Q_Init () {
    gt_HyperionBigAttack2Q = TriggerCreate("gt_HyperionBigAttack2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Big Attack 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionBigAttack3Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1350.0, c_timeAI);
    while (true) {
        if ((UnitIsAlive(UnitFromId(603)) == false)) {
            return true;
        }
        else {
            if ((UnitGroupCount(UnitGroupAlliance(gv_PLAYER_02_DOMINION_RED, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(UnitFromId(603)), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                break;
            }
            else {
            }
        }
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(603)) == false)) {
        return true;
    }
    else {
    }
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/57AE1FF8"));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00094", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((UnitIsAlive(UnitFromId(603)) == true)) {
        gv_odinSent = true;
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitFromId(603)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetUnit(PingLastCreated(), UnitFromId(603));
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E2051C14"));
        PingSetScale(PingLastCreated(), 0.8);
        gv_odinPing = PingLastCreated();
    }
    else {
    }
    libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00095", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00083", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00093", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionBigAttack3Q_Init () {
    gt_HyperionBigAttack3Q = TriggerCreate("gt_HyperionBigAttack3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_OdinDiesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AchievementDestroytheOdinH, true, false);
    }
    else {
    }
    if ((gv_odinSent == true)) {
        PingDestroy(gv_odinPing);
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00150", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00154", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00153", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinDiesQ_Init () {
    gt_OdinDiesQ = TriggerCreate("gt_OdinDiesQ_Func");
    TriggerAddEventUnitDied(gt_OdinDiesQ, UnitRefFromUnit(UnitFromId(603)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Attack Prep Timing
//--------------------------------------------------------------------------------------------------
bool gt_RaynorAttackPrepTiming_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(270.0, c_timeAI);
    while (true) {
        Wait(300.0, c_timeAI);
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        TriggerExecute(gt_RaynorAttackPrepQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorAttackPrepTiming_Init () {
    gt_RaynorAttackPrepTiming = TriggerCreate("gt_RaynorAttackPrepTiming_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Attack Prep Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorAttackPrepQ_Func (bool testConds, bool runActions) {
    int auto38482614_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((PlayerGetPropertyInt(gv_PLAYER_07_DOMINION_GREEN22, c_playerPropSuppliesUsed) >= 20) && (UnitGroupCount(UnitGroup(null, gv_PLAYER_02_DOMINION_RED, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3) && (UnitGroupCount(UnitGroup(null, gv_PLAYER_03_DOMINION_BLUE, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3) && (UnitGroupCount(UnitGroup(null, gv_PLAYER_04_DOMINION_PURPLE, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3) && (UnitGroupCount(UnitGroup(null, gv_PLAYER_05_DOMINION_TEAL, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3) && (UnitGroupCount(UnitGroup("Odin", c_playerAny, RegionCircle(PointFromId(2), 48.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        UIAlertPoint("Trigger", gv_PLAYER_01_USER, StringExternal("Param/Value/7ACFB4DF"), null, PointFromId(627));
        MinimapPing(PlayerGroupAll(), PointFromId(627), 5.0, Color(0.00, 0.00, 100.00));
        Wait(1.0, c_timeReal);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        auto38482614_val = RandomInt(1, 3);
        if (auto38482614_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00122", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto38482614_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00123", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto38482614_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(gv_hYPERION, "zMission_Korhal03|Line00120", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorAttackPrepQ_Init () {
    gt_RaynorAttackPrepQ = TriggerCreate("gt_RaynorAttackPrepQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Total Hyperion Damage
//--------------------------------------------------------------------------------------------------
bool gt_TotalHyperionDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hyperionDamaged = true;
    gv_totalHyperionDamage += EventUnitDamageAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TotalHyperionDamage_Init () {
    gt_TotalHyperionDamage = TriggerCreate("gt_TotalHyperionDamage_Func");
    TriggerAddEventUnitDamaged(gt_TotalHyperionDamage, UnitRefFromVariable("gv_hYPERION"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_PLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/6AA01F1B"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Hyperion Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatHyperionDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveFailed, true, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/12CCDD76"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatHyperionDies_Init () {
    gt_DefeatHyperionDies = TriggerCreate("gt_DefeatHyperionDies_Func");
    TriggerAddEventUnitDied(gt_DefeatHyperionDies, UnitRefFromVariable("gv_hYPERION"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Palace Gate Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyPalaceGateCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyPalaceGateCompleted_Init () {
    gt_VictoryDestroyPalaceGateCompleted = TriggerCreate("gt_VictoryDestroyPalaceGateCompleted_Func");
    TriggerAddEventUnitDied(gt_VictoryDestroyPalaceGateCompleted, UnitRefFromUnit(UnitFromId(675)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TimerPause(gv_achievementTimedRunTimer, true);
    UnitGroupLoopBegin(gv_palaceTurrets);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, false);
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    libNtve_gf_MakeUnitInvulnerable(gv_hYPERION, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyPalaceGateComplete, true, true);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveRescueBrood223) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZKorhal03_1", gv_PLAYER_01_USER);
    }
    else {
    }
    TriggerExecute(gt_AchievementHyperionDamageTaken, true, false);
    TriggerExecute(gt_AchievementTimedRunNH, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B4B4E180"), IntToText(gv_kerriganKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6BF797B1"), FixedToText(gv_totalHyperionDamage, 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/CEB82674"), IntToText(PlayerScoreValueGetAsInt(gv_PLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/56D863DF"), IntToText(gv_largestZergForce));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F74B6456"), IntToText(gv_raynorKills));
    libSwaC_gf_EndCampaignMission(gv_PLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_PLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_PLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_PLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Aborts Mission
//--------------------------------------------------------------------------------------------------
bool gt_PlayerAbortsMission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerAbortsMission_Init () {
    gt_PlayerAbortsMission = TriggerCreate("gt_PlayerAbortsMission_Func");
    TriggerAddEventAbortMission(gt_PlayerAbortsMission, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Hyperion Damage Taken
//--------------------------------------------------------------------------------------------------
bool gt_AchievementHyperionDamageTaken_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_hyperionDamaged == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKorhal03_2", gv_PLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementHyperionDamageTaken_Init () {
    gt_AchievementHyperionDamageTaken = TriggerCreate("gt_AchievementHyperionDamageTaken_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Timed Run  N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimedRunNH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_achievementTimedRunTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKorhal03_3", gv_PLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimedRunNH_Init () {
    gt_AchievementTimedRunNH = TriggerCreate("gt_AchievementTimedRunNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy the Odin H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroytheOdinH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_odinSent == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Korhal3", gv_PLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroytheOdinH_Init () {
    gt_AchievementDestroytheOdinH = TriggerCreate("gt_AchievementDestroytheOdinH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Largest Zerg Force
//--------------------------------------------------------------------------------------------------
bool gt_LargestZergForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentForce;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentForce = PlayerScoreValueGetAsInt(gv_PLAYER_01_USER, "UnitsActiveCount");
    if ((lv_currentForce > gv_largestZergForce)) {
        gv_largestZergForce = lv_currentForce;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LargestZergForce_Init () {
    gt_LargestZergForce = TriggerCreate("gt_LargestZergForce_Func");
    TriggerAddEventTimePeriodic(gt_LargestZergForce, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Kills
//--------------------------------------------------------------------------------------------------
bool gt_RaynorKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_PLAYER_07_DOMINION_GREEN22))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_raynorKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorKills_Init () {
    gt_RaynorKills = TriggerCreate("gt_RaynorKills_Func");
    TriggerAddEventUnitDied(gt_RaynorKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_waves_run(gv_PLAYER_02_DOMINION_RED, PlayerGroupSingle(gv_PLAYER_01_USER));
    cai_waves_run(gv_PLAYER_03_DOMINION_BLUE, PlayerGroupSingle(gv_PLAYER_01_USER));
    cai_waves_run(gv_PLAYER_04_DOMINION_PURPLE, PlayerGroupSingle(gv_PLAYER_01_USER));
    cai_waves_run(gv_PLAYER_05_DOMINION_TEAL, PlayerGroupSingle(gv_PLAYER_01_USER));
    cai_waves_run(gv_PLAYER_07_DOMINION_GREEN22, PlayerGroupSingle(gv_PLAYER_01_USER));
    cai_waves_run(gv_pLAYER_08_IZSHA, PlayerGroupSingle(gv_PLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_PLAYER_03_DOMINION_BLUE, PointFromId(792));
    AIAttackWaveSetGatherPoint(gv_PLAYER_04_DOMINION_PURPLE, PointFromId(794));
    AINearestTownBullyRebuild(gv_PLAYER_02_DOMINION_RED, true);
    libNtve_gf_SetTacticalAIThink(gv_PLAYER_02_DOMINION_RED, "MengskDiamondback", "AIDiamondback", false);
    libNtve_gf_SetTacticalAIThink(gv_PLAYER_03_DOMINION_BLUE, "MengskDiamondback", "AIDiamondback", false);
    libNtve_gf_SetTacticalAIThink(gv_PLAYER_04_DOMINION_PURPLE, "MengskDiamondback", "AIDiamondback", false);
    libNtve_gf_SetTacticalAIThink(gv_PLAYER_05_DOMINION_TEAL, "MengskDiamondback", "AIDiamondback", false);
    TriggerExecute(gt_HyperionBigAttack1Q, true, false);
    TriggerExecute(gt_HyperionBigAttack2Q, true, false);
    TriggerExecute(gt_HyperionBigAttack3Q, true, false);
    TriggerExecute(gt_CreateDominionPatrolRightSide, true, false);
    TriggerExecute(gt_CreateDominionPatrolLeftSide, true, false);
    TriggerExecute(gt_RaynorAttackPrepTiming, true, false);
    AISetAPM(gv_PLAYER_07_DOMINION_GREEN22, 10000);
    AISetDifficulty(gv_PLAYER_07_DOMINION_GREEN22, c_diffAutoLoadBunkers, true);
    AISetDifficulty(gv_PLAYER_07_DOMINION_GREEN22, c_diffRepairDamage, true);
    AISetDefenseRadii(gv_PLAYER_07_DOMINION_GREEN22, 10.0, 50.0, 50.0);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_StartUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_StartUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesNormal_Init () {
    gt_StartUpgradesNormal = TriggerCreate("gt_StartUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(450.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel3", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 10000);
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_PLAYER_07_DOMINION_GREEN22, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_PLAYER_07_DOMINION_GREEN22, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 2 Sends AI Wave
//--------------------------------------------------------------------------------------------------
bool gt_Player2SendsAIWave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_player2WavesSent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Player2SendsAIWave_Init () {
    gt_Player2SendsAIWave = TriggerCreate("gt_Player2SendsAIWave_Func");
    TriggerAddEventPlayerAIWave(gt_Player2SendsAIWave, gv_PLAYER_02_DOMINION_RED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/4964D689"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Palace Gate Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPalaceGateCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal03Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    TriggerExecute(gt_CreatePalacePing, true, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPalaceGateCreate_Init () {
    gt_ObjectiveDestroyPalaceGateCreate = TriggerCreate("gt_ObjectiveDestroyPalaceGateCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Palace Gate Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPalaceGateComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPalaceGateCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal03Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal03Objective01", 1, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPalaceGateComplete_Init () {
    gt_ObjectiveDestroyPalaceGateComplete = TriggerCreate("gt_ObjectiveDestroyPalaceGateComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Palace Gate Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPalaceGateFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPalaceGateCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal03Objective01", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPalaceGateFailed_Init () {
    gt_ObjectiveDestroyPalaceGateFailed = TriggerCreate("gt_ObjectiveDestroyPalaceGateFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hyperion Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHyperionMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal03Objective03");
    gv_objectiveRescueBrood223 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_hYPERION), StringExternal("Param/Value/A9B0DEA9"));
    gv_hyperionPing = PingLastCreated();
    PingSetUnit(gv_hyperionPing, gv_hYPERION);
    PingSetScale(PingLastCreated(), 0.8);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHyperionMustSurviveCreate_Init () {
    gt_ObjectiveHyperionMustSurviveCreate = TriggerCreate("gt_ObjectiveHyperionMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hyperion Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHyperionMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal03Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    PingDestroy(gv_hyperionPing);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal03Objective03", 1, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHyperionMustSurviveComplete_Init () {
    gt_ObjectiveHyperionMustSurviveComplete = TriggerCreate("gt_ObjectiveHyperionMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hyperion Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHyperionMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHyperionMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal03Objective03", libSwaC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHyperionMustSurviveFailed_Init () {
    gt_ObjectiveHyperionMustSurviveFailed = TriggerCreate("gt_ObjectiveHyperionMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Clear Outer Lanes - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearOuterLanesCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal03Objective02");
    gv_objectiveRescueBrood222 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal03Objective02", gv_objectiveRescueBrood2222, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearOuterLanesCreate_Init () {
    gt_ObjectiveClearOuterLanesCreate = TriggerCreate("gt_ObjectiveClearOuterLanesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Clear Outer Lanes - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearOuterLanesUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveClearOuterLanesCreate, true, false);
    gv_objectiveRescueBrood2222 += 1;
    TriggerExecute(gt_ZagaraUpgrades, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal03Objective02", gv_objectiveRescueBrood2222, true, null, true);
    if ((gv_objectiveRescueBrood2222 == 3)) {
        TriggerExecute(gt_ObjectiveClearOuterLanesComplete, true, false);
        TriggerStop(gt_SCVRepairScript);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearOuterLanesUpdate_Init () {
    gt_ObjectiveClearOuterLanesUpdate = TriggerCreate("gt_ObjectiveClearOuterLanesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Clear Outer Lanes - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearOuterLanesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveClearOuterLanesCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal03Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal03Objective02", gv_objectiveRescueBrood2222, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearOuterLanesComplete_Init () {
    gt_ObjectiveClearOuterLanesComplete = TriggerCreate("gt_ObjectiveClearOuterLanesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_PLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libSwaC_gf_SpawnLarvaForHatchery(UnitFromId(2150), 3);
    libNtve_gf_PauseUnit(UnitFromId(2150), true);
    libNtve_gf_PauseUnit(UnitFromId(205), true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_tempPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_IntroMusic, true, false);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(602), 0.0, -1, 10.0, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(607), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal03|Line00008", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal03|Line00019", true), c_soundIndexAny)) + 1), -1, 10.0, true);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundPlay(SoundLink("Korhal03_CS_Open_Terran", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introTerranSound = SoundLastPlayed();
    SoundPlay(SoundLink("Korhal03_CS_Open_Terran_Amb_UnderlayLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introTerranAmb = SoundLastPlayed();
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal03|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal03|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(1049), 0.0, -1, 10, true);
    SoundStop(gv_introTerranSound, false);
    SoundStop(gv_introTerranAmb, false);
    SoundPlay(SoundLink("Korhal03_CS_Open_Zerg", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introZergSound = SoundLastPlayed();
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(969), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal03|Line00015", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal03|Line00016", true), c_soundIndexAny)) -1), -1, 10.0, true);
    UnitGroupLoopBegin(UnitGroup("Overlord", gv_PLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        lv_tempPoint = UnitGetPosition(UnitGroupLoopCurrent());
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(lv_tempPoint, 9.0, AngleBetweenPoints(UnitGetPosition(UnitFromId(2150)), lv_tempPoint)), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    gf_IntroMoveUnits(RegionCircle(PointFromId(1077), 2.0), PointFromId(1079), 2.0);
    gf_IntroMoveUnits(RegionFromId(9), PointFromId(1050), 0.0);
    gf_IntroMoveUnits(RegionFromId(10), PointFromId(1051), 0.0);
    gf_IntroMoveUnits(RegionFromId(11), PointFromId(1055), 0.0);
    gf_IntroMoveUnits(RegionFromId(12), PointFromId(1073), 7.0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Korhal03|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(2150))), c_orderQueueAddToEnd);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Korhal03|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(200), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal03|Line00017", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal03|Line00018", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Korhal03|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Korhal03|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundStop(gv_introZergSound, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
        TriggerExecute(gt_IntroCleanupNotSkipped, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_IntroCleanupSkipped, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup Not Skipped
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupNotSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introMusicCompleted == false)) {
        TriggerStop(gt_IntroMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    libNtve_gf_PauseUnit(gv_hYPERION, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_PLAYER_01_USER, c_playerStateXPGain, true);
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    TriggerExecute(gt_PerformanceHandler, true, false);
    VisExploreArea(gv_PLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    lv_fadeDuration = 2.0;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(907), lv_fadeDuration, -1, 10.0, false);
    Wait(lv_fadeDuration, c_timeGame);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupNotSkipped_Init () {
    gt_IntroCleanupNotSkipped = TriggerCreate("gt_IntroCleanupNotSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup Skipped
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_introTerranSound, true);
    SoundStop(gv_introTerranAmb, true);
    SoundStop(gv_introZergSound, true);
    if ((gv_introMusicCompleted == false)) {
        TriggerStop(gt_IntroMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    libNtve_gf_PauseUnit(gv_hYPERION, true);
    IntLoopBegin(1, gv_numberOfIntroUnits);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitIssueOrder(gv_introUnits[IntLoopCurrent()], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_introUnits[IntLoopCurrent()], gv_introUnitPositions[IntLoopCurrent()], false);
        UnitSetFacing(gv_introUnits[IntLoopCurrent()], gv_introUnitFacings[IntLoopCurrent()], 0.0);
    }
    IntLoopEnd();
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(2150))), c_orderQueueReplace);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_PLAYER_01_USER, c_playerStateXPGain, true);
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    TriggerExecute(gt_PerformanceHandler, true, false);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisExploreArea(gv_PLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    lv_fadeDuration = 1.0;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_PLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(907)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupSkipped_Init () {
    gt_IntroCleanupSkipped = TriggerCreate("gt_IntroCleanupSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZKorhal03MissionIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 20.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.2);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Korhal03|Line00103", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_PLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_PLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_PLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_PLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_PLAYER_03_DOMINION_BLUE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_PLAYER_02_DOMINION_RED, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_hyperionVictims);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_MidHyperionMovement, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(1947), 0.0, -1, 10.0, true);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 15.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 15.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(1948), 18.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00062", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00065", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00063", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00104", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00066", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00100", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00101", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    int auto28258970_n;
    int auto28258970_i;

    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidHyperionMovement);
    if ((gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Barracks", gv_PLAYER_07_DOMINION_GREEN22, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MengskMarine", c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_hyperionVictims);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitRemove(gv_midHyperion);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_PLAYER_07_DOMINION_GREEN22, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    TriggerExecute(gt_PauseUnitsAgain, true, false);
    libNtve_gf_ShowHideUnit(gv_hYPERION, true);
    UnitIssueOrder(gv_hYPERION, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_midHyperion), c_animNameDefault, "Spell E", c_animFlagPlayForever, c_animTimeDefault);
    auto28258970_n = 6;
    for (auto28258970_i = 1; auto28258970_i <= auto28258970_n; auto28258970_i += 1) {
        UnitCreate(1, "WarPig", 0, gv_PLAYER_07_DOMINION_GREEN22, RegionRandomPoint(RegionFromId(26)), 315.0);
    }
    libSwaC_gf_ReviveHeroInstantly(libSwaC_ge_HeroUnit_Kerrigan, false);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeGame);
    UnitCreate(1, "SCV", 0, gv_PLAYER_07_DOMINION_GREEN22, PointFromId(881), 135.0);
    UnitCreate(1, "SCV", 0, gv_PLAYER_07_DOMINION_GREEN22, PointFromId(882), 135.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_PLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAllianceOneWay(gv_PLAYER_07_DOMINION_GREEN22, gv_PLAYER_03_DOMINION_BLUE, libNtve_ge_AllianceSetting_Enemy);
    AIToggleBulliesInRegion(gv_PLAYER_07_DOMINION_GREEN22, RegionFromId(24), true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libNtve_gf_RestoreUnitSelection(gv_PLAYER_01_USER);
    CameraRestore(gv_PLAYER_01_USER, 0.0, -1, 10.0);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_HyperionIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Hyperion Movement
//--------------------------------------------------------------------------------------------------
bool gt_MidHyperionMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAllianceOneWay(gv_PLAYER_07_DOMINION_GREEN22, gv_PLAYER_03_DOMINION_BLUE, libNtve_ge_AllianceSetting_Neutral);
    UnitCreate(1, "Hyperion", 0, gv_PLAYER_07_DOMINION_GREEN22, PointFromId(1945), PointGetFacing(PointFromId(1945)));
    gv_midHyperion = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(gv_midHyperion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_midHyperion, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
    UnitSetPropertyFixed(gv_midHyperion, c_unitPropMovementSpeed, 0.9);
    UnitIssueOrder(gv_midHyperion, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(370))), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_midHyperion), c_animNameDefault, "Stand Work 01", 0, c_animTimeDefault);
    Wait(3.0, c_timeGame);
    libNtve_gf_SetAllianceOneWay(gv_PLAYER_07_DOMINION_GREEN22, gv_PLAYER_03_DOMINION_BLUE, libNtve_ge_AllianceSetting_Enemy);
    while (!((libNtve_gf_UnitInRegion(gv_midHyperion, RegionCircle(UnitGetPosition(UnitFromId(370)), 2.0)) == true))) {
        Wait(0.5, c_timeGame);
    }
    UnitGroupLoopBegin(gv_hyperionVictims);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitCreate(1, "SCV", 0, gv_PLAYER_07_DOMINION_GREEN22, PointFromId(2), 315.0);
    UnitSetHeight(UnitLastCreated(), 4.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 0.0, 0.5);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 3), PointFromId(209)), c_orderQueueReplace);
    SoundPlayAtPoint(SoundLink("Event_Korhal03_BarracksPlacement", -1), PlayerGroupAll(), PointFromId(209), 0.0, 100.0, 0.0);
    Wait(0.5, c_timeGame);
    UnitCreate(1, "SCV", 0, gv_PLAYER_07_DOMINION_GREEN22, PointFromId(2), 315.0);
    UnitSetHeight(UnitLastCreated(), 4.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 0.0, 0.5);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 3), PointFromId(790)), c_orderQueueReplace);
    SoundPlayAtPoint(SoundLink("Event_Korhal03_BarracksPlacement", -1), PlayerGroupAll(), PointFromId(790), 0.0, 100.0, 0.0);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(1949), 4.0, -1, 10.0, true);
    SoundPlayAtPoint(SoundLink("Event_Korhal3_RaynorBattlecruiserLand", -1), PlayerGroupAll(), PointFromId(1945), 0.0, 100.0, 0.0);
    UnitSetHeight(gv_midHyperion, 1.5, 3.0);
    UnitSetFacing(gv_midHyperion, 315.0, 3.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_midHyperion), c_animNameDefault, "Spell D", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_midHyperion), c_animNameDefault, "Spell E", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(1950), 6.0, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHyperionMovement_Init () {
    gt_MidHyperionMovement = TriggerCreate("gt_MidHyperionMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZKorhal03MusicCutscene01_BattleCruiser";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_PLAYER_01_USER);
    PlayerSetState(gv_PLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    gv_kerriganKills = libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent);
    UnitPauseAll(true);
    libNtve_gf_PauseUnit(UnitFromId(675), false);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_PLAYER_04_DOMINION_PURPLE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) != gv_PLAYER_01_USER)) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false)) {
                libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
            }
            else {
            }
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "CreepTumor") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorUsed")) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(675), true);
    if ((UnitIsAlive(UnitFromId(675)) == true)) {
        UnitKill(UnitFromId(675));
        UnitGroupLoopBegin(gv_palaceTurrets);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, false);
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    TriggerExecute(gt_VictoryZerg, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(1113), 0.0, -1, 10.0, true);
    SoundPlay(SoundLink("Korhal03_CS_EndWin_ZergHorde_Quad_Foley_OneShot", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound1 = SoundLastPlayed();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal03MusicCutscene02_MissionVictory", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_PLAYER_01_USER, CameraInfoFromId(1114), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Korhal03|Line00022", true), c_soundIndexAny)) + 1), -1, 10.0, true);
    SoundPlay(SoundLink("Korhal03_CS_EndWin_ZergHorde_Quad_Vox_Loop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound2 = SoundLastPlayed();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Korhal03|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("ZergArmy_Cheer_MassiveRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound3 = SoundLastPlayed();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal03|Line00087", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!((UnitIsAlive(gv_victoryKerrigan) == false))) {
        Wait(0.1, c_timeGame);
    }
    Wait(2.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryZerg);
    SoundStop(gv_victoryZergSound1, true);
    SoundStop(gv_victoryZergSound2, true);
    SoundStop(gv_victoryZergSound3, true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerg_Func (bool testConds, bool runActions) {
    int autoBB637294_n;
    int autoBB637294_i;
    int auto24B9244B_n;
    int auto24B9244B_i;
    int autoC6990152_n;
    int autoC6990152_i;

    // Variable Declarations
    point lv_tempPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoBB637294_n = 32;
    for (autoBB637294_i = 1; autoBB637294_i <= autoBB637294_n; autoBB637294_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_PLAYER_01_USER, RegionRandomPoint(RegionFromId(28)), PointFromId(1084));
        lv_tempPoint = UnitGetPosition(UnitLastCreated());
        UnitSetPosition(UnitLastCreated(), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, AngleBetweenPoints(PointFromId(1084), lv_tempPoint)), false);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
    }
    auto24B9244B_n = 8;
    for (auto24B9244B_i = 1; auto24B9244B_i <= auto24B9244B_n; auto24B9244B_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Hydralisk", 0, gv_PLAYER_01_USER, RegionRandomPoint(RegionFromId(28)), PointFromId(1084));
        lv_tempPoint = UnitGetPosition(UnitLastCreated());
        UnitSetPosition(UnitLastCreated(), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, AngleBetweenPoints(PointFromId(1084), lv_tempPoint)), false);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
        libNtve_gf_UnitCreateFacingPoint(1, "Roach", 0, gv_PLAYER_01_USER, RegionRandomPoint(RegionFromId(28)), PointFromId(1084));
        lv_tempPoint = UnitGetPosition(UnitLastCreated());
        UnitSetPosition(UnitLastCreated(), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, AngleBetweenPoints(PointFromId(1084), lv_tempPoint)), false);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
    }
    autoC6990152_n = 4;
    for (autoC6990152_i = 1; autoC6990152_i <= autoC6990152_n; autoC6990152_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_PLAYER_01_USER, RegionRandomPoint(RegionFromId(28)), PointFromId(1084));
        lv_tempPoint = UnitGetPosition(UnitLastCreated());
        UnitSetPosition(UnitLastCreated(), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, AngleBetweenPoints(PointFromId(1084), lv_tempPoint)), false);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
        libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, gv_PLAYER_01_USER, RegionRandomPoint(RegionFromId(28)), PointFromId(1084));
        lv_tempPoint = UnitGetPosition(UnitLastCreated());
        UnitSetPosition(UnitLastCreated(), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 8.0, AngleBetweenPoints(PointFromId(1084), lv_tempPoint)), false);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
    }
    libSwaC_gf_CreateHero2(PointFromId(1083), gv_PLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(1083)), 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_victoryKerrigan = UnitLastCreated();
    UnitBehaviorAdd(gv_victoryKerrigan, "KerriganWalk", gv_victoryKerrigan, 1);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1084)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(PointFromId(1084), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "SuppressCollision", 0, 1);
    }
    UnitGroupLoopEnd();
    while (!((libNtve_gf_UnitInRegion(gv_victoryKerrigan, RegionCircle(PointFromId(1084), 0.5)) == true))) {
        Wait(0.1, c_timeGame);
    }
    UnitRemove(gv_victoryKerrigan);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerg_Init () {
    gt_VictoryZerg = TriggerCreate("gt_VictoryZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PerformanceHandler_Init();
    gt_PauseUnitsAgain_Init();
    gt_ShowMapCheatUsed_Init();
    gt_StartGameQ_Init();
    gt_StartHarvesting_Init();
    gt_EliteForceIntroQ_Init();
    gt_TipEliteForcesQ_Init();
    gt_HandleKerriganDeath_Init();
    gt_KerriganIsKilledQ_Init();
    gt_AugustgradGateIntrosQ_Init();
    gt_AugustgradGateIntroProximity_Init();
    gt_CreateAugustgradGatePings_Init();
    gt_Lane1_Init();
    gt_Lane1SpawnLoop_Init();
    gt_Lane2_Init();
    gt_Lane2SpawnLoop_Init();
    gt_Lane3_Init();
    gt_Lane3SpawnLoop_Init();
    gt_LaneSpectacleStart_Init();
    gt_LanePauseLoop_Init();
    gt_SCVRepairScript_Init();
    gt_Lane1ClearedQ_Init();
    gt_Lane2ClearedQ_Init();
    gt_Lane3ClearedQ_Init();
    gt_ZagaraUpgrades_Init();
    gt_CreateDominionPatrolRightSide_Init();
    gt_CreateDominionPatrolLeftSide_Init();
    gt_BridgeControl_Init();
    gt_DominionLeft2Deactivate_Init();
    gt_DominionRight1Deactivate_Init();
    gt_DominionRight2Deactivate_Init();
    gt_DominionMiddle1Deactivate_Init();
    gt_DominionMiddle2Deactivate_Init();
    gt_CreatePalacePing_Init();
    gt_DominionRight1DestroyedQ_Init();
    gt_DominionLeft2DestroyedQ_Init();
    gt_PalaceGateat90_Init();
    gt_TransmissionPalaceGateat90Q_Init();
    gt_PalaceGateat50_Init();
    gt_TransmissionPalaceGateat50Q_Init();
    gt_HyperionTrigger_Init();
    gt_HyperionIntroQ_Init();
    gt_HyperionAttacked_Init();
    gt_HyperionAttackedQ_Init();
    gt_HyperionAttackedFirstTimeQ_Init();
    gt_HyperionLowHealthQ_Init();
    gt_HyperionSCVRespawn_Init();
    gt_HyperionBigAttack1Q_Init();
    gt_HyperionBigAttack2Q_Init();
    gt_HyperionBigAttack3Q_Init();
    gt_OdinDiesQ_Init();
    gt_RaynorAttackPrepTiming_Init();
    gt_RaynorAttackPrepQ_Init();
    gt_TotalHyperionDamage_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatHyperionDies_Init();
    gt_VictoryDestroyPalaceGateCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_PlayerAbortsMission_Init();
    gt_AchievementHyperionDamageTaken_Init();
    gt_AchievementTimedRunNH_Init();
    gt_AchievementDestroytheOdinH_Init();
    gt_LargestZergForce_Init();
    gt_RaynorKills_Init();
    gt_StartAI_Init();
    gt_StartUpgradesNormal_Init();
    gt_StartUpgradesHard_Init();
    gt_AIGiveResources_Init();
    gt_Player2SendsAIWave_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveDestroyPalaceGateCreate_Init();
    gt_ObjectiveDestroyPalaceGateComplete_Init();
    gt_ObjectiveDestroyPalaceGateFailed_Init();
    gt_ObjectiveHyperionMustSurviveCreate_Init();
    gt_ObjectiveHyperionMustSurviveComplete_Init();
    gt_ObjectiveHyperionMustSurviveFailed_Init();
    gt_ObjectiveClearOuterLanesCreate_Init();
    gt_ObjectiveClearOuterLanesUpdate_Init();
    gt_ObjectiveClearOuterLanesComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanupNotSkipped_Init();
    gt_IntroCleanupSkipped_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidHyperionMovement_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerg_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
