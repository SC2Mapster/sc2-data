//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Crucible
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_BRAKK = 2;
const int gv_pLAYER_03_YAGDRA = 3;
const int gv_pLAYER_04_TYRANNOZOR = 4;
const int gv_pLAYER_05_QUILLGOR = 5;
const int gv_pLAYER_06_LOCUSTS = 6;
const int gv_pLAYER_07_DEHAKA = 7;
const int gv_sPORE_RAY_MAX_COUNT = 5;
const fixed gv_tyrannozorAchievementTime = 60.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_SporeRayPatroller {
    unit lv_sporeRay;
    point[32] lv_patrolRoute;
    int lv_patrolPointCount;
    int lv_currentPatrolPoint;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_chrysalis;
unit gv_kerrigan;
unitgroup gv_playerBase;
bool gv_gameOver;
bool gv_inCinematic;
sound gv_ambienceRain;
string gv_mapMusicTrack;
int gv_poolPing;
unitgroup gv_swarmHostGroup;
unitgroup gv_introAttackUnits;
bool gv_introSwarmHostsRooted;
bool gv_introPrimalEngaged;
revealer gv_poolBeaconRevealer;
int gv_chrysalisPing;
int gv_holdoutTimerWindow;
timer gv_holdoutTimer;
bool gv_stopCeremonialFight;
bool gv_endBrakkSpawns;
int gv_carrionLocustKills;
int gv_spawnLocustsUsed;
unitgroup gv_spawnLocustsMid;
unitgroup gv_spawnLocustsLeft;
unitgroup gv_spawnLocustsRight;
timer gv_spawnLocustsCooldownTimer;
int gv_spawnLocustDialog;
int gv_spawnLocustButton;
unit gv_tyrannozor;
int gv_tyrannozorPing;
revealer gv_tyrannozorRevealer;
unitgroup gv_tyrannozorCritters;
doodad[32] gv_poolBubbles;
int gv_poolBubblesCount;
unitgroup gv_primalCritterAttackers;
unitgroup gv_primalCritterTargets;
gs_RECORD_SporeRayPatroller[16] gv_sporeRayPatrollers;
int gv_lastCreatedSporeRayIndex;
playergroup gv_primalPlayerGroup;
unitgroup gv_airAttackGroup;
bool gv_allowAirHarassment;
bool gv_chrysalisDamaged;
fixed gv_totalChrysalisDamageTaken;
int gv_largestForce;
timer gv_achievementTimedTyrannozorKillTimer;
fixed gv_victoryStatTyrannozorLifeTimer;
int gv_objectiveDestroyDominionBase3;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase4;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
bool gv_introMusicCompleted;
sound gv_introImpactSound1;
sound gv_introImpactSound2;
sound gv_introSteamSound;
unit gv_midKerrigan;
sound gv_midStinger;
sound gv_midQuakeAmbience;
sound gv_midQuake;
sound gv_midFlashback;
sound gv_midWaterwalk;
bool gv_midMusicCompleted;

void InitGlobals () {
    int init_i;
    int init_i1;

    gv_chrysalis = null;
    gv_kerrigan = null;
    gv_playerBase = UnitGroupEmpty();
    gv_gameOver = false;
    gv_inCinematic = false;
    gv_ambienceRain = null;
    gv_mapMusicTrack = null;
    gv_poolPing = c_invalidPingId;
    gv_swarmHostGroup = UnitGroupEmpty();
    gv_introAttackUnits = UnitGroupEmpty();
    gv_introSwarmHostsRooted = false;
    gv_introPrimalEngaged = false;
    gv_poolBeaconRevealer = null;
    gv_chrysalisPing = c_invalidPingId;
    gv_holdoutTimerWindow = c_timerWindowNone;
    gv_holdoutTimer = TimerCreate();
    gv_stopCeremonialFight = false;
    gv_endBrakkSpawns = false;
    gv_carrionLocustKills = 0;
    gv_spawnLocustsUsed = 0;
    gv_spawnLocustsMid = UnitGroupEmpty();
    gv_spawnLocustsLeft = UnitGroupEmpty();
    gv_spawnLocustsRight = UnitGroupEmpty();
    gv_spawnLocustsCooldownTimer = TimerCreate();
    gv_spawnLocustDialog = c_invalidDialogId;
    gv_spawnLocustButton = c_invalidDialogControlId;
    gv_tyrannozor = null;
    gv_tyrannozorPing = c_invalidPingId;
    gv_tyrannozorRevealer = null;
    gv_tyrannozorCritters = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 31) {
        gv_poolBubbles[init_i] = null;
        init_i = init_i + 1;
    }
    gv_poolBubblesCount = 0;
    gv_primalCritterAttackers = UnitGroupEmpty();
    gv_primalCritterTargets = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 15) {
        gv_sporeRayPatrollers[init_i].lv_sporeRay = null;
        init_i1 = 0;
        while (init_i1 <= 31) {
            gv_sporeRayPatrollers[init_i].lv_patrolRoute[init_i1] = null;
            init_i1 = init_i1 + 1;
        }
        gv_sporeRayPatrollers[init_i].lv_patrolPointCount = 0;
        gv_sporeRayPatrollers[init_i].lv_currentPatrolPoint = 1;
        init_i = init_i + 1;
    }
    gv_lastCreatedSporeRayIndex = -1;
    gv_primalPlayerGroup = PlayerGroupEmpty();
    gv_airAttackGroup = UnitGroupEmpty();
    gv_allowAirHarassment = false;
    gv_chrysalisDamaged = false;
    gv_totalChrysalisDamageTaken = 0.0;
    gv_largestForce = 0;
    gv_achievementTimedTyrannozorKillTimer = TimerCreate();
    gv_victoryStatTyrannozorLifeTimer = 0.0;
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase4 = c_invalidObjectiveId;
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicCompleted = false;
    gv_introMusicCompleted = false;
    gv_introImpactSound1 = null;
    gv_introImpactSound2 = null;
    gv_introSteamSound = null;
    gv_midKerrigan = null;
    gv_midStinger = null;
    gv_midQuakeAmbience = null;
    gv_midQuake = null;
    gv_midFlashback = null;
    gv_midWaterwalk = null;
    gv_midMusicCompleted = false;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_GetSwarmHostCount ();
int gf_NumberofRootedSwarmHostsinRegion (region lp_region);
void gf_CreateCarrionLocust (region lp_region);
void gf_OrderPrimaltoAttackCritter (unit lp_primal, unit lp_critter);
void gf_TurnSporeRayintoSporeRayPatroller (unit lp_sporeRay);
void gf_AddPatrolPointtoSporeRayPatroller (point lp_patrolPoint);
void gf_CreatePrimalAttackWave (int lp_zerglings, int lp_hydralisks, int lp_roaches, int lp_ultras, int lp_guardians, int lp_vipers, fixed lp_gatherTime, region lp_gatherRegion, fixed lp_delay);
void gf_SendPrimalAttackWave (unitgroup lp_attackGroup, fixed lp_delay, region lp_gatherRegion);
void gf_CreatePrimalAirWave (int lp_mutas, int lp_player, fixed lp_delay);
void gf_OrderSwarmHoststoUproot (unitgroup lp_swarmHostUnitGroup);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGMidCinematic;
trigger gt_StartGameIntroSectionQ;
trigger gt_SwarmHostQ;
trigger gt_SwarmHostRootIndicator;
trigger gt_PrimalEngagedEarly;
trigger gt_IntroPrimalAttack;
trigger gt_PrimalForcesKilledQ;
trigger gt_KerriganIsCloseQ;
trigger gt_CreateObjectivePingReveal;
trigger gt_KerriganReachesPool;
trigger gt_StartGameMainHoldoutQ;
trigger gt_CreateHoldoutTimer;
trigger gt_ChrysalisPing;
trigger gt_EventSequence;
trigger gt_InitialAttackQ;
trigger gt_YagdraIntroQ;
trigger gt_BrakkYagdraCeremonialFight;
trigger gt_BrakkYagdraQ;
trigger gt_CeremonialFightWarningQ;
trigger gt_YagdraAttacksPlayerQ;
trigger gt_FirstAirWaveQ;
trigger gt_PincerAttackQ;
trigger gt_RocksQ;
trigger gt_RocksDieQ;
trigger gt_BrakkIsDeadQ;
trigger gt__50Q;
trigger gt__75Q;
trigger gt_ChrysalisOpensAnims;
trigger gt__1MinuteRemainingQ;
trigger gt_ChrysalisTakesDamage;
trigger gt_ChrysalisUnderAttackQ;
trigger gt_SwarmHostRootWarningQ;
trigger gt_SpawnLocustsQ;
trigger gt_SpawnLocustsButtonController;
trigger gt_SpawnLocustsButtonClicked;
trigger gt_SpawnLocustsUsed;
trigger gt_SpawnLocustsUsedQ;
trigger gt_CarrionLocustAttacks;
trigger gt_CarrionLocustDissipate;
trigger gt_CarrionLocustKills;
trigger gt_TyrannozorAmbientFighting;
trigger gt_SpawnTyrannozorQ;
trigger gt_TyrannozorLifesteal;
trigger gt_TyrannozorDiesQ;
trigger gt_TyrannozorCritterFleeDeactivate;
trigger gt_TyrannozorCritterFleeActivate;
trigger gt_PoolBubbles;
trigger gt_ZerusCritterAttacks;
trigger gt_SporeRayPatrols;
trigger gt_InitializeSporeRayPatrols;
trigger gt_StartAIIntro;
trigger gt_StartAIHoldout;
trigger gt_StartUpgradesNormal;
trigger gt_StartUpgradesHard;
trigger gt_BrakkAttacks;
trigger gt_YagdraAttacks;
trigger gt_RockBreakingWaves;
trigger gt_RocksBrokenWaves;
trigger gt_ViperAI;
trigger gt_AIIntercept;
trigger gt_TipMissionHelpQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatChrysalisDestroyed;
trigger gt_DefeatKerriganKilled;
trigger gt_VictoryHoldoutCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementCarrionLocustKills;
trigger gt_AchievementChrysalisDamageNH;
trigger gt_AchievementTimedTyrannozorKillH;
trigger gt_LargestForce;
trigger gt_ObjectiveProceedToPoolCreate;
trigger gt_ObjectiveProceedToPoolComplete;
trigger gt_ObjectiveChrysalisMustSurviveCreate;
trigger gt_ObjectiveChrysalisMustSurviveComplete;
trigger gt_ObjectiveChrysalisMustSurviveFailed;
trigger gt_ObjectiveKerriganMustSurviveCreate;
trigger gt_ObjectiveKerriganMustSurviveComplete;
trigger gt_ObjectiveKerriganMustSurviveFailed;
trigger gt_ObjectiveKillTyrannozorCreate;
trigger gt_ObjectiveKillTyrannozorComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZerg;
trigger gt_IntroSwampPlants;
trigger gt_IntroArtosilope;
trigger gt_IntroKerriganDropPod;
trigger gt_IntroSwarmHostDropPods;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidChrysalisAnimations;
trigger gt_MidMusic;
trigger gt_VictoryQ;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_GetSwarmHostCount () {
    // Variable Declarations
    int lv_swarmHostCount;

    // Variable Initialization
    lv_swarmHostCount = 0;

    // Implementation
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHost", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostRooted", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitA", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitARooted", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitABurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitB", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitBRooted", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitBBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    return lv_swarmHostCount;
}

int gf_NumberofRootedSwarmHostsinRegion (region lp_region) {
    // Variable Declarations
    int lv_swarmHostCount;

    // Variable Initialization
    lv_swarmHostCount = 0;

    // Implementation
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostRooted", gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostBurrowed", gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitARooted", gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitABurrowed", gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitBRooted", gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_swarmHostCount += UnitGroupCount(UnitGroup("SwarmHostSplitBBurrowed", gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    return lv_swarmHostCount;
}

trigger auto_gf_CreateCarrionLocust_Trigger = null;
region auto_gf_CreateCarrionLocust_lp_region;

void gf_CreateCarrionLocust (region lp_region) {
    auto_gf_CreateCarrionLocust_lp_region = lp_region;

    if (auto_gf_CreateCarrionLocust_Trigger == null) {
        auto_gf_CreateCarrionLocust_Trigger = TriggerCreate("auto_gf_CreateCarrionLocust_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateCarrionLocust_Trigger, false, false);
}

bool auto_gf_CreateCarrionLocust_TriggerFunc (bool testConds, bool runActions) {
    region lp_region = auto_gf_CreateCarrionLocust_lp_region;

    region autoD09EC7EF_val;

    // Implementation
    UnitCreate(1, "PrimalLocustFlying", 0, gv_pLAYER_06_LOCUSTS, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 0.0);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
    UnitSetHeight(UnitLastCreated(), UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropHeight), 2.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_PauseUnit(UnitLastCreated(), false);
    autoD09EC7EF_val = lp_region;
    if (autoD09EC7EF_val == RegionFromId(33)) {
        UnitGroupAdd(gv_spawnLocustsLeft, UnitLastCreated());
    }
    else if (autoD09EC7EF_val == RegionFromId(32)) {
        UnitGroupAdd(gv_spawnLocustsMid, UnitLastCreated());
    }
    else if (autoD09EC7EF_val == RegionFromId(34)) {
        UnitGroupAdd(gv_spawnLocustsRight, UnitLastCreated());
    }
    else {
    }
    return true;
}

trigger auto_gf_OrderPrimaltoAttackCritter_Trigger = null;
unit auto_gf_OrderPrimaltoAttackCritter_lp_primal;
unit auto_gf_OrderPrimaltoAttackCritter_lp_critter;

void gf_OrderPrimaltoAttackCritter (unit lp_primal, unit lp_critter) {
    auto_gf_OrderPrimaltoAttackCritter_lp_primal = lp_primal;
    auto_gf_OrderPrimaltoAttackCritter_lp_critter = lp_critter;

    if (auto_gf_OrderPrimaltoAttackCritter_Trigger == null) {
        auto_gf_OrderPrimaltoAttackCritter_Trigger = TriggerCreate("auto_gf_OrderPrimaltoAttackCritter_TriggerFunc");
    }

    TriggerExecute(auto_gf_OrderPrimaltoAttackCritter_Trigger, false, false);
}

bool auto_gf_OrderPrimaltoAttackCritter_TriggerFunc (bool testConds, bool runActions) {
    unit lp_primal = auto_gf_OrderPrimaltoAttackCritter_lp_primal;
    unit lp_critter = auto_gf_OrderPrimaltoAttackCritter_lp_critter;

    // Variable Declarations
    point lv_idlePosition;
    bool lv_forceLeash;

    // Variable Initialization
    lv_idlePosition = null;
    lv_forceLeash = false;

    // Implementation
    if (((UnitIsAlive(lp_primal) == false) || (UnitIsAlive(lp_critter) == false))) {
        return true;
    }
    else {
    }
    lv_idlePosition = UnitGetPosition(lp_primal);
    UnitGroupAdd(gv_primalCritterAttackers, lp_primal);
    UnitGroupAdd(gv_primalCritterTargets, lp_critter);
    UnitIssueOrder(lp_primal, OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter), c_orderQueueReplace);
    UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueAddToEnd);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lp_primal) == false)) {
            UnitGroupRemove(gv_primalCritterTargets, lp_critter);
            return true;
        }
        else {
        }
        if (((UnitTestState(lp_primal, c_unitStateIdle) == true) || (UnitOrder(lp_primal, 0) == OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter)) || (UnitOrder(lp_primal, 0) == OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition)) || (UnitOrder(lp_primal, 1) == OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition)))) {
        }
        else {
            UnitGroupRemove(gv_primalCritterTargets, lp_critter);
            UnitGroupRemove(gv_primalCritterAttackers, lp_primal);
            return true;
        }
        if (((UnitIsAlive(lp_critter) == false) || (lv_forceLeash == true) || (DistanceBetweenPoints(UnitGetPosition(lp_critter), UnitGetPosition(lp_primal)) > 7.0))) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_primal), lv_idlePosition) <= 1.0)) {
                AISetUnitScriptControlled(lp_primal, false);
                UnitGroupRemove(gv_primalCritterAttackers, lp_primal);
                UnitGroupRemove(gv_primalCritterTargets, lp_critter);
                return true;
            }
            else {
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueReplace);
            }
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_primal), lv_idlePosition) > 7.0)) {
                lv_forceLeash = true;
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_primal, OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter), c_orderQueueReplace);
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueAddToEnd);
            }
        }
    }
    return true;
}

void gf_TurnSporeRayintoSporeRayPatroller (unit lp_sporeRay) {
    int auto367693C7_ae;
    int auto367693C7_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Implementation
    gv_lastCreatedSporeRayIndex = -1;
    if ((UnitIsAlive(lp_sporeRay) == false)) {
        return ;
    }
    else {
    }
    auto367693C7_ae = gv_sPORE_RAY_MAX_COUNT;
    auto367693C7_ai = 1;
    lv_i = 0;
    while ((auto367693C7_ai >= 0 && lv_i <= auto367693C7_ae) || (auto367693C7_ai <= 0 && lv_i >= auto367693C7_ae)) {
        if (((gv_sporeRayPatrollers[lv_i].lv_sporeRay == null) || (UnitIsAlive(gv_sporeRayPatrollers[lv_i].lv_sporeRay) == false))) {
            gv_lastCreatedSporeRayIndex = lv_i;
            break;
        }
        else {
        }
        if (lv_i == auto367693C7_ae) {
            break;
        }
        lv_i = lv_i + auto367693C7_ai;
    }
    if ((gv_lastCreatedSporeRayIndex == -1)) {
        return ;
    }
    else {
    }
    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_sporeRay = lp_sporeRay;
    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount = 0;
    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_currentPatrolPoint = 1;
    UnitIssueOrder(lp_sporeRay, OrderSetAutoCast(AbilityCommand("CritterFlee", 0), false), c_orderQueueReplace);
    UnitSetPropertyFixed(lp_sporeRay, c_unitPropMovementSpeed, 0.5);
}

void gf_AddPatrolPointtoSporeRayPatroller (point lp_patrolPoint) {
    // Implementation
    if (((gv_lastCreatedSporeRayIndex == -1) || (lp_patrolPoint == null))) {
        return ;
    }
    else {
    }
    if ((gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount == 31)) {
        return ;
    }
    else {
        gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount += 1;
        gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolRoute[gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount] = lp_patrolPoint;
    }
}

trigger auto_gf_CreatePrimalAttackWave_Trigger = null;
int auto_gf_CreatePrimalAttackWave_lp_zerglings;
int auto_gf_CreatePrimalAttackWave_lp_hydralisks;
int auto_gf_CreatePrimalAttackWave_lp_roaches;
int auto_gf_CreatePrimalAttackWave_lp_ultras;
int auto_gf_CreatePrimalAttackWave_lp_guardians;
int auto_gf_CreatePrimalAttackWave_lp_vipers;
fixed auto_gf_CreatePrimalAttackWave_lp_gatherTime;
region auto_gf_CreatePrimalAttackWave_lp_gatherRegion;
fixed auto_gf_CreatePrimalAttackWave_lp_delay;

void gf_CreatePrimalAttackWave (int lp_zerglings, int lp_hydralisks, int lp_roaches, int lp_ultras, int lp_guardians, int lp_vipers, fixed lp_gatherTime, region lp_gatherRegion, fixed lp_delay) {
    auto_gf_CreatePrimalAttackWave_lp_zerglings = lp_zerglings;
    auto_gf_CreatePrimalAttackWave_lp_hydralisks = lp_hydralisks;
    auto_gf_CreatePrimalAttackWave_lp_roaches = lp_roaches;
    auto_gf_CreatePrimalAttackWave_lp_ultras = lp_ultras;
    auto_gf_CreatePrimalAttackWave_lp_guardians = lp_guardians;
    auto_gf_CreatePrimalAttackWave_lp_vipers = lp_vipers;
    auto_gf_CreatePrimalAttackWave_lp_gatherTime = lp_gatherTime;
    auto_gf_CreatePrimalAttackWave_lp_gatherRegion = lp_gatherRegion;
    auto_gf_CreatePrimalAttackWave_lp_delay = lp_delay;

    if (auto_gf_CreatePrimalAttackWave_Trigger == null) {
        auto_gf_CreatePrimalAttackWave_Trigger = TriggerCreate("auto_gf_CreatePrimalAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreatePrimalAttackWave_Trigger, false, false);
}

bool auto_gf_CreatePrimalAttackWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_zerglings = auto_gf_CreatePrimalAttackWave_lp_zerglings;
    int lp_hydralisks = auto_gf_CreatePrimalAttackWave_lp_hydralisks;
    int lp_roaches = auto_gf_CreatePrimalAttackWave_lp_roaches;
    int lp_ultras = auto_gf_CreatePrimalAttackWave_lp_ultras;
    int lp_guardians = auto_gf_CreatePrimalAttackWave_lp_guardians;
    int lp_vipers = auto_gf_CreatePrimalAttackWave_lp_vipers;
    fixed lp_gatherTime = auto_gf_CreatePrimalAttackWave_lp_gatherTime;
    region lp_gatherRegion = auto_gf_CreatePrimalAttackWave_lp_gatherRegion;
    fixed lp_delay = auto_gf_CreatePrimalAttackWave_lp_delay;

    int init_i;

    int auto0B88CCA0_n;
    int auto0B88CCA0_i;
    int autoAF97729B_n;
    int autoAF97729B_i;
    int auto5FCD62D4_n;
    int auto5FCD62D4_i;
    int auto49FC8895_n;
    int auto49FC8895_i;
    int auto950E99D6_n;
    int auto950E99D6_i;
    int auto374DD16F_n;
    int auto374DD16F_i;
    region autoE8DFA1D3_val;
    int auto67E41EAA_ae;
    int auto67E41EAA_ai;

    // Variable Declarations
    int lv_numberOfUnits;
    int lv_i;
    string[256] lv_unitTypeArray;
    region lv_spawnRegion;
    int lv_currentIndex;
    fixed lv_spawnDelay;
    int lv_player;
    unitgroup lv_attackGroup;
    int lv_randomBounds;

    // Variable Initialization
    lv_numberOfUnits = 0;
    lv_i = 0;
    init_i = 0;
    while (init_i <= 255) {
        lv_unitTypeArray[init_i] = null;
        init_i = init_i + 1;
    }
    lv_spawnRegion = null;
    lv_currentIndex = 0;
    lv_spawnDelay = 0.0;
    lv_player = 0;
    lv_attackGroup = UnitGroupEmpty();
    lv_randomBounds = 0;

    // Implementation
    auto0B88CCA0_n = lp_zerglings;
    auto0B88CCA0_i = 1;
    while (auto0B88CCA0_i <= auto0B88CCA0_n) {
        if ((lv_numberOfUnits > 255)) {
            break;
        }
        else {
        }
        lv_numberOfUnits += 1;
        lv_unitTypeArray[lv_numberOfUnits] = "PrimalZergling";
        auto0B88CCA0_i = auto0B88CCA0_i + 1;
    }
    autoAF97729B_n = lp_hydralisks;
    autoAF97729B_i = 1;
    while (autoAF97729B_i <= autoAF97729B_n) {
        if ((lv_numberOfUnits > 255)) {
            break;
        }
        else {
        }
        lv_numberOfUnits += 1;
        lv_unitTypeArray[lv_numberOfUnits] = "PrimalHydralisk";
        autoAF97729B_i = autoAF97729B_i + 1;
    }
    auto5FCD62D4_n = lp_roaches;
    auto5FCD62D4_i = 1;
    while (auto5FCD62D4_i <= auto5FCD62D4_n) {
        if ((lv_numberOfUnits > 255)) {
            break;
        }
        else {
        }
        lv_numberOfUnits += 1;
        lv_unitTypeArray[lv_numberOfUnits] = "PrimalRoach";
        auto5FCD62D4_i = auto5FCD62D4_i + 1;
    }
    auto49FC8895_n = lp_ultras;
    auto49FC8895_i = 1;
    while (auto49FC8895_i <= auto49FC8895_n) {
        if ((lv_numberOfUnits > 255)) {
            break;
        }
        else {
        }
        lv_numberOfUnits += 1;
        lv_unitTypeArray[lv_numberOfUnits] = "PrimalUltralisk";
        auto49FC8895_i = auto49FC8895_i + 1;
    }
    auto950E99D6_n = lp_guardians;
    auto950E99D6_i = 1;
    while (auto950E99D6_i <= auto950E99D6_n) {
        if ((lv_numberOfUnits > 255)) {
            break;
        }
        else {
        }
        lv_numberOfUnits += 1;
        lv_unitTypeArray[lv_numberOfUnits] = "PrimalFlyer";
        auto950E99D6_i = auto950E99D6_i + 1;
    }
    auto374DD16F_n = lp_vipers;
    auto374DD16F_i = 1;
    while (auto374DD16F_i <= auto374DD16F_n) {
        if ((lv_numberOfUnits > 255)) {
            break;
        }
        else {
        }
        lv_numberOfUnits += 1;
        lv_unitTypeArray[lv_numberOfUnits] = "Viper";
        auto374DD16F_i = auto374DD16F_i + 1;
    }
    autoE8DFA1D3_val = lp_gatherRegion;
    if (autoE8DFA1D3_val == RegionFromId(25)) {
        lv_spawnRegion = RegionFromId(19);
        if ((gv_stopCeremonialFight == true)) {
            lv_player = gv_pLAYER_03_YAGDRA;
        }
        else {
            lv_player = gv_pLAYER_02_BRAKK;
        }
    }
    else if (autoE8DFA1D3_val == RegionFromId(28)) {
        lv_spawnRegion = RegionFromId(20);
        if ((gv_stopCeremonialFight == true)) {
            lv_player = gv_pLAYER_03_YAGDRA;
        }
        else {
            lv_player = gv_pLAYER_02_BRAKK;
        }
    }
    else if (autoE8DFA1D3_val == RegionFromId(27)) {
        lv_spawnRegion = RegionFromId(21);
        lv_player = gv_pLAYER_03_YAGDRA;
    }
    else if (autoE8DFA1D3_val == RegionFromId(26)) {
        lv_spawnRegion = RegionFromId(24);
        lv_player = gv_pLAYER_03_YAGDRA;
    }
    else {
    }
    if ((lv_numberOfUnits <= 0)) {
        return true;
    }
    else {
        lv_spawnDelay = ((lp_gatherTime - 5)/lv_numberOfUnits);
    }
    if ((lp_delay <= 0.0)) {
        lv_spawnDelay = 0.0;
        lv_randomBounds = 100;
    }
    else {
        lv_randomBounds = FixedToInt((12 * (1 / lv_spawnDelay)));
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(lv_spawnRegion, "ZerusTallGrassCluster", c_animNameDefault, "Cover End", c_animFlagPlayForever, c_animTimeDefault);
    while (true) {
        if ((lv_numberOfUnits <= 0)) {
            break;
        }
        else {
        }
        lv_currentIndex = RandomInt(1, lv_numberOfUnits);
        libNtve_gf_UnitCreateFacingPoint(1, lv_unitTypeArray[lv_currentIndex], 0, lv_player, RegionRandomPoint(lv_spawnRegion), PointFromId(36));
        UnitGroupAdd(lv_attackGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_gatherRegion)), c_orderQueueReplace);
        lv_numberOfUnits -= 1;
        auto67E41EAA_ae = lv_numberOfUnits;
        auto67E41EAA_ai = 1;
        lv_i = lv_currentIndex;
        while ((auto67E41EAA_ai >= 0 && lv_i <= auto67E41EAA_ae) || (auto67E41EAA_ai <= 0 && lv_i >= auto67E41EAA_ae)) {
            lv_unitTypeArray[lv_i] = lv_unitTypeArray[(lv_i + 1)];
            if (lv_i == auto67E41EAA_ae) {
                break;
            }
            lv_i = lv_i + auto67E41EAA_ai;
        }
        Wait(lv_spawnDelay, c_timeAI);
        UnitGroupLoopBegin(lv_attackGroup);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, lv_randomBounds) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_gatherRegion)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    libNtve_gf_ClearAnimationOnDoodadsInRegion(lv_spawnRegion, null, c_animNameDefault);
    Wait(5.0, c_timeAI);
    gf_SendPrimalAttackWave(lv_attackGroup, lp_delay, lp_gatherRegion);
    return true;
}

trigger auto_gf_SendPrimalAttackWave_Trigger = null;
unitgroup auto_gf_SendPrimalAttackWave_lp_attackGroup;
fixed auto_gf_SendPrimalAttackWave_lp_delay;
region auto_gf_SendPrimalAttackWave_lp_gatherRegion;

void gf_SendPrimalAttackWave (unitgroup lp_attackGroup, fixed lp_delay, region lp_gatherRegion) {
    auto_gf_SendPrimalAttackWave_lp_attackGroup = lp_attackGroup;
    auto_gf_SendPrimalAttackWave_lp_delay = lp_delay;
    auto_gf_SendPrimalAttackWave_lp_gatherRegion = lp_gatherRegion;

    if (auto_gf_SendPrimalAttackWave_Trigger == null) {
        auto_gf_SendPrimalAttackWave_Trigger = TriggerCreate("auto_gf_SendPrimalAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendPrimalAttackWave_Trigger, false, false);
}

bool auto_gf_SendPrimalAttackWave_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackGroup = auto_gf_SendPrimalAttackWave_lp_attackGroup;
    fixed lp_delay = auto_gf_SendPrimalAttackWave_lp_delay;
    region lp_gatherRegion = auto_gf_SendPrimalAttackWave_lp_gatherRegion;

    // Variable Declarations
    unit lv_currentUnit;
    unitgroup lv_attackGroup;
    int lv_randomBounds;

    // Variable Initialization
    lv_currentUnit = null;
    lv_attackGroup = UnitGroupEmpty();
    lv_randomBounds = 0;

    // Implementation
    lv_attackGroup = lp_attackGroup;
    if ((lp_delay <= 0.0)) {
        lv_randomBounds = 100;
    }
    else {
        lv_randomBounds = FixedToInt((12 * (1 / lp_delay)));
    }
    while (true) {
        if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) == 0)) {
            break;
        }
        else {
        }
        lv_currentUnit = UnitGroupClosestToPoint(lv_attackGroup, PointFromId(36));
        UnitGroupRemove(lv_attackGroup, lv_currentUnit);
        AISetUnitScriptControlled(lv_currentUnit, false);
        if ((lp_gatherRegion == RegionFromId(27))) {
            AIAttackWaveSetTargetUnitPoint(UnitGetOwner(lv_currentUnit), gv_chrysalis);
            AIAttackWaveUseUnit(UnitGetOwner(lv_currentUnit), lv_currentUnit);
            AIAttackWaveSend(UnitGetOwner(lv_currentUnit), 0, false);
        }
        else {
            AISetUnitSuicide(lv_currentUnit, true);
        }
        Wait(lp_delay, c_timeAI);
        UnitGroupLoopBegin(lv_attackGroup);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, lv_randomBounds) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_gatherRegion)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

trigger auto_gf_CreatePrimalAirWave_Trigger = null;
int auto_gf_CreatePrimalAirWave_lp_mutas;
int auto_gf_CreatePrimalAirWave_lp_player;
fixed auto_gf_CreatePrimalAirWave_lp_delay;

void gf_CreatePrimalAirWave (int lp_mutas, int lp_player, fixed lp_delay) {
    auto_gf_CreatePrimalAirWave_lp_mutas = lp_mutas;
    auto_gf_CreatePrimalAirWave_lp_player = lp_player;
    auto_gf_CreatePrimalAirWave_lp_delay = lp_delay;

    if (auto_gf_CreatePrimalAirWave_Trigger == null) {
        auto_gf_CreatePrimalAirWave_Trigger = TriggerCreate("auto_gf_CreatePrimalAirWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreatePrimalAirWave_Trigger, false, false);
}

bool auto_gf_CreatePrimalAirWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_mutas = auto_gf_CreatePrimalAirWave_lp_mutas;
    int lp_player = auto_gf_CreatePrimalAirWave_lp_player;
    fixed lp_delay = auto_gf_CreatePrimalAirWave_lp_delay;

    int auto18B4AC9E_n;
    int auto18B4AC9E_i;
    int auto811840F0_n;
    int auto811840F0_i;

    // Implementation
    Wait(lp_delay, c_timeAI);
    gv_airAttackGroup = UnitGroupEmpty();
    if ((lp_player == gv_pLAYER_03_YAGDRA)) {
        auto18B4AC9E_n = lp_mutas;
        auto18B4AC9E_i = 1;
        while (auto18B4AC9E_i <= auto18B4AC9E_n) {
            UnitCreate(1, "PrimalMutalisk", 0, gv_pLAYER_03_YAGDRA, RegionRandomPoint(RegionFromId(30)), 150.0);
            UnitGroupAdd(gv_airAttackGroup, UnitLastCreated());
            auto18B4AC9E_i = auto18B4AC9E_i + 1;
        }
        AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_YAGDRA, gv_chrysalis);
        AIAttackWaveUseGroup(gv_pLAYER_03_YAGDRA, gv_airAttackGroup);
        if ((gv_allowAirHarassment == true) && ((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_01_USER, RegionCircle(PointFromId(2441), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_01_USER, RegionCircle(PointFromId(2441), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_01_USER, RegionCircle(PointFromId(2441), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            AIAttackWaveAddWaypoint(gv_pLAYER_03_YAGDRA, PointFromId(2441), false);
            gv_allowAirHarassment = false;
        }
        else {
        }
        AIAttackWaveSend(gv_pLAYER_03_YAGDRA, 0, false);
    }
    else {
    }
    if ((lp_player == gv_pLAYER_02_BRAKK)) {
        auto811840F0_n = lp_mutas;
        auto811840F0_i = 1;
        while (auto811840F0_i <= auto811840F0_n) {
            UnitCreate(1, "PrimalMutalisk", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(31)), 30.0);
            UnitGroupAdd(gv_airAttackGroup, UnitLastCreated());
            auto811840F0_i = auto811840F0_i + 1;
        }
        AIAttackWaveSetTargetUnitPoint(gv_pLAYER_02_BRAKK, gv_chrysalis);
        AIAttackWaveUseGroup(gv_pLAYER_02_BRAKK, gv_airAttackGroup);
        AIAttackWaveSend(gv_pLAYER_02_BRAKK, 0, false);
    }
    else {
    }
    TriggerExecute(gt_FirstAirWaveQ, true, false);
    return true;
}

void gf_OrderSwarmHoststoUproot (unitgroup lp_swarmHostUnitGroup) {
    string autoE4F51FB5_val;

    // Implementation
    UnitGroupLoopBegin(lp_swarmHostUnitGroup);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), UnitGetPosition(gv_chrysalis), 0.0);
        autoE4F51FB5_val = UnitGetType(UnitGroupLoopCurrent());
        if (autoE4F51FB5_val == "SwarmHostRooted") {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostUprooted", 0)), c_orderQueueAddToEnd);
        }
        else if (autoE4F51FB5_val == "SwarmHostBurrowed") {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostUprooted", 0)), c_orderQueueAddToEnd);
        }
        else if (autoE4F51FB5_val == "SwarmHostSplitARooted") {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostSplitAUprooted", 0)), c_orderQueueAddToEnd);
        }
        else if (autoE4F51FB5_val == "SwarmHostSplitABurrowed") {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostSplitAUprooted", 0)), c_orderQueueAddToEnd);
        }
        else if (autoE4F51FB5_val == "SwarmHostSplitBRooted") {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostSplitBUprooted", 0)), c_orderQueueAddToEnd);
        }
        else if (autoE4F51FB5_val == "SwarmHostSplitBBurrowed") {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostSplitBUprooted", 0)), c_orderQueueAddToEnd);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZZerus2");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameIntroSectionQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libSwaC_gf_EnableCampaignTechUnit(true, "SwarmHost", gv_pLAYER_01_USER);
    TechTreeAbilityAllow(gv_pLAYER_02_BRAKK, AbilityCommand("EyeStalk", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_03_YAGDRA, AbilityCommand("EyeStalk", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;

    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_LOCUSTS, 1);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_DEHAKA, 7);
    PlayerGroupAdd(gv_primalPlayerGroup, gv_pLAYER_02_BRAKK);
    PlayerGroupAdd(gv_primalPlayerGroup, gv_pLAYER_03_YAGDRA);
    libNtve_gf_SetAlliance(gv_pLAYER_02_BRAKK, gv_pLAYER_04_TYRANNOZOR, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_02_BRAKK, gv_pLAYER_07_DEHAKA, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_03_YAGDRA, gv_pLAYER_04_TYRANNOZOR, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_02_BRAKK, gv_pLAYER_05_QUILLGOR, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_02_BRAKK, gv_pLAYER_07_DEHAKA, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_03_YAGDRA, gv_pLAYER_05_QUILLGOR, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_03_YAGDRA, gv_pLAYER_07_DEHAKA, 7);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_BRAKK);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_03_YAGDRA);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_04_TYRANNOZOR);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_05_QUILLGOR);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_06_LOCUSTS);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_07_DEHAKA);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_chrysalis = UnitFromId(3);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_chrysalis, StringExternal("Param/Value/EBD09BFB"), StringExternal("Param/Value/A1DE32CB"), null);
    libNtve_gf_ShowHideUnit(gv_chrysalis, false);
    UnitAbilityShow(gv_chrysalis, "PrimalSpawning", false);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(20), StringExternal("Param/Value/55F89EC9"), StringExternal("Param/Value/1556E167"), null);
    UnitSetState(UnitFromId(20), c_unitStateTooltipable, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(213), true);
    UnitIssueOrder(UnitFromId(213), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetState(UnitFromId(213), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(213), c_unitStateSelectable, false);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(213), StringExternal("Param/Value/E3DDFD88"), StringExternal("Param/Value/A1FEB814"), null);
    UnitSetState(UnitFromId(15), c_unitStateTooltipable, false);
    gv_playerBase = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(gv_playerBase, UnitGroup("CreepTumorUsed", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_playerBase, UnitGroup("CreepTumorBurrowed", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_playerBase, UnitGroup("SporeCrawler", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(gv_playerBase);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\cinematic_swarm08.ogv", true);
    SoundPlay(SoundLink("Ambience_rain_quad_loop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_ambienceRain = SoundLastPlayed();
    gv_mapMusicTrack = "ZZerus02MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    TriggerExecute(gt_PoolBubbles, true, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ZerusSwampPlants", c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ZerusSwampPlantsLarge", c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(11), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_chrysalis, c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(4000.0, 4000.0, 3000.0));
    UnitSetPropertyFixed(gv_chrysalis, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_chrysalis, c_unitPropLifeRegen, libHots_gf_DifficultyValueFixed2(3.0, 3.0, 2.0));
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        PlayerGroupLoopBegin(gv_primalPlayerGroup);
        while (!PlayerGroupLoopDone()) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
            PlayerGroupLoopStep();
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "Viper", "EnergyStart", 1, FixedToString(libHots_gf_DifficultyValueFixed2(25.0, 25.0, 50.0), c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Swarm Host");
    libSwaC_gf_AddMissionTipUserData("Locust - Swarm Host");
    libSwaC_gf_AddMissionTipUserData("Zerg Structures");
    libSwaC_gf_AddMissionTipUserData("Uprooted Crawler");
    libSwaC_gf_AddMissionTipUserData("Chrysalis");
    libSwaC_gf_AddMissionTipUserData("Spawn Locusts");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalZergling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalRoach", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalHydralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalUltralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalMutalisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalFlyer", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Viper", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Terrorzor", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGMidCinematic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SwarmHostQ, false);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_BRAKK, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZergDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZergDropPodCreep", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_swarmHostGroup);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerStop(gt_StartGameIntroSectionQ);
    TriggerStop(gt_SwarmHostQ);
    TriggerStop(gt_IntroSwarmHostDropPods);
    TriggerStop(gt_IntroPrimalAttack);
    TriggerEnable(gt_KerriganReachesPool, false);
    TriggerEnable(gt_DefeatKerriganKilled, false);
    UnitKill(UnitFromId(20));
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "SwarmHost", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan));
    UnitGroupAddUnitGroup(gv_swarmHostGroup, UnitLastCreatedGroup());
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGMidCinematic_Init () {
    gt_DEBUGMidCinematic = TriggerCreate("gt_DEBUGMidCinematic_Func");
    TriggerAddEventChatMessage(gt_DEBUGMidCinematic, c_playerAny, "mid", true);
    TriggerAddEventChatMessage(gt_DEBUGMidCinematic, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Intro Section Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameIntroSectionQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1593CAF3"), null, UnitGetPosition(gv_kerrigan));
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_SwarmHostQ, true, false);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameIntroSectionQ_Init () {
    gt_StartGameIntroSectionQ = TriggerCreate("gt_StartGameIntroSectionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Host Q
//--------------------------------------------------------------------------------------------------
bool gt_SwarmHostQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(gv_pLAYER_01_USER);
    UnitGroupSelect(gv_swarmHostGroup, gv_pLAYER_01_USER, true);
    TriggerExecute(gt_SwarmHostRootIndicator, true, false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00133", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    while (!(((gv_introSwarmHostsRooted == true) || (gv_introPrimalEngaged == true)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    TriggerExecute(gt_IntroPrimalAttack, true, false);
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00158", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    SoundPlay(SoundLink("Event_Zerus02_PrimalGroupAttack", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmHostQ_Init () {
    gt_SwarmHostQ = TriggerCreate("gt_SwarmHostQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Host Root Indicator
//--------------------------------------------------------------------------------------------------
bool gt_SwarmHostRootIndicator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_swarmHostReticule;
    int lv_swarmHostTextTag;

    // Variable Initialization
    lv_swarmHostReticule = null;
    lv_swarmHostTextTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_NumberofRootedSwarmHostsinRegion(RegionCircle(PointFromId(336), 8.0)) == 0)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToSwarmHostRooted", 0), true);
        libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(0, 0, StringExternal("Param/Value/8785BCF3"), PointFromId(336));
        lv_swarmHostReticule = libNtve_gf_ActorLastCreated();
        lv_swarmHostTextTag = TextTagLastCreated();
        while (!(((gf_NumberofRootedSwarmHostsinRegion(RegionCircle(PointFromId(336), 8.0)) > 0) || (gf_GetSwarmHostCount() == 0) || (gv_inCinematic == true)))) {
            Wait(0.25, c_timeGame);
        }
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("MorphToSwarmHostRooted", 0), false);
        libNtve_gf_KillModel(lv_swarmHostReticule);
        TextTagDestroy(lv_swarmHostTextTag);
    }
    else {
    }
    gv_introSwarmHostsRooted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmHostRootIndicator_Init () {
    gt_SwarmHostRootIndicator = TriggerCreate("gt_SwarmHostRootIndicator_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primal Engaged Early
//--------------------------------------------------------------------------------------------------
bool gt_PrimalEngagedEarly_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_introAttackUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_introPrimalEngaged = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimalEngagedEarly_Init () {
    gt_PrimalEngagedEarly = TriggerCreate("gt_PrimalEngagedEarly_Func");
    TriggerAddEventUnitAcquiredTarget(gt_PrimalEngagedEarly, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Primal Attack
//--------------------------------------------------------------------------------------------------
bool gt_IntroPrimalAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(197), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/89062279"), null, PointFromId(197));
    AIAttackWaveSetTargetUnit(gv_pLAYER_02_BRAKK, gv_kerrigan);
    AIAttackWaveUseGroup(gv_pLAYER_02_BRAKK, gv_introAttackUnits);
    AIAttackWaveSend(gv_pLAYER_02_BRAKK, 0, false);
    PlayerSetAlliance(gv_pLAYER_02_BRAKK, c_allianceIdVision, gv_pLAYER_01_USER, true);
    TriggerEnable(gt_PrimalForcesKilledQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroPrimalAttack_Init () {
    gt_IntroPrimalAttack = TriggerCreate("gt_IntroPrimalAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primal Forces Killed Q
//--------------------------------------------------------------------------------------------------
bool gt_PrimalForcesKilledQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_introAttackUnits, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00164", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerExecute(gt_CreateObjectivePingReveal, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimalForcesKilledQ_Init () {
    gt_PrimalForcesKilledQ = TriggerCreate("gt_PrimalForcesKilledQ_Func");
    TriggerEnable(gt_PrimalForcesKilledQ, false);
    TriggerAddEventTimePeriodic(gt_PrimalForcesKilledQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Is Close Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganIsCloseQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00078", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerExecute(gt_CreateObjectivePingReveal, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganIsCloseQ_Init () {
    gt_KerriganIsCloseQ = TriggerCreate("gt_KerriganIsCloseQ_Func");
    TriggerAddEventUnitRegion(gt_KerriganIsCloseQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Objective Ping/Reveal
//--------------------------------------------------------------------------------------------------
bool gt_CreateObjectivePingReveal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProceedToPoolCreate, true, true);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(20)), StringExternal("Param/Value/57EA596C"));
    gv_poolPing = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(10), 12.0, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(13));
    gv_poolBeaconRevealer = VisRevealerLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateObjectivePingReveal_Init () {
    gt_CreateObjectivePingReveal = TriggerCreate("gt_CreateObjectivePingReveal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Reaches Pool
//--------------------------------------------------------------------------------------------------
bool gt_KerriganReachesPool_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerDestroy(gv_poolBeaconRevealer);
    TriggerEnable(gt_PrimalForcesKilledQ, false);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    PingDestroy(gv_poolPing);
    UnitKill(UnitFromId(20));
    TriggerExecute(gt_ObjectiveProceedToPoolComplete, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveComplete, true, true);
    TriggerEnable(gt_DefeatKerriganKilled, false);
    TriggerExecute(gt_MidQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganReachesPool_Init () {
    gt_KerriganReachesPool = TriggerCreate("gt_KerriganReachesPool_Func");
    TriggerAddEventUnitRegion(gt_KerriganReachesPool, UnitRefFromVariable("gv_kerrigan"), RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Main Holdout Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameMainHoldoutQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(120.0, 8);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(35), 150.0);
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
        TriggerEnable(gt_SwarmHostRootWarningQ, true);
    }
    else {
    }
    TriggerExecute(gt_InitializeSporeRayPatrols, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(17), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(4), 0.1, false);
    UISetFrameVisible(PlayerGroupSingle(gv_pLAYER_01_USER), c_syncFrameTypeResourcePanel, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1FFE5CF5"), null, PointFromId(2));
    TriggerExecute(gt_CreateHoldoutTimer, true, false);
    TriggerExecute(gt_ChrysalisPing, true, false);
    TriggerExecute(gt_TyrannozorAmbientFighting, true, false);
    TriggerExecute(gt_EventSequence, true, false);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8CA254D0"));
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveChrysalisMustSurviveCreate, true, true);
    TriggerQueueExit();
    Wait(8.0, c_timeReal);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00191", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameMainHoldoutQ_Init () {
    gt_StartGameMainHoldoutQ = TriggerCreate("gt_StartGameMainHoldoutQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Holdout Timer
//--------------------------------------------------------------------------------------------------
bool gt_CreateHoldoutTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_holdoutTimer, 1503.0, false, c_timeAI);
    gv_holdoutTimer = TimerLastStarted();
    Wait(3.0, c_timeReal);
    libSwaC_gf_TimerWindowCreate2(TimerLastStarted(), StringExternal("Param/Value/36B66BCC"), true, false, 0);
    gv_holdoutTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_holdoutTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateHoldoutTimer_Init () {
    gt_CreateHoldoutTimer = TriggerCreate("gt_CreateHoldoutTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Ping
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisPing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_chrysalis), StringExternal("Param/Value/62211EF3"));
    gv_chrysalisPing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisPing_Init () {
    gt_ChrysalisPing = TriggerCreate("gt_ChrysalisPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Sequence
//--------------------------------------------------------------------------------------------------
bool gt_EventSequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(210.0, c_timeAI);
    TriggerExecute(gt_BrakkYagdraCeremonialFight, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_YagdraIntroQ, true, false);
    Wait(45.0, c_timeAI);
    TriggerExecute(gt_BrakkYagdraQ, true, false);
    Wait(165.0, c_timeAI);
    TriggerExecute(gt_SpawnLocustsQ, true, false);
    Wait(210.0, c_timeAI);
    TriggerExecute(gt_SpawnTyrannozorQ, true, false);
    libNtve_gf_WaitForTimer(gv_holdoutTimer, 750.0, false);
    TriggerExecute(gt__50Q, true, false);
    libNtve_gf_WaitForTimer(gv_holdoutTimer, 474.0, false);
    TriggerExecute(gt_RockBreakingWaves, true, false);
    libNtve_gf_WaitForTimer(gv_holdoutTimer, 375.0, false);
    TriggerExecute(gt__75Q, true, false);
    libNtve_gf_WaitForTimer(gv_holdoutTimer, 290.0, false);
    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZZerus02Objective02", 0.0);
    libNtve_gf_WaitForTimer(gv_holdoutTimer, 230.0, false);
    gv_endBrakkSpawns = true;
    libNtve_gf_WaitForTimer(gv_holdoutTimer, 215.0, false);
    gv_stopCeremonialFight = true;
    libNtve_gf_WaitForTimer(gv_holdoutTimer, 60.0, false);
    TriggerExecute(gt__1MinuteRemainingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EventSequence_Init () {
    gt_EventSequence = TriggerCreate("gt_EventSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_InitialAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/222934FA"), null, PointFromId(1827));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1827), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00136", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00165", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialAttackQ_Init () {
    gt_InitialAttackQ = TriggerCreate("gt_InitialAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_YagdraIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1E0D00DF"), null, PointFromId(14));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(14), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00138", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00150", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00163", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraIntroQ_Init () {
    gt_YagdraIntroQ = TriggerCreate("gt_YagdraIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brakk/Yagdra Ceremonial Fight
//--------------------------------------------------------------------------------------------------
bool gt_BrakkYagdraCeremonialFight_Func (bool testConds, bool runActions) {
    int init_i;

    int autoB46CABDC_n;
    int autoB46CABDC_i;
    int auto54ADA6CF_n;
    int auto54ADA6CF_i;
    int autoFAFF6AA9_n;
    int autoFAFF6AA9_i;
    int auto7C4372ED_n;
    int auto7C4372ED_i;
    int auto50FF6AE5_ae;
    int auto50FF6AE5_ai;
    int autoE0AC0C15_n;
    int autoE0AC0C15_i;
    int auto9E3B558F_n;
    int auto9E3B558F_i;

    // Variable Declarations
    int lv_numberOfUnits;
    int lv_i;
    string[128] lv_yagdraArray;
    int lv_currentIndex;
    int lv_player;
    int lv_yagdraSpawnCount;
    unitgroup lv_brakkAttackGroup;
    unitgroup lv_yagdraAttackGroup;
    unitgroup lv_yagdraInitialAttackGroup;
    unit lv_currentUnit;
    int lv_initialYagdraDelay;
    int lv_zerglingAmount;
    int lv_hydraRoachAmount;
    int lv_ultraAmount;
    bool lv_yagdraUnitSpawned;
    bool lv_brakkUnitSpawned;

    // Variable Initialization
    lv_numberOfUnits = 0;
    lv_i = 0;
    init_i = 0;
    while (init_i <= 127) {
        lv_yagdraArray[init_i] = null;
        init_i = init_i + 1;
    }
    lv_currentIndex = 0;
    lv_player = 0;
    lv_yagdraSpawnCount = 0;
    lv_brakkAttackGroup = UnitGroupEmpty();
    lv_yagdraAttackGroup = UnitGroupEmpty();
    lv_yagdraInitialAttackGroup = UnitGroupEmpty();
    lv_currentUnit = null;
    lv_initialYagdraDelay = 3;
    lv_zerglingAmount = 16;
    lv_hydraRoachAmount = 3;
    lv_ultraAmount = 2;
    lv_yagdraUnitSpawned = false;
    lv_brakkUnitSpawned = false;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB46CABDC_n = lv_zerglingAmount;
    autoB46CABDC_i = 1;
    while (autoB46CABDC_i <= autoB46CABDC_n) {
        lv_numberOfUnits += 1;
        lv_yagdraArray[lv_numberOfUnits] = "PrimalZergling";
        autoB46CABDC_i = autoB46CABDC_i + 1;
    }
    auto54ADA6CF_n = lv_hydraRoachAmount;
    auto54ADA6CF_i = 1;
    while (auto54ADA6CF_i <= auto54ADA6CF_n) {
        lv_numberOfUnits += 1;
        lv_yagdraArray[lv_numberOfUnits] = "PrimalHydralisk";
        auto54ADA6CF_i = auto54ADA6CF_i + 1;
    }
    autoFAFF6AA9_n = lv_hydraRoachAmount;
    autoFAFF6AA9_i = 1;
    while (autoFAFF6AA9_i <= autoFAFF6AA9_n) {
        lv_numberOfUnits += 1;
        lv_yagdraArray[lv_numberOfUnits] = "PrimalRoach";
        autoFAFF6AA9_i = autoFAFF6AA9_i + 1;
    }
    auto7C4372ED_n = lv_ultraAmount;
    auto7C4372ED_i = 1;
    while (auto7C4372ED_i <= auto7C4372ED_n) {
        lv_numberOfUnits += 1;
        lv_yagdraArray[lv_numberOfUnits] = "PrimalUltralisk";
        auto7C4372ED_i = auto7C4372ED_i + 1;
    }
    lv_yagdraSpawnCount = lv_numberOfUnits;
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(24), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", c_animFlagPlayForever, c_animTimeDefault);
    while (true) {
        if ((lv_yagdraSpawnCount <= 0)) {
            break;
        }
        else {
        }
        lv_currentIndex = RandomInt(1, lv_yagdraSpawnCount);
        libNtve_gf_UnitCreateFacingPoint(1, lv_yagdraArray[lv_currentIndex], 0, gv_pLAYER_03_YAGDRA, RegionRandomPoint(RegionFromId(24)), PointFromId(36));
        UnitGroupAdd(lv_yagdraAttackGroup, UnitLastCreated());
        UnitGroupAdd(lv_yagdraInitialAttackGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(26))), c_orderQueueReplace);
        lv_yagdraSpawnCount -= 1;
        auto50FF6AE5_ae = lv_yagdraSpawnCount;
        auto50FF6AE5_ai = 1;
        lv_i = lv_currentIndex;
        while ((auto50FF6AE5_ai >= 0 && lv_i <= auto50FF6AE5_ae) || (auto50FF6AE5_ai <= 0 && lv_i >= auto50FF6AE5_ae)) {
            lv_yagdraArray[lv_i] = lv_yagdraArray[(lv_i + 1)];
            if (lv_i == auto50FF6AE5_ae) {
                break;
            }
            lv_i = lv_i + auto50FF6AE5_ai;
        }
        Wait(0.5, c_timeAI);
        UnitGroupLoopBegin(lv_yagdraAttackGroup);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 24) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(26))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(24), null, c_animNameDefault);
    while (true) {
        if ((TimerGetRemaining(gv_holdoutTimer) < 900.0)) {
            lv_zerglingAmount = 20;
            lv_hydraRoachAmount = 4;
            lv_ultraAmount = 3;
        }
        else {
        }
        if ((TimerGetRemaining(gv_holdoutTimer) < 600.0)) {
            lv_hydraRoachAmount = 5;
            lv_ultraAmount = 4;
        }
        else {
        }
        lv_brakkUnitSpawned = false;
        lv_yagdraUnitSpawned = false;
        if ((UnitGroupCount(UnitGroupFilter("PrimalZergling", gv_pLAYER_02_BRAKK, lv_brakkAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (lv_zerglingAmount - 4)) && (gv_endBrakkSpawns == false)) {
            UnitCreate(4, "PrimalZergling", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(20)), 30.0);
            UnitGroupAddUnitGroup(lv_brakkAttackGroup, UnitLastCreatedGroup());
            lv_brakkUnitSpawned = true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("PrimalRoach", gv_pLAYER_02_BRAKK, lv_brakkAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_hydraRoachAmount) && (gv_endBrakkSpawns == false)) {
            UnitCreate(1, "PrimalRoach", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(20)), 30.0);
            UnitGroupAdd(lv_brakkAttackGroup, UnitLastCreated());
            lv_brakkUnitSpawned = true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("PrimalHydralisk", gv_pLAYER_02_BRAKK, lv_brakkAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_hydraRoachAmount) && (gv_endBrakkSpawns == false)) {
            UnitCreate(1, "PrimalHydralisk", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(20)), 30.0);
            UnitGroupAdd(lv_brakkAttackGroup, UnitLastCreated());
            lv_brakkUnitSpawned = true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("PrimalUltralisk", gv_pLAYER_02_BRAKK, lv_brakkAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_ultraAmount) && (gv_endBrakkSpawns == false)) {
            UnitCreate(1, "PrimalUltralisk", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(20)), 30.0);
            UnitGroupAdd(lv_brakkAttackGroup, UnitLastCreated());
            lv_brakkUnitSpawned = true;
        }
        else {
        }
        if ((TimerGetRemaining(gv_holdoutTimer) < 900.0) && (UnitGroupCount(UnitGroupFilter("PrimalMutalisk", gv_pLAYER_02_BRAKK, lv_brakkAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2) && (gv_endBrakkSpawns == false)) {
            UnitCreate(1, "PrimalMutalisk", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(20)), 30.0);
            UnitGroupAdd(lv_brakkAttackGroup, UnitLastCreated());
            lv_brakkUnitSpawned = true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("PrimalZergling", gv_pLAYER_03_YAGDRA, lv_yagdraAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (lv_zerglingAmount - 4))) {
            UnitCreate(4, "PrimalZergling", 0, gv_pLAYER_03_YAGDRA, RegionRandomPoint(RegionFromId(24)), 135.0);
            UnitGroupAddUnitGroup(lv_yagdraAttackGroup, UnitLastCreatedGroup());
            lv_yagdraUnitSpawned = true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("PrimalRoach", gv_pLAYER_03_YAGDRA, lv_yagdraAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_hydraRoachAmount)) {
            UnitCreate(1, "PrimalRoach", 0, gv_pLAYER_03_YAGDRA, RegionRandomPoint(RegionFromId(24)), 135.0);
            UnitGroupAdd(lv_yagdraAttackGroup, UnitLastCreated());
            lv_yagdraUnitSpawned = true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("PrimalHydralisk", c_playerAny, lv_yagdraAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_hydraRoachAmount)) {
            UnitCreate(1, "PrimalHydralisk", 0, gv_pLAYER_03_YAGDRA, RegionRandomPoint(RegionFromId(24)), 135.0);
            UnitGroupAdd(lv_yagdraAttackGroup, UnitLastCreated());
            lv_yagdraUnitSpawned = true;
        }
        else {
        }
        if ((UnitGroupCount(UnitGroupFilter("PrimalUltralisk", gv_pLAYER_03_YAGDRA, lv_yagdraAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_ultraAmount)) {
            UnitCreate(1, "PrimalUltralisk", 0, gv_pLAYER_03_YAGDRA, RegionRandomPoint(RegionFromId(24)), 135.0);
            UnitGroupAdd(lv_yagdraAttackGroup, UnitLastCreated());
            lv_yagdraUnitSpawned = true;
        }
        else {
        }
        if ((TimerGetRemaining(gv_holdoutTimer) < 900.0) && (UnitGroupCount(UnitGroupFilter("PrimalMutalisk", gv_pLAYER_03_YAGDRA, lv_yagdraAttackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2)) {
            UnitCreate(1, "PrimalMutalisk", 0, gv_pLAYER_03_YAGDRA, RegionRandomPoint(RegionFromId(24)), 135.0);
            UnitGroupAdd(lv_yagdraAttackGroup, UnitLastCreated());
            lv_yagdraUnitSpawned = true;
        }
        else {
        }
        if ((lv_brakkUnitSpawned == true)) {
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(20), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", 0, c_animTimeDefault);
        }
        else {
            libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(20), null, c_animNameDefault);
        }
        if ((lv_yagdraUnitSpawned == true)) {
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(24), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", 0, c_animTimeDefault);
        }
        else {
            libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(24), null, c_animNameDefault);
        }
        UnitGroupLoopBegin(lv_brakkAttackGroup);
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(26))), c_orderQueueAddToEnd);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if ((UnitGroupCount(lv_yagdraInitialAttackGroup, c_unitCountAlive) >= 1)) {
            if ((lv_initialYagdraDelay <= 0)) {
                autoE0AC0C15_n = 5;
                autoE0AC0C15_i = 1;
                while (autoE0AC0C15_i <= autoE0AC0C15_n) {
                    if ((UnitGroupCount(lv_yagdraInitialAttackGroup, c_unitCountAlive) == 0)) {
                        break;
                    }
                    else {
                    }
                    lv_currentUnit = UnitGroupClosestToPoint(lv_yagdraInitialAttackGroup, RegionGetCenter(RegionFromId(29)));
                    UnitGroupRemove(lv_yagdraInitialAttackGroup, lv_currentUnit);
                    autoE0AC0C15_i = autoE0AC0C15_i + 1;
                }
            }
            else {
                lv_initialYagdraDelay -= 1;
            }
        }
        else {
        }
        UnitGroupLoopBegin(lv_yagdraAttackGroup);
        while (!UnitGroupLoopDone()) {
            if ((UnitGroupHasUnit(lv_yagdraInitialAttackGroup, UnitGroupLoopCurrent()) == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(28))), c_orderQueueAddToEnd);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(5.0, c_timeAI);
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        if ((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1)) {
            while (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) || (gv_stopCeremonialFight == true)))) {
                Wait(1.0, c_timeAI);
            }
        }
        else {
        }
        if ((gv_stopCeremonialFight == true)) {
            break;
        }
        else {
        }
    }
    auto9E3B558F_n = 10;
    auto9E3B558F_i = 1;
    while (auto9E3B558F_i <= auto9E3B558F_n) {
        Wait(1.0, c_timeAI);
        UnitGroupLoopBegin(lv_brakkAttackGroup);
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(lv_yagdraAttackGroup);
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        auto9E3B558F_i = auto9E3B558F_i + 1;
    }
    Wait(10.0, c_timeAI);
    UnitGroupLoopBegin(lv_brakkAttackGroup);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AISetUnitSuicide(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_yagdraAttackGroup);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AISetUnitSuicide(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrakkYagdraCeremonialFight_Init () {
    gt_BrakkYagdraCeremonialFight = TriggerCreate("gt_BrakkYagdraCeremonialFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brakk/Yagdra Q
//--------------------------------------------------------------------------------------------------
bool gt_BrakkYagdraQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00159", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00160", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrakkYagdraQ_Init () {
    gt_BrakkYagdraQ = TriggerCreate("gt_BrakkYagdraQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ceremonial Fight Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_CeremonialFightWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00196", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CeremonialFightWarningQ_Init () {
    gt_CeremonialFightWarningQ = TriggerCreate("gt_CeremonialFightWarningQ_Func");
    TriggerEnable(gt_CeremonialFightWarningQ, false);
    TriggerAddEventUnitRegion(gt_CeremonialFightWarningQ, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Attacks Player Q
//--------------------------------------------------------------------------------------------------
bool gt_YagdraAttacksPlayerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00123", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00128", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(2.0, c_timeReal);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/497C6809"), null, PointFromId(16));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(16), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00126", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraAttacksPlayerQ_Init () {
    gt_YagdraAttacksPlayerQ = TriggerCreate("gt_YagdraAttacksPlayerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Air Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAirWaveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    TriggerQueueEnter();
    if ((UnitGroupCount(gv_airAttackGroup, c_unitCountAlive) == 0)) {
        return true;
    }
    else {
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/EAA9E621"), null, UnitGetPosition(UnitGroupClosestToPoint(gv_airAttackGroup, PointFromId(36))));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitGroupClosestToPoint(gv_airAttackGroup, PointFromId(36))), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00085", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAirWaveQ_Init () {
    gt_FirstAirWaveQ = TriggerCreate("gt_FirstAirWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pincer Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_PincerAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/63CDBF90"), null, PointFromId(1827));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1827), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D8260C08"), null, PointFromId(16));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(16), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00087", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PincerAttackQ_Init () {
    gt_PincerAttackQ = TriggerCreate("gt_PincerAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocks Q
//--------------------------------------------------------------------------------------------------
bool gt_RocksQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_rockPos;

    // Variable Initialization
    lv_rockPos = null;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) != gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_rockPos = UnitGetPosition(UnitFromId(15));
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7AF13B89"), null, lv_rockPos);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), lv_rockPos, 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00118", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RocksQ_Init () {
    gt_RocksQ = TriggerCreate("gt_RocksQ_Func");
    TriggerAddEventUnitAttacked(gt_RocksQ, UnitRefFromUnit(UnitFromId(15)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocks Die Q
//--------------------------------------------------------------------------------------------------
bool gt_RocksDieQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_rockPos;

    // Variable Initialization
    lv_rockPos = null;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_rockPos = UnitGetPosition(EventUnit());
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/75A5AF52"), null, lv_rockPos);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), lv_rockPos, 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00120", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RocksDieQ_Init () {
    gt_RocksDieQ = TriggerCreate("gt_RocksDieQ_Func");
    TriggerAddEventUnitDied(gt_RocksDieQ, UnitRefFromUnit(UnitFromId(15)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brakk Is Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_BrakkIsDeadQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00154", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00155", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00156", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrakkIsDeadQ_Init () {
    gt_BrakkIsDeadQ = TriggerCreate("gt_BrakkIsDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 50% Q
//--------------------------------------------------------------------------------------------------
bool gt__50Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00092", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(2.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/F24A798E"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__50Q_Init () {
    gt__50Q = TriggerCreate("gt__50Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 75% Q
//--------------------------------------------------------------------------------------------------
bool gt__75Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ChrysalisOpensAnims, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00094", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(2.0, c_timeGame);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8E584B22"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__75Q_Init () {
    gt__75Q = TriggerCreate("gt__75Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Opens Anims
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisOpensAnims_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_chrysalis), "MorphStart", "Stand Morph Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.25, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_chrysalis), "Morph", "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisOpensAnims_Init () {
    gt_ChrysalisOpensAnims = TriggerCreate("gt_ChrysalisOpensAnims_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Minute Remaining Q
//--------------------------------------------------------------------------------------------------
bool gt__1MinuteRemainingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus02MusicEvent02_DefendChrysalis", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    TriggerQueueEnter();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_chrysalis), "Victory", "Stand Victory", c_animFlagPlayForever, c_animTimeDefault);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00064", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1MinuteRemainingQ_Init () {
    gt__1MinuteRemainingQ = TriggerCreate("gt__1MinuteRemainingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisTakesDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chrysalisDamaged = true;
    gv_totalChrysalisDamageTaken += EventUnitDamageAmount();
    TriggerExecute(gt_ChrysalisUnderAttackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisTakesDamage_Init () {
    gt_ChrysalisTakesDamage = TriggerCreate("gt_ChrysalisTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_ChrysalisTakesDamage, UnitRefFromUnit(UnitFromId(3)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Under Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisUnderAttackQ_Func (bool testConds, bool runActions) {
    int auto4FEEB68E_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6F1B9033"), null, UnitGetPosition(gv_chrysalis));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_chrysalis), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((TimerGetRemaining(gv_holdoutTimer) <= 60.0)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }
    else {
    }
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00016", c_transmissionDurationAdd, 0.0, true, 1, 0);
    if ((UnitAbilityGetCooldown(gv_chrysalis, "PrimalSpawning", "Abil/PrimalSpawning") < 0.1) && (TriggerIsEnabled(gt_SpawnLocustsButtonController) == false)) {
        auto4FEEB68E_val = RandomInt(1, 3);
        if (auto4FEEB68E_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00143", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (auto4FEEB68E_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00145", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (auto4FEEB68E_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00147", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else {
        }
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    if ((TimerGetRemaining(gv_holdoutTimer) <= 60.0)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }
    else {
    }
    TriggerQueueExit();
    Wait(60.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisUnderAttackQ_Init () {
    gt_ChrysalisUnderAttackQ = TriggerCreate("gt_ChrysalisUnderAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Host Root Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_SwarmHostRootWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwarmHost"))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnitTarget(), c_planeGround) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((TimerGetRemaining(gv_holdoutTimer) <= 60.0)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }
    else {
    }
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00200", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    if ((TimerGetRemaining(gv_holdoutTimer) <= 60.0)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmHostRootWarningQ_Init () {
    gt_SwarmHostRootWarningQ = TriggerCreate("gt_SwarmHostRootWarningQ_Func");
    TriggerEnable(gt_SwarmHostRootWarningQ, false);
    TriggerAddEventUnitAttacked(gt_SwarmHostRootWarningQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Locusts Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLocustsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00140", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00141", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00167", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(1.0, c_timeReal);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/8D5C3B50"), 0), StringExternal("Param/Value/C53808A7"), StringExternal("Param/Value/992A8311"), "Assets\\Textures\\btn-ability-zerg-swarmseeds-color.dds");
    TriggerExecute(gt_SpawnLocustsButtonController, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLocustsQ_Init () {
    gt_SpawnLocustsQ = TriggerCreate("gt_SpawnLocustsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Locusts Button Controller
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLocustsButtonController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_readySoundPlayed;

    // Variable Initialization
    lv_readySoundPlayed = false;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitAbilityShow(gv_chrysalis, "PrimalSpawning", true);
    if ((gv_spawnLocustDialog == c_invalidDialogId)) {
        DialogCreate(350, 132, c_anchorTopRight, 10, 70, false);
        gv_spawnLocustDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "HotS_SwarmTemplates/HotS_LargeOrangeButtonTemplate");
        gv_spawnLocustButton = DialogControlLastCreated();
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 100);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/B97989F9"), PlayerGroupAll());
    }
    else {
    }
    DialogSetVisible(gv_spawnLocustDialog, PlayerGroupAll(), true);
    SoundPlay(SoundLink("UI_Alert_PrimalSpawnReady", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_CarrionLocustAttacks, true, false);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((gv_gameOver == true)) {
            DialogSetVisible(gv_spawnLocustDialog, PlayerGroupAll(), false);
            return true;
        }
        else {
        }
        if ((UnitAbilityGetCooldown(gv_chrysalis, "PrimalSpawning", "Abil/PrimalSpawning") == 0.0)) {
            libNtve_gf_SetDialogItemText(gv_spawnLocustButton, StringExternal("Param/Value/F130CE64"), PlayerGroupAll());
            DialogControlSetEnabled(gv_spawnLocustButton, PlayerGroupAll(), true);
            if ((lv_readySoundPlayed == false)) {
                SoundPlay(SoundLink("UI_Alert_PrimalSpawnReady", -1), PlayerGroupAll(), 100.0, 0.0);
                lv_readySoundPlayed = true;
            }
            else {
            }
        }
        else {
            TextExpressionSetToken("Param/Expression/A35860D2", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(UnitAbilityGetCooldown(gv_chrysalis, "PrimalSpawning", "Abil/PrimalSpawning"))));
            libNtve_gf_SetDialogItemText(gv_spawnLocustButton, TextExpressionAssemble("Param/Expression/A35860D2"), PlayerGroupAll());
            DialogControlSetEnabled(gv_spawnLocustButton, PlayerGroupAll(), false);
            lv_readySoundPlayed = false;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLocustsButtonController_Init () {
    gt_SpawnLocustsButtonController = TriggerCreate("gt_SpawnLocustsButtonController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Locusts Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLocustsButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventDialogControl() == gv_spawnLocustButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_ActionButtonSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_chrysalis, Order(AbilityCommand("PrimalSpawning", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLocustsButtonClicked_Init () {
    gt_SpawnLocustsButtonClicked = TriggerCreate("gt_SpawnLocustsButtonClicked_Func");
    TriggerAddEventDialogControl(gt_SpawnLocustsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Locusts Used
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLocustsUsed_Func (bool testConds, bool runActions) {
    int autoC869826F_n;
    int autoC869826F_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spawnLocustsUsed += 1;
    TimerStart(gv_spawnLocustsCooldownTimer, UnitAbilityGetCooldown(gv_chrysalis, "PrimalSpawning", "Abil/PrimalSpawning"), false, c_timeAI);
    TriggerExecute(gt_SpawnLocustsUsedQ, true, false);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 4.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    autoC869826F_n = libHots_gf_DifficultyValueInt2(16, 16, 16);
    autoC869826F_i = 1;
    while (autoC869826F_i <= autoC869826F_n) {
        gf_CreateCarrionLocust(RegionFromId(33));
        gf_CreateCarrionLocust(RegionFromId(32));
        gf_CreateCarrionLocust(RegionFromId(34));
        Wait(0.1, c_timeGame);
        autoC869826F_i = autoC869826F_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLocustsUsed_Init () {
    gt_SpawnLocustsUsed = TriggerCreate("gt_SpawnLocustsUsed_Func");
    TriggerAddEventUnitAbility(gt_SpawnLocustsUsed, UnitRefFromVariable("gv_chrysalis"), AbilityCommand("PrimalSpawning", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Locusts Used Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLocustsUsedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopFlashingScreenButton(1);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 1.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_chrysalis), 1.0, -1, 10.0, true);
    Wait(1.0, c_timeGame);
    CameraLockInput(gv_pLAYER_01_USER, false);
    Wait(5.0, c_timeReal);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00193", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLocustsUsedQ_Init () {
    gt_SpawnLocustsUsedQ = TriggerCreate("gt_SpawnLocustsUsedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Locust Attacks
//--------------------------------------------------------------------------------------------------
bool gt_CarrionLocustAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_leftEnemyGroup;
    unitgroup lv_middleEnemyGroup;
    unitgroup lv_rightEnemyGroup;
    unitgroup lv_fullEnemyGroup;

    // Variable Initialization
    lv_leftEnemyGroup = UnitGroupEmpty();
    lv_middleEnemyGroup = UnitGroupEmpty();
    lv_rightEnemyGroup = UnitGroupEmpty();
    lv_fullEnemyGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        lv_leftEnemyGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_middleEnemyGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_rightEnemyGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_fullEnemyGroup = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_fullEnemyGroup, lv_leftEnemyGroup);
        UnitGroupAddUnitGroup(lv_fullEnemyGroup, lv_middleEnemyGroup);
        UnitGroupAddUnitGroup(lv_fullEnemyGroup, lv_rightEnemyGroup);
        UnitGroupAddUnitGroup(lv_fullEnemyGroup, UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupLoopBegin(gv_spawnLocustsLeft);
        while (!UnitGroupLoopDone()) {
            if ((UnitGroupCount(lv_leftEnemyGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_leftEnemyGroup, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
            }
            else {
                if ((UnitGroupCount(lv_fullEnemyGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_fullEnemyGroup, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 4.0, AngleBetweenPoints(UnitGetPosition(gv_chrysalis), UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
                }
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_spawnLocustsMid);
        while (!UnitGroupLoopDone()) {
            if ((UnitGroupCount(lv_middleEnemyGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_middleEnemyGroup, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
            }
            else {
                if ((UnitGroupCount(lv_fullEnemyGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_fullEnemyGroup, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 4.0, AngleBetweenPoints(UnitGetPosition(gv_chrysalis), UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
                }
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_spawnLocustsRight);
        while (!UnitGroupLoopDone()) {
            if ((UnitGroupCount(lv_rightEnemyGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_rightEnemyGroup, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
            }
            else {
                if ((UnitGroupCount(lv_fullEnemyGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_fullEnemyGroup, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 4.0, AngleBetweenPoints(UnitGetPosition(gv_chrysalis), UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueReplace);
                }
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionLocustAttacks_Init () {
    gt_CarrionLocustAttacks = TriggerCreate("gt_CarrionLocustAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Locust Dissipate
//--------------------------------------------------------------------------------------------------
bool gt_CarrionLocustDissipate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PrimalLocustFlying"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionLocustDissipate_Init () {
    gt_CarrionLocustDissipate = TriggerCreate("gt_CarrionLocustDissipate_Func");
    TriggerAddEventUnitRegion(gt_CarrionLocustDissipate, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Locust Kills
//--------------------------------------------------------------------------------------------------
bool gt_CarrionLocustKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "PrimalLocustFlying"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_pLAYER_06_LOCUSTS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_carrionLocustKills += 1;
    UnitSetPropertyFixed(gv_chrysalis, c_unitPropKills, gv_carrionLocustKills);
    TriggerExecute(gt_AchievementCarrionLocustKills, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionLocustKills_Init () {
    gt_CarrionLocustKills = TriggerCreate("gt_CarrionLocustKills_Func");
    TriggerAddEventUnitDied(gt_CarrionLocustKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tyrannozor Ambient Fighting
//--------------------------------------------------------------------------------------------------
bool gt_TyrannozorAmbientFighting_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_spawnCooldown;
    point[6] lv_spawnPoints;
    int lv_randomSpawnPoint;
    unitgroup lv_quillgorGroup;
    unitgroup lv_playerUnitGroupNearby;
    unitgroup lv_quillgorGroupNearby;
    unitgroup lv_tyrannozorCrittersNearby;

    // Variable Initialization
    lv_spawnCooldown = 0;
    init_i = 0;
    while (init_i <= 5) {
        lv_spawnPoints[init_i] = null;
        init_i = init_i + 1;
    }
    lv_randomSpawnPoint = 0;
    lv_quillgorGroup = UnitGroupEmpty();
    lv_playerUnitGroupNearby = UnitGroupEmpty();
    lv_quillgorGroupNearby = UnitGroupEmpty();
    lv_tyrannozorCrittersNearby = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnPoints[1] = PointFromId(17);
    lv_spawnPoints[2] = PointFromId(25);
    lv_spawnPoints[3] = PointFromId(50);
    lv_spawnPoints[4] = PointFromId(26);
    lv_spawnPoints[5] = PointFromId(19);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        if ((lv_spawnCooldown == 0)) {
            lv_spawnCooldown = 8;
            if ((UnitGroupCount(gv_tyrannozorCritters, c_unitCountAlive) < 4)) {
                lv_randomSpawnPoint = RandomInt(1, 5);
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoints[lv_randomSpawnPoint], 4.0), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(1, "Crabeetle", 0, 0, lv_spawnPoints[lv_randomSpawnPoint]);
                UnitGroupAdd(gv_tyrannozorCritters, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 5.0, PointGetFacing(lv_spawnPoints[lv_randomSpawnPoint]))), c_orderQueueReplace);
            }
            else {
                if ((UnitGroupCount(lv_quillgorGroup, c_unitCountAlive) < 2)) {
                    lv_randomSpawnPoint = RandomInt(1, 5);
                    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoints[lv_randomSpawnPoint], 4.0), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", 0, c_animTimeDefault);
                    libNtve_gf_CreateUnitsAtPoint2(1, "SpaceCowSmall", 0, gv_pLAYER_05_QUILLGOR, lv_spawnPoints[lv_randomSpawnPoint]);
                    UnitGroupAdd(lv_quillgorGroup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 5.0, PointGetFacing(lv_spawnPoints[lv_randomSpawnPoint]))), c_orderQueueReplace);
                }
                else {
                }
            }
        }
        else {
            lv_spawnCooldown -= 1;
        }
        UnitGroupLoopBegin(gv_tyrannozorCritters);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 10) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(40))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(lv_quillgorGroup);
        while (!UnitGroupLoopDone()) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_tyrannozor), UnitGetPosition(UnitGroupLoopCurrent())) <= 6.0)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_tyrannozor), c_orderQueueReplace);
            }
            else {
                lv_tyrannozorCrittersNearby = UnitGroupFilterRegion(gv_tyrannozorCritters, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), 0);
                if ((UnitGroupCount(lv_tyrannozorCrittersNearby, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_tyrannozorCrittersNearby, UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
                }
                else {
                    if ((RandomInt(1, 10) == 1)) {
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(40))), c_orderQueueReplace);
                    }
                    else {
                    }
                }
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if ((UnitIsAlive(gv_tyrannozor) == true)) {
            lv_playerUnitGroupNearby = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_playerUnitGroupNearby, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(gv_tyrannozor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_playerUnitGroupNearby, UnitGetPosition(gv_tyrannozor))), c_orderQueueReplace);
            }
            else {
                lv_quillgorGroupNearby = UnitGroup(null, gv_pLAYER_05_QUILLGOR, RegionCircle(UnitGetPosition(gv_tyrannozor), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_quillgorGroupNearby, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(gv_tyrannozor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_quillgorGroupNearby, UnitGetPosition(gv_tyrannozor))), c_orderQueueReplace);
                }
                else {
                    lv_tyrannozorCrittersNearby = UnitGroupFilterRegion(gv_tyrannozorCritters, RegionCircle(UnitGetPosition(gv_tyrannozor), 6.0), 0);
                    if ((UnitGroupCount(lv_tyrannozorCrittersNearby, c_unitCountAlive) >= 1)) {
                        UnitIssueOrder(gv_tyrannozor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_tyrannozorCrittersNearby, UnitGetPosition(gv_tyrannozor))), c_orderQueueReplace);
                    }
                    else {
                        if ((RandomInt(1, 6) == 1)) {
                            UnitIssueOrder(gv_tyrannozor, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(40))), c_orderQueueReplace);
                        }
                        else {
                        }
                    }
                }
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TyrannozorAmbientFighting_Init () {
    gt_TyrannozorAmbientFighting = TriggerCreate("gt_TyrannozorAmbientFighting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Tyrannozor Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawnTyrannozorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(50), 4.0), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", 0, c_animTimeDefault);
    TimerStart(gv_achievementTimedTyrannozorKillTimer, gv_tyrannozorAchievementTime, false, c_timeAI);
    gv_victoryStatTyrannozorLifeTimer = GameGetMissionTime();
    libNtve_gf_CreateUnitsAtPoint2(1, "Terrorzor", 0, gv_pLAYER_04_TYRANNOZOR, PointFromId(50));
    gv_tyrannozor = UnitLastCreated();
    UnitSetPropertyFixed(gv_tyrannozor, c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(1000.0, 1000.0, 1500.0, 2000.0));
    UnitSetPropertyFixed(gv_tyrannozor, c_unitPropLifeRegen, libHots_gf_DifficultyValueFixed2(5.0, 5.0, 8.0));
    UnitSetPropertyFixed(gv_tyrannozor, c_unitPropLifePercent, 100.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 5.0, PointGetFacing(PointFromId(50)))), c_orderQueueReplace);
    TriggerEnable(gt_TyrannozorDiesQ, true);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(43));
    gv_tyrannozorRevealer = VisRevealerLastCreated();
    if ((UnitIsAlive(gv_tyrannozor) == true)) {
        libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(gv_tyrannozor), StringExternal("Param/Value/CB1D4006"));
        PingSetUnit(PingLastCreated(), gv_tyrannozor);
        gv_tyrannozorPing = PingLastCreated();
        Wait(1.0, c_timeReal);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00098", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00101", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00152", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerExecute(gt_ObjectiveKillTyrannozorCreate, true, true);
    }
    else {
    }
    TriggerQueueExit();
    TriggerEnable(gt_CeremonialFightWarningQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnTyrannozorQ_Init () {
    gt_SpawnTyrannozorQ = TriggerCreate("gt_SpawnTyrannozorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tyrannozor Lifesteal
//--------------------------------------------------------------------------------------------------
bool gt_TyrannozorLifesteal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == 0) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_QUILLGOR))) {
        UnitSetPropertyFixed(gv_tyrannozor, c_unitPropLife, (UnitGetPropertyFixed(gv_tyrannozor, c_unitPropLife, c_unitPropCurrent) + 20.0));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TyrannozorLifesteal_Init () {
    gt_TyrannozorLifesteal = TriggerCreate("gt_TyrannozorLifesteal_Func");
    TriggerAddEventUnitDamaged(gt_TyrannozorLifesteal, null, c_unitDamageTypeAny, c_unitDamageEither, "ChompDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tyrannozor Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_TyrannozorDiesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TyrannozorLifesteal, false);
    PingDestroy(gv_tyrannozorPing);
    VisRevealerDestroy(gv_tyrannozorRevealer);
    TriggerExecute(gt_AchievementTimedTyrannozorKillH, true, false);
    gv_victoryStatTyrannozorLifeTimer = (GameGetMissionTime() - gv_victoryStatTyrannozorLifeTimer);
    TriggerExecute(gt_ObjectiveKillTyrannozorComplete, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((TimerGetRemaining(gv_holdoutTimer) <= 60.0)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }
    else {
    }
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00103", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    if ((TimerGetRemaining(gv_holdoutTimer) <= 60.0)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TyrannozorDiesQ_Init () {
    gt_TyrannozorDiesQ = TriggerCreate("gt_TyrannozorDiesQ_Func");
    TriggerEnable(gt_TyrannozorDiesQ, false);
    TriggerAddEventUnitDied(gt_TyrannozorDiesQ, UnitRefFromVariable("gv_tyrannozor"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tyrannozor Critter Flee Deactivate
//--------------------------------------------------------------------------------------------------
bool gt_TyrannozorCritterFleeDeactivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_tyrannozorCritters, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("CritterFlee", 0), false), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TyrannozorCritterFleeDeactivate_Init () {
    gt_TyrannozorCritterFleeDeactivate = TriggerCreate("gt_TyrannozorCritterFleeDeactivate_Func");
    TriggerAddEventUnitRegion(gt_TyrannozorCritterFleeDeactivate, null, RegionFromId(44), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tyrannozor Critter Flee Activate
//--------------------------------------------------------------------------------------------------
bool gt_TyrannozorCritterFleeActivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Crabeetle") || (UnitGetType(EventUnit()) == "Artosilope") || (UnitGetType(EventUnit()) == "Anteplott")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("CritterFlee", 0), true), c_orderQueueReplace);
    UnitGroupAdd(gv_tyrannozorCritters, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TyrannozorCritterFleeActivate_Init () {
    gt_TyrannozorCritterFleeActivate = TriggerCreate("gt_TyrannozorCritterFleeActivate_Func");
    TriggerAddEventUnitRegion(gt_TyrannozorCritterFleeActivate, null, RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pool Bubbles
//--------------------------------------------------------------------------------------------------
bool gt_PoolBubbles_Func (bool testConds, bool runActions) {
    int autoA197CDAF_ae;
    int autoA197CDAF_ai;
    int auto6D594272_val;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(927);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(926);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(917);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(907);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(916);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(925);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(919);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(912);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(924);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(918);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(913);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(923);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(915);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(920);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(914);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(921);
    lv_index += 1;
    gv_poolBubbles[lv_index] = DoodadFromId(922);
    gv_poolBubblesCount = lv_index;
    Wait(0.1, c_timeGame);
    autoA197CDAF_ae = gv_poolBubblesCount;
    autoA197CDAF_ai = 1;
    lv_index = 1;
    while ((autoA197CDAF_ai >= 0 && lv_index <= autoA197CDAF_ae) || (autoA197CDAF_ai <= 0 && lv_index >= autoA197CDAF_ae)) {
        auto6D594272_val = RandomInt(1, 3);
        if (auto6D594272_val == 1) {
            libNtve_gf_PlayAnimation(ActorFromDoodad(gv_poolBubbles[lv_index]), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        }
        else if (auto6D594272_val == 2) {
            libNtve_gf_PlayAnimation(ActorFromDoodad(gv_poolBubbles[lv_index]), c_animNameDefault, "Stand 01", 0, c_animTimeDefault);
        }
        else if (auto6D594272_val == 3) {
            libNtve_gf_PlayAnimation(ActorFromDoodad(gv_poolBubbles[lv_index]), c_animNameDefault, "Stand 02", 0, c_animTimeDefault);
        }
        else {
        }
        libNtve_gf_SetAnimationCompletion(ActorFromDoodad(gv_poolBubbles[lv_index]), c_animNameDefault, RandomFixed(0.0, 99.0));
        if (lv_index == autoA197CDAF_ae) {
            break;
        }
        lv_index = lv_index + autoA197CDAF_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoolBubbles_Init () {
    gt_PoolBubbles = TriggerCreate("gt_PoolBubbles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerus Critter Attacks
//--------------------------------------------------------------------------------------------------
bool gt_ZerusCritterAttacks_Func (bool testConds, bool runActions) {
    unitgroup autoEE1012E2_g;
    int autoEE1012E2_u;

    // Variable Declarations
    region lv_attackRegion;
    unitgroup lv_critterGroup;
    unitgroup lv_primalGroup;
    unit lv_currentCritter;

    // Variable Initialization
    lv_attackRegion = null;
    lv_critterGroup = UnitGroupEmpty();
    lv_primalGroup = UnitGroupEmpty();
    lv_currentCritter = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackRegion = RegionCircle(CameraGetTarget(gv_pLAYER_01_USER), 10.0);
    UnitGroupAddUnitGroup(lv_critterGroup, UnitGroup("Crabeetle", 0, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_critterGroup, UnitGroup("Artosilope", 0, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_critterGroup, UnitGroup("Anteplott", 0, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_critterGroup, UnitGroup("ZerusAlienTreeHover", 0, lv_attackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoEE1012E2_g = lv_critterGroup;
    autoEE1012E2_u = 1;
    while (autoEE1012E2_u <= UnitGroupCount(autoEE1012E2_g, c_unitCountAll)) {
        lv_currentCritter = UnitGroupUnit(autoEE1012E2_g, autoEE1012E2_u);
        if ((UnitGroupHasUnit(gv_primalCritterTargets, lv_currentCritter) == false) && (libNtve_gf_UnitIsPaused(lv_currentCritter) == false)) {
            lv_primalGroup = UnitGroupEmpty();
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_currentCritter), 6.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0));
            while (!UnitGroupLoopDone()) {
                if ((UnitTestState(UnitGroupLoopCurrent(), c_unitStateIdle) == true) && (UnitGroupHasUnit(gv_primalCritterAttackers, UnitGroupLoopCurrent()) == false) && (UnitCanAttackTarget(UnitGroupLoopCurrent(), lv_currentCritter) == true) && (libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false) && ((UnitGetType(UnitGroupLoopCurrent()) == "PrimalZergling") || (UnitGetType(UnitGroupLoopCurrent()) == "PrimalHydralisk") || (UnitGetType(UnitGroupLoopCurrent()) == "PrimalRoach") || (UnitGetType(UnitGroupLoopCurrent()) == "PrimalUltralisk") || (UnitGetType(UnitGroupLoopCurrent()) == "PrimalFlyer") || (UnitGetType(UnitGroupLoopCurrent()) == "PrimalMutalisk") || (UnitGetType(UnitGroupLoopCurrent()) == "Ravasaur"))) {
                    UnitGroupAdd(lv_primalGroup, UnitGroupLoopCurrent());
                }
                else {
                }
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            if ((UnitGroupCount(lv_primalGroup, c_unitCountAlive) > 0)) {
                gf_OrderPrimaltoAttackCritter(UnitGroupClosestToPoint(lv_primalGroup, UnitGetPosition(lv_currentCritter)), lv_currentCritter);
            }
            else {
            }
        }
        else {
        }
        if (lv_currentCritter == UnitGroupUnit(autoEE1012E2_g, autoEE1012E2_u)) {
            autoEE1012E2_u = autoEE1012E2_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerusCritterAttacks_Init () {
    gt_ZerusCritterAttacks = TriggerCreate("gt_ZerusCritterAttacks_Func");
    TriggerAddEventTimePeriodic(gt_ZerusCritterAttacks, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Ray Patrols
//--------------------------------------------------------------------------------------------------
bool gt_SporeRayPatrols_Func (bool testConds, bool runActions) {
    int autoFF9A9217_ae;
    int autoFF9A9217_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFF9A9217_ae = gv_sPORE_RAY_MAX_COUNT;
    autoFF9A9217_ai = 1;
    lv_i = 0;
    while ((autoFF9A9217_ai >= 0 && lv_i <= autoFF9A9217_ae) || (autoFF9A9217_ai <= 0 && lv_i >= autoFF9A9217_ae)) {
        if ((UnitIsAlive(gv_sporeRayPatrollers[lv_i].lv_sporeRay) == true) && (gv_sporeRayPatrollers[lv_i].lv_patrolPointCount > 0)) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_sporeRayPatrollers[lv_i].lv_sporeRay), gv_sporeRayPatrollers[lv_i].lv_patrolRoute[gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint]) <= 1)) {
                if ((gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint < gv_sporeRayPatrollers[lv_i].lv_patrolPointCount)) {
                    gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint += 1;
                }
                else {
                    gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint = 1;
                }
            }
            else {
            }
            UnitIssueOrder(gv_sporeRayPatrollers[lv_i].lv_sporeRay, OrderTargetingPoint(AbilityCommand("move", 0), gv_sporeRayPatrollers[lv_i].lv_patrolRoute[gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint]), c_orderQueueReplace);
        }
        else {
        }
        if (lv_i == autoFF9A9217_ae) {
            break;
        }
        lv_i = lv_i + autoFF9A9217_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeRayPatrols_Init () {
    gt_SporeRayPatrols = TriggerCreate("gt_SporeRayPatrols_Func");
    TriggerAddEventTimePeriodic(gt_SporeRayPatrols, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Spore Ray Patrols
//--------------------------------------------------------------------------------------------------
bool gt_InitializeSporeRayPatrols_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(2474));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2482));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2483));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2484));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2485));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2486));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2487));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2488));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2489));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2490));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2491));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2492));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2493));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2494));
    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(2475));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2481));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2495));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2496));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2497));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2498));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2499));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2500));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2501));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2502));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2503));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2504));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2505));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2506));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2507));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2508));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2509));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2510));
    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(2511));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2513));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2514));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2515));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2516));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2517));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2518));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2519));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2520));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2521));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2522));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2523));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2524));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2515));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2514));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2513));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2512));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2525));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2526));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2527));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2528));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2529));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2530));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2531));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2512));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeSporeRayPatrols_Init () {
    gt_InitializeSporeRayPatrols = TriggerCreate("gt_InitializeSporeRayPatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Intro
//--------------------------------------------------------------------------------------------------
bool gt_StartAIIntro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIIntro_Init () {
    gt_StartAIIntro = TriggerCreate("gt_StartAIIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Holdout
//--------------------------------------------------------------------------------------------------
bool gt_StartAIHoldout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BrakkAttacks, true, false);
    TriggerExecute(gt_YagdraAttacks, true, false);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_StartUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_StartUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIHoldout_Init () {
    gt_StartAIHoldout = TriggerCreate("gt_StartAIHoldout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(710.0, c_timeAI);
    PlayerGroupLoopBegin(gv_primalPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(340.0, c_timeAI);
    PlayerGroupLoopBegin(gv_primalPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesNormal_Init () {
    gt_StartUpgradesNormal = TriggerCreate("gt_StartUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(420.0, c_timeAI);
    PlayerGroupLoopBegin(gv_primalPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(430.0, c_timeAI);
    PlayerGroupLoopBegin(gv_primalPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(340.0, c_timeAI);
    PlayerGroupLoopBegin(gv_primalPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel3", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brakk Attacks
//--------------------------------------------------------------------------------------------------
bool gt_BrakkAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(55.0, c_timeAI);
    TriggerExecute(gt_InitialAttackQ, true, false);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(12, 12, 16), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(3, 3, 4), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    Wait(35.0, c_timeAI);
    Wait(313.0, c_timeAI);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(25, 25, 30), libHots_gf_DifficultyValueInt2(3, 3, 4), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(1, 1, 2), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.6));
    Wait(35.0, c_timeAI);
    Wait(246.0, c_timeAI);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(0, 0, 3), gv_pLAYER_02_BRAKK, 0.0);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(1, 1, 3), gv_pLAYER_02_BRAKK, 30.0);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(20, 20, 24), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    Wait(35.0, c_timeAI);
    Wait(78.0, c_timeAI);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(2, 2, 4), gv_pLAYER_02_BRAKK, 0.0);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(24, 24, 28), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(5, 5, 7), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(1, 1, 2), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.6));
    Wait(35.0, c_timeAI);
    Wait(246.0, c_timeAI);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(2, 2, 3), gv_pLAYER_02_BRAKK, 5.0);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(2, 2, 3), gv_pLAYER_02_BRAKK, 35.0);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(24, 24, 28), libHots_gf_DifficultyValueInt2(4, 4, 6), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(1, 1, 2), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.6));
    Wait(35.0, c_timeAI);
    Wait(78.0, c_timeAI);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(3, 3, 4), gv_pLAYER_02_BRAKK, 35.0);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(26, 26, 30), libHots_gf_DifficultyValueInt2(4, 4, 6), libHots_gf_DifficultyValueInt2(4, 4, 6), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 1), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.6));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrakkAttacks_Init () {
    gt_BrakkAttacks = TriggerCreate("gt_BrakkAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yagdra Attacks
//--------------------------------------------------------------------------------------------------
bool gt_YagdraAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(285.0, c_timeAI);
    TriggerExecute(gt_YagdraAttacksPlayerQ, true, false);
    Wait(5.0, c_timeAI);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(16, 16, 20), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(3, 3, 4), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    Wait(35.0, c_timeAI);
    Wait(190.0, c_timeAI);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(1, 1, 3), gv_pLAYER_03_YAGDRA, 35.0);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(26, 26, 30), libHots_gf_DifficultyValueInt2(5, 5, 7), libHots_gf_DifficultyValueInt2(5, 5, 6), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.6));
    Wait(35.0, c_timeAI);
    Wait(134.0, c_timeAI);
    TriggerExecute(gt_PincerAttackQ, true, false);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(0, 0, 3), gv_pLAYER_03_YAGDRA, 5.0);
    gv_allowAirHarassment = true;
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(1, 1, 3), gv_pLAYER_03_YAGDRA, 35.0);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(20, 20, 24), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    Wait(35.0, c_timeAI);
    Wait(190.0, c_timeAI);
    gv_allowAirHarassment = true;
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(2, 2, 4), gv_pLAYER_03_YAGDRA, 0.0);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(20, 20, 24), libHots_gf_DifficultyValueInt2(5, 5, 6), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.6));
    Wait(35.0, c_timeAI);
    Wait(134.0, c_timeAI);
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(2, 2, 3), gv_pLAYER_03_YAGDRA, 5.0);
    gv_allowAirHarassment = true;
    gf_CreatePrimalAirWave(libHots_gf_DifficultyValueInt2(2, 2, 3), gv_pLAYER_03_YAGDRA, 35.0);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(22, 22, 32), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(4, 4, 6), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.6));
    Wait(35.0, c_timeAI);
    Wait(192.0, c_timeAI);
    TriggerExecute(gt_BrakkIsDeadQ, true, false);
    Wait(5.0, c_timeAI);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(10, 10, 14), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(10, 10, 14), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(8, 8, 12), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 1), 35.0, RegionFromId(26), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(8, 8, 12), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(28), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    Wait(40.0, c_timeAI);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(12, 12, 16), libHots_gf_DifficultyValueInt2(3, 3, 4), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(12, 12, 16), libHots_gf_DifficultyValueInt2(3, 3, 4), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(8, 8, 10), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 1), 35.0, RegionFromId(26), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(8, 8, 10), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(28), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    Wait(35.0, c_timeAI);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(14, 14, 18), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(1, 1, 2), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(14, 14, 18), libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueInt2(1, 1, 2), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 1), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(10, 10, 12), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 3), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 1), 35.0, RegionFromId(26), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(10, 10, 12), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(0, 0, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(28), libHots_gf_DifficultyValueFixed2(0.7, 0.7, 0.5));
    Wait(30.0, c_timeAI);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(14, 14, 20), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(14, 14, 20), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(1, 1, 1), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(10, 10, 12), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(1, 1, 1), 35.0, RegionFromId(26), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(10, 10, 12), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(0, 0, 2), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(1, 1, 1), 35.0, RegionFromId(28), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    Wait(30.0, c_timeAI);
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(16, 16, 24), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(27), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(16, 16, 24), libHots_gf_DifficultyValueInt2(4, 4, 5), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(1, 1, 1), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(25), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(14, 14, 16), libHots_gf_DifficultyValueInt2(2, 2, 2), libHots_gf_DifficultyValueInt2(2, 2, 2), libHots_gf_DifficultyValueInt2(2, 2, 2), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(26), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    gf_CreatePrimalAttackWave(libHots_gf_DifficultyValueInt2(14, 14, 16), libHots_gf_DifficultyValueInt2(2, 2, 2), libHots_gf_DifficultyValueInt2(2, 2, 2), libHots_gf_DifficultyValueInt2(2, 2, 2), libHots_gf_DifficultyValueInt2(0, 0, 0), libHots_gf_DifficultyValueInt2(0, 0, 0), 35.0, RegionFromId(28), libHots_gf_DifficultyValueFixed2(0.5, 0.5, 0.4));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YagdraAttacks_Init () {
    gt_YagdraAttacks = TriggerCreate("gt_YagdraAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rock Breaking Waves
//--------------------------------------------------------------------------------------------------
bool gt_RockBreakingWaves_Func (bool testConds, bool runActions) {
    int autoF43B24C2_n;
    int autoF43B24C2_i;
    int auto1347C104_n;
    int auto1347C104_i;
    int autoB8631929_n;
    int autoB8631929_i;

    // Variable Declarations
    unitgroup lv_rockBreakers;
    region lv_rockRegion;

    // Variable Initialization
    lv_rockBreakers = UnitGroupEmpty();
    lv_rockRegion = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rockRegion = RegionCircle(PointFromId(2534), 4.0);
    while (true) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(18), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", c_animFlagPlayForever, c_animTimeDefault);
        autoF43B24C2_n = libHots_gf_DifficultyValueInt2(4, 4, 6);
        autoF43B24C2_i = 1;
        while (autoF43B24C2_i <= autoF43B24C2_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_03_YAGDRA, PointFromId(106));
            UnitGroupAdd(lv_rockBreakers, UnitLastCreated());
            autoF43B24C2_i = autoF43B24C2_i + 1;
        }
        auto1347C104_n = libHots_gf_DifficultyValueInt2(2, 2, 3);
        auto1347C104_i = 1;
        while (auto1347C104_i <= auto1347C104_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_03_YAGDRA, PointFromId(106));
            UnitGroupAdd(lv_rockBreakers, UnitLastCreated());
            auto1347C104_i = auto1347C104_i + 1;
        }
        libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(18), null, c_animNameDefault);
        autoB8631929_n = 80;
        autoB8631929_i = 1;
        while (autoB8631929_i <= autoB8631929_n) {
            if ((gv_gameOver == true)) {
                return true;
            }
            else {
            }
            if ((UnitIsAlive(UnitFromId(15)) == false)) {
                UnitGroupLoopBegin(lv_rockBreakers);
                while (!UnitGroupLoopDone()) {
                    AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
                    AISetUnitSuicide(UnitGroupLoopCurrent(), true);
                    UnitGroupLoopStep();
                }
                UnitGroupLoopEnd();
                TriggerExecute(gt_RocksBrokenWaves, true, false);
                return true;
            }
            else {
            }
            UnitGroupLoopBegin(lv_rockBreakers);
            while (!UnitGroupLoopDone()) {
                if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), lv_rockRegion) == true)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(15)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2534)), c_orderQueueReplace);
                }
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            Wait(1.0, c_timeAI);
            autoB8631929_i = autoB8631929_i + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RockBreakingWaves_Init () {
    gt_RockBreakingWaves = TriggerCreate("gt_RockBreakingWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocks Broken Waves
//--------------------------------------------------------------------------------------------------
bool gt_RocksBrokenWaves_Func (bool testConds, bool runActions) {
    int auto35E62F39_n;
    int auto35E62F39_i;
    int auto02C68904_n;
    int auto02C68904_i;
    int autoD0D28DF5_n;
    int autoD0D28DF5_i;
    int auto917D65F1_n;
    int auto917D65F1_i;

    // Variable Declarations
    unitgroup lv_rockAttackGroup;

    // Variable Initialization
    lv_rockAttackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        lv_rockAttackGroup = UnitGroupEmpty();
        if ((RandomInt(1, 2) == 1) && (gv_stopCeremonialFight == false)) {
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(9), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", c_animFlagPlayForever, c_animTimeDefault);
            autoD0D28DF5_n = libHots_gf_DifficultyValueInt2(6, 6, 8);
            autoD0D28DF5_i = 1;
            while (autoD0D28DF5_i <= autoD0D28DF5_n) {
                libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_02_BRAKK, PointFromId(882));
                UnitGroupAdd(lv_rockAttackGroup, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(4.0, 8.0), RandomFixed(330.0, 390.0))), c_orderQueueReplace);
                Wait(0.5, c_timeAI);
                autoD0D28DF5_i = autoD0D28DF5_i + 1;
            }
            auto917D65F1_n = libHots_gf_DifficultyValueInt2(2, 2, 3);
            auto917D65F1_i = 1;
            while (auto917D65F1_i <= auto917D65F1_n) {
                libNtve_gf_CreateUnitsAtPoint2(1, "PrimalRoach", 0, gv_pLAYER_02_BRAKK, PointFromId(882));
                UnitGroupAdd(lv_rockAttackGroup, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(4.0, 8.0), RandomFixed(330.0, 390.0))), c_orderQueueReplace);
                Wait(0.5, c_timeAI);
                auto917D65F1_i = auto917D65F1_i + 1;
            }
            libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(9), null, c_animNameDefault);
            UnitGroupLoopBegin(lv_rockAttackGroup);
            while (!UnitGroupLoopDone()) {
                AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_02_BRAKK, gv_chrysalis);
            AIAttackWaveUseGroup(gv_pLAYER_02_BRAKK, lv_rockAttackGroup);
            AIAttackWaveSend(gv_pLAYER_02_BRAKK, 0, false);
        }
        else {
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(18), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", c_animFlagPlayForever, c_animTimeDefault);
            auto35E62F39_n = libHots_gf_DifficultyValueInt2(6, 6, 8);
            auto35E62F39_i = 1;
            while (auto35E62F39_i <= auto35E62F39_n) {
                libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", 0, gv_pLAYER_03_YAGDRA, PointFromId(106));
                UnitGroupAdd(lv_rockAttackGroup, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(4.0, 8.0), RandomFixed(100.0, 170.0))), c_orderQueueReplace);
                Wait(0.5, c_timeAI);
                auto35E62F39_i = auto35E62F39_i + 1;
            }
            auto02C68904_n = libHots_gf_DifficultyValueInt2(2, 2, 3);
            auto02C68904_i = 1;
            while (auto02C68904_i <= auto02C68904_n) {
                libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", 0, gv_pLAYER_03_YAGDRA, PointFromId(106));
                UnitGroupAdd(lv_rockAttackGroup, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), RandomFixed(4.0, 8.0), RandomFixed(100.0, 170.0))), c_orderQueueReplace);
                Wait(0.5, c_timeAI);
                auto02C68904_i = auto02C68904_i + 1;
            }
            libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(18), null, c_animNameDefault);
            AISetGroupScriptControlled(lv_rockAttackGroup, false);
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_YAGDRA, gv_chrysalis);
            AIAttackWaveUseGroup(gv_pLAYER_03_YAGDRA, lv_rockAttackGroup);
            AIAttackWaveSend(gv_pLAYER_03_YAGDRA, 0, false);
        }
        Wait(libHots_gf_DifficultyValueFixed2(74.0, 74.0, 71.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RocksBrokenWaves_Init () {
    gt_RocksBrokenWaves = TriggerCreate("gt_RocksBrokenWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viper AI
//--------------------------------------------------------------------------------------------------
bool gt_ViperAI_Func (bool testConds, bool runActions) {
    unitgroup autoCA4C990C_g;
    int autoCA4C990C_u;

    // Variable Declarations
    unitgroup lv_validEnemies;
    unit lv_currentUnit;

    // Variable Initialization
    lv_validEnemies = UnitGroupEmpty();
    lv_currentUnit = null;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Viper", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) >= 25.0)) {
            lv_validEnemies = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 12.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCA4C990C_g = lv_validEnemies;
            autoCA4C990C_u = 1;
            while (autoCA4C990C_u <= UnitGroupCount(autoCA4C990C_g, c_unitCountAll)) {
                lv_currentUnit = UnitGroupUnit(autoCA4C990C_g, autoCA4C990C_u);
                if (((UnitGetCustomValue(lv_currentUnit, 1) > 1.0) || (UnitGetType(lv_currentUnit) == "Locust") || (DistanceBetweenPoints(UnitGetPosition(lv_currentUnit), UnitGetPosition(UnitGroupLoopCurrent())) <= 4.0))) {
                    UnitGroupRemove(lv_validEnemies, UnitGroupLoopCurrent());
                }
                else {
                }
                if (lv_currentUnit == UnitGroupUnit(autoCA4C990C_g, autoCA4C990C_u)) {
                    autoCA4C990C_u = autoCA4C990C_u + 1;
                }
            }
            if ((UnitGroupCount(lv_validEnemies, c_unitCountAlive) >= 1)) {
                lv_currentUnit = UnitGroupClosestToPoint(lv_validEnemies, UnitGetPosition(UnitGroupLoopCurrent()));
                libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("Yoink", 0), lv_currentUnit));
                UnitSetCustomValue(lv_currentUnit, 1, 2.0);
            }
            else {
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ViperAI_Init () {
    gt_ViperAI = TriggerCreate("gt_ViperAI_Func");
    TriggerAddEventTimePeriodic(gt_ViperAI, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Intercept
//--------------------------------------------------------------------------------------------------
bool gt_AIIntercept_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_BRAKK, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_chrysalis)));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_YAGDRA, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_chrysalis)));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIIntercept_Init () {
    gt_AIIntercept = TriggerCreate("gt_AIIntercept_Func");
    TriggerAddEventTimePeriodic(gt_AIIntercept, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/1F2679D6"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/364DA5E3"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Chrysalis Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatChrysalisDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveChrysalisMustSurviveFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/733C25A0"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatChrysalisDestroyed_Init () {
    gt_DefeatChrysalisDestroyed = TriggerCreate("gt_DefeatChrysalisDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatChrysalisDestroyed, UnitRefFromVariable("gv_chrysalis"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Kerrigan Killed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKerriganKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/7E498166"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKerriganKilled_Init () {
    gt_DefeatKerriganKilled = TriggerCreate("gt_DefeatKerriganKilled_Func");
    TriggerAddEventUnitDied(gt_DefeatKerriganKilled, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Holdout Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryHoldoutCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryHoldoutCompleted_Init () {
    gt_VictoryHoldoutCompleted = TriggerCreate("gt_VictoryHoldoutCompleted_Func");
    TriggerAddEventTimer(gt_VictoryHoldoutCompleted, gv_holdoutTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    UnitSetState(gv_chrysalis, c_unitStateInvulnerable, true);
    TriggerExecute(gt_ObjectiveChrysalisMustSurviveComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase2) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZZerus02_1", gv_pLAYER_01_USER);
    }
    else {
    }
    TriggerExecute(gt_AchievementChrysalisDamageNH, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/DD1EA73E"), IntToText(gv_carrionLocustKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9BF2127C"), FixedToText(gv_totalChrysalisDamageTaken, 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E53DC0A9"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BBEF4529"), IntToText(gv_largestForce));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/31B2B553"), IntToText(gv_spawnLocustsUsed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/284205FE"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_04_TYRANNOZOR, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/1D244F41"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(gv_victoryStatTyrannozorLifeTimer)));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Carrion Locust Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementCarrionLocustKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_carrionLocustKills >= 75))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZZerus02_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementCarrionLocustKills_Init () {
    gt_AchievementCarrionLocustKills = TriggerCreate("gt_AchievementCarrionLocustKills_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Chrysalis Damage N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementChrysalisDamageNH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_chrysalisDamaged == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZZerus02_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementChrysalisDamageNH_Init () {
    gt_AchievementChrysalisDamageNH = TriggerCreate("gt_AchievementChrysalisDamageNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Timed Tyrannozor Kill H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimedTyrannozorKillH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_achievementTimedTyrannozorKillTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Zerus2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimedTyrannozorKillH_Init () {
    gt_AchievementTimedTyrannozorKillH = TriggerCreate("gt_AchievementTimedTyrannozorKillH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Largest Force
//--------------------------------------------------------------------------------------------------
bool gt_LargestForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentForce;

    // Variable Initialization
    lv_currentForce = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentForce = PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount");
    if ((lv_currentForce > gv_largestForce)) {
        gv_largestForce = lv_currentForce;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LargestForce_Init () {
    gt_LargestForce = TriggerCreate("gt_LargestForce_Func");
    TriggerAddEventTimePeriodic(gt_LargestForce, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Proceed To Pool - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProceedToPoolCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus02Objective01");
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProceedToPoolCreate_Init () {
    gt_ObjectiveProceedToPoolCreate = TriggerCreate("gt_ObjectiveProceedToPoolCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Proceed To Pool - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProceedToPoolComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProceedToPoolCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus02Objective01", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProceedToPoolComplete_Init () {
    gt_ObjectiveProceedToPoolComplete = TriggerCreate("gt_ObjectiveProceedToPoolComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Chrysalis Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveChrysalisMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus02Objective3");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 3);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveChrysalisMustSurviveCreate_Init () {
    gt_ObjectiveChrysalisMustSurviveCreate = TriggerCreate("gt_ObjectiveChrysalisMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Chrysalis Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveChrysalisMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveChrysalisMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus02Objective3", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveChrysalisMustSurviveComplete_Init () {
    gt_ObjectiveChrysalisMustSurviveComplete = TriggerCreate("gt_ObjectiveChrysalisMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Chrysalis Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveChrysalisMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveChrysalisMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus02Objective3", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveChrysalisMustSurviveFailed_Init () {
    gt_ObjectiveChrysalisMustSurviveFailed = TriggerCreate("gt_ObjectiveChrysalisMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Kerrigan Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus02Objective04");
    gv_objectiveDestroyDominionBase4 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveCreate_Init () {
    gt_ObjectiveKerriganMustSurviveCreate = TriggerCreate("gt_ObjectiveKerriganMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Kerrigan Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus02Objective04", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveComplete_Init () {
    gt_ObjectiveKerriganMustSurviveComplete = TriggerCreate("gt_ObjectiveKerriganMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Kerrigan Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus02Objective04", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveFailed_Init () {
    gt_ObjectiveKerriganMustSurviveFailed = TriggerCreate("gt_ObjectiveKerriganMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Kill Tyrannozor - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillTyrannozorCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus02Objective02");
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillTyrannozorCreate_Init () {
    gt_ObjectiveKillTyrannozorCreate = TriggerCreate("gt_ObjectiveKillTyrannozorCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Kill Tyrannozor - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillTyrannozorComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillTyrannozorCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus02Objective02", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillTyrannozorComplete_Init () {
    gt_ObjectiveKillTyrannozorComplete = TriggerCreate("gt_ObjectiveKillTyrannozorComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libSwaC_gf_EnableDisableNeedOverlordInfo(false);
    UnitPauseAll(true);
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_ShowHideUnit(UnitFromId(20), false);
    Wait(0.1, c_timeGame);
    CreepModify(PointFromId(2), 40.0, false, false);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_02_BRAKK, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(198), 0.0, -1, 10, true);
    TriggerExecute(gt_IntroZerg, true, false);
    TriggerExecute(gt_IntroKerriganDropPod, true, false);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus02|Line00038", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus02|Line00039", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerExecute(gt_IntroSwampPlants, true, false);
    TriggerExecute(gt_IntroArtosilope, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(141), 21.0, -1, 10, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus02|Line00042", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus02|Line00043", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus02|Line00037", c_transmissionDurationAdd, 0.0, true, 1, 0);
    if (((SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00042", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00043", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00037", true), c_soundIndexAny))) < 21.0)) {
        Wait((21 - SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00042", true), c_soundIndexAny)) - SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00043", true), c_soundIndexAny)) - SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00037", true), c_soundIndexAny))), c_timeReal);
    }
    else {
    }
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(903), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00131", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus02|Line00089", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    TriggerExecute(gt_IntroSwarmHostDropPods, true, false);
    Wait(3.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus02|Line00071", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    int autoBC6B256B_n;
    int autoBC6B256B_i;
    int auto1037F09A_n;
    int auto1037F09A_i;
    int autoC107E14D_n;
    int autoC107E14D_i;

    // Variable Declarations
    unitgroup lv_startingSelection;
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_startingSelection = UnitGroupEmpty();
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroZerg);
    TriggerStop(gt_IntroSwampPlants);
    TriggerStop(gt_IntroArtosilope);
    TriggerStop(gt_IntroKerriganDropPod);
    if ((gv_cinematicCompleted == false) && (gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    libNtve_gf_ShowHideUnit(UnitFromId(20), true);
    UnitGroupLoopBegin(gv_playerBase);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(24)), c_orderQueueReplace);
    if ((gv_cinematicCompleted == false)) {
        UnitSetPosition(gv_kerrigan, PointFromId(24), false);
        UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopBegin(gv_swarmHostGroup);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitCreate(3, "SwarmHost", 0, gv_pLAYER_01_USER, PointFromId(170), PointGetFacing(PointFromId(160)));
        UnitGroupAddUnitGroup(gv_swarmHostGroup, UnitLastCreatedGroup());
        UnitCreate(2, "SwarmHost", 0, gv_pLAYER_01_USER, PointFromId(4), PointGetFacing(PointFromId(160)));
        UnitGroupAddUnitGroup(gv_swarmHostGroup, UnitLastCreatedGroup());
    }
    else {
    }
    UnitRemove(UnitFromId(1766));
    autoBC6B256B_n = libHots_gf_DifficultyValueInt2(6, 6, 10);
    autoBC6B256B_i = 1;
    while (autoBC6B256B_i <= autoBC6B256B_n) {
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_introAttackUnits, UnitLastCreated());
        autoBC6B256B_i = autoBC6B256B_i + 1;
    }
    auto1037F09A_n = libHots_gf_DifficultyValueInt2(1, 1, 1);
    auto1037F09A_i = 1;
    while (auto1037F09A_i <= auto1037F09A_n) {
        UnitCreate(1, "PrimalRoach", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_introAttackUnits, UnitLastCreated());
        auto1037F09A_i = auto1037F09A_i + 1;
    }
    autoC107E14D_n = libHots_gf_DifficultyValueInt2(1, 1, 2);
    autoC107E14D_i = 1;
    while (autoC107E14D_i <= autoC107E14D_n) {
        UnitCreate(1, "PrimalHydralisk", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(8)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_introAttackUnits, UnitLastCreated());
        autoC107E14D_i = autoC107E14D_i + 1;
    }
    UnitCreate(1, "PrimalUltralisk", 0, gv_pLAYER_02_BRAKK, PointFromId(196), 135.0);
    UnitGroupAdd(gv_introAttackUnits, UnitLastCreated());
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ZerusSwampPlants", c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ZerusSwampPlantsLarge", c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    RegionPlayableMapSet(RegionFromId(22));
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    SoundStop(gv_introImpactSound1, true);
    SoundStop(gv_introImpactSound2, true);
    SoundStop(gv_introSteamSound, true);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_02_BRAKK, 5);
    UnitGroupAdd(lv_startingSelection, gv_kerrigan);
    UnitGroupAddUnitGroup(lv_startingSelection, gv_swarmHostGroup);
    UnitGroupSelect(lv_startingSelection, gv_pLAYER_01_USER, true);
    TriggerExecute(gt_StartAIIntro, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(24), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    gv_inCinematic = false;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerg_Func (bool testConds, bool runActions) {
    int auto0CC366D2_n;
    int auto0CC366D2_i;
    int auto5404D576_n;
    int auto5404D576_i;
    int auto5CA3EAED_n;
    int auto5CA3EAED_i;
    int auto90936BB9_n;
    int auto90936BB9_i;

    // Variable Declarations
    unitgroup lv_introZerg;

    // Variable Initialization
    lv_introZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0CC366D2_n = 12;
    auto0CC366D2_i = 1;
    while (auto0CC366D2_i <= auto0CC366D2_n) {
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        auto0CC366D2_i = auto0CC366D2_i + 1;
    }
    auto5404D576_n = 3;
    auto5404D576_i = 1;
    while (auto5404D576_i <= auto5404D576_n) {
        UnitCreate(1, "PrimalRoach", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        auto5404D576_i = auto5404D576_i + 1;
    }
    auto5CA3EAED_n = 3;
    auto5CA3EAED_i = 1;
    while (auto5CA3EAED_i <= auto5CA3EAED_n) {
        UnitCreate(1, "PrimalHydralisk", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        auto5CA3EAED_i = auto5CA3EAED_i + 1;
    }
    auto90936BB9_n = 1;
    auto90936BB9_i = 1;
    while (auto90936BB9_i <= auto90936BB9_n) {
        UnitCreate(1, "PrimalUltralisk", 0, gv_pLAYER_02_BRAKK, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        auto90936BB9_i = auto90936BB9_i + 1;
    }
    while (true) {
        UnitGroupLoopBegin(lv_introZerg);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerg_Init () {
    gt_IntroZerg = TriggerCreate("gt_IntroZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Swamp Plants
//--------------------------------------------------------------------------------------------------
bool gt_IntroSwampPlants_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.5, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ZerusSwampPlants", c_animNameDefault, "Morph", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ZerusSwampPlantsLarge", c_animNameDefault, "Morph", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.334, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ZerusSwampPlants", c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ZerusSwampPlantsLarge", c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSwampPlants_Init () {
    gt_IntroSwampPlants = TriggerCreate("gt_IntroSwampPlants_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Artosilope
//--------------------------------------------------------------------------------------------------
bool gt_IntroArtosilope_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artosilope;

    // Variable Initialization
    lv_artosilope = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Artosilope", 0, 0, PointFromId(1804), 250.0);
    lv_artosilope = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, lv_artosilope);
    UnitSetPropertyFixed(lv_artosilope, c_unitPropLife, 1.0);
    UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_BRAKK, PointFromId(1805), 225.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(6.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_artosilope), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroArtosilope_Init () {
    gt_IntroArtosilope = TriggerCreate("gt_IntroArtosilope_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Kerrigan Drop Pod
//--------------------------------------------------------------------------------------------------
bool gt_IntroKerriganDropPod_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(160), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(114)), 0, 0);
    gv_kerrigan = UnitLastCreated();
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    libSwaC_gf_CreateDropPod(1, PointFromId(114), libNtve_gf_ConvertUnitToUnitGroup(gv_kerrigan), false, gv_pLAYER_01_USER);
    Wait(2.8, c_timeGame);
    SoundPlay(SoundLink("Zerus02_OpenCS_ZergDropPod_Impact", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introImpactSound1 = SoundLastPlayed();
    Wait(1.2, c_timeGame);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(24)), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    SoundPlay(SoundLink("Zerus02_Steam_GroundVapor", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSteamSound = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroKerriganDropPod_Init () {
    gt_IntroKerriganDropPod = TriggerCreate("gt_IntroKerriganDropPod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Swarm Host Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_IntroSwarmHostDropPods_Func (bool testConds, bool runActions) {
    int auto02D53C93_n;
    int auto02D53C93_i;
    int auto47C28F54_n;
    int auto47C28F54_i;

    // Variable Declarations
    unitgroup lv_dropGroup;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto02D53C93_n = 3;
    auto02D53C93_i = 1;
    while (auto02D53C93_i <= auto02D53C93_n) {
        UnitCreate(1, "SwarmHost", 0, gv_pLAYER_01_USER, PointFromId(170), PointGetFacing(PointFromId(160)));
        UnitGroupAdd(gv_swarmHostGroup, UnitLastCreated());
        UnitGroupAdd(lv_dropGroup, UnitLastCreated());
        auto02D53C93_i = auto02D53C93_i + 1;
    }
    libSwaC_gf_CreateDropPod(1, PointFromId(170), lv_dropGroup, false, gv_pLAYER_01_USER);
    Wait(0.5, c_timeReal);
    lv_dropGroup = UnitGroupEmpty();
    auto47C28F54_n = 2;
    auto47C28F54_i = 1;
    while (auto47C28F54_i <= auto47C28F54_n) {
        UnitCreate(1, "SwarmHost", 0, gv_pLAYER_01_USER, PointFromId(4), PointGetFacing(PointFromId(160)));
        UnitGroupAdd(gv_swarmHostGroup, UnitLastCreated());
        UnitGroupAdd(lv_dropGroup, UnitLastCreated());
        auto47C28F54_i = auto47C28F54_i + 1;
    }
    libSwaC_gf_CreateDropPod(1, PointFromId(4), lv_dropGroup, false, gv_pLAYER_01_USER);
    Wait(2.3, c_timeGame);
    SoundPlay(SoundLink("Zerus_ZergDropPod_Impact", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introImpactSound1 = SoundLastPlayed();
    Wait(0.5, c_timeReal);
    SoundPlay(SoundLink("Zerus_ZergDropPod_Impact", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introImpactSound2 = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSwarmHostDropPods_Init () {
    gt_IntroSwarmHostDropPods = TriggerCreate("gt_IntroSwarmHostDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZZerus02MissionIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    int autoC2E910C5_ae;
    int autoC2E910C5_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    PlayerSetAlliance(gv_pLAYER_02_BRAKK, c_allianceIdVision, gv_pLAYER_01_USER, false);
    TriggerEnable(gt_DEBUGMidCinematic, false);
    UnitClearSelection(gv_pLAYER_01_USER);
    RegionPlayableMapSet(RegionFromId(23));
    ObjectiveShow(gv_objectiveDestroyDominionBase4, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase3, PlayerGroupAll(), false);
    UnitRemove(gv_kerrigan);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitBehaviorAdd(gv_chrysalis, "SuppressCollision", gv_chrysalis, 1);
    UnitSetPosition(UnitGroupUnit(gv_swarmHostGroup, 1), PointFromId(206), false);
    UnitSetPosition(UnitGroupUnit(gv_swarmHostGroup, 2), PointFromId(208), false);
    autoC2E910C5_ae = UnitGroupCount(gv_swarmHostGroup, c_unitCountAlive);
    autoC2E910C5_ai = 1;
    lv_i = 3;
    while ((autoC2E910C5_ai >= 0 && lv_i <= autoC2E910C5_ae) || (autoC2E910C5_ai <= 0 && lv_i >= autoC2E910C5_ae)) {
        UnitSetPosition(UnitGroupUnit(gv_swarmHostGroup, lv_i), RegionRandomPoint(RegionFromId(14)), false);
        if (lv_i == autoC2E910C5_ae) {
            break;
        }
        lv_i = lv_i + autoC2E910C5_ai;
    }
    gf_OrderSwarmHoststoUproot(gv_swarmHostGroup);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_swarmHostGroup);
    UnitGroupLoopBegin(gv_introAttackUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_tempPoint;
    unitgroup lv_movementGroup;

    // Variable Initialization
    lv_tempPoint = null;
    lv_movementGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1748), 0.0, -1, 10.0, true);
    libSwaC_gf_CreateHero2(PointFromId(1821), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(1821)), 0, 1);
    gv_midKerrigan = UnitLastCreated();
    UnitBehaviorAdd(gv_midKerrigan, "KerriganWalk", gv_midKerrigan, 1);
    UnitSetState(gv_midKerrigan, c_unitStateFidget, false);
    UnitGroupAdd(gv_cinematicTempUnits, gv_midKerrigan);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1750), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00038", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00039", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus02|Line00034", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1751), 4.0, -1, 10.0, true);
    SoundPlay(SoundLink("Zerus02_CS_2_Kerrigan_WaterWalkPt1", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midWaterwalk = SoundLastPlayed();
    UnitIssueOrder(gv_midKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(983)), c_orderQueueReplace);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus02|Line00035", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1644), 0.0, -1, 10.0, true);
    libNtve_gf_ShowHideUnit(gv_midKerrigan, false);
    UnitSetPosition(gv_midKerrigan, PointFromId(1821), false);
    GameSetLighting("AiurFlashback", 0.0);
    SoundPlay(SoundLink("Zerus02_CS_2_SepiaFB", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midFlashback = SoundLastPlayed();
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1648), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00025", true), c_soundIndexAny))), -1, 10.0, true);
    libNtve_gf_CreateExplosionAtPoint(1, 2, PointFromId(36));
    UnitCreate(1, "PrimalLarvaBirth", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, libNtve_gf_PointWithZOffset(PointFromId(36), 0.0), 315.0);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus02|Line00025", c_transmissionDurationAdd, 0.0, false, 2, 0);
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1751), 0.0, -1, 10.0, true);
    UnitRemove(UnitLastCreated());
    UnitSetPosition(gv_midKerrigan, PointFromId(983), false);
    libNtve_gf_ShowHideUnit(gv_midKerrigan, true);
    GameSetLighting("Zerus", 0.0);
    UnitGroupLoopBegin(gv_swarmHostGroup);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_playerBase);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(UnitGetPosition(UnitFromId(8)), 13.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(1823)), 9.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(210)), 9.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(209)), 9.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(212)), 9.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(1822)), 9.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(1)), 9.0, true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus02|Line00026", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(905), 4.0, -1, 10.0, true);
    SoundPlay(SoundLink("Zerus02_CS_2_Kerrigan_WaterWalkPt2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midWaterwalk = SoundLastPlayed();
    UnitIssueOrder(gv_midKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(36)), c_orderQueueReplace);
    UnitIssueOrder(gv_midKerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(5)), c_orderQueueAddToEnd);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus02|Line00040", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1826), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00041", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00030", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_midKerrigan, "zBriefing_Zerus02|Line00041", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TriggerExecute(gt_MidChrysalisAnimations, true, false);
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_chrysalis, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_midKerrigan, "zBriefing_Zerus02|Line00030", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus02|Line00029", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Spire") && (UnitGetType(UnitGroupLoopCurrent()) != "GreaterSpire")) {
            lv_tempPoint = UnitGetPosition(UnitGroupLoopCurrent());
            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(lv_tempPoint, 6.0, AngleBetweenPoints(PointFromId(2432), lv_tempPoint)), false);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
            UnitGroupAdd(lv_movementGroup, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1753), 8.0, -1, 10.0, true);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(lv_movementGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(7.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;
    point[8] lv_swarmHostPoints;

    // Variable Initialization
    lv_fadeDuration = 0.0;
    lv_i = 0;
    init_i = 0;
    while (init_i <= 7) {
        lv_swarmHostPoints[init_i] = null;
        init_i = init_i + 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus02MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_cinematicCompleted == false)) {
        TriggerStop(gt_MidChrysalisAnimations);
        CameraShakeStop(gv_pLAYER_01_USER);
        SoundStop(gv_midStinger, true);
        SoundStop(gv_midFlashback, true);
        SoundStop(gv_midWaterwalk, true);
        SoundStop(gv_midQuake, true);
        SoundStop(gv_midQuakeAmbience, true);
        UnitGroupLoopBegin(gv_swarmHostGroup);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_playerBase);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        CreepModify(UnitGetPosition(UnitFromId(8)), 13.0, true, false);
        CreepModify(UnitGetPosition(UnitFromId(1823)), 9.0, true, false);
        CreepModify(UnitGetPosition(UnitFromId(210)), 9.0, true, false);
        CreepModify(UnitGetPosition(UnitFromId(209)), 9.0, true, false);
        CreepModify(UnitGetPosition(UnitFromId(212)), 9.0, true, false);
        CreepModify(UnitGetPosition(UnitFromId(1822)), 9.0, true, false);
        CreepModify(UnitGetPosition(UnitFromId(1)), 9.0, true, false);
        libSwaC_gf_SpawnLarvaForHatchery(UnitFromId(8), 3);
        libNtve_gf_ShowHideUnit(gv_chrysalis, true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_chrysalis), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_chrysalis), c_animNameDefault, 1.0);
    }
    else {
    }
    UnitPauseAll(false);
    UnitBehaviorRemove(gv_chrysalis, "SuppressCollision", 1);
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(8), PointFromId(2440));
    UnitSetOwner(gv_chrysalis, gv_pLAYER_01_USER, true);
    UIAlertClear(gv_pLAYER_01_USER);
    libSwaC_gf_SetHeroPanelUnit(1, gv_chrysalis);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    GameSetLighting("Zerus", 0.0);
    TriggerEnable(gt_DefeatBaseDead, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libSwaC_gf_EnableDisableNeedOverlordInfo(true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(2));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(46), RegionFromId(47));
    TriggerExecute(gt_StartAIHoldout, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1721), lv_fadeDuration, -1, 10, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1721)), lv_fadeDuration);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeGame);
    TriggerExecute(gt_StartGameMainHoldoutQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Chrysalis Animations
//--------------------------------------------------------------------------------------------------
bool gt_MidChrysalisAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_originalDuration;
    fixed lv_neededDuration;

    // Variable Initialization
    lv_originalDuration = 0.0;
    lv_neededDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalDuration = 1.5;
    lv_neededDuration = (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00041", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus02|Line00030", true), c_soundIndexAny)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_chrysalis), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_chrysalis), c_animNameDefault, (lv_originalDuration / lv_neededDuration));
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, (lv_neededDuration / 2.0));
    SoundPlay(SoundLink("StingerChrysalis", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midStinger = SoundLastPlayed();
    SoundPlayOnUnit(SoundLink("Ambience_Zerus02Quake", -1), PlayerGroupAll(), gv_chrysalis, 0.0, 100.0, 0.0);
    gv_midQuakeAmbience = SoundLastPlayed();
    SoundPlayOnUnit(SoundLink("Zerus02_CS_2_ChrysalisQuake", -1), PlayerGroupAll(), gv_chrysalis, 0.0, 100.0, 0.0);
    gv_midQuake = SoundLastPlayed();
    Wait((lv_neededDuration / 2.0), c_timeGame);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.05, 2.0, 100.0, (lv_neededDuration / 2.0));
    Wait((lv_neededDuration / 2.0), c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_chrysalis), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_chrysalis), c_animNameDefault, 1.0);
    CameraShakeStop(gv_pLAYER_01_USER);
    SoundStop(gv_midQuakeAmbience, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidChrysalisAnimations_Init () {
    gt_MidChrysalisAnimations = TriggerCreate("gt_MidChrysalisAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "Zzerus02MusicCutscene01_PrimalSpawningPool";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus02MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    SoundStop(gv_ambienceRain, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libSwaC_gf_PlayCinematic("Zerg08 - Wings", true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGMidCinematic_Init();
    gt_StartGameIntroSectionQ_Init();
    gt_SwarmHostQ_Init();
    gt_SwarmHostRootIndicator_Init();
    gt_PrimalEngagedEarly_Init();
    gt_IntroPrimalAttack_Init();
    gt_PrimalForcesKilledQ_Init();
    gt_KerriganIsCloseQ_Init();
    gt_CreateObjectivePingReveal_Init();
    gt_KerriganReachesPool_Init();
    gt_StartGameMainHoldoutQ_Init();
    gt_CreateHoldoutTimer_Init();
    gt_ChrysalisPing_Init();
    gt_EventSequence_Init();
    gt_InitialAttackQ_Init();
    gt_YagdraIntroQ_Init();
    gt_BrakkYagdraCeremonialFight_Init();
    gt_BrakkYagdraQ_Init();
    gt_CeremonialFightWarningQ_Init();
    gt_YagdraAttacksPlayerQ_Init();
    gt_FirstAirWaveQ_Init();
    gt_PincerAttackQ_Init();
    gt_RocksQ_Init();
    gt_RocksDieQ_Init();
    gt_BrakkIsDeadQ_Init();
    gt__50Q_Init();
    gt__75Q_Init();
    gt_ChrysalisOpensAnims_Init();
    gt__1MinuteRemainingQ_Init();
    gt_ChrysalisTakesDamage_Init();
    gt_ChrysalisUnderAttackQ_Init();
    gt_SwarmHostRootWarningQ_Init();
    gt_SpawnLocustsQ_Init();
    gt_SpawnLocustsButtonController_Init();
    gt_SpawnLocustsButtonClicked_Init();
    gt_SpawnLocustsUsed_Init();
    gt_SpawnLocustsUsedQ_Init();
    gt_CarrionLocustAttacks_Init();
    gt_CarrionLocustDissipate_Init();
    gt_CarrionLocustKills_Init();
    gt_TyrannozorAmbientFighting_Init();
    gt_SpawnTyrannozorQ_Init();
    gt_TyrannozorLifesteal_Init();
    gt_TyrannozorDiesQ_Init();
    gt_TyrannozorCritterFleeDeactivate_Init();
    gt_TyrannozorCritterFleeActivate_Init();
    gt_PoolBubbles_Init();
    gt_ZerusCritterAttacks_Init();
    gt_SporeRayPatrols_Init();
    gt_InitializeSporeRayPatrols_Init();
    gt_StartAIIntro_Init();
    gt_StartAIHoldout_Init();
    gt_StartUpgradesNormal_Init();
    gt_StartUpgradesHard_Init();
    gt_BrakkAttacks_Init();
    gt_YagdraAttacks_Init();
    gt_RockBreakingWaves_Init();
    gt_RocksBrokenWaves_Init();
    gt_ViperAI_Init();
    gt_AIIntercept_Init();
    gt_TipMissionHelpQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatChrysalisDestroyed_Init();
    gt_DefeatKerriganKilled_Init();
    gt_VictoryHoldoutCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementCarrionLocustKills_Init();
    gt_AchievementChrysalisDamageNH_Init();
    gt_AchievementTimedTyrannozorKillH_Init();
    gt_LargestForce_Init();
    gt_ObjectiveProceedToPoolCreate_Init();
    gt_ObjectiveProceedToPoolComplete_Init();
    gt_ObjectiveChrysalisMustSurviveCreate_Init();
    gt_ObjectiveChrysalisMustSurviveComplete_Init();
    gt_ObjectiveChrysalisMustSurviveFailed_Init();
    gt_ObjectiveKerriganMustSurviveCreate_Init();
    gt_ObjectiveKerriganMustSurviveComplete_Init();
    gt_ObjectiveKerriganMustSurviveFailed_Init();
    gt_ObjectiveKillTyrannozorCreate_Init();
    gt_ObjectiveKillTyrannozorComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZerg_Init();
    gt_IntroSwampPlants_Init();
    gt_IntroArtosilope_Init();
    gt_IntroKerriganDropPod_Init();
    gt_IntroSwarmHostDropPods_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidChrysalisAnimations_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
