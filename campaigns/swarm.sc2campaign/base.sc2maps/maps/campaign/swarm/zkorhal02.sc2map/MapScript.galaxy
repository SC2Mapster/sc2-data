//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Death From Above
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "TriggerLibs/SwarmCampaignDataHelperLib"
include "aiEF862D00"
include "aiD7BF0BBC"
include "ai75F37259"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
    libSCDH_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_03_DOMINION_YELLOW = 3;
const int gv_pLAYER_04_DOMINION_TEAL = 4;
const int gv_pLAYER_05_DOMINION_GREEN = 5;
const int gv_pLAYER_06_DOMINION_ORANGE = 6;
const string gv_powerLinkType = "PsiDisintegratorPowerLink";
const fixed gv_psifieldupdatefrequency = 0.5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unit gv_dEHAKA;
unit gv_kERRIGAN;
playergroup gv_dominionPlayerGroup;
fixed gv_fieldExpansionTime01;
fixed gv_fieldExpansionTime02;
fixed gv_fieldPowerUpTime01;
fixed gv_fieldPowerUpTime02;
int gv_inCombatIndicator;
int[3] gv_playedReinforcementLines;
bool gv_dragUsed;
bool gv_generateSpawnsUsed;
bool gv_mendUsed;
int gv_ping_PowerLink;
revealer gv_powerLinkRevealer;
unit gv_dragTarget;
bool gv_kerriganInFieldPlayed;
int gv_swarmInFieldTransmission;
timer gv_fieldPowerUpWarning01;
timer gv_fieldPowerUpWarning02;
unit gv_psiDestroyer;
unitgroup gv_powerLinkGroup;
fixed gv_psifieldgrowthpersec;
fixed gv_psifieldshrinkpersec;
region gv_psifieldregion;
point gv_psifieldorigin;
fixed gv_psifieldradius;
fixed gv_psifieldradiustarget;
int gv_psifieldstate;
timer gv_psifieldpowerup;
fixed gv_psiFieldResetRadius;
fixed gv_dangerPingScalar;
fixed gv_fieldPingScalar;
region gv_psiFieldSoundRegion;
int gv_fieldPowerTimerWindow;
int gv_reinforcementsZergling;
int gv_reinforcementsRoach;
int gv_reinforcementsHydralisk;
unitgroup gv_dehakasGroup;
int gv_dehakaNudgeTransmission;
int gv_dehakaIdleTime;
bool gv_dominionEngaged;
timer gv_dominionEngageTimer;
int gv_structuresDestroyedBeforeFieldReturn;
bool gv_achievementDehakaDied;
int gv_kerriganKills;
int gv_dehakaKills;
int gv_largestZergForce;
int gv_victoryStatPsiFieldKills;
bool gv_achievementLastPowerLinkAlive;
int gv_objectiveDestroyPowerLink;
int gv_objectiveDestroyPsiDestroyer;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
unitgroup gv_cinematicPrimalUnits;
bool gv_cinematicCompleted;
unitgroup gv_playerBase;
unit gv_cinematicKerrigan;
unit gv_cinematicDehaka;
unitgroup gv_midMinions;
actor gv_introActor;
sound gv_introDestroyerAmb;
sound gv_introDestroyerHubSound;
sound gv_introMutaliskSound;
sound gv_introMutaliskMeatSound;
unit gv_introMarine01;
unit gv_introMarine02;
unit gv_introMarine03;
bool gv_introMusicCompleted;
bool gv_midMusicCompleted;
sound gv_midSound1;
sound gv_midSound2;
sound gv_midFieldDropSound;
sound gv_midFieldPowerupSound;
sound gv_midFieldRaiseSound;
bool gv_midFade;
unit gv_victoryKerrigan;
sound gv_victoryZergSound;

void InitGlobals () {
    int init_i;

    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_dEHAKA = null;
    gv_kERRIGAN = null;
    gv_dominionPlayerGroup = PlayerGroupEmpty();
    gv_fieldExpansionTime01 = 0.0;
    gv_fieldExpansionTime02 = 0.0;
    gv_fieldPowerUpTime01 = 0.0;
    gv_fieldPowerUpTime02 = 0.0;
    gv_inCombatIndicator = 0;
    init_i = 0;
    while (init_i <= 2) {
        gv_playedReinforcementLines[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_dragUsed = false;
    gv_generateSpawnsUsed = false;
    gv_mendUsed = false;
    gv_ping_PowerLink = c_invalidPingId;
    gv_powerLinkRevealer = null;
    gv_dragTarget = UnitFromId(448);
    gv_kerriganInFieldPlayed = false;
    gv_swarmInFieldTransmission = 0;
    gv_fieldPowerUpWarning01 = TimerCreate();
    gv_fieldPowerUpWarning02 = TimerCreate();
    gv_psiDestroyer = UnitFromId(26);
    gv_powerLinkGroup = UnitGroupEmpty();
    gv_psifieldgrowthpersec = 0.0;
    gv_psifieldshrinkpersec = 0.0;
    gv_psifieldregion = RegionFromId(13);
    gv_psifieldorigin = UnitGetPosition(gv_psiDestroyer);
    gv_psifieldradius = (libNtve_gf_WidthOfRegion(RegionFromId(13)) * 0.5);
    gv_psifieldradiustarget = (libNtve_gf_WidthOfRegion(RegionFromId(13)) * 0.5);
    gv_psifieldstate = 2;
    gv_psifieldpowerup = TimerCreate();
    gv_psiFieldResetRadius = (libNtve_gf_WidthOfRegion(RegionFromId(14)) * 0.5);
    gv_dangerPingScalar = 0.075;
    gv_fieldPingScalar = 0.105;
    gv_psiFieldSoundRegion = null;
    gv_fieldPowerTimerWindow = c_timerWindowNone;
    gv_reinforcementsZergling = 0;
    gv_reinforcementsRoach = 0;
    gv_reinforcementsHydralisk = 0;
    gv_dehakasGroup = UnitGroupEmpty();
    gv_dehakaNudgeTransmission = 0;
    gv_dehakaIdleTime = 0;
    gv_dominionEngaged = false;
    gv_dominionEngageTimer = TimerCreate();
    gv_structuresDestroyedBeforeFieldReturn = 0;
    gv_achievementDehakaDied = false;
    gv_kerriganKills = 0;
    gv_dehakaKills = 0;
    gv_largestZergForce = 0;
    gv_victoryStatPsiFieldKills = 0;
    gv_achievementLastPowerLinkAlive = false;
    gv_objectiveDestroyPowerLink = c_invalidObjectiveId;
    gv_objectiveDestroyPsiDestroyer = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPrimalUnits = UnitGroupEmpty();
    gv_cinematicCompleted = false;
    gv_playerBase = UnitGroupEmpty();
    gv_cinematicKerrigan = null;
    gv_cinematicDehaka = null;
    gv_midMinions = UnitGroupEmpty();
    gv_introActor = null;
    gv_introDestroyerAmb = null;
    gv_introDestroyerHubSound = null;
    gv_introMutaliskSound = null;
    gv_introMutaliskMeatSound = null;
    gv_introMarine01 = null;
    gv_introMarine02 = null;
    gv_introMarine03 = null;
    gv_introMusicCompleted = false;
    gv_midMusicCompleted = false;
    gv_midSound1 = null;
    gv_midSound2 = null;
    gv_midFieldDropSound = null;
    gv_midFieldPowerupSound = null;
    gv_midFieldRaiseSound = null;
    gv_midFade = false;
    gv_victoryKerrigan = null;
    gv_victoryZergSound = null;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void gf_ScriptedAttackGroup (region lp_fORCE_REGION, region lp_tRIGGERING_REGION);
int gf_IzshaReinforcementLine ();
void gf_TurnDehakaOnOff (bool lp_onoffoption);
void gf_PowerLinkSwitching (bool lp_activate);
unit gf_nextPowerLink ();
fixed gf_FieldExpandRatetoPoint (fixed lp_p_radius, fixed lp_p_timeToArrive, point lp_p_arrivalPoint);
fixed gf_FieldExpandRatetoRegion (fixed lp_p_radius1, fixed lp_p_radius2, fixed lp_p_timeToArrive);
void gf_DisplayFieldPowerLeaderboard ();
void gf_DestroyFieldPowerLeaderboard (bool lp_instant);
point gf_DehakaRespawnLocation ();
void gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits);
void gf_AIGhost (int lp_owner, unit lp_ghost, unitgroup lp_nearbyUnits);
void gf_CinematicApplyPsiDecimatorBehavior (unit lp_unit);
void gf_MidDropPod (unit lp_cHOSEN_UNIT);
void gf_TransitionToNoFieldActiveExitVentAnim (doodad lp_exitVent, point lp_exitPoint);
void gf_UnitstotheExitVent (unit lp_unit, point lp_point);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_DEBUGStage2;
trigger gt_DEBUGStage4;
trigger gt_DEBUGStage6;
trigger gt_DEBUGStage357;
trigger gt_StartGameQ;
trigger gt_MidGameStartQ;
trigger gt_StartHarvesting;
trigger gt_TransmissionStrangeCreatureQ;
trigger gt_TransmissionPresstheAttackQ;
trigger gt_HandleDehakaDeath;
trigger gt_HandleKerriganDeath;
trigger gt_RevealAttacker;
trigger gt_RevealYellowUnits;
trigger gt_RevealTealUnits;
trigger gt_RevealRedBaseFront;
trigger gt_RevealNewRedBaseFrontUnits;
trigger gt_RevealRedBaseBack;
trigger gt_RevealNewRedBaseBackUnits;
trigger gt_TeachDehakaCliffJump;
trigger gt_TeachDehakaCliffJumpTankBehavior;
trigger gt_TransmissionTeachCliffJumpQ;
trigger gt_TeachDehakaMend;
trigger gt_TeachDehakaMendUsed;
trigger gt_TransmissionTeachMendQ;
trigger gt_TeachDehakaDrag;
trigger gt_TeachDehakaDragUsed;
trigger gt_TransmissionTeachDragQ;
trigger gt_GrantDragAlternate;
trigger gt_TeachDehakaGenerateSpawns;
trigger gt_TeachDehakaGenerateSpawnsUsed;
trigger gt_TransmissionTeachGenerateSpawnsQ;
trigger gt_GrantGenerateSpawnsAlternate;
trigger gt_CreatePingforFirstPowerLink;
trigger gt_RemoveBriefingSelectonFirstPowerLink;
trigger gt_SetupPings;
trigger gt_DestroyPowerLinkPings;
trigger gt_PsiFieldsoundupdates;
trigger gt_DestroyerFieldSetup;
trigger gt_DestroyerFieldUpdate;
trigger gt_DestroyerFieldGrowthPingsPulsed;
trigger gt_DestroyerFieldUpdateMinimap;
trigger gt_PowerLinkDestroyedQ;
trigger gt_DestroyerFieldPostCineSetup;
trigger gt_TransmissionFirstPowerLinkAttackedQ;
trigger gt_TransmissionUnitInDestroyerFieldQ;
trigger gt_TransmissionDestroyerFieldReturning01Q;
trigger gt_TransmissionDestroyerFieldReturning02Q;
trigger gt_TransmissionPowerLink2DestroyedQ;
trigger gt_TransmissionAllPowerLinksDownQ;
trigger gt_CountDownBeeps;
trigger gt_FieldReturns;
trigger gt_Section3AReinforcements;
trigger gt_TransmissionIzshaReinforcements3AQ;
trigger gt_Section3BReinforcements;
trigger gt_TransmissionIzshaReinforcements3BQ;
trigger gt_TransmissionDehakaWastingTimeQ;
trigger gt_DehakaReturnsforFinalPush;
trigger gt_TransmissionDehakaReturnsQ;
trigger gt_RespawnDehakaReinforcements;
trigger gt_TransmissionIzshaReinforcementsQ;
trigger gt_PowerLink1DominionReaction;
trigger gt_PowerLink3SCVBuildDefenses;
trigger gt_TransmissionMengskDefendHumanityQ;
trigger gt_EngageDominionWarningCheck;
trigger gt_EngageDominionWarningQ;
trigger gt_TipMissionHelpQ;
trigger gt_StartAI;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_AIGiveResources;
trigger gt_DisableBulliesinP02FrontBase;
trigger gt_AIFleefromNuke;
trigger gt_DefeatBaseDestroyed;
trigger gt_VictoryDestroyPsiDestroyerCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementStructuresDestroyedBefore2ndField;
trigger gt_AchievementDehakaSurvivalNH;
trigger gt_AchievementDontDestroyLastPowerLinkH;
trigger gt_StructureDestroyedBefore2ndField;
trigger gt_VictoryStatPsiFieldKills;
trigger gt_LargestZergForce;
trigger gt_ObjectiveDestroyPowerLinkCreate;
trigger gt_ObjectiveDestroyPowerLinkComplete;
trigger gt_ObjectiveDestroyPowerLinkFailed;
trigger gt_ObjectiveDestroyPsiDestroyerCreate;
trigger gt_ObjectiveDestroyPsiDestroyerComplete;
trigger gt_ObjectiveDestroyPsiDestroyerFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroDehakaExitVent;
trigger gt_IntroMutaliskDeathSound;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidDropPods;
trigger gt_CineFakeFieldDrop;
trigger gt_MidMusic;
trigger gt_MidCineDehakaPlatform02Q;
trigger gt_MidCineDehakaPlatform02Setup;
trigger gt_MidCineDehakaPlatform02Cinematic;
trigger gt_MidCineDehakaPlatform02End;
trigger gt_MidCineDehakaPlatform02Cleanup;
trigger gt_MidCineFakeFieldRaise02;
trigger gt_MidCineFakeFieldSounds;
trigger gt_MidCineDehakaPlatform02MinionSpawn;
trigger gt_MidCineDehakaPlatform03Q;
trigger gt_MidCineDehakaPlatform03Setup;
trigger gt_MidCineDehakaPlatform03Cinematic;
trigger gt_MidCineDehakaPlatform03End;
trigger gt_MidCineDehakaPlatform03Cleanup;
trigger gt_TransitiontoNoFieldActiveQ;
trigger gt_TransitiontoNoFieldActiveSetup;
trigger gt_TransitiontoNoFieldActiveCinematic;
trigger gt_TransitiontoNoFieldActiveEnd;
trigger gt_TransitiontoNoFieldActiveCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerg;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    init_i = 0;
    while (init_i <= 16) {
        cai_playerAI[init_i] = null;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiEF862D00") { aiEF862D00_start(p); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { aiD7BF0BBC_start(p); }
    if (cai_playerAI[p] == "ai75F37259") { ai75F37259_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEF862D00") { aiEF862D00_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { aiD7BF0BBC_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai75F37259") { ai75F37259_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiEF862D00") { return aiEF862D00_getCustomData(p); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { return aiD7BF0BBC_getCustomData(p); }
    if (cai_playerAI[p] == "ai75F37259") { return ai75F37259_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEF862D00") { aiEF862D00_waves_run(p, target); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { aiD7BF0BBC_waves_run(p, target); }
    if (cai_playerAI[p] == "ai75F37259") { ai75F37259_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEF862D00") { aiEF862D00_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { aiD7BF0BBC_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai75F37259") { ai75F37259_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiEF862D00") { aiEF862D00_waves_stop(); }
    if (ai == "aiD7BF0BBC") { aiD7BF0BBC_waves_stop(); }
    if (ai == "ai75F37259") { ai75F37259_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEF862D00") { aiEF862D00_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { aiD7BF0BBC_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai75F37259") { ai75F37259_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiEF862D00") { aiEF862D00_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { aiD7BF0BBC_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai75F37259") { ai75F37259_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiEF862D00") { return aiEF862D00_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { return aiD7BF0BBC_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai75F37259") { return ai75F37259_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiEF862D00") { return aiEF862D00_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { return aiD7BF0BBC_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai75F37259") { return ai75F37259_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiEF862D00") { return aiEF862D00_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiD7BF0BBC") { return aiD7BF0BBC_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai75F37259") { return ai75F37259_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiEF862D00", 2);
    cai_start("aiD7BF0BBC", 4);
    cai_start("ai75F37259", 6);
    AICampaignStart(3);
    AICampaignStart(5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(6, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

trigger auto_gf_ScriptedAttackGroup_Trigger = null;
region auto_gf_ScriptedAttackGroup_lp_fORCE_REGION;
region auto_gf_ScriptedAttackGroup_lp_tRIGGERING_REGION;

void gf_ScriptedAttackGroup (region lp_fORCE_REGION, region lp_tRIGGERING_REGION) {
    auto_gf_ScriptedAttackGroup_lp_fORCE_REGION = lp_fORCE_REGION;
    auto_gf_ScriptedAttackGroup_lp_tRIGGERING_REGION = lp_tRIGGERING_REGION;

    if (auto_gf_ScriptedAttackGroup_Trigger == null) {
        auto_gf_ScriptedAttackGroup_Trigger = TriggerCreate("auto_gf_ScriptedAttackGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_ScriptedAttackGroup_Trigger, false, false);
}

bool auto_gf_ScriptedAttackGroup_TriggerFunc (bool testConds, bool runActions) {
    region lp_fORCE_REGION = auto_gf_ScriptedAttackGroup_lp_fORCE_REGION;
    region lp_tRIGGERING_REGION = auto_gf_ScriptedAttackGroup_lp_tRIGGERING_REGION;

    // Variable Declarations
    unitgroup lv_attackingUnitGroup;

    // Variable Initialization
    lv_attackingUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_attackingUnitGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lp_fORCE_REGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetGroupScriptControlled(lv_attackingUnitGroup, true);
    while (!((gv_gameOver == false) && (gv_inCinematic == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, lp_tRIGGERING_REGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1))) {
        Wait(0.3, c_timeReal);
    }
    UnitGroupIssueOrder(lv_attackingUnitGroup, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lp_tRIGGERING_REGION)), c_orderQueueReplace);
    AISetGroupSuicide(lv_attackingUnitGroup, true);
    return true;
}

int gf_IzshaReinforcementLine () {
    // Variable Declarations
    const int lv_totalLines = 3;
    int lv_lineToPlay;
    int lv_linesLeft;

    // Variable Initialization
    lv_lineToPlay = 0;
    lv_linesLeft = 0;

    // Implementation
    lv_linesLeft = lv_totalLines;
    if ((gv_playedReinforcementLines[0] != 0)) {
        lv_linesLeft -= 1;
    }
    else {
    }
    if ((gv_playedReinforcementLines[1] != 0)) {
        lv_linesLeft -= 1;
    }
    else {
    }
    lv_lineToPlay = RandomInt(1, lv_linesLeft);
    if ((lv_lineToPlay == gv_playedReinforcementLines[0])) {
        lv_lineToPlay = (lv_linesLeft + 1);
    }
    else if ((lv_lineToPlay == gv_playedReinforcementLines[1])) {
        lv_lineToPlay = (lv_linesLeft + 2);
    }
    gv_playedReinforcementLines[1] = gv_playedReinforcementLines[0];
    gv_playedReinforcementLines[0] = lv_lineToPlay;
    return lv_lineToPlay;
}

trigger auto_gf_TurnDehakaOnOff_Trigger = null;
bool auto_gf_TurnDehakaOnOff_lp_onoffoption;

void gf_TurnDehakaOnOff (bool lp_onoffoption) {
    auto_gf_TurnDehakaOnOff_lp_onoffoption = lp_onoffoption;

    if (auto_gf_TurnDehakaOnOff_Trigger == null) {
        auto_gf_TurnDehakaOnOff_Trigger = TriggerCreate("auto_gf_TurnDehakaOnOff_TriggerFunc");
    }

    TriggerExecute(auto_gf_TurnDehakaOnOff_Trigger, false, false);
}

bool auto_gf_TurnDehakaOnOff_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onoffoption = auto_gf_TurnDehakaOnOff_lp_onoffoption;

    bool autoBD3FCBD3_val;

    // Implementation
    autoBD3FCBD3_val = lp_onoffoption;
    if (autoBD3FCBD3_val == true) {
        libNtve_gf_MakeUnitUncommandable(gv_dEHAKA, false);
        libNtve_gf_ShowHideUnit(gv_dEHAKA, true);
        libNtve_gf_PauseUnit(gv_dEHAKA, false);
    }
    else if (autoBD3FCBD3_val == false) {
        if ((UnitGetType(gv_dEHAKA) == "DehakaBurrowed")) {
            UnitIssueOrder(gv_dEHAKA, Order(AbilityCommand("BurrowDehakaUp", 0)), c_orderQueueReplace);
        }
        else {
        }
        libNtve_gf_MakeUnitUncommandable(gv_dEHAKA, true);
        libNtve_gf_ShowHideUnit(gv_dEHAKA, false);
        libNtve_gf_PauseUnit(gv_dEHAKA, true);
    }
    else {
    }
    return true;
}

trigger auto_gf_PowerLinkSwitching_Trigger = null;
bool auto_gf_PowerLinkSwitching_lp_activate;

void gf_PowerLinkSwitching (bool lp_activate) {
    auto_gf_PowerLinkSwitching_lp_activate = lp_activate;

    if (auto_gf_PowerLinkSwitching_Trigger == null) {
        auto_gf_PowerLinkSwitching_Trigger = TriggerCreate("auto_gf_PowerLinkSwitching_TriggerFunc");
    }

    TriggerExecute(auto_gf_PowerLinkSwitching_Trigger, false, false);
}

bool auto_gf_PowerLinkSwitching_TriggerFunc (bool testConds, bool runActions) {
    bool lp_activate = auto_gf_PowerLinkSwitching_lp_activate;

    bool auto986D1AA5_val;

    // Implementation
    auto986D1AA5_val = lp_activate;
    if (auto986D1AA5_val == true) {
        UnitGroupLoopBegin(gv_powerLinkGroup);
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("PsiDisintegratorPowerLinkOff", 0)), c_orderQueueReplace);
            UnitSetInfoTip(UnitGroupLoopCurrent(), StringExternal("Param/Value/F92EC21B"));
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else if (auto986D1AA5_val == false) {
        UnitIssueOrder(gf_nextPowerLink(), Order(AbilityCommand("PsiDisintegratorPowerLink", 0)), c_orderQueueReplace);
        UnitSetInfoTip(gf_nextPowerLink(), StringExternal("Param/Value/0817C889"));
    }
    else {
    }
    return true;
}

unit gf_nextPowerLink () {
    // Implementation
    if ((UnitIsAlive(UnitFromId(5)) == true)) {
        return UnitFromId(5);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(47)) == true)) {
        return UnitFromId(47);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(32)) == true)) {
        return UnitFromId(32);
    }
    else {
    }
    return null;
}

fixed gf_FieldExpandRatetoPoint (fixed lp_p_radius, fixed lp_p_timeToArrive, point lp_p_arrivalPoint) {
    // Variable Declarations
    fixed lv_growthrate;

    // Variable Initialization
    lv_growthrate = 0.0;

    // Implementation
    lv_growthrate = (DistanceBetweenPoints(PointWithOffsetPolar(gv_psifieldorigin, lp_p_radius, AngleBetweenPoints(gv_psifieldorigin, lp_p_arrivalPoint)), lp_p_arrivalPoint)/lp_p_timeToArrive);
    return lv_growthrate;
}

fixed gf_FieldExpandRatetoRegion (fixed lp_p_radius1, fixed lp_p_radius2, fixed lp_p_timeToArrive) {
    // Variable Declarations
    fixed lv_growthrate;

    // Variable Initialization
    lv_growthrate = 0.0;

    // Implementation
    lv_growthrate = ((lp_p_radius2 - lp_p_radius1)/lp_p_timeToArrive);
    return lv_growthrate;
}

trigger auto_gf_DisplayFieldPowerLeaderboard_Trigger = null;

void gf_DisplayFieldPowerLeaderboard () {
    if (auto_gf_DisplayFieldPowerLeaderboard_Trigger == null) {
        auto_gf_DisplayFieldPowerLeaderboard_Trigger = TriggerCreate("auto_gf_DisplayFieldPowerLeaderboard_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayFieldPowerLeaderboard_Trigger, false, false);
}

bool auto_gf_DisplayFieldPowerLeaderboard_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((gv_fieldPowerTimerWindow == c_timerWindowNone)) {
        libSwaC_gf_TimerWindowCreate2(gv_psifieldpowerup, StringExternal("Param/Value/97A09440"), false, false, 0);
        gv_fieldPowerTimerWindow = TimerWindowLastCreated();
        TimerWindowSetFormat(gv_fieldPowerTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    }
    else {
    }
    TimerWindowShow(gv_fieldPowerTimerWindow, PlayerGroupAll(), true);
    return true;
}

trigger auto_gf_DestroyFieldPowerLeaderboard_Trigger = null;
bool auto_gf_DestroyFieldPowerLeaderboard_lp_instant;

void gf_DestroyFieldPowerLeaderboard (bool lp_instant) {
    auto_gf_DestroyFieldPowerLeaderboard_lp_instant = lp_instant;

    if (auto_gf_DestroyFieldPowerLeaderboard_Trigger == null) {
        auto_gf_DestroyFieldPowerLeaderboard_Trigger = TriggerCreate("auto_gf_DestroyFieldPowerLeaderboard_TriggerFunc");
    }

    TriggerExecute(auto_gf_DestroyFieldPowerLeaderboard_Trigger, false, false);
}

bool auto_gf_DestroyFieldPowerLeaderboard_TriggerFunc (bool testConds, bool runActions) {
    bool lp_instant = auto_gf_DestroyFieldPowerLeaderboard_lp_instant;

    // Implementation
    if ((gv_fieldPowerTimerWindow == c_timerWindowNone)) {
        return true;
    }
    else {
    }
    if ((lp_instant == false)) {
        Wait(2.0, c_timeReal);
    }
    else {
    }
    TimerWindowDestroy(gv_fieldPowerTimerWindow);
    gv_fieldPowerTimerWindow = c_timerWindowNone;
    return true;
}

point gf_DehakaRespawnLocation () {
    // Implementation
    if (((UnitIsAlive(UnitFromId(5)) == true) || (libNtve_gf_UnitInRegion(gv_dEHAKA, RegionFromId(19)) == true))) {
        return PointFromId(3);
    }
    else {
        if (((UnitIsAlive(UnitFromId(47)) == true) || (libNtve_gf_UnitInRegion(gv_dEHAKA, RegionFromId(21)) == true))) {
            return PointFromId(795);
        }
        else {
            if ((UnitIsAlive(UnitFromId(32)) == true)) {
                if ((libNtve_gf_UnitInRegion(gv_dEHAKA, RegionFromId(31)) == true)) {
                    return PointFromId(1030);
                }
                else {
                    return PointFromId(815);
                }
            }
            else {
                return PointFromId(1045);
            }
        }
    }
}

void gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits) {
    int auto016EB74F_val;

    // Variable Declarations
    point lv_moveTo;
    point lv_moveToA;
    point lv_moveToB;
    unitgroup lv_enemies;

    // Variable Initialization
    lv_moveTo = null;
    lv_moveToA = null;
    lv_moveToB = null;
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = gf_EnemiesWithinRange(lp_diamondback, 4.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) >= 1)) {
        lv_moveTo = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)));
        if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveTo) >= 1000)) {
            lv_moveToA = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) + 45.0));
            lv_moveToB = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) - 45.0));
            if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000) && (PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                auto016EB74F_val = RandomInt(1, 2);
                if (auto016EB74F_val == 1) {
                    lv_moveTo = lv_moveToA;
                }
                else if (auto016EB74F_val == 2) {
                    lv_moveTo = lv_moveToB;
                }
                else {
                }
            }
            else {
                if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000)) {
                    lv_moveTo = lv_moveToA;
                }
                else {
                    if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                        lv_moveTo = lv_moveToB;
                    }
                    else {
                        lv_moveTo = null;
                    }
                }
            }
        }
        else {
        }
        if ((lv_moveTo != null)) {
            UnitIssueOrder(lp_diamondback, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveTo), c_orderQueueReplace);
        }
        else {
        }
        Wait(1.5, c_timeAI);
        AISetUnitScriptControlled(lp_diamondback, false);
    }
    else {
    }
}

void gf_AIGhost (int lp_owner, unit lp_ghost, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemies;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = gf_EnemiesWithinRange(lp_ghost, 12.0, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))));
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) >= 8)) {
        UnitIssueOrder(lp_ghost, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), UnitGroupCenterOfGroup(lv_enemies)), c_orderQueueReplace);
    }
    else {
    }
}

trigger auto_gf_CinematicApplyPsiDecimatorBehavior_Trigger = null;
unit auto_gf_CinematicApplyPsiDecimatorBehavior_lp_unit;

void gf_CinematicApplyPsiDecimatorBehavior (unit lp_unit) {
    auto_gf_CinematicApplyPsiDecimatorBehavior_lp_unit = lp_unit;

    if (auto_gf_CinematicApplyPsiDecimatorBehavior_Trigger == null) {
        auto_gf_CinematicApplyPsiDecimatorBehavior_Trigger = TriggerCreate("auto_gf_CinematicApplyPsiDecimatorBehavior_TriggerFunc");
    }

    TriggerExecute(auto_gf_CinematicApplyPsiDecimatorBehavior_Trigger, false, false);
}

bool auto_gf_CinematicApplyPsiDecimatorBehavior_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CinematicApplyPsiDecimatorBehavior_lp_unit;

    // Variable Declarations
    timer lv_fakeunitlifespan;

    // Variable Initialization
    lv_fakeunitlifespan = TimerCreate();

    // Implementation
    TimerStart(lv_fakeunitlifespan, RandomFixed(8.0, 10.0), false, c_timeReal);
    while ((UnitIsAlive(lp_unit) == true)) {
        UnitBehaviorAdd(lp_unit, "PsiDecimatorDamage", lp_unit, 1);
        if ((TimerGetRemaining(lv_fakeunitlifespan) <= 0.0)) {
            UnitKill(lp_unit);
        }
        else {
        }
        Wait(0.5, c_timeReal);
    }
    return true;
}

trigger auto_gf_MidDropPod_Trigger = null;
unit auto_gf_MidDropPod_lp_cHOSEN_UNIT;

void gf_MidDropPod (unit lp_cHOSEN_UNIT) {
    auto_gf_MidDropPod_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;

    if (auto_gf_MidDropPod_Trigger == null) {
        auto_gf_MidDropPod_Trigger = TriggerCreate("auto_gf_MidDropPod_TriggerFunc");
    }

    TriggerExecute(auto_gf_MidDropPod_Trigger, false, false);
}

bool auto_gf_MidDropPod_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_MidDropPod_lp_cHOSEN_UNIT;

    // Implementation
    libSwaC_gf_CreateDropPod(1, UnitGetPosition(lp_cHOSEN_UNIT), UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    Wait(2.5, c_timeGame);
    if ((UnitGetType(lp_cHOSEN_UNIT) == "Lair")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cHOSEN_UNIT), c_animNameDefault, "Morph End A", 0, c_animTimeDefault);
    }
    else {
    }
    if ((UnitGetType(lp_cHOSEN_UNIT) == "Hive")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cHOSEN_UNIT), c_animNameDefault, "Morph End B", 0, c_animTimeDefault);
    }
    else {
    }
    if (((UnitGetType(lp_cHOSEN_UNIT) == "Hatchery") || (UnitGetType(lp_cHOSEN_UNIT) == "SpawningPool") || (UnitGetType(lp_cHOSEN_UNIT) == "EvolutionChamber"))) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cHOSEN_UNIT), c_animNameDefault, "Build D Start", 0, c_animTimeDefault);
    }
    else {
    }
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(lp_cHOSEN_UNIT, true);
    libNtve_gf_PauseUnit(lp_cHOSEN_UNIT, false);
    CreepModify(UnitGetPosition(lp_cHOSEN_UNIT), 3.0, true, false);
    return true;
}

trigger auto_gf_TransitionToNoFieldActiveExitVentAnim_Trigger = null;
doodad auto_gf_TransitionToNoFieldActiveExitVentAnim_lp_exitVent;
point auto_gf_TransitionToNoFieldActiveExitVentAnim_lp_exitPoint;

void gf_TransitionToNoFieldActiveExitVentAnim (doodad lp_exitVent, point lp_exitPoint) {
    auto_gf_TransitionToNoFieldActiveExitVentAnim_lp_exitVent = lp_exitVent;
    auto_gf_TransitionToNoFieldActiveExitVentAnim_lp_exitPoint = lp_exitPoint;

    if (auto_gf_TransitionToNoFieldActiveExitVentAnim_Trigger == null) {
        auto_gf_TransitionToNoFieldActiveExitVentAnim_Trigger = TriggerCreate("auto_gf_TransitionToNoFieldActiveExitVentAnim_TriggerFunc");
    }

    TriggerExecute(auto_gf_TransitionToNoFieldActiveExitVentAnim_Trigger, false, false);
}

bool auto_gf_TransitionToNoFieldActiveExitVentAnim_TriggerFunc (bool testConds, bool runActions) {
    doodad lp_exitVent = auto_gf_TransitionToNoFieldActiveExitVentAnim_lp_exitVent;
    point lp_exitPoint = auto_gf_TransitionToNoFieldActiveExitVentAnim_lp_exitPoint;

    // Implementation
    while ((gv_inCinematic == true)) {
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lp_exitPoint, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            Wait(0.1, c_timeGame);
        }
        libNtve_gf_PlayAnimation(ActorFromDoodad(lp_exitVent), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
        Wait(1.0, c_timeReal);
        libNtve_gf_PlayAnimation(ActorFromDoodad(lp_exitVent), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
        while (!(((gv_cinematicCompleted == true) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lp_exitPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)))) {
            Wait(0.1, c_timeGame);
        }
        libNtve_gf_ClearAnimation(ActorFromDoodad(lp_exitVent), c_animNameDefault);
    }
    return true;
}

trigger auto_gf_UnitstotheExitVent_Trigger = null;
unit auto_gf_UnitstotheExitVent_lp_unit;
point auto_gf_UnitstotheExitVent_lp_point;

void gf_UnitstotheExitVent (unit lp_unit, point lp_point) {
    auto_gf_UnitstotheExitVent_lp_unit = lp_unit;
    auto_gf_UnitstotheExitVent_lp_point = lp_point;

    if (auto_gf_UnitstotheExitVent_Trigger == null) {
        auto_gf_UnitstotheExitVent_Trigger = TriggerCreate("auto_gf_UnitstotheExitVent_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnitstotheExitVent_Trigger, false, false);
}

bool auto_gf_UnitstotheExitVent_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_UnitstotheExitVent_lp_unit;
    point lp_point = auto_gf_UnitstotheExitVent_lp_point;

    // Implementation
    libNtve_gf_MakeUnitUncommandable(lp_unit, true);
    while ((gv_inCinematic == true) && (UnitIsAlive(lp_unit) == true) && (libNtve_gf_UnitIsHidden(lp_unit) == false) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), lp_point) > 3.0)) {
        if ((lp_unit != gv_dEHAKA)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lp_point), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_point), c_orderQueueReplace);
        }
        Wait(0.1, c_timeGame);
    }
    while ((gv_inCinematic == true) && (UnitIsAlive(lp_unit) == true) && (libNtve_gf_UnitIsHidden(lp_unit) == false) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), lp_point) > 1.0)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_point), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    if ((lp_unit != gv_dEHAKA)) {
        UnitRemove(lp_unit);
    }
    else {
        UnitSetFacing(gv_dEHAKA, PointGetFacing(lp_point), 0.0);
        UnitIssueOrder(gv_dEHAKA, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_dEHAKA), c_animNameDefault, "Cover Start", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
        Wait(1.0, c_timeReal);
        gf_TurnDehakaOnOff(false);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_dEHAKA), c_animNameDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZKorhal2");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("Drag", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("DehakaMirrorImage", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("DehakaHeal", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_03_DOMINION_YELLOW);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_04_DOMINION_TEAL);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_05_DOMINION_GREEN);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_06_DOMINION_ORANGE);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_03_DOMINION_YELLOW, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_04_DOMINION_TEAL, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_05_DOMINION_GREEN, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_06_DOMINION_ORANGE, 2);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 250);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 1, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateFidgetingEnabled, false);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(3), gv_pLAYER_01_USER, 2, PointGetFacing(PointFromId(3)), c_unitCreateIgnorePlacement, 0);
    gv_dEHAKA = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(2, UnitLastCreated());
    libSCDH_gf_CreateHeroPing(gv_dEHAKA, 0);
    UnitControlGroupAddUnit(gv_pLAYER_01_USER, 2, gv_dEHAKA);
    gv_powerLinkGroup = UnitGroup(gv_powerLinkType, gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(gv_powerLinkGroup);
    while (!UnitGroupLoopDone()) {
        libSwaC_gf_SetUnitInfoTextCampaign(UnitGroupLoopCurrent(), StringExternal("Param/Value/CB9E408A"), StringExternal("Param/Value/CBBD0065"), null);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(136), PointFromId(165));
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(105), PointFromId(165));
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Medic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Medivac", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Wraith", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Raven", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ScienceVessel", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitAbilityEnable(UnitFromId(708), "SiegeMode", false);
    UnitAbilityEnable(UnitFromId(592), "SiegeMode", false);
    UnitAbilityEnable(UnitFromId(593), "SiegeMode", false);
    TriggerExecute(gt_SetupPings, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZKorhal02MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(46), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(26), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(gv_powerLinkType, gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(600.0, 600.0, 1000.0));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPropertyFixed(gv_psiDestroyer, c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(1500.0, 1500.0, 2500.0));
    UnitSetPropertyFixed(gv_psiDestroyer, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(5), c_unitPropLifeMax, 400.0);
    UnitSetPropertyFixed(UnitFromId(5), c_unitPropLifePercent, 100.0);
    UnitMagazineArm(UnitFromId(927), AbilityCommand("ArmSiloWithNuke", 0), libHots_gf_DifficultyValueInt2(1, 1, 2));
    UnitMagazineArm(UnitFromId(418), AbilityCommand("ArmSiloWithNuke", 0), libHots_gf_DifficultyValueInt2(1, 1, 2));
    gv_reinforcementsZergling = libHots_gf_DifficultyValueInt2(10, 10, 8);
    gv_reinforcementsRoach = libHots_gf_DifficultyValueInt2(6, 6, 5);
    gv_reinforcementsHydralisk = libHots_gf_DifficultyValueInt2(6, 6, 5);
    gv_fieldExpansionTime01 = libHots_gf_DifficultyValueFixed2(480.0, 480.0, 420.0);
    gv_fieldExpansionTime02 = libHots_gf_DifficultyValueFixed2(360.0, 360.0, 360.0);
    gv_fieldPowerUpTime01 = libHots_gf_DifficultyValueFixed2(420.0, 420.0, 375.0);
    gv_fieldPowerUpTime02 = libHots_gf_DifficultyValueFixed2(300.0, 300.0, 240.0);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CombatShield", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "PunisherGrenades", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "SiegeTech", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "AresClassWeaponsSystemViking", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "HailstormMissilePods", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        PlayerGroupLoopBegin(gv_dominionPlayerGroup);
        while (!PlayerGroupLoopDone()) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ClusterWarheads", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "MultilockTargetingSystems", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "NeosteelFrame", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "DualFusionWelders", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "FireSuppressionSystems", 1);
            PlayerGroupLoopStep();
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Dehaka");
    libSwaC_gf_AddMissionTipUserData("Cliff Jumping");
    libSwaC_gf_AddMissionTipUserData("Drag");
    libSwaC_gf_AddMissionTipUserData("Generate Spawns");
    libSwaC_gf_AddMissionTipUserData("Mend");
    libSwaC_gf_AddMissionTipUserData("Psi Destroyer Field");
    libSwaC_gf_AddMissionTipUserData("Psi Destroyer Field (Deactivation)");
    libSwaC_gf_AddMissionTipUserData("Psi Destroyer Field (Reactivation)");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Dehaka", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalZergling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalRoach", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalHydralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalUltralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Diamondback", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskThor", false, gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCombatIndicator = 4;
    Wait(0.5, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_inCombatIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(1, StringExternal("Param/Value/8F4036B3"), true);
    UnitKill(UnitFromId(5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStage2_Init () {
    gt_DEBUGStage2 = TriggerCreate("gt_DEBUGStage2_Func");
    TriggerAddEventChatMessage(gt_DEBUGStage2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage 4
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStage4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_waitforcinematic;

    // Variable Initialization
    lv_waitforcinematic = false;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_waitforcinematic = UnitIsAlive(UnitFromId(5));
    TriggerExecute(gt_DEBUGStage2, true, true);
    if ((lv_waitforcinematic == true)) {
        while (!((gv_inCinematic == true))) {
            Wait(0.3, c_timeGame);
        }
        while (!((gv_inCinematic == false))) {
            Wait(0.3, c_timeGame);
        }
    }
    else {
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/5F236A5D"), true);
    UnitKill(UnitFromId(47));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_YELLOW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStage4_Init () {
    gt_DEBUGStage4 = TriggerCreate("gt_DEBUGStage4_Func");
    TriggerAddEventChatMessage(gt_DEBUGStage4, c_playerAny, "s4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage 6
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStage6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DEBUGStage4, true, true);
    TriggerDebugOutput(1, StringExternal("Param/Value/72B4932D"), true);
    UnitKill(UnitFromId(32));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_DOMINION_TEAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_DOMINION_GREEN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStage6_Init () {
    gt_DEBUGStage6 = TriggerCreate("gt_DEBUGStage6_Func");
    TriggerAddEventChatMessage(gt_DEBUGStage6, c_playerAny, "s6", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage 3, 5, 7
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStage357_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_psifieldpowerup, 15.0, false, c_timeAI);
    TimerStart(gv_fieldPowerUpWarning01, 5.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStage357_Init () {
    gt_DEBUGStage357 = TriggerCreate("gt_DEBUGStage357_Func");
    TriggerAddEventChatMessage(gt_DEBUGStage357, c_playerAny, "s3", true);
    TriggerAddEventChatMessage(gt_DEBUGStage357, c_playerAny, "s5", true);
    TriggerAddEventChatMessage(gt_DEBUGStage357, c_playerAny, "s7", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/999874E5"), null, PointFromId(277));
    libNtve_gf_ShareVisionofUnit(gv_introMarine01, true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_introMarine02, true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_introMarine03, true, gv_pLAYER_01_USER);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyPowerLinkCreate, true, true);
    TriggerExecute(gt_CreatePingforFirstPowerLink, true, false);
    TriggerQueueExit();
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Game Start Q
//--------------------------------------------------------------------------------------------------
bool gt_MidGameStartQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(34), true, true);
    TimerStart(gv_dominionEngageTimer, 240.0, false, c_timeAI);
    TriggerEnable(gt_EngageDominionWarningCheck, true);
    TriggerEnable(gt_StructureDestroyedBefore2ndField, true);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(120.0, 7);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(268), 180.0);
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
    }
    else {
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/03FBF032"), null, PointFromId(2));
    TriggerExecute(gt_StartHarvesting, true, false);
    libSwaC_gf_DisplayArmyButton(true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerEnable(gt_HandleKerriganDeath, true);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyPsiDestroyerCreate, true, true);
    TriggerQueueExit();
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_TransmissionPresstheAttackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidGameStartQ_Init () {
    gt_MidGameStartQ = TriggerCreate("gt_MidGameStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Harvesting
//--------------------------------------------------------------------------------------------------
bool gt_StartHarvesting_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(29), RegionFromId(32));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartHarvesting_Init () {
    gt_StartHarvesting = TriggerCreate("gt_StartHarvesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Strange Creature Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStrangeCreatureQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyPowerLink) == c_objectiveStateActive))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00066", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStrangeCreatureQ_Init () {
    gt_TransmissionStrangeCreatureQ = TriggerCreate("gt_TransmissionStrangeCreatureQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionStrangeCreatureQ, UnitRefFromUnit(UnitFromId(516)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Press the Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPresstheAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00087", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPresstheAttackQ_Init () {
    gt_TransmissionPresstheAttackQ = TriggerCreate("gt_TransmissionPresstheAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Dehaka Death
//--------------------------------------------------------------------------------------------------
bool gt_HandleDehakaDeath_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown3(gf_DehakaRespawnLocation());
    if ((gv_achievementDehakaDied == false)) {
        gv_achievementDehakaDied = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleDehakaDeath_Init () {
    gt_HandleDehakaDeath = TriggerCreate("gt_HandleDehakaDeath_Func");
    TriggerAddEventUnitDied(gt_HandleDehakaDeath, UnitRefFromVariable("gv_dEHAKA"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Kerrigan Death
//--------------------------------------------------------------------------------------------------
bool gt_HandleKerriganDeath_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleKerriganDeath_Init () {
    gt_HandleKerriganDeath = TriggerCreate("gt_HandleKerriganDeath_Func");
    TriggerEnable(gt_HandleKerriganDeath, false);
    TriggerAddEventUnitDied(gt_HandleKerriganDeath, UnitRefFromVariable("gv_kERRIGAN"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Attacker
//--------------------------------------------------------------------------------------------------
bool gt_RevealAttacker_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != gv_psiDestroyer))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnitDamageSourceUnit(), gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 1.0), 2.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealAttacker_Init () {
    gt_RevealAttacker = TriggerCreate("gt_RevealAttacker_Func");
    TriggerAddEventUnitDamaged(gt_RevealAttacker, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Yellow Units
//--------------------------------------------------------------------------------------------------
bool gt_RevealYellowUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(81)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(62)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(72)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PlayerSetAlliance(gv_pLAYER_03_DOMINION_YELLOW, c_allianceIdVision, gv_pLAYER_01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealYellowUnits_Init () {
    gt_RevealYellowUnits = TriggerCreate("gt_RevealYellowUnits_Func");
    TriggerAddEventUnitDied(gt_RevealYellowUnits, UnitRefFromUnit(UnitFromId(81)));
    TriggerAddEventUnitDied(gt_RevealYellowUnits, UnitRefFromUnit(UnitFromId(62)));
    TriggerAddEventUnitDied(gt_RevealYellowUnits, UnitRefFromUnit(UnitFromId(72)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Teal Units
//--------------------------------------------------------------------------------------------------
bool gt_RevealTealUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_DOMINION_TEAL, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DOMINION_ORANGE, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealTealUnits_Init () {
    gt_RevealTealUnits = TriggerCreate("gt_RevealTealUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Red Base Front
//--------------------------------------------------------------------------------------------------
bool gt_RevealRedBaseFront_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_RevealNewRedBaseFrontUnits, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealRedBaseFront_Init () {
    gt_RevealRedBaseFront = TriggerCreate("gt_RevealRedBaseFront_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal New Red Base Front Units
//--------------------------------------------------------------------------------------------------
bool gt_RevealNewRedBaseFrontUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(3)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(EventUnit(), true, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealNewRedBaseFrontUnits_Init () {
    gt_RevealNewRedBaseFrontUnits = TriggerCreate("gt_RevealNewRedBaseFrontUnits_Func");
    TriggerEnable(gt_RevealNewRedBaseFrontUnits, false);
    TriggerAddEventUnitCreated(gt_RevealNewRedBaseFrontUnits, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Red Base Back
//--------------------------------------------------------------------------------------------------
bool gt_RevealRedBaseBack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_RevealNewRedBaseBackUnits, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealRedBaseBack_Init () {
    gt_RevealRedBaseBack = TriggerCreate("gt_RevealRedBaseBack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal New Red Base Back Units
//--------------------------------------------------------------------------------------------------
bool gt_RevealNewRedBaseBackUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(16)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(EventUnit(), true, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealNewRedBaseBackUnits_Init () {
    gt_RevealNewRedBaseBackUnits = TriggerCreate("gt_RevealNewRedBaseBackUnits_Func");
    TriggerEnable(gt_RevealNewRedBaseBackUnits, false);
    TriggerAddEventUnitCreated(gt_RevealNewRedBaseBackUnits, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach - Dehaka - Cliff Jump
//--------------------------------------------------------------------------------------------------
bool gt_TeachDehakaCliffJump_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionTeachCliffJumpQ, true, false);
    libNtve_gf_ShareVisionofUnit(UnitFromId(35), true, gv_pLAYER_01_USER);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 1, StringExternal("Param/Value/17561403"), UnitFromId(35), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(35), 1, libNtve_gf_ActorLastCreated());
    TriggerExecute(gt_TeachDehakaCliffJumpTankBehavior, true, false);
    while (!(((UnitIsAlive(UnitFromId(35)) == false) || (UnitGetPropertyFixed(UnitFromId(35), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)))) {
        Wait(0.1, c_timeAI);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(35), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachDehakaCliffJump_Init () {
    gt_TeachDehakaCliffJump = TriggerCreate("gt_TeachDehakaCliffJump_Func");
    TriggerAddEventUnitRegion(gt_TeachDehakaCliffJump, UnitRefFromVariable("gv_dEHAKA"), RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach - Dehaka - Cliff Jump - Tank Behavior
//--------------------------------------------------------------------------------------------------
bool gt_TeachDehakaCliffJumpTankBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(35), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(430)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(35), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachDehakaCliffJumpTankBehavior_Init () {
    gt_TeachDehakaCliffJumpTankBehavior = TriggerCreate("gt_TeachDehakaCliffJumpTankBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Teach Cliff Jump Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTeachCliffJumpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00106", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTeachCliffJumpQ_Init () {
    gt_TransmissionTeachCliffJumpQ = TriggerCreate("gt_TransmissionTeachCliffJumpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach - Dehaka - Mend
//--------------------------------------------------------------------------------------------------
bool gt_TeachDehakaMend_Func (bool testConds, bool runActions) {
    fixed auto279DDCC7_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TeachDehakaMendUsed, true);
    TriggerExecute(gt_TransmissionTeachMendQ, true, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DehakaHeal", 0), true);
    auto279DDCC7_at = 0;
    while (!((gv_mendUsed == true)) && auto279DDCC7_at <= 30.0) {
        Wait(0.3, c_timeGame);
        auto279DDCC7_at = auto279DDCC7_at + 0.3;
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DehakaHeal", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachDehakaMend_Init () {
    gt_TeachDehakaMend = TriggerCreate("gt_TeachDehakaMend_Func");
    TriggerAddEventUnitDamaged(gt_TeachDehakaMend, UnitRefFromVariable("gv_dEHAKA"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach - Dehaka - Mend Used
//--------------------------------------------------------------------------------------------------
bool gt_TeachDehakaMendUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mendUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachDehakaMendUsed_Init () {
    gt_TeachDehakaMendUsed = TriggerCreate("gt_TeachDehakaMendUsed_Func");
    TriggerEnable(gt_TeachDehakaMendUsed, false);
    TriggerAddEventUnitAbility(gt_TeachDehakaMendUsed, UnitRefFromVariable("gv_dEHAKA"), AbilityCommand("DehakaHeal", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Teach Mend Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTeachMendQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00076", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTeachMendQ_Init () {
    gt_TransmissionTeachMendQ = TriggerCreate("gt_TransmissionTeachMendQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach - Dehaka - Drag
//--------------------------------------------------------------------------------------------------
bool gt_TeachDehakaDrag_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((EventUnit() == gv_dEHAKA) || (UnitGroupHasUnit(gv_dehakasGroup, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TeachDehakaDragUsed, true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("Drag", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Drag", 0), true);
    if ((UnitIsAlive(UnitFromId(72)) == true)) {
        gv_dragTarget = UnitFromId(72);
    }
    else if ((UnitIsAlive(UnitFromId(81)) == true)) {
        gv_dragTarget = UnitFromId(81);
    }
    else if ((UnitIsAlive(UnitFromId(62)) == true)) {
        gv_dragTarget = UnitFromId(62);
    }
    TriggerExecute(gt_TransmissionTeachDragQ, true, false);
    libNtve_gf_ShareVisionofUnit(gv_dragTarget, true, gv_pLAYER_01_USER);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 2, StringExternal("Param/Value/DB690496"), gv_dragTarget, "Ref_Center");
    libHots_gf_StoreTextTagForUnit(gv_dragTarget, 1, TextTagLastCreated());
    libHots_gf_StoreActorForUnit(gv_dragTarget, 1, libNtve_gf_ActorLastCreated());
    while (!(((gv_dragUsed == true) || (UnitIsAlive(gv_dragTarget) == false) || (UnitIsAlive(UnitFromId(47)) == false)))) {
        Wait(0.1, c_timeReal);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_dragTarget, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_dragTarget, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachDehakaDrag_Init () {
    gt_TeachDehakaDrag = TriggerCreate("gt_TeachDehakaDrag_Func");
    TriggerAddEventUnitRegion(gt_TeachDehakaDrag, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach - Dehaka - Drag Used
//--------------------------------------------------------------------------------------------------
bool gt_TeachDehakaDragUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_dragUsed = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Drag", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachDehakaDragUsed_Init () {
    gt_TeachDehakaDragUsed = TriggerCreate("gt_TeachDehakaDragUsed_Func");
    TriggerEnable(gt_TeachDehakaDragUsed, false);
    TriggerAddEventUnitAbility(gt_TeachDehakaDragUsed, UnitRefFromVariable("gv_dEHAKA"), AbilityCommand("Drag", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Teach Drag Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTeachDragQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_dragTarget) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00075", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTeachDragQ_Init () {
    gt_TransmissionTeachDragQ = TriggerCreate("gt_TransmissionTeachDragQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grant Drag Alternate
//--------------------------------------------------------------------------------------------------
bool gt_GrantDragAlternate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitAbilityCheck(gv_dEHAKA, "Drag", false) == true)) {
        TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("Drag", 0), true);
        TriggerEnable(gt_TeachDehakaDrag, false);
        TriggerEnable(gt_TeachDehakaDragUsed, false);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Drag", 0), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrantDragAlternate_Init () {
    gt_GrantDragAlternate = TriggerCreate("gt_GrantDragAlternate_Func");
    TriggerAddEventUnitDied(gt_GrantDragAlternate, UnitRefFromUnit(UnitFromId(47)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach - Dehaka - Generate Spawns
//--------------------------------------------------------------------------------------------------
bool gt_TeachDehakaGenerateSpawns_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("DehakaMirrorImage", 0), true);
    TriggerEnable(gt_TeachDehakaGenerateSpawnsUsed, true);
    TriggerExecute(gt_TransmissionTeachGenerateSpawnsQ, true, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DehakaMirrorImage", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachDehakaGenerateSpawns_Init () {
    gt_TeachDehakaGenerateSpawns = TriggerCreate("gt_TeachDehakaGenerateSpawns_Func");
    TriggerAddEventUnitRegion(gt_TeachDehakaGenerateSpawns, UnitRefFromVariable("gv_dEHAKA"), RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach - Dehaka - Generate Spawns Used
//--------------------------------------------------------------------------------------------------
bool gt_TeachDehakaGenerateSpawnsUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_generateSpawnsUsed = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DehakaMirrorImage", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachDehakaGenerateSpawnsUsed_Init () {
    gt_TeachDehakaGenerateSpawnsUsed = TriggerCreate("gt_TeachDehakaGenerateSpawnsUsed_Func");
    TriggerEnable(gt_TeachDehakaGenerateSpawnsUsed, false);
    TriggerAddEventUnitAbility(gt_TeachDehakaGenerateSpawnsUsed, UnitRefFromVariable("gv_dEHAKA"), AbilityCommand("DehakaMirrorImage", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Teach Generate Spawns Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTeachGenerateSpawnsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00077", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTeachGenerateSpawnsQ_Init () {
    gt_TransmissionTeachGenerateSpawnsQ = TriggerCreate("gt_TransmissionTeachGenerateSpawnsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grant Generate Spawns Alternate
//--------------------------------------------------------------------------------------------------
bool gt_GrantGenerateSpawnsAlternate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitAbilityCheck(gv_dEHAKA, "DehakaMirrorImage", false) == true)) {
        TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("DehakaMirrorImage", 0), true);
        TriggerEnable(gt_TeachDehakaGenerateSpawnsUsed, false);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("DehakaMirrorImage", 0), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrantGenerateSpawnsAlternate_Init () {
    gt_GrantGenerateSpawnsAlternate = TriggerCreate("gt_GrantGenerateSpawnsAlternate_Func");
    TriggerAddEventUnitDied(gt_GrantGenerateSpawnsAlternate, UnitRefFromUnit(UnitFromId(32)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping for First Power Link
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingforFirstPowerLink_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(5)), 5.0));
    gv_powerLinkRevealer = VisRevealerLastCreated();
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(5)), StringExternal("Param/Value/1CDF8FA8"));
    gv_ping_PowerLink = PingLastCreated();
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 0, null, UnitFromId(5), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(5), 1, libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingforFirstPowerLink_Init () {
    gt_CreatePingforFirstPowerLink = TriggerCreate("gt_CreatePingforFirstPowerLink_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Briefing Select on First Power Link
//--------------------------------------------------------------------------------------------------
bool gt_RemoveBriefingSelectonFirstPowerLink_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(5), 1));
    VisRevealerDestroy(gv_powerLinkRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveBriefingSelectonFirstPowerLink_Init () {
    gt_RemoveBriefingSelectonFirstPowerLink = TriggerCreate("gt_RemoveBriefingSelectonFirstPowerLink_Func");
    TriggerAddEventUnitDamaged(gt_RemoveBriefingSelectonFirstPowerLink, UnitRefFromUnit(UnitFromId(5)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDied(gt_RemoveBriefingSelectonFirstPowerLink, UnitRefFromUnit(UnitFromId(5)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Pings
//--------------------------------------------------------------------------------------------------
bool gt_SetupPings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(UnitFromId(47)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
    PingSetScale(PingLastCreated(), 0.6);
    PingSetVisible(PingLastCreated(), false);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D46185E8"));
    libHots_gf_StorePingForUnit(UnitFromId(47), 1, PingLastCreated());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(UnitFromId(32)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
    PingSetScale(PingLastCreated(), 0.6);
    PingSetVisible(PingLastCreated(), false);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/565D1361"));
    libHots_gf_StorePingForUnit(UnitFromId(32), 1, PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupPings_Init () {
    gt_SetupPings = TriggerCreate("gt_SetupPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Power Link Pings
//--------------------------------------------------------------------------------------------------
bool gt_DestroyPowerLinkPings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyPowerLinkPings_Init () {
    gt_DestroyPowerLinkPings = TriggerCreate("gt_DestroyPowerLinkPings_Func");
    TriggerAddEventUnitDied(gt_DestroyPowerLinkPings, UnitRefFromUnit(UnitFromId(47)));
    TriggerAddEventUnitDied(gt_DestroyPowerLinkPings, UnitRefFromUnit(UnitFromId(32)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Field sound updates
//--------------------------------------------------------------------------------------------------
bool gt_PsiFieldsoundupdates_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_psiDestroyer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(gv_psiDestroyer), "Signal StopSound");
    gv_psiFieldSoundRegion = RegionEmpty();
    Wait(0.0625, c_timeGame);
    gv_psiFieldSoundRegion = RegionCircle(UnitGetPosition(gv_psiDestroyer), gv_psifieldradius);
    ActorRegionCreate(ActorScopeFromUnit(gv_psiDestroyer), "PsiDecimatorDomeRegion", gv_psiFieldSoundRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiFieldsoundupdates_Init () {
    gt_PsiFieldsoundupdates = TriggerCreate("gt_PsiFieldsoundupdates_Func");
    TriggerEnable(gt_PsiFieldsoundupdates, false);
    TriggerAddEventTimePeriodic(gt_PsiFieldsoundupdates, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyer Field Setup
//--------------------------------------------------------------------------------------------------
bool gt_DestroyerFieldSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_psifieldgrowthpersec = 0.0;
    gv_psifieldradius = (libNtve_gf_WidthOfRegion(RegionFromId(13)) / 2.0);
    gv_psifieldstate = 2;
    TriggerExecute(gt_DestroyerFieldUpdate, true, false);
    TriggerEnable(gt_PsiFieldsoundupdates, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyerFieldSetup_Init () {
    gt_DestroyerFieldSetup = TriggerCreate("gt_DestroyerFieldSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyer Field Update
//--------------------------------------------------------------------------------------------------
bool gt_DestroyerFieldUpdate_Func (bool testConds, bool runActions) {
    int autoD19E942E_val;

    // Variable Declarations
    fixed lv_psifieldvisualsize;
    fixed lv_blendduration;
    const fixed lv_stage2GrowthTIME = 45.0;

    // Variable Initialization
    lv_psifieldvisualsize = (gv_psifieldradius * 0.952);
    lv_blendduration = gv_psifieldupdatefrequency;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        while (!((gv_gameOver == false) && (gv_inCinematic == false))) {
            Wait(0.1, c_timeGame);
        }
        autoD19E942E_val = gv_psifieldstate;
        if (autoD19E942E_val == 0) {
            if ((gv_psifieldradius < (libNtve_gf_WidthOfRegion(RegionFromId(15)) / 2.0))) {
                gv_psifieldradius = (gv_psifieldradius + (gf_FieldExpandRatetoRegion((gv_psiFieldResetRadius * 0.7), gv_psiFieldResetRadius, 60.0) * gv_psifieldupdatefrequency));
            }
            else {
                gv_psifieldradius = (gv_psifieldradius + (gv_psifieldgrowthpersec * gv_psifieldupdatefrequency));
            }
        }
        else if (autoD19E942E_val == 1) {
            gv_psifieldradius = (gv_psifieldradius - (gv_psifieldshrinkpersec * gv_psifieldupdatefrequency));
            if ((gv_psifieldradius <= 0.0)) {
                if ((UnitGroupCount(gv_powerLinkGroup, c_unitCountAlive) == 0)) {
                    gv_psifieldstate = 2;
                }
                else {
                    gv_psifieldstate = 3;
                }
            }
            else {
            }
        }
        else if (autoD19E942E_val == 2) {
        }
        else if (autoD19E942E_val == 3) {
            gv_psifieldradius = 0.0;
        }
        else {
        }
        gv_psifieldregion = RegionCircle(gv_psifieldorigin, gv_psifieldradius);
        lv_psifieldvisualsize = (gv_psifieldradius * 0.952);
        TriggerExecute(gt_DestroyerFieldGrowthPingsPulsed, true, false);
        if ((gv_psifieldradius > 0.0)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "PsiDecimatorSearch", "AreaArray[0].Radius", gv_pLAYER_02_DOMINION, FixedToString(gv_psifieldradius, c_fixedPrecisionAny));
            ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetScale(lv_psifieldvisualsize, lv_psifieldvisualsize, 1.0, lv_blendduration));
            ActorSend(ActorFromDoodad(DoodadFromId(284)), "SetVisibility 1");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogEffect, "PsiDecimatorSearch", "AreaArray[0].Radius", gv_pLAYER_02_DOMINION, FixedToString(0.0, c_fixedPrecisionAny));
            ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
            ActorSend(ActorFromDoodad(DoodadFromId(284)), "SetVisibility");
        }
        Wait(gv_psifieldupdatefrequency, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyerFieldUpdate_Init () {
    gt_DestroyerFieldUpdate = TriggerCreate("gt_DestroyerFieldUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyer Field Growth Pings Pulsed
//--------------------------------------------------------------------------------------------------
bool gt_DestroyerFieldGrowthPingsPulsed_Func (bool testConds, bool runActions) {
    int auto2AA259B2_ae;
    int auto2AA259B2_ai;
    int autoAD775EA4_ae;
    int autoAD775EA4_ai;
    int autoF6637015_ae;
    int autoF6637015_ai;
    int auto3877ABF0_ae;
    int auto3877ABF0_ai;

    // Variable Declarations
    fixed lv_distbwpings;
    fixed lv_pinglifetime;
    const int lv_spokecount = 16;
    fixed lv_pingscaleMAX;
    fixed lv_pingscaleMIN;
    fixed lv_timebetweenpulses;
    int lv_foreachint_i;
    int lv_foreachint_j;
    int lv_distancechunks;
    point lv_pingposition;
    fixed lv_pingangle;
    fixed lv_pingpositiondist;
    fixed lv_pingpositionangle;
    fixed lv_fieldradiusmax;

    // Variable Initialization
    lv_distbwpings = 12.0;
    lv_pinglifetime = 0.75;
    lv_pingscaleMAX = 0.8;
    lv_pingscaleMIN = 0.1;
    lv_timebetweenpulses = 5.0;
    lv_foreachint_i = 0;
    lv_foreachint_j = 0;
    lv_distancechunks = 0;
    lv_pingposition = null;
    lv_pingangle = 0.0;
    lv_pingpositiondist = 0.0;
    lv_pingpositionangle = 0.0;
    lv_fieldradiusmax = (libNtve_gf_WidthOfRegion(RegionFromId(14)) / 2.0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_psifieldstate == 0)) {
        lv_distancechunks = FixedToInt((gv_psifieldradius / lv_distbwpings));
        auto2AA259B2_ae = lv_distancechunks;
        auto2AA259B2_ai = 1;
        lv_foreachint_i = 1;
        while ((auto2AA259B2_ai >= 0 && lv_foreachint_i <= auto2AA259B2_ae) || (auto2AA259B2_ai <= 0 && lv_foreachint_i >= auto2AA259B2_ae)) {
            autoAD775EA4_ae = lv_spokecount;
            autoAD775EA4_ai = 1;
            lv_foreachint_j = 1;
            while ((autoAD775EA4_ai >= 0 && lv_foreachint_j <= autoAD775EA4_ae) || (autoAD775EA4_ai <= 0 && lv_foreachint_j >= autoAD775EA4_ae)) {
                lv_pingpositiondist = (lv_distbwpings * IntToFixed(lv_foreachint_i));
                lv_pingpositionangle = ((360.0 / lv_spokecount) * lv_foreachint_j);
                lv_pingposition = PointWithOffsetPolar(UnitGetPosition(gv_psiDestroyer), lv_pingpositiondist, lv_pingpositionangle);
                lv_pingangle = ((360.0 / lv_spokecount) * lv_foreachint_j);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_pingposition, ColorWithAlpha(100.00, 50.20, 0.00, 0.00), lv_pinglifetime, lv_pingangle);
                PingSetScale(PingLastCreated(), (((lv_pingpositiondist / lv_fieldradiusmax) * (lv_pingscaleMAX - lv_pingscaleMIN)) + lv_pingscaleMIN));
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EB3FE1E8"));
                if (lv_foreachint_j == autoAD775EA4_ae) {
                    break;
                }
                lv_foreachint_j = lv_foreachint_j + autoAD775EA4_ai;
            }
            if (((gv_psifieldstate == 1) || (gv_psifieldstate == 3))) {
                break;
            }
            else {
            }
            Wait(0.25, c_timeReal);
            if (lv_foreachint_i == auto2AA259B2_ae) {
                break;
            }
            lv_foreachint_i = lv_foreachint_i + auto2AA259B2_ai;
        }
        Wait((lv_timebetweenpulses - (lv_distancechunks * 0.25)), c_timeReal);
    }
    else {
    }
    if ((gv_psifieldstate == 1)) {
        lv_distancechunks = FixedToInt((gv_psifieldradius / lv_distbwpings));
        autoF6637015_ae = 1;
        autoF6637015_ai = -1;
        lv_foreachint_i = lv_distancechunks;
        while ((autoF6637015_ai >= 0 && lv_foreachint_i <= autoF6637015_ae) || (autoF6637015_ai <= 0 && lv_foreachint_i >= autoF6637015_ae)) {
            auto3877ABF0_ae = lv_spokecount;
            auto3877ABF0_ai = 1;
            lv_foreachint_j = 1;
            while ((auto3877ABF0_ai >= 0 && lv_foreachint_j <= auto3877ABF0_ae) || (auto3877ABF0_ai <= 0 && lv_foreachint_j >= auto3877ABF0_ae)) {
                lv_pingpositiondist = (lv_distbwpings * IntToFixed(lv_foreachint_i));
                lv_pingpositionangle = ((360.0 / lv_spokecount) * lv_foreachint_j);
                lv_pingposition = PointWithOffsetPolar(UnitGetPosition(gv_psiDestroyer), lv_pingpositiondist, lv_pingpositionangle);
                lv_pingangle = (((360.0 / lv_spokecount) * lv_foreachint_j) + 180.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_pingposition, ColorWithAlpha(100.00, 50.20, 0.00, 0.00), lv_pinglifetime, lv_pingangle);
                PingSetScale(PingLastCreated(), (((lv_pingpositiondist / lv_fieldradiusmax) * (lv_pingscaleMAX - lv_pingscaleMIN)) + lv_pingscaleMIN));
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E800CAE7"));
                if (lv_foreachint_j == auto3877ABF0_ae) {
                    break;
                }
                lv_foreachint_j = lv_foreachint_j + auto3877ABF0_ai;
            }
            if (((gv_psifieldstate == 0) || (gv_psifieldstate == 3))) {
                break;
            }
            else {
            }
            Wait(0.25, c_timeReal);
            if (lv_foreachint_i == autoF6637015_ae) {
                break;
            }
            lv_foreachint_i = lv_foreachint_i + autoF6637015_ai;
        }
        Wait((lv_timebetweenpulses - (lv_distancechunks * 0.25)), c_timeReal);
    }
    else {
    }
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyerFieldGrowthPingsPulsed_Init () {
    gt_DestroyerFieldGrowthPingsPulsed = TriggerCreate("gt_DestroyerFieldGrowthPingsPulsed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyer Field Update Minimap
//--------------------------------------------------------------------------------------------------
bool gt_DestroyerFieldUpdateMinimap_Func (bool testConds, bool runActions) {
    int autoAF7DF5A7_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_powerLinkGroup, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_psifieldradius > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAF7DF5A7_val = gv_psifieldstate;
    if (autoAF7DF5A7_val == 0) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "KorhalShieldRadiusExpandPing", UnitGetPosition(gv_psiDestroyer), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (gv_psifieldupdatefrequency * 1.0), 0.0);
        PingSetScale(PingLastCreated(), (gv_psifieldradius * gv_fieldPingScalar));
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FB9BC3C8"));
    }
    else if (autoAF7DF5A7_val == 1) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "KorhalShieldRadiusContractPing", UnitGetPosition(gv_psiDestroyer), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (gv_psifieldupdatefrequency * 1.0), 0.0);
        PingSetScale(PingLastCreated(), (gv_psifieldradius * gv_fieldPingScalar));
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E72A009A"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyerFieldUpdateMinimap_Init () {
    gt_DestroyerFieldUpdateMinimap = TriggerCreate("gt_DestroyerFieldUpdateMinimap_Func");
    TriggerAddEventTimePeriodic(gt_DestroyerFieldUpdateMinimap, (gv_psifieldupdatefrequency * 1.0), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Link Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_PowerLinkDestroyedQ_Func (bool testConds, bool runActions) {
    unit auto0A29AD4D_val;

    // Variable Declarations
    fixed lv_psifieldtimer;

    // Variable Initialization
    lv_psifieldtimer = 0.0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_powerLinkType))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0A29AD4D_val = EventUnit();
    if (auto0A29AD4D_val == UnitFromId(5)) {
        gv_psifieldradiustarget = (libNtve_gf_WidthOfRegion(RegionFromId(14)) * 0.5);
        gv_psifieldgrowthpersec = gf_FieldExpandRatetoPoint((libNtve_gf_WidthOfRegion(RegionFromId(15)) / 2.0), gv_fieldExpansionTime01, PointFromId(1039));
        lv_psifieldtimer = gv_fieldPowerUpTime01;
        gv_psifieldshrinkpersec = 20.0;
        TriggerWaitForTrigger(gt_MidQ, true);
        TriggerExecute(gt_RevealTealUnits, true, false);
        gf_DisplayFieldPowerLeaderboard();
    }
    else if (auto0A29AD4D_val == UnitFromId(47)) {
        gv_psifieldradiustarget = (libNtve_gf_WidthOfRegion(RegionFromId(14)) * 0.5);
        gv_psifieldgrowthpersec = gf_FieldExpandRatetoPoint((libNtve_gf_WidthOfRegion(RegionFromId(15)) / 2.0), gv_fieldExpansionTime02, PointFromId(1039));
        lv_psifieldtimer = gv_fieldPowerUpTime02;
        gv_psifieldshrinkpersec = 20.0;
        TriggerExecute(gt_TransitiontoNoFieldActiveQ, true, true);
        TriggerExecute(gt_TransmissionPowerLink2DestroyedQ, true, false);
        TriggerExecute(gt_RevealRedBaseFront, true, false);
        gf_DisplayFieldPowerLeaderboard();
    }
    else if (auto0A29AD4D_val == UnitFromId(32)) {
        gf_DestroyFieldPowerLeaderboard(true);
        gv_psifieldgrowthpersec = 0.0;
        gv_psifieldshrinkpersec = 20.0;
        TriggerExecute(gt_AchievementDehakaSurvivalNH, true, false);
        Wait(2.0, c_timeReal);
        TriggerExecute(gt_TransitiontoNoFieldActiveQ, true, true);
        TriggerExecute(gt_RevealRedBaseBack, true, false);
        TriggerExecute(gt_DehakaReturnsforFinalPush, true, false);
        TriggerExecute(gt_TransmissionAllPowerLinksDownQ, true, false);
    }
    else {
    }
    gv_psifieldstate = 1;
    gf_PowerLinkSwitching(true);
    TimerStart(gv_psifieldpowerup, lv_psifieldtimer, false, c_timeAI);
    TimerStart(gv_fieldPowerUpWarning01, (lv_psifieldtimer - 90.0), false, c_timeAI);
    TimerStart(gv_fieldPowerUpWarning02, (lv_psifieldtimer - 45.0), false, c_timeAI);
    TriggerExecute(gt_CountDownBeeps, true, false);
    if ((EventUnit() != UnitFromId(5))) {
        TriggerQueueEnter();
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeGame);
        TextExpressionSetToken("Param/Expression/96D747F0", "A", IntToText(UnitGroupCount(gv_powerLinkGroup, c_unitCountAlive)));
        libSwaC_gf_CreateMissionAutosavePoint(TextExpressionAssemble("Param/Expression/96D747F0"));
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerLinkDestroyedQ_Init () {
    gt_PowerLinkDestroyedQ = TriggerCreate("gt_PowerLinkDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_PowerLinkDestroyedQ, UnitRefFromUnit(UnitFromId(5)));
    TriggerAddEventUnitDied(gt_PowerLinkDestroyedQ, UnitRefFromUnit(UnitFromId(47)));
    TriggerAddEventUnitDied(gt_PowerLinkDestroyedQ, UnitRefFromUnit(UnitFromId(32)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyer Field Post Cine Setup
//--------------------------------------------------------------------------------------------------
bool gt_DestroyerFieldPostCineSetup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_psifieldradius = gv_psiFieldResetRadius;
    ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetScale(gv_psifieldradius, gv_psifieldradius, 1.0, 0.0));
    CatalogFieldValueSet(c_gameCatalogEffect, "PsiDecimatorSearch", "AreaArray[0].Radius", gv_pLAYER_02_DOMINION, FixedToString(gv_psifieldradius, c_fixedPrecisionAny));
    gv_psifieldstate = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyerFieldPostCineSetup_Init () {
    gt_DestroyerFieldPostCineSetup = TriggerCreate("gt_DestroyerFieldPostCineSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Power Link Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstPowerLinkAttackedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(446)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(446), "zMission_Korhal02|Line00003", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(123)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(123), "zMission_Korhal02|Line00054", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstPowerLinkAttackedQ_Init () {
    gt_TransmissionFirstPowerLinkAttackedQ = TriggerCreate("gt_TransmissionFirstPowerLinkAttackedQ_Func");
    TriggerAddEventUnitRange(gt_TransmissionFirstPowerLinkAttackedQ, UnitRefFromVariable("gv_dEHAKA"), UnitFromId(446), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Unit In Destroyer Field Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUnitInDestroyerFieldQ_Func (bool testConds, bool runActions) {
    int autoE6989FC5_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true) || (UnitGetType(EventUnit()) == "SpineCrawler") || (UnitGetType(EventUnit()) == "SporeCrawler") || (UnitGetType(EventUnit()) == "SpineCrawlerUprooted") || (UnitGetType(EventUnit()) == "SporeCrawlerUprooted")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((gv_kerriganInFieldPlayed == false) && (EventUnit() == gv_kERRIGAN)) {
        gv_kerriganInFieldPlayed = true;
        libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00101", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
        gv_swarmInFieldTransmission += 1;
        autoE6989FC5_val = gv_swarmInFieldTransmission;
        if (autoE6989FC5_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00074", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (autoE6989FC5_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00111", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (autoE6989FC5_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00052", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (autoE6989FC5_val == 4) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00051", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (autoE6989FC5_val == 5) {
            libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00053", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (autoE6989FC5_val == 6) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00112", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else {
        }
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    if ((gv_swarmInFieldTransmission <= 6)) {
        Wait(120.0, c_timeReal);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUnitInDestroyerFieldQ_Init () {
    gt_TransmissionUnitInDestroyerFieldQ = TriggerCreate("gt_TransmissionUnitInDestroyerFieldQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionUnitInDestroyerFieldQ, null, c_unitDamageTypeAny, c_unitDamageEither, "PsiDecimatorDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Destroyer Field Returning 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDestroyerFieldReturning01Q_Func (bool testConds, bool runActions) {
    int auto43E7B1FD_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_powerLinkGroup, c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/BA89EE7B"));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundPlay(SoundLink("Event_Korhal2_ShieldEnergySpike", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Event_Korhal2_ShieldEnergySpike2", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Event_Korhal2_ShieldEnergySpike3", -1), PlayerGroupAll(), 100.0, 0.0);
    auto43E7B1FD_val = UnitGroupCount(gv_powerLinkGroup, c_unitCountAlive);
    if (auto43E7B1FD_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00089", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto43E7B1FD_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00080", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00089", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDestroyerFieldReturning01Q_Init () {
    gt_TransmissionDestroyerFieldReturning01Q = TriggerCreate("gt_TransmissionDestroyerFieldReturning01Q_Func");
    TriggerAddEventTimer(gt_TransmissionDestroyerFieldReturning01Q, gv_fieldPowerUpWarning01);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Destroyer Field Returning 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDestroyerFieldReturning02Q_Func (bool testConds, bool runActions) {
    int autoA682D384_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_powerLinkGroup, c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    autoA682D384_val = UnitGroupCount(gv_powerLinkGroup, c_unitCountAlive);
    if (autoA682D384_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00098", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (autoA682D384_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00099", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00089", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDestroyerFieldReturning02Q_Init () {
    gt_TransmissionDestroyerFieldReturning02Q = TriggerCreate("gt_TransmissionDestroyerFieldReturning02Q_Func");
    TriggerAddEventTimer(gt_TransmissionDestroyerFieldReturning02Q, gv_fieldPowerUpWarning02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Power Link 2 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPowerLink2DestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), PointFromId(507), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/04809B7F"), null, PointFromId(507));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00086", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPowerLink2DestroyedQ_Init () {
    gt_TransmissionPowerLink2DestroyedQ = TriggerCreate("gt_TransmissionPowerLink2DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - All Power Links Down Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAllPowerLinksDownQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundPlay(SoundLink("Event_Korhal2_ShieldPowerDown", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00072", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00092", c_transmissionDurationAdd, 0.0, true, 1, 0);
    SoundPlay(SoundLink("ZergArmy_Cheer_MassiveRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAllPowerLinksDownQ_Init () {
    gt_TransmissionAllPowerLinksDownQ = TriggerCreate("gt_TransmissionAllPowerLinksDownQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Count Down Beeps
//--------------------------------------------------------------------------------------------------
bool gt_CountDownBeeps_Func (bool testConds, bool runActions) {
    int autoB67E5124_ae;
    int autoB67E5124_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_powerLinkGroup, c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB67E5124_ae = 1;
    autoB67E5124_ai = -1;
    lv_index = 5;
    while ((autoB67E5124_ai >= 0 && lv_index <= autoB67E5124_ae) || (autoB67E5124_ai <= 0 && lv_index >= autoB67E5124_ae)) {
        while (!((TimerGetRemaining(gv_psifieldpowerup) <= lv_index))) {
            Wait(0.1, c_timeGame);
        }
        SoundPlay(SoundLink("Event_PsiDestroyerCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
        if (lv_index == autoB67E5124_ae) {
            break;
        }
        lv_index = lv_index + autoB67E5124_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountDownBeeps_Init () {
    gt_CountDownBeeps = TriggerCreate("gt_CountDownBeeps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Returns
//--------------------------------------------------------------------------------------------------
bool gt_FieldReturns_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    gf_DestroyFieldPowerLeaderboard(false);
    if ((UnitIsAlive(UnitFromId(5)) == false) && (UnitIsAlive(UnitFromId(47)) == true) && (UnitIsAlive(UnitFromId(32)) == true)) {
        TriggerEnable(gt_AchievementStructuresDestroyedBefore2ndField, false);
        TriggerExecute(gt_MidCineDehakaPlatform02Q, true, true);
        PingSetVisible(libHots_gf_PingStoredForUnit(UnitFromId(47), 1), true);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(5)) == false) && (UnitIsAlive(UnitFromId(47)) == false) && (UnitIsAlive(UnitFromId(32)) == true)) {
        TriggerExecute(gt_MidCineDehakaPlatform03Q, true, true);
        PingSetVisible(libHots_gf_PingStoredForUnit(UnitFromId(32), 1), true);
    }
    else {
    }
    gf_PowerLinkSwitching(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldReturns_Init () {
    gt_FieldReturns = TriggerCreate("gt_FieldReturns_Func");
    TriggerAddEventTimer(gt_FieldReturns, gv_psifieldpowerup);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Section 3A Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_Section3AReinforcements_Func (bool testConds, bool runActions) {
    int auto07EC050F_n;
    int auto07EC050F_i;
    int auto7E9EB7D8_n;
    int auto7E9EB7D8_i;
    int autoB98320A6_n;
    int autoB98320A6_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5E2C7C9E"), null, PointFromId(815));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(815), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0, 270.0);
    TriggerExecute(gt_TransmissionIzshaReinforcements3AQ, true, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "PrimalUltralisk", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(815));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(255)), c_orderQueueReplace);
    UnitGroupAdd(gv_dehakasGroup, UnitLastCreated());
    Wait(0.25, c_timeGame);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_SpaceVent_Open", -1), PlayerGroupAll(), PointFromId(815), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_PrimalRoachGroupVox", -1), PlayerGroupAll(), PointFromId(815), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_PrimalRoachGroupVox2", -1), PlayerGroupAll(), PointFromId(815), 0.0, 100.0, 0.0);
    auto07EC050F_n = gv_reinforcementsRoach;
    auto07EC050F_i = 1;
    while (auto07EC050F_i <= auto07EC050F_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalRoach", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(815));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(255)), c_orderQueueReplace);
        UnitGroupAdd(gv_dehakasGroup, UnitLastCreated());
        Wait(0.25, c_timeGame);
        auto07EC050F_i = auto07EC050F_i + 1;
    }
    auto7E9EB7D8_n = gv_reinforcementsZergling;
    auto7E9EB7D8_i = 1;
    while (auto7E9EB7D8_i <= auto7E9EB7D8_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalZergling", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(815));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(255)), c_orderQueueReplace);
        UnitGroupAdd(gv_dehakasGroup, UnitLastCreated());
        Wait(0.25, c_timeGame);
        auto7E9EB7D8_i = auto7E9EB7D8_i + 1;
    }
    autoB98320A6_n = gv_reinforcementsHydralisk;
    autoB98320A6_i = 1;
    while (autoB98320A6_i <= autoB98320A6_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalHydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(815));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(255)), c_orderQueueReplace);
        UnitGroupAdd(gv_dehakasGroup, UnitLastCreated());
        Wait(0.25, c_timeGame);
        autoB98320A6_i = autoB98320A6_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Section3AReinforcements_Init () {
    gt_Section3AReinforcements = TriggerCreate("gt_Section3AReinforcements_Func");
    TriggerAddEventUnitRegion(gt_Section3AReinforcements, null, RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Izsha Reinforcements 3A Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIzshaReinforcements3AQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00088", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIzshaReinforcements3AQ_Init () {
    gt_TransmissionIzshaReinforcements3AQ = TriggerCreate("gt_TransmissionIzshaReinforcements3AQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Section 3B Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_Section3BReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropGroup;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/723D3622"), null, PointFromId(816));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(816), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0, 270.0);
    TriggerExecute(gt_TransmissionIzshaReinforcements3BQ, true, false);
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(4, 4, 3), "PrimalRoach", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(102));
    UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(6, 6, 5), "PrimalZergling", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(102));
    UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libHots_gf_DifficultyValueInt2(4, 4, 3), "PrimalHydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(102));
    UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(1, PointFromId(816), lv_dropGroup, true, gv_pLAYER_01_USER);
    UnitGroupLoopBegin(lv_dropGroup);
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_dehakasGroup, UnitGroupLoopCurrent());
        UnitGroupRemove(lv_dropGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Section3BReinforcements_Init () {
    gt_Section3BReinforcements = TriggerCreate("gt_Section3BReinforcements_Func");
    TriggerAddEventUnitRegion(gt_Section3BReinforcements, null, RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Izsha Reinforcements 3B Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIzshaReinforcements3BQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00090", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIzshaReinforcements3BQ_Init () {
    gt_TransmissionIzshaReinforcements3BQ = TriggerCreate("gt_TransmissionIzshaReinforcements3BQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Dehaka Wasting Time Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDehakaWastingTimeQ_Func (bool testConds, bool runActions) {
    int autoCB372376_val;

    // Conditions
    if (testConds) {
        if (!((UnitTestState(gv_dEHAKA, c_unitStateIdle) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_powerLinkGroup) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    else {
    }
    if (((gv_inCinematic == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_dEHAKA, gv_pLAYER_01_USER) == false))) {
        gv_dehakaIdleTime = 0;
        return true;
    }
    else {
        gv_dehakaIdleTime += 1;
    }
    if ((gv_dehakaIdleTime >= 60) && (TriggerQueueIsEmpty() == true)) {
        gv_dehakaIdleTime = 0;
        gv_dehakaNudgeTransmission += 1;
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        autoCB372376_val = gv_dehakaNudgeTransmission;
        if (autoCB372376_val == 1) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00109", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        }
        else if (autoCB372376_val == 2) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00113", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        }
        else if (autoCB372376_val == 3) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(gv_kERRIGAN, "zMission_Korhal02|Line00114", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        }
        else {
            return true;
        }
        TriggerQueueExit();
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDehakaWastingTimeQ_Init () {
    gt_TransmissionDehakaWastingTimeQ = TriggerCreate("gt_TransmissionDehakaWastingTimeQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionDehakaWastingTimeQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Returns for Final Push
//--------------------------------------------------------------------------------------------------
bool gt_DehakaReturnsforFinalPush_Func (bool testConds, bool runActions) {
    int auto08A33EBC_n;
    int auto08A33EBC_i;
    int autoF3EEF36C_n;
    int autoF3EEF36C_i;
    int auto503CCA93_n;
    int auto503CCA93_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(30.0, c_timeGame);
    gf_TurnDehakaOnOff(true);
    libSwaC_gf_SetHeroPanelUnit(2, gv_dEHAKA);
    libNtve_gf_SendActorMessageToUnit(gv_dEHAKA, "Signal RemoveGlow");
    UnitStatusBarClearOverride(gv_dEHAKA);
    UnitSetPosition(gv_dEHAKA, PointFromId(1045), false);
    UnitSetFacing(gv_dEHAKA, PointGetFacing(PointFromId(1045)), 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(617)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_dEHAKA), c_animNameDefault, "Cover End", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    Wait(1.6, c_timeReal);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(617)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_SendActorMessageToUnit(gv_dEHAKA, "Create DehakaHeroGlow");
    UnitStatusBarOverride(gv_dEHAKA, c_unitStatusGroupAll);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_dEHAKA), c_animNameDefault);
    UnitIssueOrder(gv_dEHAKA, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F2049BB4"), null, RegionGetCenter(RegionFromId(27)));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(27)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0, 270.0);
    TriggerExecute(gt_TransmissionDehakaReturnsQ, true, false);
    Wait(1.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_PrimalRoachGroupVox", -1), PlayerGroupAll(), PointFromId(1045), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_PrimalRoachGroupVox2", -1), PlayerGroupAll(), PointFromId(1045), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_PrimalHordeEntrance", -1), PlayerGroupAll(), PointFromId(1045), 0.0, 100.0, 0.0);
    auto08A33EBC_n = gv_reinforcementsZergling;
    auto08A33EBC_i = 1;
    while (auto08A33EBC_i <= auto08A33EBC_n) {
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_01_USER, PointFromId(1045), PointGetFacing(PointFromId(1045)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        auto08A33EBC_i = auto08A33EBC_i + 1;
    }
    autoF3EEF36C_n = gv_reinforcementsRoach;
    autoF3EEF36C_i = 1;
    while (autoF3EEF36C_i <= autoF3EEF36C_n) {
        UnitCreate(1, "PrimalRoach", 0, gv_pLAYER_01_USER, PointFromId(1045), PointGetFacing(PointFromId(1045)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        autoF3EEF36C_i = autoF3EEF36C_i + 1;
    }
    auto503CCA93_n = gv_reinforcementsHydralisk;
    auto503CCA93_i = 1;
    while (auto503CCA93_i <= auto503CCA93_n) {
        UnitCreate(1, "PrimalHydralisk", 0, gv_pLAYER_01_USER, PointFromId(1045), PointGetFacing(PointFromId(1045)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        auto503CCA93_i = auto503CCA93_i + 1;
    }
    Wait(0.5, c_timeGame);
    libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(617)), c_animNameDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DehakaReturnsforFinalPush_Init () {
    gt_DehakaReturnsforFinalPush = TriggerCreate("gt_DehakaReturnsforFinalPush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Dehaka Returns Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDehakaReturnsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00104", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDehakaReturnsQ_Init () {
    gt_TransmissionDehakaReturnsQ = TriggerCreate("gt_TransmissionDehakaReturnsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Dehaka Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_RespawnDehakaReinforcements_Func (bool testConds, bool runActions) {
    point autoADF3B7B5_val;

    // Variable Declarations
    int lv_additionalZerglings;
    int lv_additionalRoaches;
    int lv_additionalHydras;
    unitgroup lv_primalGroup;
    point lv_spawnPoint;

    // Variable Initialization
    lv_additionalZerglings = 0;
    lv_additionalRoaches = 0;
    lv_additionalHydras = 0;
    lv_primalGroup = UnitGroupEmpty();
    lv_spawnPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnPoint = gf_DehakaRespawnLocation();
    autoADF3B7B5_val = lv_spawnPoint;
    if (autoADF3B7B5_val == PointFromId(3)) {
    }
    else if (autoADF3B7B5_val == PointFromId(795)) {
        lv_additionalRoaches = (gv_reinforcementsRoach - (UnitGroupCount(UnitGroup("PrimalRoach", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup("PrimalRoachBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
        if ((lv_additionalRoaches > 0)) {
            UnitCreate(lv_additionalRoaches, "PrimalRoach", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, lv_spawnPoint, libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(lv_primalGroup, UnitLastCreatedGroup());
        }
        else {
        }
    }
    else if (autoADF3B7B5_val == PointFromId(1030)) {
    }
    else if (autoADF3B7B5_val == PointFromId(815)) {
        lv_additionalRoaches = (gv_reinforcementsRoach - (UnitGroupCount(UnitGroup("PrimalRoach", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup("PrimalRoachBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
        if ((lv_additionalRoaches > 0)) {
            UnitCreate(lv_additionalRoaches, "PrimalRoach", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, lv_spawnPoint, libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(lv_primalGroup, UnitLastCreatedGroup());
        }
        else {
        }
        lv_additionalZerglings = (gv_reinforcementsZergling - (UnitGroupCount(UnitGroup("PrimalZergling", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup("PrimalZerglingBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
        if ((lv_additionalZerglings > 0)) {
            UnitCreate(lv_additionalZerglings, "PrimalZergling", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, lv_spawnPoint, libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(lv_primalGroup, UnitLastCreatedGroup());
        }
        else {
        }
        lv_additionalHydras = (gv_reinforcementsHydralisk - (UnitGroupCount(UnitGroup("PrimalHydralisk", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup("PrimalHydraliskBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
        if ((lv_additionalHydras > 0)) {
            UnitCreate(lv_additionalHydras, "PrimalHydralisk", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, lv_spawnPoint, libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(lv_primalGroup, UnitLastCreatedGroup());
        }
        else {
        }
    }
    else {
    }
    if ((UnitGroupCount(lv_primalGroup, c_unitCountAlive) > 0)) {
        UnitGroupAddUnitGroup(gv_dehakasGroup, lv_primalGroup);
        UnitGroupLoopBegin(lv_primalGroup);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        TriggerExecute(gt_TransmissionIzshaReinforcementsQ, true, false);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/96B0068B"), null, lv_spawnPoint);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", lv_spawnPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0, 270.0);
        UnitGroupLoopBegin(lv_primalGroup);
        while (!UnitGroupLoopDone()) {
            SoundPlayOnUnit(SoundLink("Event_Korhal2_PrimalRoachGroupVox", -1), PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
            SoundPlayOnUnit(SoundLink("Event_Korhal2_PrimalRoachGroupVox2", -1), PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), RandomFixed(0.5, 2.0), RandomFixed(0.0, 90.0))), c_orderQueueReplace);
            Wait(RandomFixed(0.1, 0.6), c_timeGame);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnDehakaReinforcements_Init () {
    gt_RespawnDehakaReinforcements = TriggerCreate("gt_RespawnDehakaReinforcements_Func");
    TriggerAddEventUnitRevive(gt_RespawnDehakaReinforcements, UnitRefFromVariable("gv_dEHAKA"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Izsha Reinforcements Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIzshaReinforcementsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00082", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIzshaReinforcementsQ_Init () {
    gt_TransmissionIzshaReinforcementsQ = TriggerCreate("gt_TransmissionIzshaReinforcementsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Link 1 - Dominion Reaction
//--------------------------------------------------------------------------------------------------
bool gt_PowerLink1DominionReaction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_DOMINION_YELLOW))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(55)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup(null, UnitGetOwner(EventUnit()), RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerLink1DominionReaction_Init () {
    gt_PowerLink1DominionReaction = TriggerCreate("gt_PowerLink1DominionReaction_Func");
    TriggerAddEventUnitAttacked(gt_PowerLink1DominionReaction, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Link 3 - SCV Build Defenses
//--------------------------------------------------------------------------------------------------
bool gt_PowerLink3SCVBuildDefenses_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_05_DOMINION_GREEN, RegionFromId(12), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerLink3SCVBuildDefenses_Init () {
    gt_PowerLink3SCVBuildDefenses = TriggerCreate("gt_PowerLink3SCVBuildDefenses_Func");
    TriggerAddEventUnitRegion(gt_PowerLink3SCVBuildDefenses, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mengsk Defend Humanity Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMengskDefendHumanityQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00071", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMengskDefendHumanityQ_Init () {
    gt_TransmissionMengskDefendHumanityQ = TriggerCreate("gt_TransmissionMengskDefendHumanityQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionMengskDefendHumanityQ, UnitRefFromVariable("gv_kERRIGAN"), RegionFromId(44), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engage Dominion Warning Check
//--------------------------------------------------------------------------------------------------
bool gt_EngageDominionWarningCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, 4) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_dominionEngaged = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngageDominionWarningCheck_Init () {
    gt_EngageDominionWarningCheck = TriggerCreate("gt_EngageDominionWarningCheck_Func");
    TriggerEnable(gt_EngageDominionWarningCheck, false);
    TriggerAddEventUnitDied(gt_EngageDominionWarningCheck, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engage Dominion Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_EngageDominionWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_dominionEngaged == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_dominionEngaged == false)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00118", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngageDominionWarningQ_Init () {
    gt_EngageDominionWarningQ = TriggerCreate("gt_EngageDominionWarningQ_Func");
    TriggerAddEventTimer(gt_EngageDominionWarningQ, gv_dominionEngageTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/B3771589"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    gf_ScriptedAttackGroup(RegionFromId(9), RegionFromId(11));
    gf_ScriptedAttackGroup(RegionFromId(5), RegionFromId(6));
    gf_ScriptedAttackGroup(RegionFromId(33), RegionFromId(10));
    gf_ScriptedAttackGroup(RegionFromId(48), RegionFromId(42));
    gf_ScriptedAttackGroup(RegionFromId(39), RegionFromId(40));
    gf_ScriptedAttackGroup(RegionFromId(39), RegionFromId(22));
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DOMINION, "Ghost", "AIGhost", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DOMINION, "Diamondback", "AIDiamondback", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_05_DOMINION_GREEN, "Diamondback", "AIDiamondback", false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    cai_waves_run(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    cai_waves_run(gv_pLAYER_04_DOMINION_TEAL, PlayerGroupSingle(gv_pLAYER_01_USER));
    cai_waves_run(gv_pLAYER_06_DOMINION_ORANGE, PlayerGroupSingle(gv_pLAYER_01_USER));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel3", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayerGroup);
    while (!PlayerGroupLoopDone()) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Bullies in P02 Front Base
//--------------------------------------------------------------------------------------------------
bool gt_DisableBulliesinP02FrontBase_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 6), c_unitCountAlive) < 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(3), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableBulliesinP02FrontBase_Init () {
    gt_DisableBulliesinP02FrontBase = TriggerCreate("gt_DisableBulliesinP02FrontBase_Func");
    TriggerAddEventTimePeriodic(gt_DisableBulliesinP02FrontBase, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Flee from Nuke
//--------------------------------------------------------------------------------------------------
bool gt_AIFleefromNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fleeingunits;

    // Variable Initialization
    lv_fleeingunits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeGame);
    while ((UnitOrder(EventUnit(), 0) == OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), EventUnitTargetPoint()))) {
        UnitGroupAddUnitGroup(lv_fleeingunits, UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(EventUnitTargetPoint(), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        AISetGroupScriptControlled(lv_fleeingunits, true);
        UnitGroupLoopBegin(lv_fleeingunits);
        while (!UnitGroupLoopDone()) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(331)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    UnitGroupIssueOrder(lv_fleeingunits, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    AISetGroupScriptControlled(lv_fleeingunits, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIFleefromNuke_Init () {
    gt_AIFleefromNuke = TriggerCreate("gt_AIFleefromNuke_Func");
    TriggerAddEventUnitAbility(gt_AIFleefromNuke, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyPsiDestroyer) == c_objectiveStateActive))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/AB5116C4"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDestroyed_Init () {
    gt_DefeatBaseDestroyed = TriggerCreate("gt_DefeatBaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Psi Destroyer Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyPsiDestroyerCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyPsiDestroyerCompleted_Init () {
    gt_VictoryDestroyPsiDestroyerCompleted = TriggerCreate("gt_VictoryDestroyPsiDestroyerCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libNtve_gf_MakeUnitInvulnerable(gv_kERRIGAN, true);
    libNtve_gf_MakeUnitInvulnerable(gv_dEHAKA, true);
    gv_achievementLastPowerLinkAlive = UnitIsAlive(UnitFromId(32));
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyPsiDestroyerComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyPsiDestroyer) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZKorhal02_1", gv_pLAYER_01_USER);
    }
    else {
    }
    TriggerExecute(gt_AchievementDehakaSurvivalNH, true, false);
    TriggerExecute(gt_AchievementDontDestroyLastPowerLinkH, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/7727D621"), IntToText(gv_kerriganKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/C5D50C64"), IntToText(gv_dehakaKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E84635A5"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AABF56A9"), IntToText(gv_structuresDestroyedBeforeFieldReturn));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/8922A06F"), IntToText(gv_largestZergForce));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/30183EA6"), IntToText(gv_victoryStatPsiFieldKills));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Structures Destroyed Before 2nd Field
//--------------------------------------------------------------------------------------------------
bool gt_AchievementStructuresDestroyedBefore2ndField_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKorhal02_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementStructuresDestroyedBefore2ndField_Init () {
    gt_AchievementStructuresDestroyedBefore2ndField = TriggerCreate("gt_AchievementStructuresDestroyedBefore2ndField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Dehaka Survival N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDehakaSurvivalNH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_achievementDehakaDied == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKorhal02_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDehakaSurvivalNH_Init () {
    gt_AchievementDehakaSurvivalNH = TriggerCreate("gt_AchievementDehakaSurvivalNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Don't Destroy Last Power Link H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDontDestroyLastPowerLinkH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_achievementLastPowerLinkAlive == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Korhal2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDontDestroyLastPowerLinkH_Init () {
    gt_AchievementDontDestroyLastPowerLinkH = TriggerCreate("gt_AchievementDontDestroyLastPowerLinkH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Destroyed Before 2nd Field
//--------------------------------------------------------------------------------------------------
bool gt_StructureDestroyedBefore2ndField_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, 4) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_structuresDestroyedBeforeFieldReturn += 1;
    if ((gv_structuresDestroyedBeforeFieldReturn >= 20)) {
        TriggerExecute(gt_AchievementStructuresDestroyedBefore2ndField, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StructureDestroyedBefore2ndField_Init () {
    gt_StructureDestroyedBefore2ndField = TriggerCreate("gt_StructureDestroyedBefore2ndField_Func");
    TriggerEnable(gt_StructureDestroyedBefore2ndField, false);
    TriggerAddEventUnitDied(gt_StructureDestroyedBefore2ndField, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Stat Psi Field Kills
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStatPsiFieldKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryStatPsiFieldKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStatPsiFieldKills_Init () {
    gt_VictoryStatPsiFieldKills = TriggerCreate("gt_VictoryStatPsiFieldKills_Func");
    TriggerAddEventUnitDamaged(gt_VictoryStatPsiFieldKills, null, c_unitDamageTypeAny, c_unitDamageFatal, "PsiDecimatorDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Largest Zerg Force
//--------------------------------------------------------------------------------------------------
bool gt_LargestZergForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentForce;

    // Variable Initialization
    lv_currentForce = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentForce = PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount");
    if ((lv_currentForce > gv_largestZergForce)) {
        gv_largestZergForce = lv_currentForce;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LargestZergForce_Init () {
    gt_LargestZergForce = TriggerCreate("gt_LargestZergForce_Func");
    TriggerAddEventTimePeriodic(gt_LargestZergForce, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Power Link Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerLinkCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal02Objective03");
    gv_objectiveDestroyPowerLink = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerLinkCreate_Init () {
    gt_ObjectiveDestroyPowerLinkCreate = TriggerCreate("gt_ObjectiveDestroyPowerLinkCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Power Link Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerLinkComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPowerLinkCreate, true, false);
    PingDestroy(gv_ping_PowerLink);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal02Objective03", 2);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal02Objective03", 1, true, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/02B2C57A"));
    TriggerExecute(gt_MidQ, true, false);
    ObjectiveShow(gv_objectiveDestroyPowerLink, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerLinkComplete_Init () {
    gt_ObjectiveDestroyPowerLinkComplete = TriggerCreate("gt_ObjectiveDestroyPowerLinkComplete_Func");
    TriggerAddEventUnitDied(gt_ObjectiveDestroyPowerLinkComplete, UnitRefFromUnit(UnitFromId(5)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Power Link Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerLinkFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPowerLinkCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal02Objective03", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerLinkFailed_Init () {
    gt_ObjectiveDestroyPowerLinkFailed = TriggerCreate("gt_ObjectiveDestroyPowerLinkFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Psi Destroyer Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPsiDestroyerCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZKorhal02Objective01");
    gv_objectiveDestroyPsiDestroyer = ObjectiveLastCreated();
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_psiDestroyer), StringExternal("Param/Value/2502CF55"));
    PingSetUnit(PingLastCreated(), gv_psiDestroyer);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPsiDestroyerCreate_Init () {
    gt_ObjectiveDestroyPsiDestroyerCreate = TriggerCreate("gt_ObjectiveDestroyPsiDestroyerCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Psi Destroyer Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPsiDestroyerComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPsiDestroyerCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal02Objective01", 2);
    libSwaC_gf_SetMissionObjectiveProgress2("ZKorhal02Objective01", 1, true, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_VictoryDestroyPsiDestroyerCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPsiDestroyerComplete_Init () {
    gt_ObjectiveDestroyPsiDestroyerComplete = TriggerCreate("gt_ObjectiveDestroyPsiDestroyerComplete_Func");
    TriggerAddEventUnitDied(gt_ObjectiveDestroyPsiDestroyerComplete, UnitRefFromVariable("gv_psiDestroyer"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Psi Destroyer Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPsiDestroyerFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPsiDestroyerCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZKorhal02Objective01", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPsiDestroyerFailed_Init () {
    gt_ObjectiveDestroyPsiDestroyerFailed = TriggerCreate("gt_ObjectiveDestroyPsiDestroyerFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DOMINION_ORANGE, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DOMINION_ORANGE, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(gv_dEHAKA, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_playerBase, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(RegionGetCenter(RegionFromId(25)), (libNtve_gf_WidthOfRegion(RegionFromId(25)) / 2.0), false, false);
    gv_introMarine01 = UnitFromId(99);
    gv_introMarine02 = UnitFromId(516);
    gv_introMarine03 = UnitFromId(110);
    libNtve_gf_PauseUnit(gv_introMarine01, false);
    libNtve_gf_PauseUnit(gv_introMarine02, false);
    libNtve_gf_PauseUnit(gv_introMarine03, false);
    libNtve_gf_ShowHideUnit(UnitFromId(454), true);
    UnitGroupLoopBegin(UnitGroup("MissileTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    int autoDAA5234C_n;
    int autoDAA5234C_i;

    // Variable Declarations
    unitgroup lv_introMutas;
    point lv_tempPoint;

    // Variable Initialization
    lv_introMutas = UnitGroupEmpty();
    lv_tempPoint = null;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(193), 0.0, -1, 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(813), 7.0, -1, 10.0, true);
    autoDAA5234C_n = 5;
    autoDAA5234C_i = 1;
    while (autoDAA5234C_i <= autoDAA5234C_n) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(7)), RegionGetCenter(RegionFromId(28)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_introMutas, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(28))), c_orderQueueReplace);
        gf_CinematicApplyPsiDecimatorBehavior(UnitLastCreated());
        autoDAA5234C_i = autoDAA5234C_i + 1;
    }
    ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetScale(172.0, 172.0, 1.0, 0.1));
    SoundPlay(SoundLink("PsiDecimator_shield_loop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introDestroyerAmb = SoundLastPlayed();
    SoundPlay(SoundLink("Korhal02_CS_Open_Psi_Shield_Intro", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introMutaliskSound = SoundLastPlayed();
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal02|Line00024", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    if ((libNtve_gf_UnitGroupIsDead(lv_introMutas) == false)) {
        while (!((libNtve_gf_UnitGroupIsDead(lv_introMutas) == true))) {
            Wait(1.0, c_timeGame);
        }
        Wait(2.0, c_timeReal);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal02|Line00022", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundStop(gv_introDestroyerAmb, true);
    SoundPlay(SoundLink("Korhal02_CS_Open_Psi_Dome", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introDestroyerHubSound = SoundLastPlayed();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(215), 0.0, -1, 10.0, true);
    UnitGroupLoopBegin(UnitGroup("Battlecruiser", c_playerAny, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        lv_tempPoint = UnitGetPosition(UnitGroupLoopCurrent());
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(lv_tempPoint, 8.0, 45.0), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(92), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal02|Line00002", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal02|Line00003", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal02|Line00002", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal02|Line00003", c_transmissionDurationAdd, 1.0, true, 1, 0);
    SoundStop(gv_introDestroyerHubSound, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(216), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(703), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal02|Line00004", true), c_soundIndexAny)) + 1), -1, 10.0, true);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 0, null, UnitFromId(5), "Ref_Center");
    gv_introActor = libNtve_gf_ActorLastCreated();
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal02|Line00004", c_transmissionDurationAdd, 0.0, true, 0, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zBriefing_Korhal02|Line00005", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_IntroDehakaExitVent, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(744), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(415), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Korhal02|Line00006", true), c_soundIndexAny)) + 1), -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_KillModel(gv_introActor);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Korhal02|Line00006", c_transmissionDurationAdd, 0.0, true, 0, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(670), 3.0, -1, 10.0, true);
    UnitIssueOrder(gv_dEHAKA, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(277)), c_orderQueueReplace);
    UnitIssueOrder(gv_dEHAKA, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(745)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introMarine01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(772)), c_orderQueueReplace);
    UnitIssueOrder(gv_introMarine01, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(277)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introMarine02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(787)), c_orderQueueReplace);
    UnitIssueOrder(gv_introMarine02, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(277)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introMarine03, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(745)), c_orderQueueReplace);
    UnitIssueOrder(gv_introMarine03, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(277)), c_orderQueueAddToEnd);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zBriefing_Korhal02|Line00023", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_introActor);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_dEHAKA), c_animNameDefault);
    libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(484)), c_animNameDefault);
    SoundStop(gv_introDestroyerAmb, true);
    SoundStop(gv_introDestroyerHubSound, true);
    SoundStop(gv_introMutaliskSound, true);
    SoundStop(gv_introMutaliskMeatSound, true);
    if ((gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    if ((gv_cinematicCompleted == false)) {
        UnitIssueOrder(gv_dEHAKA, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_dEHAKA, PointFromId(277), false);
        libNtve_gf_MakeUnitFacePoint(gv_dEHAKA, PointFromId(745), 0.0);
        UnitIssueOrder(gv_introMarine01, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_introMarine01, PointFromId(772), false);
        libNtve_gf_MakeUnitFacePoint(gv_introMarine01, PointFromId(277), 0.0);
        UnitIssueOrder(gv_introMarine02, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_introMarine02, PointFromId(772), false);
        libNtve_gf_MakeUnitFacePoint(gv_introMarine02, PointFromId(277), 0.0);
        UnitIssueOrder(gv_introMarine03, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_introMarine03, PointFromId(772), false);
        libNtve_gf_MakeUnitFacePoint(gv_introMarine03, PointFromId(277), 0.0);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Battlecruiser", c_playerAny, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    GameTimeOfDayPause(false);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    UnitSelect(gv_dEHAKA, gv_pLAYER_01_USER, true);
    TriggerEnable(gt_IntroMutaliskDeathSound, false);
    TriggerExecute(gt_DestroyerFieldSetup, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(88), lv_fadeDuration, -1, 10.0, true);
    }
    else {
        lv_fadeDuration = 1.0;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(88)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Dehaka Exit Vent
//--------------------------------------------------------------------------------------------------
bool gt_IntroDehakaExitVent_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(484)), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_dEHAKA), c_animNameDefault, "Cover End", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    Wait(1.6, c_timeReal);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_dEHAKA), c_animNameDefault);
    libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(484)), c_animNameDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDehakaExitVent_Init () {
    gt_IntroDehakaExitVent = TriggerCreate("gt_IntroDehakaExitVent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Mutalisk Death Sound
//--------------------------------------------------------------------------------------------------
bool gt_IntroMutaliskDeathSound_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Mutalisk") || (UnitGetType(EventUnit()) == "MutaliskBroodlord") || (UnitGetType(EventUnit()) == "MutaliskViper")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Korhal02_CS_Open_Mutalisk_MeatChunks", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introMutaliskMeatSound = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMutaliskDeathSound_Init () {
    gt_IntroMutaliskDeathSound = TriggerCreate("gt_IntroMutaliskDeathSound_Func");
    TriggerAddEventUnitDied(gt_IntroMutaliskDeathSound, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZKorhal02MissionIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, 0);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    if ((UnitIsAlive(gv_dEHAKA) == false)) {
        libSwaC_gf_ReviveHeroInstantly(2, false);
    }
    else {
    }
    UnitPauseAll(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if (((UnitGroupLoopCurrent() == gv_dEHAKA) || (UnitGetType(UnitGroupLoopCurrent()) == "MineralField") || (UnitGetType(UnitGroupLoopCurrent()) == "SpacePlatformGeyser") || (UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_04_DOMINION_TEAL) || (UnitGetOwner(UnitGroupLoopCurrent()) == 0))) {
        }
        else {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGroupLoopCurrent() != gv_dEHAKA)) {
            UnitGroupAdd(gv_cinematicPrimalUnits, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gf_TurnDehakaOnOff(false);
    libSwaC_gf_CreateHero2(PointFromId(825), gv_pLAYER_01_USER, 2, PointGetFacing(PointFromId(825)), c_unitCreateIgnorePlacement, 1);
    gv_cinematicDehaka = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicDehaka);
    libSwaC_gf_CreateHero2(PointFromId(175), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(175)), c_unitCreateIgnorePlacement, 1);
    gv_cinematicKerrigan = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicKerrigan);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(96), 0.0, -1, 10.0, true);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_CineFakeFieldDrop, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicDehaka, "zMission_Korhal02|Line00102", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    UnitIssueOrder(gv_cinematicDehaka, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(742)), c_orderQueueReplace);
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_cinematicDehaka), PointFromId(742)) <= 1))) {
        Wait(0.1, c_timeReal);
    }
    UnitIssueOrder(gv_cinematicDehaka, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cinematicDehaka), c_animNameDefault, "Attack 04", 0, c_animTimeDefault);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(520)), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeReal);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(520)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cinematicDehaka), c_animNameDefault, "Cover Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.5, c_timeReal);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(520)), c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    UnitRemove(gv_cinematicDehaka);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(822), 6.0, -1, 10.0, true);
    Wait(1.3, c_timeReal);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(520)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_MidDropPods, true, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "zMission_Korhal02|Line00004", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00078", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "zMission_Korhal02|Line00079", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    string autoDCE4CDE7_val;

    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(520)), c_animNameDefault);
    TriggerStop(gt_MidDropPods);
    TriggerStop(gt_CineFakeFieldDrop);
    SoundStop(gv_midSound1, true);
    SoundStop(gv_midSound2, true);
    SoundStop(gv_midFieldDropSound, true);
    if ((gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal02MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    TriggerExecute(gt_DestroyerFieldPostCineSetup, true, false);
    UnitGroupLoopBegin(UnitGroup("ZergDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZergDropPodCreep", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_playerBase);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(25), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPosition(gv_dEHAKA, PointFromId(2), false);
    UnitSetPropertyFixed(gv_dEHAKA, c_unitPropLifePercent, 100.0);
    libSwaC_gf_SetHeroPanelUnit(2, null);
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    libSwaC_gf_CreateHero2(PointFromId(198), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(198)), c_unitCreateIgnorePlacement, 0);
    gv_kERRIGAN = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    UnitBehaviorRemove(gv_dEHAKA, "KerriganWalk", 1);
    UnitSetState(gv_dEHAKA, c_unitStateFidget, true);
    libSwaC_gf_ReviveHeroInstantly(0, false);
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    UnitGroupLoopBegin(gv_playerBase);
    while (!UnitGroupLoopDone()) {
        autoDCE4CDE7_val = UnitGetType(UnitGroupLoopCurrent());
        if (autoDCE4CDE7_val == "Lair") {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, true, false);
        }
        else if (autoDCE4CDE7_val == "CreepTumorBurrowed") {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, true, false);
        }
        else if (autoDCE4CDE7_val == "CreepTumorUsed") {
            CreepModify(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, true, false);
        }
        else if (autoDCE4CDE7_val == "Larva") {
        }
        else {
            if ((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
            }
            else {
            }
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_MidGameStartQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_MidDropPods_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.8, c_timeGame);
    gf_MidDropPod(UnitFromId(105));
    Wait(2.5, c_timeGame);
    gf_MidDropPod(UnitFromId(136));
    Wait(2.5, c_timeGame);
    gf_MidDropPod(UnitFromId(134));
    Wait(1.5, c_timeGame);
    gf_MidDropPod(UnitFromId(156));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidDropPods_Init () {
    gt_MidDropPods = TriggerCreate("gt_MidDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cine Fake Field Drop
//--------------------------------------------------------------------------------------------------
bool gt_CineFakeFieldDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_psifieldvisualsize;

    // Variable Initialization
    lv_psifieldvisualsize = (gv_psifieldradius + 1.0);

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Psi_StructurePowerDown", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midSound1 = SoundLastPlayed();
    SoundPlay(SoundLink("Psi_StructurePowerDown_Delay", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midSound2 = SoundLastPlayed();
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    SoundPlay(SoundLink("PsiDecimator_ShieldRetreat", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midFieldDropSound = SoundLastPlayed();
    ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetScale(lv_psifieldvisualsize, lv_psifieldvisualsize, 1.0, 0.0));
    while ((gv_inCinematic == true)) {
        lv_psifieldvisualsize -= 3.0;
        if ((lv_psifieldvisualsize > 0.0)) {
            ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetScale(lv_psifieldvisualsize, lv_psifieldvisualsize, 1.0, gv_psifieldupdatefrequency));
        }
        else {
            break;
        }
        Wait(gv_psifieldupdatefrequency, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CineFakeFieldDrop_Init () {
    gt_CineFakeFieldDrop = TriggerCreate("gt_CineFakeFieldDrop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZKorhal02MusicCutscene02_FirstGeneratorDestroyed";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal02MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform02Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_reveal01;

    // Variable Initialization
    lv_reveal01 = null;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_StructureDestroyedBefore2ndField, false);
    TriggerEnable(gt_EngageDominionWarningQ, false);
    gv_dominionEngaged = true;
    TriggerQueueEnter();
    TriggerExecute(gt_MidCineDehakaPlatform02Setup, true, true);
    TriggerExecute(gt_MidCineDehakaPlatform02Cinematic, true, true);
    TriggerExecute(gt_MidCineDehakaPlatform02End, true, true);
    TriggerExecute(gt_MidCineDehakaPlatform02Cleanup, true, true);
    TriggerQueueExit();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(43));
    lv_reveal01 = VisRevealerLastCreated();
    Wait(0.1, c_timeGame);
    VisRevealerDestroy(lv_reveal01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform02Q_Init () {
    gt_MidCineDehakaPlatform02Q = TriggerCreate("gt_MidCineDehakaPlatform02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 02 Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform02Setup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_YELLOW, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_TurnDehakaOnOff(true);
    while (true) {
        UnitSetPosition(gv_dEHAKA, PointFromId(795), false);
        UnitIssueOrder(gv_dEHAKA, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(gv_dEHAKA, PointFromId(796), 0.0);
        Wait(0.1, c_timeGame);
        if (((libNtve_gf_UnitInRegion(gv_dEHAKA, RegionCircle(PointFromId(795), 2.0)) == true) || (UnitIsAlive(gv_dEHAKA) == false))) {
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform02Setup_Init () {
    gt_MidCineDehakaPlatform02Setup = TriggerCreate("gt_MidCineDehakaPlatform02Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 02 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform02Cinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(246), 0.0, -1, 10.0, true);
    TriggerExecute(gt_MidCineFakeFieldRaise02, true, false);
    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1), 10.0, -1, 10.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00069", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(9.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(743), 0.0, -1, 10.0, true);
    SoundPlayOnUnit(SoundLink("Event_Korhal2_SpaceVent_Open", -1), PlayerGroupAll(), gv_dEHAKA, 0.0, 100.0, 0.0);
    UnitIssueOrder(gv_dEHAKA, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(796)), c_orderQueueReplace);
    UnitIssueOrder(gv_dEHAKA, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MidCineDehakaPlatform02MinionSpawn, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1447), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Korhal02|Line00107", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Korhal02|Line00108", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00107", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00108", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform02Cinematic_Init () {
    gt_MidCineDehakaPlatform02Cinematic = TriggerCreate("gt_MidCineDehakaPlatform02Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 02 End
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform02End_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform02End_Init () {
    gt_MidCineDehakaPlatform02End = TriggerCreate("gt_MidCineDehakaPlatform02End_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 02 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform02Cleanup_Func (bool testConds, bool runActions) {
    int auto38480190_n;
    int auto38480190_i;

    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidCineFakeFieldRaise02);
    TriggerStop(gt_MidCineDehakaPlatform02MinionSpawn);
    SoundStop(gv_midFieldPowerupSound, true);
    SoundStop(gv_midFieldRaiseSound, true);
    TriggerExecute(gt_DestroyerFieldPostCineSetup, true, false);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    if ((gv_cinematicCompleted == false)) {
        UnitGroupLoopBegin(gv_midMinions);
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        auto38480190_n = 6;
        auto38480190_i = 1;
        while (auto38480190_i <= auto38480190_n) {
            libNtve_gf_UnitCreateFacingPoint(1, "PrimalRoach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(62)), PointFromId(796));
            UnitGroupAdd(gv_dehakasGroup, UnitLastCreated());
            auto38480190_i = auto38480190_i + 1;
        }
        UnitSetPosition(gv_dEHAKA, PointFromId(796), false);
        UnitSetFacing(gv_dEHAKA, PointGetFacing(PointFromId(796)), 0.0);
    }
    else {
    }
    UnitSetPropertyFixed(gv_dEHAKA, c_unitPropLifePercent, 100.0);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, false);
    UnitSelect(gv_dEHAKA, gv_pLAYER_01_USER, true);
    libSwaC_gf_SetHeroPanelUnit(2, gv_dEHAKA);
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(743)), lv_fadeDuration, -1, 10.0, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
    }
    else {
        lv_fadeDuration = 1.0;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(743)), 0.0, -1, 10.0, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform02Cleanup_Init () {
    gt_MidCineDehakaPlatform02Cleanup = TriggerCreate("gt_MidCineDehakaPlatform02Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Fake Field Raise 02
//--------------------------------------------------------------------------------------------------
bool gt_MidCineFakeFieldRaise02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_psifieldvisualsize;

    // Variable Initialization
    lv_psifieldvisualsize = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MidCineFakeFieldSounds, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetScale(lv_psifieldvisualsize, lv_psifieldvisualsize, 1.0, 0.0));
    ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetVisibility(true));
    while ((gv_inCinematic == true) && (lv_psifieldvisualsize < (libNtve_gf_WidthOfRegion(RegionFromId(14)) / 2.0))) {
        lv_psifieldvisualsize += (gf_FieldExpandRatetoPoint(8.0, 10.0, CameraInfoGetTarget(CameraInfoFromId(1))) * gv_psifieldupdatefrequency);
        ActorSend(ActorFromDoodad(DoodadFromId(284)), libNtve_gf_SetScale(lv_psifieldvisualsize, lv_psifieldvisualsize, 1.0, gv_psifieldupdatefrequency));
        Wait(gv_psifieldupdatefrequency, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineFakeFieldRaise02_Init () {
    gt_MidCineFakeFieldRaise02 = TriggerCreate("gt_MidCineFakeFieldRaise02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Fake Field Sounds
//--------------------------------------------------------------------------------------------------
bool gt_MidCineFakeFieldSounds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Psi_StructurePowerUp", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midFieldPowerupSound = SoundLastPlayed();
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    SoundPlay(SoundLink("PsiDecimator_ShieldGrow", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midFieldRaiseSound = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineFakeFieldSounds_Init () {
    gt_MidCineFakeFieldSounds = TriggerCreate("gt_MidCineFakeFieldSounds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 02 - Minion Spawn
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform02MinionSpawn_Func (bool testConds, bool runActions) {
    int auto59C4031C_n;
    int auto59C4031C_i;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_PrimalRoachGroupVox", -1), PlayerGroupAll(), PointFromId(795), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_PrimalRoachGroupVox2", -1), PlayerGroupAll(), PointFromId(795), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Event_Korhal2_SpaceVent_Open", -1), PlayerGroupAll(), PointFromId(795), 0.0, 100.0, 0.0);
    auto59C4031C_n = 6;
    auto59C4031C_i = 1;
    while (auto59C4031C_i <= auto59C4031C_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrimalRoach", 0, gv_pLAYER_01_USER, PointFromId(795));
        UnitGroupAdd(gv_midMinions, UnitLastCreated());
        UnitGroupAdd(gv_dehakasGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(62))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
        auto59C4031C_i = auto59C4031C_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform02MinionSpawn_Init () {
    gt_MidCineDehakaPlatform02MinionSpawn = TriggerCreate("gt_MidCineDehakaPlatform02MinionSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidCineDehakaPlatform03Setup, true, true);
    TriggerExecute(gt_MidCineDehakaPlatform03Cinematic, true, true);
    TriggerExecute(gt_MidCineDehakaPlatform03End, true, true);
    TriggerExecute(gt_MidCineDehakaPlatform03Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform03Q_Init () {
    gt_MidCineDehakaPlatform03Q = TriggerCreate("gt_MidCineDehakaPlatform03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 03 Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform03Setup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gf_TurnDehakaOnOff(true);
    while (true) {
        UnitSetPosition(gv_dEHAKA, PointFromId(1030), false);
        UnitIssueOrder(gv_dEHAKA, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(gv_dEHAKA, PointFromId(49), 0.0);
        Wait(0.1, c_timeGame);
        if (((libNtve_gf_UnitInRegion(gv_dEHAKA, RegionCircle(PointFromId(1030), 2.0)) == true) || (UnitIsAlive(gv_dEHAKA) == false))) {
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform03Setup_Init () {
    gt_MidCineDehakaPlatform03Setup = TriggerCreate("gt_MidCineDehakaPlatform03Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 03 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform03Cinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1034), 0.0, -1, 10.0, true);
    UnitIssueOrder(gv_dEHAKA, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(49)), c_orderQueueReplace);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    TriggerExecute(gt_MidCineFakeFieldSounds, true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1448), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Korhal02|Line00116", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Korhal02|Line00084", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00116", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, "zMission_Korhal02|Line00084", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform03Cinematic_Init () {
    gt_MidCineDehakaPlatform03Cinematic = TriggerCreate("gt_MidCineDehakaPlatform03Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 03 End
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform03End_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform03End_Init () {
    gt_MidCineDehakaPlatform03End = TriggerCreate("gt_MidCineDehakaPlatform03End_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Dehaka Platform 03 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCineDehakaPlatform03Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_midFieldRaiseSound, true);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    if ((gv_cinematicCompleted == false)) {
        UnitSetPosition(gv_dEHAKA, PointFromId(49), false);
        UnitSetFacing(gv_dEHAKA, PointGetFacing(PointFromId(49)), 0.0);
    }
    else {
    }
    UnitSetPropertyFixed(gv_dEHAKA, c_unitPropLifePercent, 100.0);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, false);
    UnitSelect(gv_dEHAKA, gv_pLAYER_01_USER, true);
    libSwaC_gf_SetHeroPanelUnit(2, gv_dEHAKA);
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    TriggerExecute(gt_DestroyerFieldPostCineSetup, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1034)), lv_fadeDuration, -1, 10.0, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
    }
    else {
        lv_fadeDuration = 1.0;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1034)), 0.0, -1, 10.0, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    gv_inCinematic = false;
    TriggerExecute(gt_TeachDehakaGenerateSpawns, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineDehakaPlatform03Cleanup_Init () {
    gt_MidCineDehakaPlatform03Cleanup = TriggerCreate("gt_MidCineDehakaPlatform03Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to No Field Active Q
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoNoFieldActiveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_TransitiontoNoFieldActiveSetup, true, true);
    TriggerExecute(gt_TransitiontoNoFieldActiveCinematic, true, true);
    TriggerExecute(gt_TransitiontoNoFieldActiveEnd, true, true);
    TriggerExecute(gt_TransitiontoNoFieldActiveCleanup, true, true);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoNoFieldActiveQ_Init () {
    gt_TransitiontoNoFieldActiveQ = TriggerCreate("gt_TransitiontoNoFieldActiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to No Field Active Setup
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoNoFieldActiveSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;

    // Variable Initialization
    lv_cameraTarget = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    gv_midFade = false;
    if (((UnitIsAlive(gv_dEHAKA) == false) || ((RegionContainsPoint(RegionCircle(CameraInfoGetTarget(CameraInfoFromId(1445)), 8.0), UnitGetPosition(gv_dEHAKA)) == false) && (RegionContainsPoint(RegionCircle(CameraInfoGetTarget(CameraInfoFromId(1446)), 8.0), UnitGetPosition(gv_dEHAKA)) == false)))) {
        CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
        Wait(1.0, c_timeReal);
        if ((UnitIsAlive(gv_dEHAKA) == false)) {
            libSwaC_gf_ReviveHeroInstantly(2, false);
        }
        else {
        }
        libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
        libNtve_gf_GlobalCinematicSetting(true);
        if ((UnitIsAlive(UnitFromId(32)) == false)) {
            UnitSetPosition(gv_dEHAKA, PointFromId(1630), false);
        }
        else {
            UnitSetPosition(gv_dEHAKA, PointFromId(1629), false);
        }
        gv_midFade = true;
    }
    else {
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
        Wait(1.0, c_timeReal);
        libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
        libNtve_gf_GlobalCinematicSetting(true);
    }
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_PauseUnit(gv_dEHAKA, false);
    libNtve_gf_ChangeUnitDamage(gv_dEHAKA, 0, 1);
    if ((UnitGetType(gv_dEHAKA) == "DehakaBurrowed")) {
        UnitIssueOrder(gv_dEHAKA, Order(AbilityCommand("BurrowDehakaUp", 0)), c_orderQueueAddToFront);
        Wait(1.5, c_timeReal);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("DehakaMirrorImageBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("DehakaMirrorImage", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_dehakasGroup);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, false);
    if ((UnitIsAlive(UnitFromId(47)) == false)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_YELLOW, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(32)) == false)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_DOMINION_GREEN, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoNoFieldActiveSetup_Init () {
    gt_TransitiontoNoFieldActiveSetup = TriggerCreate("gt_TransitiontoNoFieldActiveSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to No Field Active Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoNoFieldActiveCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_exitPoint;
    string lv_conversationLine;

    // Variable Initialization
    lv_exitPoint = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_dEHAKA, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_dEHAKA), 1.0, 270.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_dEHAKA, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_CineFakeFieldDrop, true, false);
    gv_cinematicCompleted = false;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    if ((UnitIsAlive(UnitFromId(32)) == false)) {
        if ((gv_midFade == false) && (RegionContainsPoint(RegionCircle(CameraInfoGetTarget(CameraInfoFromId(1446)), 16.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1446), 3.0, -1, 10.0, true);
        }
        else {
            CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1446), 0.0, -1, 10.0, true);
        }
        lv_exitPoint = PointFromId(928);
        lv_conversationLine = "zMission_Korhal02|Line00103";
        gf_TransitionToNoFieldActiveExitVentAnim(DoodadFromId(480), PointFromId(928));
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            UnitGroupLoopBegin(UnitGroup("MissileTurret", gv_pLAYER_05_DOMINION_GREEN, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitKill(UnitGroupLoopCurrent());
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
        else {
            UnitGroupLoopBegin(UnitGroup("MissileTurret", gv_pLAYER_05_DOMINION_GREEN, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
    }
    else {
        if ((RegionContainsPoint(RegionCircle(CameraInfoGetTarget(CameraInfoFromId(1445)), 16.0), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (gv_midFade == false)) {
            CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1445), 3.0, -1, 10.0, true);
        }
        else {
            CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1445), 0.0, -1, 10.0, true);
        }
        lv_exitPoint = PointFromId(810);
        lv_conversationLine = "zMission_Korhal02|Line00103";
        gf_TransitionToNoFieldActiveExitVentAnim(DoodadFromId(488), PointFromId(810));
    }
    if ((gv_midFade == true)) {
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroupFilterPlayer(gv_cinematicTempUnits, 1, 0));
    while (!UnitGroupLoopDone()) {
        gf_UnitstotheExitVent(UnitGroupLoopCurrent(), lv_exitPoint);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_dEHAKA, lv_conversationLine, c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    gf_UnitstotheExitVent(gv_dEHAKA, lv_exitPoint);
    Wait(2.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoNoFieldActiveCinematic_Init () {
    gt_TransitiontoNoFieldActiveCinematic = TriggerCreate("gt_TransitiontoNoFieldActiveCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to No Field Active End
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoNoFieldActiveEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoNoFieldActiveEnd_Init () {
    gt_TransitiontoNoFieldActiveEnd = TriggerCreate("gt_TransitiontoNoFieldActiveEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to No Field Active Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoNoFieldActiveCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 1.5;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(488)), c_animNameDefault);
    libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(480)), c_animNameDefault);
    SoundStop(gv_midSound1, true);
    SoundStop(gv_midSound2, true);
    SoundStop(gv_midFieldDropSound, true);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_dehakasGroup);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MissileTurret", gv_pLAYER_05_DOMINION_GREEN, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libSwaC_gf_ReviveHeroInstantly(0, false);
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kERRIGAN, c_unitPropEnergyPercent, 100.0);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, false);
    libNtve_gf_ChangeUnitDamage(gv_dEHAKA, 0, 0);
    gf_TurnDehakaOnOff(false);
    libSwaC_gf_SetHeroPanelUnit(2, null);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    CameraPan(gv_pLAYER_01_USER, PlayerStartLocation(gv_pLAYER_01_USER), 0.0, -1, 10.0, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoNoFieldActiveCleanup_Init () {
    gt_TransitiontoNoFieldActiveCleanup = TriggerCreate("gt_TransitiontoNoFieldActiveCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_kerriganKills = libNtve_gf_UnitGetPropertyKills(gv_kERRIGAN, c_unitPropCurrent);
    gv_dehakaKills = libNtve_gf_UnitGetPropertyKills(gv_dEHAKA, c_unitPropCurrent);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == 1) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == true)) {
        }
        else {
            if ((UnitGroupLoopCurrent() != gv_psiDestroyer)) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(830), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(832), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(gv_psiDestroyer, true);
    if ((UnitIsAlive(gv_psiDestroyer) == true)) {
        UnitKill(gv_psiDestroyer);
    }
    else {
    }
    libSwaC_gf_CreateHero2(PointFromId(830), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(830)), 0, 1);
    gv_victoryKerrigan = UnitLastCreated();
    UnitSetState(gv_victoryKerrigan, c_unitStateFidget, false);
    UnitBehaviorAdd(gv_victoryKerrigan, "KerriganWalk", gv_victoryKerrigan, 1);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionPlayableMap());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(481), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(829), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Korhal02|Line00036", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Korhal02|Line00035", true), c_soundIndexAny)) + 1), -1, 10.0, true);
    TriggerExecute(gt_VictoryZerg, true, false);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(832)), c_orderQueueReplace);
    UnitIssueOrder(gv_victoryKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    SoundPlay(SoundLink("Korhal02_CS_EndWin_ZergHorde_QuadLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound = SoundLastPlayed();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhal02MusicCutscene03_PsiDestroyerDefeated", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Korhal02|Line00036", c_transmissionDurationAdd, 0.0, true, 0, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Korhal02|Line00105", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Korhal02|Line00035", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Korhal02|Line00056", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryZerg);
    SoundStop(gv_victoryZergSound, true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerg_Func (bool testConds, bool runActions) {
    int auto82FF84A0_n;
    int auto82FF84A0_i;
    int auto16293C2F_n;
    int auto16293C2F_i;
    int autoCAAC8D32_n;
    int autoCAAC8D32_i;

    // Variable Declarations
    unitgroup lv_victoryZerg1;
    unitgroup lv_victoryZerg2;
    unitgroup lv_victoryMutas;

    // Variable Initialization
    lv_victoryZerg1 = UnitGroupEmpty();
    lv_victoryZerg2 = UnitGroupEmpty();
    lv_victoryMutas = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto82FF84A0_n = 25;
    auto82FF84A0_i = 1;
    while (auto82FF84A0_i <= auto82FF84A0_n) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(35)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg1, UnitLastCreated());
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(23)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg2, UnitLastCreated());
        auto82FF84A0_i = auto82FF84A0_i + 1;
    }
    auto16293C2F_n = 5;
    auto16293C2F_i = 1;
    while (auto16293C2F_i <= auto16293C2F_n) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(35)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg1, UnitLastCreated());
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(35)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg1, UnitLastCreated());
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(23)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg2, UnitLastCreated());
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(23)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg2, UnitLastCreated());
        auto16293C2F_i = auto16293C2F_i + 1;
    }
    autoCAAC8D32_n = 5;
    autoCAAC8D32_i = 1;
    while (autoCAAC8D32_i <= autoCAAC8D32_n) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(38)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryMutas, UnitLastCreated());
        autoCAAC8D32_i = autoCAAC8D32_i + 1;
    }
    while (true) {
        UnitGroupLoopBegin(lv_victoryZerg1);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(35))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(lv_victoryZerg2);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(lv_victoryMutas);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(38))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerg_Init () {
    gt_VictoryZerg = TriggerCreate("gt_VictoryZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_DEBUGStage2_Init();
    gt_DEBUGStage4_Init();
    gt_DEBUGStage6_Init();
    gt_DEBUGStage357_Init();
    gt_StartGameQ_Init();
    gt_MidGameStartQ_Init();
    gt_StartHarvesting_Init();
    gt_TransmissionStrangeCreatureQ_Init();
    gt_TransmissionPresstheAttackQ_Init();
    gt_HandleDehakaDeath_Init();
    gt_HandleKerriganDeath_Init();
    gt_RevealAttacker_Init();
    gt_RevealYellowUnits_Init();
    gt_RevealTealUnits_Init();
    gt_RevealRedBaseFront_Init();
    gt_RevealNewRedBaseFrontUnits_Init();
    gt_RevealRedBaseBack_Init();
    gt_RevealNewRedBaseBackUnits_Init();
    gt_TeachDehakaCliffJump_Init();
    gt_TeachDehakaCliffJumpTankBehavior_Init();
    gt_TransmissionTeachCliffJumpQ_Init();
    gt_TeachDehakaMend_Init();
    gt_TeachDehakaMendUsed_Init();
    gt_TransmissionTeachMendQ_Init();
    gt_TeachDehakaDrag_Init();
    gt_TeachDehakaDragUsed_Init();
    gt_TransmissionTeachDragQ_Init();
    gt_GrantDragAlternate_Init();
    gt_TeachDehakaGenerateSpawns_Init();
    gt_TeachDehakaGenerateSpawnsUsed_Init();
    gt_TransmissionTeachGenerateSpawnsQ_Init();
    gt_GrantGenerateSpawnsAlternate_Init();
    gt_CreatePingforFirstPowerLink_Init();
    gt_RemoveBriefingSelectonFirstPowerLink_Init();
    gt_SetupPings_Init();
    gt_DestroyPowerLinkPings_Init();
    gt_PsiFieldsoundupdates_Init();
    gt_DestroyerFieldSetup_Init();
    gt_DestroyerFieldUpdate_Init();
    gt_DestroyerFieldGrowthPingsPulsed_Init();
    gt_DestroyerFieldUpdateMinimap_Init();
    gt_PowerLinkDestroyedQ_Init();
    gt_DestroyerFieldPostCineSetup_Init();
    gt_TransmissionFirstPowerLinkAttackedQ_Init();
    gt_TransmissionUnitInDestroyerFieldQ_Init();
    gt_TransmissionDestroyerFieldReturning01Q_Init();
    gt_TransmissionDestroyerFieldReturning02Q_Init();
    gt_TransmissionPowerLink2DestroyedQ_Init();
    gt_TransmissionAllPowerLinksDownQ_Init();
    gt_CountDownBeeps_Init();
    gt_FieldReturns_Init();
    gt_Section3AReinforcements_Init();
    gt_TransmissionIzshaReinforcements3AQ_Init();
    gt_Section3BReinforcements_Init();
    gt_TransmissionIzshaReinforcements3BQ_Init();
    gt_TransmissionDehakaWastingTimeQ_Init();
    gt_DehakaReturnsforFinalPush_Init();
    gt_TransmissionDehakaReturnsQ_Init();
    gt_RespawnDehakaReinforcements_Init();
    gt_TransmissionIzshaReinforcementsQ_Init();
    gt_PowerLink1DominionReaction_Init();
    gt_PowerLink3SCVBuildDefenses_Init();
    gt_TransmissionMengskDefendHumanityQ_Init();
    gt_EngageDominionWarningCheck_Init();
    gt_EngageDominionWarningQ_Init();
    gt_TipMissionHelpQ_Init();
    gt_StartAI_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_AIGiveResources_Init();
    gt_DisableBulliesinP02FrontBase_Init();
    gt_AIFleefromNuke_Init();
    gt_DefeatBaseDestroyed_Init();
    gt_VictoryDestroyPsiDestroyerCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementStructuresDestroyedBefore2ndField_Init();
    gt_AchievementDehakaSurvivalNH_Init();
    gt_AchievementDontDestroyLastPowerLinkH_Init();
    gt_StructureDestroyedBefore2ndField_Init();
    gt_VictoryStatPsiFieldKills_Init();
    gt_LargestZergForce_Init();
    gt_ObjectiveDestroyPowerLinkCreate_Init();
    gt_ObjectiveDestroyPowerLinkComplete_Init();
    gt_ObjectiveDestroyPowerLinkFailed_Init();
    gt_ObjectiveDestroyPsiDestroyerCreate_Init();
    gt_ObjectiveDestroyPsiDestroyerComplete_Init();
    gt_ObjectiveDestroyPsiDestroyerFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroDehakaExitVent_Init();
    gt_IntroMutaliskDeathSound_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidDropPods_Init();
    gt_CineFakeFieldDrop_Init();
    gt_MidMusic_Init();
    gt_MidCineDehakaPlatform02Q_Init();
    gt_MidCineDehakaPlatform02Setup_Init();
    gt_MidCineDehakaPlatform02Cinematic_Init();
    gt_MidCineDehakaPlatform02End_Init();
    gt_MidCineDehakaPlatform02Cleanup_Init();
    gt_MidCineFakeFieldRaise02_Init();
    gt_MidCineFakeFieldSounds_Init();
    gt_MidCineDehakaPlatform02MinionSpawn_Init();
    gt_MidCineDehakaPlatform03Q_Init();
    gt_MidCineDehakaPlatform03Setup_Init();
    gt_MidCineDehakaPlatform03Cinematic_Init();
    gt_MidCineDehakaPlatform03End_Init();
    gt_MidCineDehakaPlatform03Cleanup_Init();
    gt_TransitiontoNoFieldActiveQ_Init();
    gt_TransitiontoNoFieldActiveSetup_Init();
    gt_TransitiontoNoFieldActiveCinematic_Init();
    gt_TransitiontoNoFieldActiveEnd_Init();
    gt_TransitiontoNoFieldActiveCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerg_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
