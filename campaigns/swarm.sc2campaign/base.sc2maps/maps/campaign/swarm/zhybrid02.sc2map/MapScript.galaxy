//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Hand of Darkness
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "aiFCA8F95A"
include "aiBF035301"
include "aiFFA30158"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_p02_DOMINION_RED = 2;
const int gv_p03_DOMINION_YELLOW = 3;
const int gv_p04_DOMINION_GREEN = 4;
const int gv_pLAYER_02_DOMINION2 = 7;
const int gv_pLAYER_02_DOMINION2222 = 9;
const fixed gv_hybridSpawnDelay = 4.0;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_dominionPlayers;
playergroup gv_enemyPlayers;
unit gv_kerrigan;
fixed gv_channelTimeMax;
timer gv_channelTimer;
fixed gv_hybridLife;
fixed gv_hybridShields;
unit[11] gv_hybridUnitArray;
unit[11] gv_hybridCellArray;
point[11] gv_hybridCellLocation;
point[11] gv_hybridReleaseLocation;
bool[11] gv_hybridCellReleased;
bool[11] gv_hybridCellRevealed;
timer gv_hybridReleaseTimer;
fixed gv_hybridReleaseDelay;
unitgroup gv_activeHybrid;
unitgroup gv_hiddenHybrid;
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
int gv_perfPausedCount;
region[21] gv_perfPausedRegions;
region[21] gv_perfRevealRegions;
unitgroup[21] gv_perfPausedUnits;
int gv_inCombatIndicator;
int gv_psionicAssaultTimerWindow;
int gv_psionicAssaultFailureWarningTransmission;
int[9] gv_aIHybridAttackIndex;
bool[9] gv_aIHybridLeashing;
unit[9] gv_aIHybridAttacker;
int gv_achievementDestroyCommandCentersCount;
int gv_achievementHybridKilledByTerrans;
int gv_achievementHybridReleasedCounter;
int gv_statKerriganKills;
int gv_statMaxArmy;
int gv_statZergKilledByHybrid;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyHybridCount;
int gv_objectiveDestroyHybridQuota;
int gv_objectiveRescueBrutalisks;
int gv_objectiveRescueBrutalisksCount;
int gv_objectiveRescueBrutalisksQuota;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
unitgroup gv_cinematicPausedUnits;
bool gv_cinematicCompleted;
sound gv_cinematicStinger1;
sound gv_cinematicStinger2;
int gv_introMinerals;
int gv_introGas;
unit gv_introHybrid;
sound gv_introAlarm;
sound gv_introZergSounds;
sound gv_introHybridSound;
bool gv_introHybridReleased;
bool gv_introMusicCompleted;

void InitGlobals () {
    int init_i;

    gv_dominionPlayers = PlayerGroupEmpty();
    gv_enemyPlayers = PlayerGroupEmpty();
    gv_kerrigan = null;
    gv_channelTimeMax = 300.0;
    gv_channelTimer = TimerCreate();
    gv_hybridLife = 0.0;
    gv_hybridShields = 0.0;
    init_i = 0;
    while (init_i <= 10) {
        gv_hybridUnitArray[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_hybridCellArray[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_hybridCellLocation[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_hybridReleaseLocation[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_hybridCellReleased[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_hybridCellRevealed[init_i] = false;
        init_i = init_i + 1;
    }
    gv_hybridReleaseTimer = TimerCreate();
    gv_hybridReleaseDelay = 0.0;
    gv_activeHybrid = UnitGroupEmpty();
    gv_hiddenHybrid = UnitGroupEmpty();
    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_perfPausedCount = 0;
    init_i = 0;
    while (init_i <= 20) {
        gv_perfPausedRegions[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 20) {
        gv_perfRevealRegions[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 20) {
        gv_perfPausedUnits[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    gv_inCombatIndicator = 0;
    gv_psionicAssaultTimerWindow = c_timerWindowNone;
    gv_psionicAssaultFailureWarningTransmission = c_invalidTransmissionId;
    init_i = 0;
    while (init_i <= 8) {
        gv_aIHybridAttackIndex[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 8) {
        gv_aIHybridLeashing[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 8) {
        gv_aIHybridAttacker[init_i] = null;
        init_i = init_i + 1;
    }
    gv_achievementDestroyCommandCentersCount = 0;
    gv_achievementHybridKilledByTerrans = 0;
    gv_achievementHybridReleasedCounter = 0;
    gv_statKerriganKills = 0;
    gv_statMaxArmy = 0;
    gv_statZergKilledByHybrid = 0;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyHybridCount = 0;
    gv_objectiveDestroyHybridQuota = 0;
    gv_objectiveRescueBrutalisks = c_invalidObjectiveId;
    gv_objectiveRescueBrutalisksCount = 0;
    gv_objectiveRescueBrutalisksQuota = 2;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicCompleted = false;
    gv_cinematicStinger1 = null;
    gv_cinematicStinger2 = null;
    gv_introMinerals = 0;
    gv_introGas = 0;
    gv_introHybrid = null;
    gv_introAlarm = null;
    gv_introZergSounds = null;
    gv_introHybridSound = null;
    gv_introHybridReleased = false;
    gv_introMusicCompleted = false;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
bool gf_HybridRevealed (int lp_index);
void gf_RevealHybridCell (int lp_cellIndex);
void gf_RevealNextHybridCell ();
void gf_HybridPing (unit lp_unit);
void gf_MakeHybridCellNonInteractive (int lp_index);
void gf_ScriptedAttackGroup (region lp_fORCE_REGION, region lp_tRIGGERING_REGION);
void gf_SpawnHybrid (int lp_indexHybrid);
void gf_HybridBehaviorPsychicClones (unit lp_cHOSEN_HYBRID);
bool gf_HybridReleased (int lp_index);
void gf_Hybrid0405060708PsiStorm (unit lp_unit);
void gf_CreatePsionicAssaultTimerWindow ();
void gf_ReleaseHybrid (int lp_index);
void gf_ReleaseHybridIssueOrder (int lp_index);
void gf_TurnNextHybridCellOn ();
int gf_HybridCellIndex (unit lp_cell);
int gf_HybridIndex (unit lp_hybrid);
point gf_HybridHome (int lp_index);
void gf_AIHybridDominator (int lp_owner, unit lp_hybrid, unitgroup lp_nearbyUnits);
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void gf_CreateCreepinRegion (region lp_region);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init03aHybrid;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PerformanceHandler;
trigger gt_ShowMapCheatUsed;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_HandleKerriganDeath;
trigger gt_StartGameQ;
trigger gt_FirstHybridBehavior;
trigger gt_TransmissionHybridIntroQ;
trigger gt_IntroBrutaliskObjective;
trigger gt_TransmissionBrutaliskIntro;
trigger gt_RescueBrutaliskTop;
trigger gt_RescueBrutaliskBottom;
trigger gt_TransmissionBrutaliskRescueQ;
trigger gt_TransmissionDominionAttackWavesOnlineQ;
trigger gt_SpawnHybrid;
trigger gt_Hybrid03PsychicClones;
trigger gt_Hybrid05PsychicClones;
trigger gt_Hybrid06PsychicClones;
trigger gt_Hybrid07PsychicClones;
trigger gt_Hybrid08PsychicClones;
trigger gt_PsionicAssault;
trigger gt_HybridKilled;
trigger gt_KerriganDrained;
trigger gt_PsionicAssaultEffects;
trigger gt_RevealHybrid020304;
trigger gt_TransmissionHybridLocationsQ;
trigger gt_RevealHybrid0506;
trigger gt_TransmissionMoreHybridDetectedQ;
trigger gt_RevealHybrid0708EnterRegion;
trigger gt_RevealHybrid0708;
trigger gt_TransmissionLastHybridDetectedQ;
trigger gt_ReleaseHybrid02;
trigger gt_TransmissionHybrid02ReleasedQ;
trigger gt_ReleaseHybrid03;
trigger gt_TransmissionHybrid03ReleasedQ;
trigger gt_ReleaseHybrid04;
trigger gt_TransmissionHybrid04ReleasedQ;
trigger gt_ReleaseHybrid05;
trigger gt_TransmissionHybrid05ReleasedQ;
trigger gt_ReleaseHybrid06;
trigger gt_TransmissionHybrid06ReleasedQ;
trigger gt_ReleaseHybrid0708;
trigger gt_TransmissionHybrid07and08ReleasedQ;
trigger gt_TransmissionHybrid07or08ReleasedQ;
trigger gt_HybridCellBroken;
trigger gt_TransmissionFirstHybridSlainQ;
trigger gt_TransmissionTwoHybridSlainQ;
trigger gt_TransmissionThreeHybridSlainQ;
trigger gt_TransmissionFourHybridSlainQ;
trigger gt_TransmissionSixHybridSlainQ;
trigger gt_TransmissionFailureSoonQ;
trigger gt_TransmissionFailureImminentQ;
trigger gt_StartAI;
trigger gt_StartUpgradesNormal;
trigger gt_StartUpgradesHard;
trigger gt_AIGiveResources;
trigger gt_TurnoffBulliesByHybrid04;
trigger gt_TurnoffBulliesByHybrid05;
trigger gt_TurnoffBulliesByHybrid06;
trigger gt_HybridAttack;
trigger gt_HybridAttackDiminish;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryHybridDestroyedComplete;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_AchievementDestroyCommandCenters;
trigger gt_AchievementRelease3HybridNH;
trigger gt_AchievementKillHybridWithTerransH;
trigger gt_StatisticMaxArmy;
trigger gt_StatisticZergKilledbyHybrid;
trigger gt_ObjectiveDestroyAllHybridCreate;
trigger gt_ObjectiveDestroyAllHybridUpdate;
trigger gt_ObjectiveDestroyAllHybridComplete;
trigger gt_ObjectiveDestroyAllHybridFailed;
trigger gt_ObjectiveKillProtossCreate;
trigger gt_ObjectiveRescueBrutaliskProximityReveal01;
trigger gt_ObjectiveRescueBrutaliskProximityReveal02;
trigger gt_ObjectiveRescueBrutaliskUpdate;
trigger gt_ObjectiveRescueBrutaliskComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZerg;
trigger gt_IntroHybridReleasedFollow;
trigger gt_IntroMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryExplosions;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    init_i = 0;
    while (init_i <= 16) {
        cai_playerAI[init_i] = null;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiFCA8F95A") { aiFCA8F95A_start(p); }
    if (cai_playerAI[p] == "aiBF035301") { aiBF035301_start(p); }
    if (cai_playerAI[p] == "aiFFA30158") { aiFFA30158_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { aiFCA8F95A_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiBF035301") { aiBF035301_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiFFA30158") { aiFFA30158_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { return aiFCA8F95A_getCustomData(p); }
    if (cai_playerAI[p] == "aiBF035301") { return aiBF035301_getCustomData(p); }
    if (cai_playerAI[p] == "aiFFA30158") { return aiFFA30158_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { aiFCA8F95A_waves_run(p, target); }
    if (cai_playerAI[p] == "aiBF035301") { aiBF035301_waves_run(p, target); }
    if (cai_playerAI[p] == "aiFFA30158") { aiFFA30158_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { aiFCA8F95A_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiBF035301") { aiBF035301_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiFFA30158") { aiFFA30158_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiFCA8F95A") { aiFCA8F95A_waves_stop(); }
    if (ai == "aiBF035301") { aiBF035301_waves_stop(); }
    if (ai == "aiFFA30158") { aiFFA30158_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { aiFCA8F95A_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiBF035301") { aiBF035301_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiFFA30158") { aiFFA30158_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { aiFCA8F95A_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiBF035301") { aiBF035301_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiFFA30158") { aiFFA30158_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { return aiFCA8F95A_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiBF035301") { return aiBF035301_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiFFA30158") { return aiFFA30158_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { return aiFCA8F95A_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiBF035301") { return aiBF035301_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiFFA30158") { return aiFFA30158_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiFCA8F95A") { return aiFCA8F95A_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiBF035301") { return aiBF035301_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiFFA30158") { return aiFFA30158_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiFCA8F95A", 3);
    cai_start("aiBF035301", 4);
    cai_start("aiFFA30158", 7);
    AICampaignStart(2);
    AICampaignStart(9);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    PlayerGroupAdd(target, 5);
    PlayerGroupAdd(target, 6);
    PlayerGroupAdd(target, 10);
    cai_waves_run(7, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_HybridRevealed (int lp_index) {
    // Implementation
    return (gv_hybridCellRevealed[lp_index] || gf_HybridReleased(lp_index));
}

trigger auto_gf_RevealHybridCell_Trigger = null;
int auto_gf_RevealHybridCell_lp_cellIndex;

void gf_RevealHybridCell (int lp_cellIndex) {
    auto_gf_RevealHybridCell_lp_cellIndex = lp_cellIndex;

    if (auto_gf_RevealHybridCell_Trigger == null) {
        auto_gf_RevealHybridCell_Trigger = TriggerCreate("auto_gf_RevealHybridCell_TriggerFunc");
    }

    TriggerExecute(auto_gf_RevealHybridCell_Trigger, false, false);
}

bool auto_gf_RevealHybridCell_TriggerFunc (bool testConds, bool runActions) {
    int lp_cellIndex = auto_gf_RevealHybridCell_lp_cellIndex;

    // Variable Declarations
    unit lv_cellUnit;

    // Variable Initialization
    lv_cellUnit = null;

    // Implementation
    if ((gf_HybridRevealed(lp_cellIndex) == true)) {
        return true;
    }
    else {
    }
    lv_cellUnit = gv_hybridCellArray[lp_cellIndex];
    gv_hybridCellRevealed[lp_cellIndex] = true;
    SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_cellUnit), 5.0), 15.0, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_cellUnit), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/466D8D0E"));
    PingSetScale(PingLastCreated(), 0.5);
    while (!((gf_HybridReleased(lp_cellIndex) == true))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    return true;
}

void gf_RevealNextHybridCell () {
    int autoB9838858_ae;
    int autoB9838858_ai;

    // Variable Declarations
    int lv_indexCell;

    // Variable Initialization
    lv_indexCell = 0;

    // Implementation
    autoB9838858_ae = 8;
    autoB9838858_ai = 1;
    lv_indexCell = 2;
    while ((autoB9838858_ai >= 0 && lv_indexCell <= autoB9838858_ae) || (autoB9838858_ai <= 0 && lv_indexCell >= autoB9838858_ae)) {
        if ((gf_HybridRevealed(lv_indexCell) == false)) {
            if (((lv_indexCell == 2) || (lv_indexCell == 3) || (lv_indexCell == 4))) {
                TriggerExecute(gt_RevealHybrid020304, true, false);
                return ;
            }
            else {
            }
            if (((lv_indexCell == 5) || (lv_indexCell == 6))) {
                TriggerExecute(gt_RevealHybrid0506, true, false);
                return ;
            }
            else {
            }
            if (((lv_indexCell == 7) || (lv_indexCell == 8))) {
                TriggerExecute(gt_RevealHybrid0708, true, false);
                return ;
            }
            else {
            }
        }
        else {
        }
        if (lv_indexCell == autoB9838858_ae) {
            break;
        }
        lv_indexCell = lv_indexCell + autoB9838858_ai;
    }
}

trigger auto_gf_HybridPing_Trigger = null;
unit auto_gf_HybridPing_lp_unit;

void gf_HybridPing (unit lp_unit) {
    auto_gf_HybridPing_lp_unit = lp_unit;

    if (auto_gf_HybridPing_Trigger == null) {
        auto_gf_HybridPing_Trigger = TriggerCreate("auto_gf_HybridPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridPing_Trigger, false, false);
}

bool auto_gf_HybridPing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_HybridPing_lp_unit;

    // Variable Declarations
    int lv_ping;
    unit lv_hybrid;

    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_hybrid = null;

    // Implementation
    lv_hybrid = lp_unit;
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(lv_hybrid), StringExternal("Param/Value/243D94C7"));
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_hybrid);
    while (!((UnitIsAlive(lv_hybrid) == false) && (libNtve_gf_UnitIsPaused(lv_hybrid) == false))) {
        Wait(0.25, c_timeGame);
    }
    PingDestroy(lv_ping);
    return true;
}

trigger auto_gf_MakeHybridCellNonInteractive_Trigger = null;
int auto_gf_MakeHybridCellNonInteractive_lp_index;

void gf_MakeHybridCellNonInteractive (int lp_index) {
    auto_gf_MakeHybridCellNonInteractive_lp_index = lp_index;

    if (auto_gf_MakeHybridCellNonInteractive_Trigger == null) {
        auto_gf_MakeHybridCellNonInteractive_Trigger = TriggerCreate("auto_gf_MakeHybridCellNonInteractive_TriggerFunc");
    }

    TriggerExecute(auto_gf_MakeHybridCellNonInteractive_Trigger, false, false);
}

bool auto_gf_MakeHybridCellNonInteractive_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_MakeHybridCellNonInteractive_lp_index;

    // Implementation
    if ((UnitIsAlive(gv_hybridCellArray[lp_index]) == false)) {
        return true;
    }
    else {
    }
    UnitSetState(gv_hybridCellArray[lp_index], c_unitStateSelectable, false);
    UnitSetState(gv_hybridCellArray[lp_index], c_unitStateTargetable, false);
    UnitSetState(gv_hybridCellArray[lp_index], c_unitStateHighlightable, false);
    UnitSetState(gv_hybridCellArray[lp_index], c_unitStateStatusBar, false);
    UnitSetState(gv_hybridCellArray[lp_index], c_unitStateTooltipable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_hybridCellArray[lp_index], true);
    UnitSelect(gv_hybridCellArray[lp_index], gv_pLAYER_01_USER, false);
    return true;
}

trigger auto_gf_ScriptedAttackGroup_Trigger = null;
region auto_gf_ScriptedAttackGroup_lp_fORCE_REGION;
region auto_gf_ScriptedAttackGroup_lp_tRIGGERING_REGION;

void gf_ScriptedAttackGroup (region lp_fORCE_REGION, region lp_tRIGGERING_REGION) {
    auto_gf_ScriptedAttackGroup_lp_fORCE_REGION = lp_fORCE_REGION;
    auto_gf_ScriptedAttackGroup_lp_tRIGGERING_REGION = lp_tRIGGERING_REGION;

    if (auto_gf_ScriptedAttackGroup_Trigger == null) {
        auto_gf_ScriptedAttackGroup_Trigger = TriggerCreate("auto_gf_ScriptedAttackGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_ScriptedAttackGroup_Trigger, false, false);
}

bool auto_gf_ScriptedAttackGroup_TriggerFunc (bool testConds, bool runActions) {
    region lp_fORCE_REGION = auto_gf_ScriptedAttackGroup_lp_fORCE_REGION;
    region lp_tRIGGERING_REGION = auto_gf_ScriptedAttackGroup_lp_tRIGGERING_REGION;

    // Variable Declarations
    unitgroup lv_aTTACK_GROUP;

    // Variable Initialization
    lv_aTTACK_GROUP = UnitGroupEmpty();

    // Implementation
    lv_aTTACK_GROUP = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lp_fORCE_REGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, lp_tRIGGERING_REGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) >= 1))) {
        Wait(0.3, c_timeReal);
    }
    UnitGroupIssueOrder(lv_aTTACK_GROUP, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupUnit(UnitGroup(null, gv_pLAYER_01_USER, lp_tRIGGERING_REGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1))), c_orderQueueReplace);
    AISetGroupScriptControlled(lv_aTTACK_GROUP, false);
    return true;
}

void gf_SpawnHybrid (int lp_indexHybrid) {
    // Variable Declarations
    unit lv_hybrid;

    // Variable Initialization
    lv_hybrid = null;

    // Implementation
    lv_hybrid = gv_hybridUnitArray[lp_indexHybrid];
    UnitGroupAdd(gv_activeHybrid, lv_hybrid);
    libNtve_gf_PauseUnit(lv_hybrid, false);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(lv_hybrid), "::Baseline", ((1540.0 / 6667.0) * 100.0));
    libNtve_gf_ShowHideUnit(lv_hybrid, true);
    libNtve_gf_ShareVisionofUnit(lv_hybrid, true, gv_pLAYER_01_USER);
    TriggerExecute(gt_PsionicAssault, true, false);
    gf_HybridPing(lv_hybrid);
}

void gf_HybridBehaviorPsychicClones (unit lp_cHOSEN_HYBRID) {
    // Variable Declarations
    unitgroup lv_images;

    // Variable Initialization
    lv_images = UnitGroupEmpty();

    // Implementation
    UnitSetState(lp_cHOSEN_HYBRID, c_unitStateTargetable, false);
    UnitSetState(lp_cHOSEN_HYBRID, c_unitStateInvulnerable, true);
    if ((UnitGroupHasUnit(UnitGroupSelected(gv_pLAYER_01_USER), lp_cHOSEN_HYBRID) == true)) {
        UnitSelect(lp_cHOSEN_HYBRID, gv_pLAYER_01_USER, false);
    }
    else {
    }
    libNtve_gf_PauseUnit(lp_cHOSEN_HYBRID, true);
    ActorSend(libNtve_gf_MainActorofUnit(lp_cHOSEN_HYBRID), "SetOpacity 0.000000 1.000000");
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideUnit(lp_cHOSEN_HYBRID, false);
    ActorSend(libNtve_gf_MainActorofUnit(lp_cHOSEN_HYBRID), "SetOpacity 1.000000");
    IntLoopBegin(1, 2);
    while (!IntLoopDone()) {
        if ((IntLoopCurrent() == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(lp_cHOSEN_HYBRID), c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, UnitGetPosition(lp_cHOSEN_HYBRID), UnitGetPosition(gv_kerrigan));
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(lp_cHOSEN_HYBRID), c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointWithOffsetPolar(UnitGetPosition(lp_cHOSEN_HYBRID), 1.0, (UnitGetFacing(lp_cHOSEN_HYBRID) + 67.5)), UnitGetPosition(gv_kerrigan));
        }
        UnitGroupAdd(lv_images, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "DamageDealtNone", lp_cHOSEN_HYBRID, 1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, UnitGetPropertyFixed(lp_cHOSEN_HYBRID, c_unitPropLifeMax, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, UnitGetPropertyFixed(lp_cHOSEN_HYBRID, c_unitPropShieldsMax, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, UnitGetPropertyFixed(lp_cHOSEN_HYBRID, c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, UnitGetPropertyFixed(lp_cHOSEN_HYBRID, c_unitPropShields, c_unitPropCurrent));
        UnitAbilityEnable(UnitLastCreated(), "ZHybridGravitonPrison", true);
        UnitAbilityEnable(UnitLastCreated(), "ZHybridPsionicShockwave", false);
        UnitAbilityEnable(UnitLastCreated(), "ZHybridPsiStorm", false);
        UnitAbilityEnable(UnitLastCreated(), "ZHybridPlasmaBlast", false);
        UnitAbilityEnable(UnitLastCreated(), "ZHybridPsychicClones", false);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        IntLoopStep();
    }
    IntLoopEnd();
    UnitSetPosition(lp_cHOSEN_HYBRID, PointWithOffsetPolar(UnitGetPosition(lp_cHOSEN_HYBRID), 1.0, (UnitGetFacing(lp_cHOSEN_HYBRID) - 67.5)), false);
    libNtve_gf_CreateActorAtPoint("HybridWarpInEffect", UnitGetPosition(lp_cHOSEN_HYBRID));
    libNtve_gf_PauseUnit(lp_cHOSEN_HYBRID, false);
    libNtve_gf_ShowHideUnit(lp_cHOSEN_HYBRID, true);
    UnitSetState(lp_cHOSEN_HYBRID, c_unitStateTargetable, true);
    UnitSetState(lp_cHOSEN_HYBRID, c_unitStateInvulnerable, false);
    while (!((UnitIsAlive(lp_cHOSEN_HYBRID) == false))) {
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopBegin(lv_images);
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

bool gf_HybridReleased (int lp_index) {
    // Implementation
    return gv_hybridCellReleased[lp_index];
}

trigger auto_gf_Hybrid0405060708PsiStorm_Trigger = null;
unit auto_gf_Hybrid0405060708PsiStorm_lp_unit;

void gf_Hybrid0405060708PsiStorm (unit lp_unit) {
    auto_gf_Hybrid0405060708PsiStorm_lp_unit = lp_unit;

    if (auto_gf_Hybrid0405060708PsiStorm_Trigger == null) {
        auto_gf_Hybrid0405060708PsiStorm_Trigger = TriggerCreate("auto_gf_Hybrid0405060708PsiStorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_Hybrid0405060708PsiStorm_Trigger, false, false);
}

bool auto_gf_Hybrid0405060708PsiStorm_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Hybrid0405060708PsiStorm_lp_unit;

    unit autoCB3D2F01_val;

    // Variable Declarations
    unit lv_hybrid;

    // Variable Initialization
    lv_hybrid = null;

    // Implementation
    autoCB3D2F01_val = lp_unit;
    if (autoCB3D2F01_val == gv_hybridCellArray[4]) {
        lv_hybrid = gv_hybridUnitArray[4];
    }
    else if (autoCB3D2F01_val == gv_hybridCellArray[5]) {
        lv_hybrid = gv_hybridUnitArray[5];
    }
    else if (autoCB3D2F01_val == gv_hybridCellArray[6]) {
        lv_hybrid = gv_hybridUnitArray[6];
    }
    else if (autoCB3D2F01_val == gv_hybridCellArray[7]) {
        lv_hybrid = gv_hybridUnitArray[7];
    }
    else if (autoCB3D2F01_val == gv_hybridCellArray[8]) {
        lv_hybrid = gv_hybridUnitArray[8];
    }
    else {
        return true;
    }
    while (!((UnitGetPropertyFixed(lv_hybrid, c_unitPropShieldsPercent, c_unitPropCurrent) <= 50.0))) {
        Wait(0.5, c_timeAI);
    }
    UnitIssueOrder(lv_hybrid, OrderTargetingPoint(AbilityCommand("ZHybridPsiStorm", 0), PointWithOffsetPolar(UnitGetPosition(lv_hybrid), 3.0, UnitGetFacing(lv_hybrid))), c_orderQueueReplace);
    AISetUnitScriptControlled(lv_hybrid, false);
    while (!((UnitGetPropertyFixed(lv_hybrid, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.0))) {
        Wait(0.5, c_timeAI);
    }
    UnitIssueOrder(lv_hybrid, OrderTargetingPoint(AbilityCommand("ZHybridPsiStorm", 0), PointWithOffsetPolar(UnitGetPosition(lv_hybrid), 3.0, UnitGetFacing(lv_hybrid))), c_orderQueueReplace);
    UnitIssueOrder(lv_hybrid, OrderTargetingPoint(AbilityCommand("ZHybridPsiStorm", 0), PointWithOffsetPolar(UnitGetPosition(lv_hybrid), 5.0, UnitGetFacing(lv_hybrid))), c_orderQueueAddToEnd);
    AISetUnitScriptControlled(lv_hybrid, false);
    while (!((UnitGetPropertyFixed(lv_hybrid, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
        Wait(0.5, c_timeAI);
    }
    UnitIssueOrder(lv_hybrid, OrderTargetingPoint(AbilityCommand("ZHybridPsiStorm", 0), PointWithOffsetPolar(UnitGetPosition(lv_hybrid), 4.0, (UnitGetFacing(lv_hybrid) + 15.0))), c_orderQueueReplace);
    UnitIssueOrder(lv_hybrid, OrderTargetingPoint(AbilityCommand("ZHybridPsiStorm", 0), PointWithOffsetPolar(UnitGetPosition(lv_hybrid), 4.0, (UnitGetFacing(lv_hybrid) - 15.0))), c_orderQueueAddToEnd);
    AISetUnitScriptControlled(lv_hybrid, false);
    return true;
}

void gf_CreatePsionicAssaultTimerWindow () {
    // Implementation
    if ((gv_psionicAssaultTimerWindow == c_timerWindowNone)) {
        libSwaC_gf_TimerWindowCreate2(gv_channelTimer, StringExternal("Param/Value/093C6615"), true, false, 1);
        gv_psionicAssaultTimerWindow = TimerWindowLastCreated();
        TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    }
    else {
    }
}

void gf_ReleaseHybrid (int lp_index) {
    int auto0D0B33F7_val;

    // Implementation
    if (((lp_index <= 0) || (gf_HybridReleased(lp_index) == true))) {
        return ;
    }
    else {
    }
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/537099AB"), null, gv_hybridCellArray[lp_index]);
    MinimapPing(PlayerGroupSingle(gv_pLAYER_01_USER), UnitGetPosition(gv_hybridCellArray[lp_index]), 2.0, Color(100.00, 0.00, 0.00));
    TimerStart(gv_hybridReleaseTimer, 240.0, false, c_timeAI);
    auto0D0B33F7_val = lp_index;
    if (auto0D0B33F7_val == 2) {
        TriggerExecute(gt_TransmissionHybrid02ReleasedQ, true, false);
    }
    else if (auto0D0B33F7_val == 3) {
        TriggerExecute(gt_TransmissionHybrid03ReleasedQ, true, false);
    }
    else if (auto0D0B33F7_val == 4) {
        TriggerExecute(gt_TransmissionHybrid04ReleasedQ, true, false);
    }
    else if (auto0D0B33F7_val == 5) {
        TriggerExecute(gt_TransmissionHybrid05ReleasedQ, true, false);
    }
    else if (auto0D0B33F7_val == 6) {
        TriggerExecute(gt_TransmissionHybrid06ReleasedQ, true, false);
    }
    else {
        if (((lp_index == 7) || (lp_index == 8))) {
            if ((gf_HybridReleased(7) == false) && (gf_HybridReleased(8) == false)) {
                TriggerExecute(gt_TransmissionHybrid07and08ReleasedQ, true, false);
            }
            else {
                TriggerExecute(gt_TransmissionHybrid07or08ReleasedQ, true, false);
            }
        }
        else {
        }
    }
    if (((lp_index == 7) || (lp_index == 8))) {
        gf_ReleaseHybridIssueOrder(7);
        gf_ReleaseHybridIssueOrder(8);
    }
    else {
        gf_ReleaseHybridIssueOrder(lp_index);
    }
}

void gf_ReleaseHybridIssueOrder (int lp_index) {
    int autoB05E7C4D_val;

    // Implementation
    if ((gf_HybridReleased(lp_index) == true)) {
        return ;
    }
    else {
    }
    gv_hybridCellReleased[lp_index] = true;
    gf_MakeHybridCellNonInteractive(lp_index);
    autoB05E7C4D_val = lp_index;
    if (autoB05E7C4D_val == 2) {
        TriggerEnable(gt_ReleaseHybrid03, true);
    }
    else if (autoB05E7C4D_val == 3) {
        TriggerEnable(gt_Hybrid03PsychicClones, true);
        TriggerEnable(gt_ReleaseHybrid04, true);
    }
    else if (autoB05E7C4D_val == 4) {
        TriggerEnable(gt_ReleaseHybrid05, true);
    }
    else if (autoB05E7C4D_val == 5) {
        TriggerEnable(gt_Hybrid05PsychicClones, true);
        TriggerEnable(gt_ReleaseHybrid06, true);
    }
    else if (autoB05E7C4D_val == 6) {
        TriggerEnable(gt_Hybrid06PsychicClones, true);
        TriggerEnable(gt_ReleaseHybrid0708, true);
    }
    else if (autoB05E7C4D_val == 7) {
        TriggerEnable(gt_Hybrid07PsychicClones, true);
    }
    else if (autoB05E7C4D_val == 8) {
        TriggerEnable(gt_Hybrid08PsychicClones, true);
    }
    else {
    }
    if ((UnitIsAlive(gv_hybridCellArray[lp_index]) == true)) {
        UnitIssueOrder(gv_hybridCellArray[lp_index], OrderTargetingPoint(AbilityCommand("HybridRelease", 0), gv_hybridReleaseLocation[lp_index]), c_orderQueueReplace);
    }
    else {
        UnitCreate(1, "HybridReleaseFallbackUnit", c_unitCreateIgnorePlacement, 0, gv_hybridCellLocation[lp_index], PointGetFacing(gv_hybridCellLocation[lp_index]));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("HybridReleaseFallback", 0), gv_hybridReleaseLocation[lp_index]), c_orderQueueReplace);
    }
    gf_Hybrid0405060708PsiStorm(gv_hybridCellArray[lp_index]);
}

void gf_TurnNextHybridCellOn () {
    int autoF3059CC7_val;

    // Variable Declarations
    int lv_nextIndex;

    // Variable Initialization
    lv_nextIndex = 0;

    // Implementation
    lv_nextIndex = 2;
    while ((gf_HybridReleased(lv_nextIndex) == true) && (lv_nextIndex < 7)) {
        lv_nextIndex += 1;
    }
    if ((lv_nextIndex == 7) && (gf_HybridReleased(7) == true) && (gf_HybridReleased(8) == true)) {
        return ;
    }
    else {
    }
    TriggerEnable(gt_ReleaseHybrid02, false);
    TriggerEnable(gt_ReleaseHybrid03, false);
    TriggerEnable(gt_ReleaseHybrid04, false);
    TriggerEnable(gt_ReleaseHybrid05, false);
    TriggerEnable(gt_ReleaseHybrid06, false);
    TriggerEnable(gt_ReleaseHybrid0708, false);
    autoF3059CC7_val = lv_nextIndex;
    if (autoF3059CC7_val == 2) {
        TriggerEnable(gt_ReleaseHybrid02, true);
    }
    else if (autoF3059CC7_val == 3) {
        TriggerEnable(gt_ReleaseHybrid03, true);
    }
    else if (autoF3059CC7_val == 4) {
        TriggerEnable(gt_ReleaseHybrid04, true);
    }
    else if (autoF3059CC7_val == 5) {
        TriggerEnable(gt_ReleaseHybrid05, true);
    }
    else if (autoF3059CC7_val == 6) {
        TriggerEnable(gt_ReleaseHybrid06, true);
    }
    else if (autoF3059CC7_val == 7) {
        TriggerEnable(gt_ReleaseHybrid0708, true);
    }
    else {
    }
    if ((TimerGetRemaining(gv_hybridReleaseTimer) == 0.0)) {
        TimerStart(gv_hybridReleaseTimer, 0.0, false, c_timeAI);
    }
    else {
    }
}

int gf_HybridCellIndex (unit lp_cell) {
    int auto6DEB2115_ae;
    int auto6DEB2115_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    auto6DEB2115_ae = 8;
    auto6DEB2115_ai = 1;
    lv_index = 1;
    while ((auto6DEB2115_ai >= 0 && lv_index <= auto6DEB2115_ae) || (auto6DEB2115_ai <= 0 && lv_index >= auto6DEB2115_ae)) {
        if ((gv_hybridCellArray[lv_index] == lp_cell)) {
            return lv_index;
        }
        else {
        }
        if (lv_index == auto6DEB2115_ae) {
            break;
        }
        lv_index = lv_index + auto6DEB2115_ai;
    }
    return -1;
}

int gf_HybridIndex (unit lp_hybrid) {
    int auto33086C16_ae;
    int auto33086C16_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    auto33086C16_ae = 8;
    auto33086C16_ai = 1;
    lv_index = 1;
    while ((auto33086C16_ai >= 0 && lv_index <= auto33086C16_ae) || (auto33086C16_ai <= 0 && lv_index >= auto33086C16_ae)) {
        if ((lp_hybrid == gv_hybridUnitArray[lv_index])) {
            return lv_index;
        }
        else {
        }
        if (lv_index == auto33086C16_ae) {
            break;
        }
        lv_index = lv_index + auto33086C16_ai;
    }
    return 0;
}

point gf_HybridHome (int lp_index) {
    // Implementation
    if ((lp_index == 1)) {
        return PointFromId(11);
    }
    else {
        return gv_hybridReleaseLocation[lp_index];
    }
}

void gf_AIHybridDominator (int lp_owner, unit lp_hybrid, unitgroup lp_nearbyUnits) {
    unitgroup auto6300CFDC_g;
    int auto6300CFDC_u;

    // Variable Declarations
    unit lv_victim;
    unitgroup lv_candidates;
    unitgroup lv_allies;
    unit lv_indexUnit;
    unit lv_lastAttacker;
    int lv_indexHybrid;
    bool lv_actionSuggested;

    // Variable Initialization
    lv_victim = null;
    lv_candidates = UnitGroupEmpty();
    lv_allies = UnitGroupEmpty();
    lv_indexUnit = null;
    lv_lastAttacker = null;
    lv_indexHybrid = 0;
    lv_actionSuggested = false;

    // Implementation
    lv_indexHybrid = gf_HybridIndex(lp_hybrid);
    if ((lv_indexHybrid == 0)) {
        return ;
    }
    else {
    }
    if ((gv_aIHybridLeashing[lv_indexHybrid] == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_hybrid), gf_HybridHome(lv_indexHybrid)) < 2.0)) {
            gv_aIHybridLeashing[lv_indexHybrid] = false;
        }
        else {
            libNtve_gf_AICast(lp_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), gf_HybridHome(lv_indexHybrid)));
            return ;
        }
    }
    else {
    }
    lv_lastAttacker = AILastAttacker(lp_hybrid);
    if ((gv_aIHybridAttacker[lv_indexHybrid] != null) && (UnitIsAlive(gv_aIHybridAttacker[lv_indexHybrid]) == true)) {
        if ((lv_lastAttacker != null) && (UnitIsAlive(lv_lastAttacker) == true) && ((FixedToInt(GameGetMissionTime()) - AILastAttack(lp_hybrid)) < 5)) {
            if ((((gv_aIHybridAttacker[lv_indexHybrid] != lv_lastAttacker) && (UnitCanAttackTarget(lv_lastAttacker, lp_hybrid) == true) && (UnitCanAttackTarget(gv_aIHybridAttacker[lv_indexHybrid], lp_hybrid) == false)) || ((DistanceBetweenPoints(UnitGetPosition(lp_hybrid), UnitGetPosition(gv_aIHybridAttacker[lv_indexHybrid])) > 4.3) && (DistanceBetweenPoints(UnitGetPosition(lp_hybrid), UnitGetPosition(gv_aIHybridAttacker[lv_indexHybrid])) > DistanceBetweenPoints(UnitGetPosition(lp_hybrid), UnitGetPosition(lv_lastAttacker)))))) {
                gv_aIHybridAttacker[lv_indexHybrid] = lv_lastAttacker;
            }
            else {
            }
        }
        else {
        }
    }
    else {
        if ((lv_lastAttacker != null) && (UnitIsAlive(lv_lastAttacker) == true) && ((FixedToInt(GameGetMissionTime()) - AILastAttack(lp_hybrid)) < 5)) {
            gv_aIHybridAttacker[lv_indexHybrid] = lv_lastAttacker;
        }
        else {
            gv_aIHybridAttacker[lv_indexHybrid] = null;
        }
    }
    if ((gv_aIHybridAttacker[lv_indexHybrid] != null) && (UnitIsAlive(gv_aIHybridAttacker[lv_indexHybrid]) == true)) {
        libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("attack", 0), gv_aIHybridAttacker[lv_indexHybrid]));
        lv_actionSuggested = true;
    }
    else {
    }
    if ((lv_actionSuggested == false)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_hybrid), gf_HybridHome(lv_indexHybrid)) > 35.0)) {
            gv_aIHybridLeashing[lv_indexHybrid] = true;
            libNtve_gf_AICast(lp_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), gf_HybridHome(lv_indexHybrid)));
            return ;
        }
        else {
        }
    }
    else {
    }
    lv_candidates = gf_EnemiesWithinRange(lp_hybrid, 8.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    auto6300CFDC_g = lv_candidates;
    auto6300CFDC_u = 1;
    while (auto6300CFDC_u <= UnitGroupCount(auto6300CFDC_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(auto6300CFDC_g, auto6300CFDC_u);
        if ((libNtve_gf_UnitIsInvulnerable(lv_indexUnit) == true)) {
            UnitGroupRemove(lv_candidates, lv_indexUnit);
        }
        else {
        }
        if (lv_indexUnit == UnitGroupUnit(auto6300CFDC_g, auto6300CFDC_u)) {
            auto6300CFDC_u = auto6300CFDC_u + 1;
        }
    }
    if ((UnitGroupCount(lv_candidates, c_unitCountAlive) > 0)) {
        if ((UnitAbilityCheck(lp_hybrid, "ZHybridPsionicShockwave", true) == true) && (UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("ZHybridPsionicShockwave", 0), c_cmdStateCooldown) == false) && ((UnitGroupCount(lv_candidates, c_unitCountAlive) >= 5) || ((UnitGroupCount(lv_candidates, c_unitCountAlive) >= 1) && (UnitGetPropertyFixed(lp_hybrid, c_unitPropLifePercent, c_unitPropCurrent) <= 15.0)))) {
            libNtve_gf_AICast(lp_hybrid, Order(AbilityCommand("ZHybridPsionicShockwave", 0)));
            lv_actionSuggested = true;
        }
        else {
            UnitGroupRemove(lv_candidates, gv_kerrigan);
            UnitGroupRemoveUnitGroup(lv_candidates, gf_EnemiesWithinRange(lp_hybrid, 2.0, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))));
            lv_victim = UnitGroupRandomUnit(lv_candidates, c_unitCountAlive);
            UnitGroupLoopBegin(lv_candidates);
            while (!UnitGroupLoopDone()) {
                if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) > 100.0)) {
                    lv_victim = UnitGroupLoopCurrent();
                    break;
                }
                else {
                }
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            if ((UnitAbilityCheck(lp_hybrid, "HybridCPlasmaBlast", true) == true) && (UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("ZHybridPlasmaBlast", 0), c_cmdStateCooldown) == false)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("ZHybridPlasmaBlast", 0), lv_victim));
                lv_actionSuggested = true;
            }
            else {
            }
            if ((UnitAbilityCheck(lp_hybrid, "ZHybridGravitonPrison", true) == true) && (UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("ZHybridGravitonPrison", 0), c_cmdStateCooldown) == false) && (UnitGroupCount(lv_candidates, c_unitCountAlive) > 1)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("ZHybridGravitonPrison", 0), lv_victim));
                lv_actionSuggested = true;
            }
            else {
            }
        }
    }
    else {
    }
    if ((lv_actionSuggested == false) && (UnitTestState(lp_hybrid, c_unitStateIdle) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_hybrid), gf_HybridHome(lv_indexHybrid)) > 8.0)) {
        gv_aIHybridLeashing[lv_indexHybrid] = true;
        libNtve_gf_AICast(lp_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), gf_HybridHome(lv_indexHybrid)));
    }
    else {
    }
}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

void gf_CreateCreepinRegion (region lp_region) {
    // Implementation
    CreepModify(RegionGetCenter(lp_region), (libNtve_gf_WidthOfRegion(lp_region) / 2.0), true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZHybrid2");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init03aHybrid, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2222, 7);
    PlayerGroupAdd(gv_dominionPlayers, gv_p02_DOMINION_RED);
    PlayerGroupAdd(gv_dominionPlayers, gv_p03_DOMINION_YELLOW);
    PlayerGroupAdd(gv_dominionPlayers, gv_p04_DOMINION_GREEN);
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 1, true);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 10000);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_p02_DOMINION_RED, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_p03_DOMINION_YELLOW, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_p04_DOMINION_GREEN, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION2222, 7);
        PlayerGroupAdd(gv_enemyPlayers, PlayerGroupLoopCurrent());
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(3), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(3)), 0, 0);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(18), PointFromId(65));
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DOMINION2, "HybridDominator", "AIHybridDominator", false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("HybridHoldingCellSmallUnit", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libSwaC_gf_SetUnitInfoTextCampaign(UnitGroupLoopCurrent(), null, StringExternal("Param/Value/7CD97CD2"), null);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, 200.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_objectiveDestroyHybridQuota = UnitGroupCount(UnitGroup("HybridHoldingCellSmallUnit", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    gv_hybridCellArray[1] = UnitFromId(320);
    gv_hybridCellArray[2] = UnitFromId(578);
    gv_hybridCellArray[3] = UnitFromId(805);
    gv_hybridCellArray[4] = UnitFromId(807);
    gv_hybridCellArray[5] = UnitFromId(110);
    gv_hybridCellArray[6] = UnitFromId(114);
    gv_hybridCellArray[7] = UnitFromId(693);
    gv_hybridCellArray[8] = UnitFromId(639);
    IntLoopBegin(1, 8);
    while (!IntLoopDone()) {
        gv_hybridCellLocation[IntLoopCurrent()] = UnitGetPosition(gv_hybridCellArray[IntLoopCurrent()]);
        IntLoopStep();
    }
    IntLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(UnitFromId(99), true);
    UnitSetOwner(UnitFromId(99), gv_pLAYER_02_DOMINION2222, true);
    libNtve_gf_ShowHideUnit(UnitFromId(99), false);
    libNtve_gf_PauseUnit(UnitFromId(19), true);
    UnitSetOwner(UnitFromId(19), gv_pLAYER_02_DOMINION2222, true);
    libNtve_gf_ShowHideUnit(UnitFromId(19), false);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(409), StringExternal("Param/Value/9E1B3CED"), StringExternal("Param/Value/45C3839C"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(437), StringExternal("Param/Value/D731CCD9"), StringExternal("Param/Value/005CA37C"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03a Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_Init03aHybrid_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridReleaseLocation[1] = PointFromId(78);
    gv_hybridReleaseLocation[2] = PointFromId(132);
    gv_hybridReleaseLocation[3] = PointFromId(7);
    gv_hybridReleaseLocation[4] = PointFromId(87);
    gv_hybridReleaseLocation[5] = PointFromId(808);
    gv_hybridReleaseLocation[6] = PointFromId(810);
    gv_hybridReleaseLocation[7] = PointFromId(811);
    gv_hybridReleaseLocation[8] = PointFromId(812);
    IntLoopBegin(1, 8);
    while (!IntLoopDone()) {
        PointSetFacing(gv_hybridReleaseLocation[IntLoopCurrent()], AngleBetweenPoints(gv_hybridCellLocation[IntLoopCurrent()], gv_hybridReleaseLocation[IntLoopCurrent()]));
        IntLoopStep();
    }
    IntLoopEnd();
    gv_hybridUnitArray[1] = UnitFromId(29);
    UnitGroupAdd(gv_activeHybrid, gv_hybridUnitArray[1]);
    UnitAbilityEnable(gv_hybridUnitArray[1], "ZHybridGravitonPrison", true);
    UnitAbilityEnable(gv_hybridUnitArray[1], "ZHybridPsionicShockwave", true);
    UnitAbilityEnable(gv_hybridUnitArray[1], "ZHybridPlasmaBlast", false);
    UnitAbilityEnable(gv_hybridUnitArray[1], "ZHybridPsiStorm", false);
    UnitAbilityEnable(gv_hybridUnitArray[1], "ZHybridPsychicClones", true);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominator", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, gv_hybridReleaseLocation[2]);
    gv_hybridUnitArray[2] = UnitLastCreated();
    UnitGroupAdd(gv_hiddenHybrid, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridGravitonPrison", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsionicShockwave", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPlasmaBlast", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsiStorm", false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsychicClones", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominator", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, gv_hybridReleaseLocation[3]);
    gv_hybridUnitArray[3] = UnitLastCreated();
    UnitGroupAdd(gv_hiddenHybrid, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridGravitonPrison", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsionicShockwave", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPlasmaBlast", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsiStorm", false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsychicClones", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominator", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, gv_hybridReleaseLocation[4]);
    gv_hybridUnitArray[4] = UnitLastCreated();
    UnitGroupAdd(gv_hiddenHybrid, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridGravitonPrison", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsionicShockwave", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPlasmaBlast", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsiStorm", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsychicClones", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominator", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, gv_hybridReleaseLocation[5]);
    gv_hybridUnitArray[5] = UnitLastCreated();
    UnitGroupAdd(gv_hiddenHybrid, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridGravitonPrison", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPlasmaBlast", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsionicShockwave", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsiStorm", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsychicClones", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominator", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, gv_hybridReleaseLocation[6]);
    gv_hybridUnitArray[6] = UnitLastCreated();
    UnitGroupAdd(gv_hiddenHybrid, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridGravitonPrison", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPlasmaBlast", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsionicShockwave", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsiStorm", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsychicClones", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominator", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, gv_hybridReleaseLocation[7]);
    gv_hybridUnitArray[7] = UnitLastCreated();
    UnitGroupAdd(gv_hiddenHybrid, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridGravitonPrison", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsionicShockwave", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPlasmaBlast", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsiStorm", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsychicClones", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDominator", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, gv_hybridReleaseLocation[8]);
    gv_hybridUnitArray[8] = UnitLastCreated();
    UnitGroupAdd(gv_hiddenHybrid, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridGravitonPrison", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsionicShockwave", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPlasmaBlast", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsiStorm", true);
    UnitAbilityEnable(UnitLastCreated(), "ZHybridPsychicClones", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03aHybrid_Init () {
    gt_Init03aHybrid = TriggerCreate("gt_Init03aHybrid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZHybrid02MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(29), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(25), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(6), RegionFromId(6), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridLife = libHots_gf_DifficultyValueFixed2(1000.0, 1000.0, 1000.0);
    gv_hybridShields = libHots_gf_DifficultyValueFixed2(1000.0, 1000.0, 1500.0);
    gv_hybridReleaseDelay = libHots_gf_DifficultyValueFixed2(60.0, 60.0, 60.0);
    gv_channelTimeMax = libHots_gf_DifficultyValueFixed2(300.0, 300.0, 270.0);
    IntLoopBegin(1, 8);
    while (!IntLoopDone()) {
        UnitSetPropertyFixed(gv_hybridUnitArray[IntLoopCurrent()], c_unitPropLifeMax, gv_hybridLife);
        UnitSetPropertyFixed(gv_hybridUnitArray[IntLoopCurrent()], c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_hybridUnitArray[IntLoopCurrent()], c_unitPropShieldsMax, gv_hybridShields);
        UnitSetPropertyFixed(gv_hybridUnitArray[IntLoopCurrent()], c_unitPropShieldsPercent, 100.0);
        IntLoopStep();
    }
    IntLoopEnd();
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CombatShield", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "JackhammerConcussionGrenades", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "SiegeTech", 1);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "AresClassWeaponsSystemViking", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ClusterWarheads", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "FireSuppressionSystems", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShrikeTurret", 1);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        UnitMagazineArm(UnitFromId(819), AbilityCommand("ArmSiloWithNuke", 0), 1);
        PlayerGroupLoopBegin(gv_enemyPlayers);
        while (!PlayerGroupLoopDone()) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossShieldsLevel1", 1);
            PlayerGroupLoopStep();
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Hybrid Dominators");
    libSwaC_gf_AddMissionTipUserData("Life Drain");
    libSwaC_gf_AddMissionTipUserData("Containment Cells");
    libSwaC_gf_AddMissionTipUserData("Dominion");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("ScienceVessel", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HybridDominator", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Brutalisk", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskMarine", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskMarauder", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskReaper", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskMedic", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskBanshee", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskWraith", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskVikingAssault", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("MengskVikingFighter", false, gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Handler
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceHandler_Func (bool testConds, bool runActions) {
    int auto77490BEA_ae;
    int auto77490BEA_ai;
    int auto2B7A0EAC_ae;
    int auto2B7A0EAC_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(1);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(4);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(13);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(14);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(15);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(20);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(19);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(30);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(26);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(31);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(27);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(32);
    auto77490BEA_ae = gv_perfPausedCount;
    auto77490BEA_ai = 1;
    lv_index = 1;
    while ((auto77490BEA_ai >= 0 && lv_index <= auto77490BEA_ae) || (auto77490BEA_ai <= 0 && lv_index >= auto77490BEA_ae)) {
        gv_perfPausedUnits[lv_index] = UnitGroupAlliance(c_playerAny, c_unitAllianceEnemy, gv_perfPausedRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupLoopBegin(gv_perfPausedUnits[lv_index]);
        while (!UnitGroupLoopDone()) {
            if ((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && ((UnitGetType(UnitGroupLoopCurrent()) == "Factory") || (UnitGetType(UnitGroupLoopCurrent()) == "Barracks") || (UnitGetType(UnitGroupLoopCurrent()) == "Starport") || (UnitGetType(UnitGroupLoopCurrent()) == "FactoryTechReactor") || (UnitGetType(UnitGroupLoopCurrent()) == "BarracksTechReactor") || (UnitGetType(UnitGroupLoopCurrent()) == "StarportTechReactor") || (UnitGetType(UnitGroupLoopCurrent()) == "FactoryTechLab") || (UnitGetType(UnitGroupLoopCurrent()) == "StarportTechLab") || (UnitGetType(UnitGroupLoopCurrent()) == "BarracksTechLab") || (UnitGetType(UnitGroupLoopCurrent()) == "BarracksReactor"))) {
                UnitGroupRemove(gv_perfPausedUnits[lv_index], UnitGroupLoopCurrent());
            }
            else {
                libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
                libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if (lv_index == auto77490BEA_ae) {
            break;
        }
        lv_index = lv_index + auto77490BEA_ai;
    }
    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        auto2B7A0EAC_ae = gv_perfPausedCount;
        auto2B7A0EAC_ai = 1;
        lv_index = 1;
        while ((auto2B7A0EAC_ai >= 0 && lv_index <= auto2B7A0EAC_ae) || (auto2B7A0EAC_ai <= 0 && lv_index >= auto2B7A0EAC_ae)) {
            if ((gv_perfRevealRegions[lv_index] != null) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_perfRevealRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, gv_perfRevealRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
                UnitGroupLoopBegin(gv_perfPausedUnits[lv_index]);
                while (!UnitGroupLoopDone()) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                    libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
                    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, UnitGetPosition(UnitGroupLoopCurrent())) == true)) {
                        TextExpressionSetToken("Param/Expression/D7D06247", "A", UnitTypeGetName(UnitGetType(UnitGroupLoopCurrent())));
                        TextExpressionSetToken("Param/Expression/D7D06247", "B", FixedToText(PointGetX(UnitGetPosition(UnitGroupLoopCurrent())), 1));
                        TextExpressionSetToken("Param/Expression/D7D06247", "C", FixedToText(PointGetY(UnitGetPosition(UnitGroupLoopCurrent())), 1));
                        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/D7D06247"), true);
                    }
                    else {
                    }
                    UnitGroupLoopStep();
                }
                UnitGroupLoopEnd();
                gv_perfRevealRegions[lv_index] = null;
            }
            else {
            }
            if (lv_index == auto2B7A0EAC_ae) {
                break;
            }
            lv_index = lv_index + auto2B7A0EAC_ai;
        }
        Wait(0.25, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceHandler_Init () {
    gt_PerformanceHandler = TriggerCreate("gt_PerformanceHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Map Cheat Used
//--------------------------------------------------------------------------------------------------
bool gt_ShowMapCheatUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PerformanceHandler, false);
    TriggerStop(gt_PerformanceHandler);
    IntLoopBegin(1, gv_perfPausedCount);
    while (!IntLoopDone()) {
        gv_perfRevealRegions[IntLoopCurrent()] = null;
        UnitGroupLoopBegin(gv_perfPausedUnits[IntLoopCurrent()]);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitGroupRemove(gv_perfPausedUnits[IntLoopCurrent()], UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        IntLoopStep();
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowMapCheatUsed_Init () {
    gt_ShowMapCheatUsed = TriggerCreate("gt_ShowMapCheatUsed_Func");
    TriggerAddEventCheatUsed(gt_ShowMapCheatUsed, gv_pLAYER_01_USER, c_gameCheatShowmap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCombatIndicator = 4;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Kerrigan Death
//--------------------------------------------------------------------------------------------------
bool gt_HandleKerriganDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleKerriganDeath_Init () {
    gt_HandleKerriganDeath = TriggerCreate("gt_HandleKerriganDeath_Func");
    TriggerAddEventUnitDied(gt_HandleKerriganDeath, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(36), RegionFromId(37));
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
    }
    else {
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CE968F07"), null, PointFromId(2));
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyAllHybridCreate, true, true);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    TimerStart(gv_hybridReleaseTimer, 240.0, false, c_timeAI);
    TriggerExecute(gt_PsionicAssault, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(24), 15.0, true);
    libNtve_gf_ShareVisionofUnit(gv_hybridUnitArray[1], true, gv_pLAYER_01_USER);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(320)), "SetMinimapVisibility");
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0095879D"), null, gv_hybridUnitArray[1]);
    gf_HybridPing(gv_hybridUnitArray[1]);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TransmissionHybridIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Hybrid Behavior
//--------------------------------------------------------------------------------------------------
bool gt_FirstHybridBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitAbilityEnable(gv_hybridUnitArray[1], "ZHybridPsionicShockwave", false);
    UnitAbilityEnable(gv_hybridUnitArray[1], "ZHybridGravitonPrison", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstHybridBehavior_Init () {
    gt_FirstHybridBehavior = TriggerCreate("gt_FirstHybridBehavior_Func");
    TriggerAddEventUnitAbility(gt_FirstHybridBehavior, UnitRefFromVariable("gv_hybridUnitArray[1]"), AbilityCommand("ZHybridPsionicShockwave", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00097", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid02|Line00132", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_hybridUnitArray[1]), 2.0, Color(0.00, 100.00, 0.00));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridIntroQ_Init () {
    gt_TransmissionHybridIntroQ = TriggerCreate("gt_TransmissionHybridIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Brutalisk Objective
//--------------------------------------------------------------------------------------------------
bool gt_IntroBrutaliskObjective_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_TransmissionBrutaliskIntro, true, true);
    TriggerExecute(gt_ObjectiveKillProtossCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBrutaliskObjective_Init () {
    gt_IntroBrutaliskObjective = TriggerCreate("gt_IntroBrutaliskObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Brutalisk Intro
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBrutaliskIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid02|Line00041", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBrutaliskIntro_Init () {
    gt_TransmissionBrutaliskIntro = TriggerCreate("gt_TransmissionBrutaliskIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Brutalisk (Top)
//--------------------------------------------------------------------------------------------------
bool gt_RescueBrutaliskTop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(409));
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(409), 1));
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_ObjectiveRescueBrutaliskUpdate, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(195)), "AnimBracketStart StandWork Stand,Work,Start Stand,Work IGNORE");
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(4.4, c_timeGame);
    libNtve_gf_PauseUnit(UnitFromId(99), false);
    libNtve_gf_ShowHideUnit(UnitFromId(99), true);
    libNtve_gf_RescueUnit(UnitFromId(99), gv_pLAYER_01_USER, true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(99)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CADC2C05"), null, UnitFromId(99));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueBrutaliskTop_Init () {
    gt_RescueBrutaliskTop = TriggerCreate("gt_RescueBrutaliskTop_Func");
    TriggerAddEventUnitRegion(gt_RescueBrutaliskTop, UnitRefFromVariable("gv_kerrigan"), RegionCircle(UnitGetPosition(UnitFromId(409)), 2.5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Brutalisk (Bottom)
//--------------------------------------------------------------------------------------------------
bool gt_RescueBrutaliskBottom_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(437));
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(437), 1));
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_ObjectiveRescueBrutaliskUpdate, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(216)), "AnimBracketStart StandWork Stand,Work,Start Stand,Work IGNORE");
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(4.4, c_timeGame);
    libNtve_gf_PauseUnit(UnitFromId(19), false);
    libNtve_gf_ShowHideUnit(UnitFromId(19), true);
    libNtve_gf_RescueUnit(UnitFromId(19), gv_pLAYER_01_USER, true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(19)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7AF8DA39"), null, UnitFromId(19));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueBrutaliskBottom_Init () {
    gt_RescueBrutaliskBottom = TriggerCreate("gt_RescueBrutaliskBottom_Func");
    TriggerAddEventUnitRegion(gt_RescueBrutaliskBottom, UnitRefFromVariable("gv_kerrigan"), RegionCircle(UnitGetPosition(UnitFromId(437)), 2.5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Brutalisk Rescue Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBrutaliskRescueQ_Func (bool testConds, bool runActions) {
    int auto3D253298_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZHybrid02Objective02", 600.0);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    auto3D253298_val = gv_objectiveRescueBrutalisksCount;
    if (auto3D253298_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid02|Line00144", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto3D253298_val == 2) {
        TriggerEnable(TriggerGetCurrent(), false);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00145", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid02|Line00146", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBrutaliskRescueQ_Init () {
    gt_TransmissionBrutaliskRescueQ = TriggerCreate("gt_TransmissionBrutaliskRescueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Dominion Attack Waves Online Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDominionAttackWavesOnlineQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(UnitGroup(null, gv_p03_DOMINION_YELLOW, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5)) {
        TriggerQueueEnter();
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(8), 12.0, false);
        MinimapPing(PlayerGroupSingle(gv_pLAYER_01_USER), PointFromId(278), 2.0, Color(100.00, 0.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7A3B5F2D"), null, PointFromId(278));
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00018", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDominionAttackWavesOnlineQ_Init () {
    gt_TransmissionDominionAttackWavesOnlineQ = TriggerCreate("gt_TransmissionDominionAttackWavesOnlineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_SpawnHybrid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_indexHybrid;

    // Variable Initialization
    lv_spawnPoint = null;
    lv_indexHybrid = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_channelTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    if ((DistanceBetweenPoints(PointFromId(78), lv_spawnPoint) < 1.0)) {
        lv_indexHybrid = 1;
    }
    else if ((DistanceBetweenPoints(PointFromId(132), lv_spawnPoint) < 1.0)) {
        lv_indexHybrid = 2;
    }
    else if ((DistanceBetweenPoints(PointFromId(7), lv_spawnPoint) < 1.0)) {
        lv_indexHybrid = 3;
    }
    else if ((DistanceBetweenPoints(PointFromId(87), lv_spawnPoint) < 1.0)) {
        lv_indexHybrid = 4;
    }
    else if ((DistanceBetweenPoints(PointFromId(808), lv_spawnPoint) < 1.0)) {
        lv_indexHybrid = 5;
    }
    else if ((DistanceBetweenPoints(PointFromId(810), lv_spawnPoint) < 1.0)) {
        lv_indexHybrid = 6;
    }
    else if ((DistanceBetweenPoints(PointFromId(811), lv_spawnPoint) < 1.0)) {
        lv_indexHybrid = 7;
    }
    else if ((DistanceBetweenPoints(PointFromId(812), lv_spawnPoint) < 1.0)) {
        lv_indexHybrid = 8;
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/F2B91E74"), false);
        return true;
    }
    gf_SpawnHybrid(lv_indexHybrid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnHybrid_Init () {
    gt_SpawnHybrid = TriggerCreate("gt_SpawnHybrid_Func");
    TriggerAddEventPlayerEffectUsed(gt_SpawnHybrid, 0, "HybridReleaseImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid 03 - Psychic Clones
//--------------------------------------------------------------------------------------------------
bool gt_Hybrid03PsychicClones_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_hybridUnitArray[3], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HybridBehaviorPsychicClones(gv_hybridUnitArray[3]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hybrid03PsychicClones_Init () {
    gt_Hybrid03PsychicClones = TriggerCreate("gt_Hybrid03PsychicClones_Func");
    TriggerEnable(gt_Hybrid03PsychicClones, false);
    TriggerAddEventUnitProperty(gt_Hybrid03PsychicClones, UnitRefFromVariable("gv_hybridUnitArray[3]"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid 05 - Psychic Clones
//--------------------------------------------------------------------------------------------------
bool gt_Hybrid05PsychicClones_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_hybridUnitArray[5], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HybridBehaviorPsychicClones(gv_hybridUnitArray[5]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hybrid05PsychicClones_Init () {
    gt_Hybrid05PsychicClones = TriggerCreate("gt_Hybrid05PsychicClones_Func");
    TriggerEnable(gt_Hybrid05PsychicClones, false);
    TriggerAddEventUnitProperty(gt_Hybrid05PsychicClones, UnitRefFromVariable("gv_hybridUnitArray[5]"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid 06 - Psychic Clones
//--------------------------------------------------------------------------------------------------
bool gt_Hybrid06PsychicClones_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_hybridUnitArray[6], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HybridBehaviorPsychicClones(gv_hybridUnitArray[6]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hybrid06PsychicClones_Init () {
    gt_Hybrid06PsychicClones = TriggerCreate("gt_Hybrid06PsychicClones_Func");
    TriggerEnable(gt_Hybrid06PsychicClones, false);
    TriggerAddEventUnitProperty(gt_Hybrid06PsychicClones, UnitRefFromVariable("gv_hybridUnitArray[6]"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid 07 - Psychic Clones
//--------------------------------------------------------------------------------------------------
bool gt_Hybrid07PsychicClones_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_hybridUnitArray[7], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HybridBehaviorPsychicClones(gv_hybridUnitArray[7]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hybrid07PsychicClones_Init () {
    gt_Hybrid07PsychicClones = TriggerCreate("gt_Hybrid07PsychicClones_Func");
    TriggerEnable(gt_Hybrid07PsychicClones, false);
    TriggerAddEventUnitProperty(gt_Hybrid07PsychicClones, UnitRefFromVariable("gv_hybridUnitArray[7]"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid 08 - Psychic Clones
//--------------------------------------------------------------------------------------------------
bool gt_Hybrid08PsychicClones_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_hybridUnitArray[8], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HybridBehaviorPsychicClones(gv_hybridUnitArray[8]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hybrid08PsychicClones_Init () {
    gt_Hybrid08PsychicClones = TriggerCreate("gt_Hybrid08PsychicClones_Func");
    TriggerEnable(gt_Hybrid08PsychicClones, false);
    TriggerAddEventUnitProperty(gt_Hybrid08PsychicClones, UnitRefFromVariable("gv_hybridUnitArray[8]"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psionic Assault
//--------------------------------------------------------------------------------------------------
bool gt_PsionicAssault_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TimerIsPaused(gv_channelTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreatePsionicAssaultTimerWindow();
    TimerStart(gv_channelTimer, gv_channelTimeMax, false, c_timeAI);
    TriggerEnable(gt_TransmissionFailureSoonQ, true);
    TriggerEnable(gt_TransmissionFailureImminentQ, true);
    while (true) {
        TimerWindowShow(gv_psionicAssaultTimerWindow, PlayerGroupAll(), true);
        if ((TriggerIsEnabled(gt_TransmissionFailureSoonQ) == true) && ((TimerGetRemaining(gv_channelTimer) >= (0.2 * gv_channelTimeMax)) && (TimerGetRemaining(gv_channelTimer) <= (0.5 * gv_channelTimeMax)))) {
            TriggerExecute(gt_TransmissionFailureSoonQ, true, false);
        }
        else {
        }
        if ((TriggerIsEnabled(gt_TransmissionFailureImminentQ) == true) && (TimerGetRemaining(gv_channelTimer) < (0.2 * gv_channelTimeMax))) {
            TriggerExecute(gt_TransmissionFailureImminentQ, true, false);
        }
        else {
        }
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsionicAssault_Init () {
    gt_PsionicAssault = TriggerCreate("gt_PsionicAssault_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Killed
//--------------------------------------------------------------------------------------------------
bool gt_HybridKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_activeHybrid, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyAllHybridUpdate, true, false);
    if (((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p02_DOMINION_RED) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p03_DOMINION_YELLOW) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p04_DOMINION_GREEN) || (UnitHasBehavior(libNtve_gf_KillingUnit(), "NPSwarm") == true) || ((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER) && (UnitGetType(libNtve_gf_KillingUnit()) == "AutoTurret")))) {
        gv_achievementHybridKilledByTerrans += 1;
        TriggerExecute(gt_AchievementKillHybridWithTerransH, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_activeHybrid, c_unitCountAlive) == 0)) {
        TriggerStop(gt_PsionicAssault);
        TransmissionClear(gv_psionicAssaultFailureWarningTransmission);
        TimerPause(gv_channelTimer, true);
        TimerWindowShow(gv_psionicAssaultTimerWindow, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridKilled_Init () {
    gt_HybridKilled = TriggerCreate("gt_HybridKilled_Func");
    TriggerAddEventUnitDied(gt_HybridKilled, UnitRefFromVariable("gv_hybridUnitArray[1]"));
    TriggerAddEventUnitDied(gt_HybridKilled, UnitRefFromVariable("gv_hybridUnitArray[2]"));
    TriggerAddEventUnitDied(gt_HybridKilled, UnitRefFromVariable("gv_hybridUnitArray[3]"));
    TriggerAddEventUnitDied(gt_HybridKilled, UnitRefFromVariable("gv_hybridUnitArray[4]"));
    TriggerAddEventUnitDied(gt_HybridKilled, UnitRefFromVariable("gv_hybridUnitArray[5]"));
    TriggerAddEventUnitDied(gt_HybridKilled, UnitRefFromVariable("gv_hybridUnitArray[6]"));
    TriggerAddEventUnitDied(gt_HybridKilled, UnitRefFromVariable("gv_hybridUnitArray[7]"));
    TriggerAddEventUnitDied(gt_HybridKilled, UnitRefFromVariable("gv_hybridUnitArray[8]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Drained
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDrained_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_PsionicAssault);
    TransmissionClear(gv_psionicAssaultFailureWarningTransmission);
    TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDrained_Init () {
    gt_KerriganDrained = TriggerCreate("gt_KerriganDrained_Func");
    TriggerAddEventTimer(gt_KerriganDrained, gv_channelTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psionic Assault Effects
//--------------------------------------------------------------------------------------------------
bool gt_PsionicAssaultEffects_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_activeHybrid, c_unitCountAlive) >= 1)) {
        if ((UnitIsAlive(gv_kerrigan) == true) && (UnitHasBehavior(gv_kerrigan, "HybridEnergyDrainImpact") == false)) {
            UnitBehaviorAddPlayer(gv_kerrigan, "HybridEnergyDrainImpact", gv_pLAYER_02_DOMINION2, 1);
        }
        else {
        }
        UnitGroupLoopBegin(gv_activeHybrid);
        while (!UnitGroupLoopDone()) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "HybridEnergyDrainCast") == false)) {
                UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "HybridEnergyDrainCast", gv_pLAYER_02_DOMINION2, 1);
                SoundPlayOnUnit(SoundLink("Hybrid_Link_on", -1), PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
        if ((UnitIsAlive(gv_kerrigan) == true) && (UnitHasBehavior(gv_kerrigan, "HybridEnergyDrainImpact") == true)) {
            UnitBehaviorRemove(gv_kerrigan, "HybridEnergyDrainImpact", 1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsionicAssaultEffects_Init () {
    gt_PsionicAssaultEffects = TriggerCreate("gt_PsionicAssaultEffects_Func");
    TriggerAddEventTimePeriodic(gt_PsionicAssaultEffects, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Hybrid 02 & 03 & 04
//--------------------------------------------------------------------------------------------------
bool gt_RevealHybrid020304_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionHybridLocationsQ, true, true);
    Wait(1.0, c_timeReal);
    if ((gf_HybridRevealed(2) == false)) {
        gf_RevealHybridCell(2);
        Wait(2.5, c_timeReal);
    }
    else {
    }
    if ((gf_HybridRevealed(3) == false)) {
        gf_RevealHybridCell(3);
        Wait(2.5, c_timeReal);
    }
    else {
    }
    if ((gf_HybridRevealed(4) == false)) {
        gf_RevealHybridCell(4);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealHybrid020304_Init () {
    gt_RevealHybrid020304 = TriggerCreate("gt_RevealHybrid020304_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid Locations Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridLocationsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00116", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00142", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00005", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridLocationsQ_Init () {
    gt_TransmissionHybridLocationsQ = TriggerCreate("gt_TransmissionHybridLocationsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Hybrid 05 & 06
//--------------------------------------------------------------------------------------------------
bool gt_RevealHybrid0506_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionMoreHybridDetectedQ, true, true);
    if ((gf_HybridRevealed(5) == false)) {
        gf_RevealHybridCell(5);
        Wait(2.5, c_timeGame);
    }
    else {
    }
    if ((gf_HybridRevealed(6) == false)) {
        gf_RevealHybridCell(6);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealHybrid0506_Init () {
    gt_RevealHybrid0506 = TriggerCreate("gt_RevealHybrid0506_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: More Hybrid Detected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMoreHybridDetectedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00136", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMoreHybridDetectedQ_Init () {
    gt_TransmissionMoreHybridDetectedQ = TriggerCreate("gt_TransmissionMoreHybridDetectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Hybrid 07 & 08 (Enter Region)
//--------------------------------------------------------------------------------------------------
bool gt_RevealHybrid0708EnterRegion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!(((gf_HybridRevealed(7) == false) || (gf_HybridRevealed(8) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_RevealHybrid0708, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealHybrid0708EnterRegion_Init () {
    gt_RevealHybrid0708EnterRegion = TriggerCreate("gt_RevealHybrid0708EnterRegion_Func");
    TriggerAddEventUnitRegion(gt_RevealHybrid0708EnterRegion, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Hybrid 07 & 08
//--------------------------------------------------------------------------------------------------
bool gt_RevealHybrid0708_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_HybridRevealed(7) == false) && (gf_HybridRevealed(8) == false)) {
        TriggerExecute(gt_TransmissionLastHybridDetectedQ, true, true);
    }
    else {
        TriggerExecute(gt_TransmissionMoreHybridDetectedQ, true, true);
    }
    if ((gf_HybridRevealed(7) == false)) {
        gf_RevealHybridCell(7);
        Wait(2.5, c_timeGame);
    }
    else {
    }
    if ((gf_HybridRevealed(8) == false)) {
        gf_RevealHybridCell(8);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealHybrid0708_Init () {
    gt_RevealHybrid0708 = TriggerCreate("gt_RevealHybrid0708_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Last Hybrid Detected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLastHybridDetectedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00152", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLastHybridDetectedQ_Init () {
    gt_TransmissionLastHybridDetectedQ = TriggerCreate("gt_TransmissionLastHybridDetectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Hybrid 02
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseHybrid02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_channelTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_activeHybrid, c_unitCountAlive) > 0)) {
        Wait(gv_hybridReleaseDelay, c_timeAI);
    }
    else {
    }
    Wait(15.0, c_timeAI);
    if ((gf_HybridReleased(2) == true)) {
        gf_TurnNextHybridCellOn();
        return true;
    }
    else {
    }
    gf_ReleaseHybrid(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseHybrid02_Init () {
    gt_ReleaseHybrid02 = TriggerCreate("gt_ReleaseHybrid02_Func");
    TriggerAddEventTimer(gt_ReleaseHybrid02, gv_hybridReleaseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid 02 Released Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybrid02ReleasedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00044", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00154", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybrid02ReleasedQ_Init () {
    gt_TransmissionHybrid02ReleasedQ = TriggerCreate("gt_TransmissionHybrid02ReleasedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Hybrid 03
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseHybrid03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_activeHybrid, c_unitCountAlive) > 0)) {
        Wait(gv_hybridReleaseDelay, c_timeAI);
    }
    else {
    }
    Wait(15.0, c_timeAI);
    if ((gf_HybridReleased(3) == true)) {
        gf_TurnNextHybridCellOn();
        return true;
    }
    else {
    }
    gf_ReleaseHybrid(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseHybrid03_Init () {
    gt_ReleaseHybrid03 = TriggerCreate("gt_ReleaseHybrid03_Func");
    TriggerEnable(gt_ReleaseHybrid03, false);
    TriggerAddEventTimer(gt_ReleaseHybrid03, gv_hybridReleaseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid 03 Released Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybrid03ReleasedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00157", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybrid03ReleasedQ_Init () {
    gt_TransmissionHybrid03ReleasedQ = TriggerCreate("gt_TransmissionHybrid03ReleasedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Hybrid 04
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseHybrid04_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_activeHybrid, c_unitCountAlive) > 0)) {
        Wait(gv_hybridReleaseDelay, c_timeAI);
    }
    else {
    }
    Wait(15.0, c_timeAI);
    if ((gf_HybridReleased(4) == true)) {
        gf_TurnNextHybridCellOn();
        return true;
    }
    else {
    }
    gf_ReleaseHybrid(4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseHybrid04_Init () {
    gt_ReleaseHybrid04 = TriggerCreate("gt_ReleaseHybrid04_Func");
    TriggerEnable(gt_ReleaseHybrid04, false);
    TriggerAddEventTimer(gt_ReleaseHybrid04, gv_hybridReleaseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid 04 Released Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybrid04ReleasedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00135", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00022", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybrid04ReleasedQ_Init () {
    gt_TransmissionHybrid04ReleasedQ = TriggerCreate("gt_TransmissionHybrid04ReleasedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Hybrid 05
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseHybrid05_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_activeHybrid, c_unitCountAlive) > 0)) {
        Wait(gv_hybridReleaseDelay, c_timeAI);
    }
    else {
    }
    Wait(15.0, c_timeAI);
    if ((gf_HybridReleased(5) == true)) {
        gf_TurnNextHybridCellOn();
        return true;
    }
    else {
    }
    gf_ReleaseHybrid(5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseHybrid05_Init () {
    gt_ReleaseHybrid05 = TriggerCreate("gt_ReleaseHybrid05_Func");
    TriggerEnable(gt_ReleaseHybrid05, false);
    TriggerAddEventTimer(gt_ReleaseHybrid05, gv_hybridReleaseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid 05  Released Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybrid05ReleasedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00156", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybrid05ReleasedQ_Init () {
    gt_TransmissionHybrid05ReleasedQ = TriggerCreate("gt_TransmissionHybrid05ReleasedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Hybrid 06
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseHybrid06_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_activeHybrid, c_unitCountAlive) > 0)) {
        Wait(gv_hybridReleaseDelay, c_timeAI);
    }
    else {
    }
    Wait(15.0, c_timeAI);
    if ((gf_HybridReleased(6) == true)) {
        gf_TurnNextHybridCellOn();
        return true;
    }
    else {
    }
    gf_ReleaseHybrid(6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseHybrid06_Init () {
    gt_ReleaseHybrid06 = TriggerCreate("gt_ReleaseHybrid06_Func");
    TriggerEnable(gt_ReleaseHybrid06, false);
    TriggerAddEventTimer(gt_ReleaseHybrid06, gv_hybridReleaseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid 06 Released Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybrid06ReleasedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00137", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00016", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybrid06ReleasedQ_Init () {
    gt_TransmissionHybrid06ReleasedQ = TriggerCreate("gt_TransmissionHybrid06ReleasedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Hybrid 07 & 08
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseHybrid0708_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_activeHybrid, c_unitCountAlive) > 0)) {
        Wait(gv_hybridReleaseDelay, c_timeAI);
    }
    else {
    }
    Wait(15.0, c_timeAI);
    if ((gf_HybridReleased(7) == true) && (gf_HybridReleased(8) == true)) {
        gf_TurnNextHybridCellOn();
        return true;
    }
    else {
    }
    gf_ReleaseHybrid(7);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseHybrid0708_Init () {
    gt_ReleaseHybrid0708 = TriggerCreate("gt_ReleaseHybrid0708_Func");
    TriggerEnable(gt_ReleaseHybrid0708, false);
    TriggerAddEventTimer(gt_ReleaseHybrid0708, gv_hybridReleaseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid 07 and 08 Released Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybrid07and08ReleasedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00021", c_transmissionDurationAdd, 0.0, true, 1, 0);
    if ((gv_objectiveDestroyHybridCount >= 6)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00153", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybrid07and08ReleasedQ_Init () {
    gt_TransmissionHybrid07and08ReleasedQ = TriggerCreate("gt_TransmissionHybrid07and08ReleasedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hybrid 07 or 08 Released Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybrid07or08ReleasedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00156", c_transmissionDurationAdd, 0.0, true, 1, 0);
    if ((gv_objectiveDestroyHybridCount >= 6)) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00153", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybrid07or08ReleasedQ_Init () {
    gt_TransmissionHybrid07or08ReleasedQ = TriggerCreate("gt_TransmissionHybrid07or08ReleasedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Cell Broken
//--------------------------------------------------------------------------------------------------
bool gt_HybridCellBroken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_cellIndex;

    // Variable Initialization
    lv_index = 0;
    lv_cellIndex = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cellIndex = gf_HybridCellIndex(EventUnit());
    if (((lv_cellIndex <= 0) || (gf_HybridReleased(lv_cellIndex) == true))) {
        return true;
    }
    else {
    }
    gf_ReleaseHybrid(lv_cellIndex);
    gf_TurnNextHybridCellOn();
    if ((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1)) {
        gv_achievementHybridReleasedCounter += 1;
        if ((gv_achievementHybridReleasedCounter == 3)) {
            TriggerExecute(gt_AchievementRelease3HybridNH, true, false);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCellBroken_Init () {
    gt_HybridCellBroken = TriggerCreate("gt_HybridCellBroken_Func");
    TriggerAddEventUnitDied(gt_HybridCellBroken, UnitRefFromVariable("gv_hybridCellArray[2]"));
    TriggerAddEventUnitDied(gt_HybridCellBroken, UnitRefFromVariable("gv_hybridCellArray[3]"));
    TriggerAddEventUnitDied(gt_HybridCellBroken, UnitRefFromVariable("gv_hybridCellArray[4]"));
    TriggerAddEventUnitDied(gt_HybridCellBroken, UnitRefFromVariable("gv_hybridCellArray[5]"));
    TriggerAddEventUnitDied(gt_HybridCellBroken, UnitRefFromVariable("gv_hybridCellArray[6]"));
    TriggerAddEventUnitDied(gt_HybridCellBroken, UnitRefFromVariable("gv_hybridCellArray[7]"));
    TriggerAddEventUnitDied(gt_HybridCellBroken, UnitRefFromVariable("gv_hybridCellArray[8]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Hybrid Slain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstHybridSlainQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00140", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(60.0, 6);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(5), 90.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstHybridSlainQ_Init () {
    gt_TransmissionFirstHybridSlainQ = TriggerCreate("gt_TransmissionFirstHybridSlainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Two Hybrid Slain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTwoHybridSlainQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00143", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTwoHybridSlainQ_Init () {
    gt_TransmissionTwoHybridSlainQ = TriggerCreate("gt_TransmissionTwoHybridSlainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Three Hybrid Slain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionThreeHybridSlainQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00148", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionThreeHybridSlainQ_Init () {
    gt_TransmissionThreeHybridSlainQ = TriggerCreate("gt_TransmissionThreeHybridSlainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Four Hybrid Slain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFourHybridSlainQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00009", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00149", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFourHybridSlainQ_Init () {
    gt_TransmissionFourHybridSlainQ = TriggerCreate("gt_TransmissionFourHybridSlainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Six Hybrid Slain Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSixHybridSlainQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00017", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid02|Line00024", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSixHybridSlainQ_Init () {
    gt_TransmissionSixHybridSlainQ = TriggerCreate("gt_TransmissionSixHybridSlainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Failure Soon Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFailureSoonQ_Func (bool testConds, bool runActions) {
    int autoE9361FAC_val;

    // Variable Declarations
    int lv_runcount;

    // Variable Initialization
    lv_runcount = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_runcount = TriggerGetExecCount(TriggerGetCurrent());
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    autoE9361FAC_val = ModI(lv_runcount, 4);
    if (autoE9361FAC_val == 0) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00127", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_psionicAssaultFailureWarningTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else if (autoE9361FAC_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00130", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_psionicAssaultFailureWarningTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else if (autoE9361FAC_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00131", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_psionicAssaultFailureWarningTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else if (autoE9361FAC_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid02|Line00133", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_psionicAssaultFailureWarningTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFailureSoonQ_Init () {
    gt_TransmissionFailureSoonQ = TriggerCreate("gt_TransmissionFailureSoonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Failure Imminent Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFailureImminentQ_Func (bool testConds, bool runActions) {
    int autoB59A6D40_val;

    // Variable Declarations
    int lv_runcount;

    // Variable Initialization
    lv_runcount = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_runcount = TriggerGetExecCount(TriggerGetCurrent());
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    autoB59A6D40_val = ModI(lv_runcount, 3);
    if (autoB59A6D40_val == 0) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00134", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_psionicAssaultFailureWarningTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else if (autoB59A6D40_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00129", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_psionicAssaultFailureWarningTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else if (autoB59A6D40_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid02|Line00126", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_psionicAssaultFailureWarningTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFailureImminentQ_Init () {
    gt_TransmissionFailureImminentQ = TriggerCreate("gt_TransmissionFailureImminentQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_p02_DOMINION_RED, RegionFromId(10), true);
    AIToggleBulliesInRegion(gv_p02_DOMINION_RED, RegionFromId(11), true);
    AIToggleBulliesInRegion(gv_p02_DOMINION_RED, RegionFromId(12), true);
    AINearestTownBullyRebuild(gv_p02_DOMINION_RED, true);
    AINearestTownBullyRebuild(gv_p03_DOMINION_YELLOW, true);
    AINearestTownBullyRebuild(gv_p04_DOMINION_GREEN, true);
    cai_startall();
    cai_runall();
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_StartUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_StartUpgradesHard, true, false);
    }
    while (!((libNtve_gf_UnitIsHidden(UnitFromId(400)) == false))) {
        Wait(1.0, c_timeAI);
    }
    AIInitCampaignHarvest(gv_p03_DOMINION_YELLOW);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesNormal_Init () {
    gt_StartUpgradesNormal = TriggerCreate("gt_StartUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel3", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 10000);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Bullies By Hybrid 04
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffBulliesByHybrid04_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_DOMINION_RED, RegionFromId(10), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_p02_DOMINION_RED, RegionFromId(10), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffBulliesByHybrid04_Init () {
    gt_TurnoffBulliesByHybrid04 = TriggerCreate("gt_TurnoffBulliesByHybrid04_Func");
    TriggerAddEventTimePeriodic(gt_TurnoffBulliesByHybrid04, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Bullies By Hybrid 05
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffBulliesByHybrid05_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_DOMINION_RED, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_p02_DOMINION_RED, RegionFromId(11), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffBulliesByHybrid05_Init () {
    gt_TurnoffBulliesByHybrid05 = TriggerCreate("gt_TurnoffBulliesByHybrid05_Func");
    TriggerAddEventTimePeriodic(gt_TurnoffBulliesByHybrid05, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Bullies By Hybrid 06
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffBulliesByHybrid06_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_DOMINION_RED, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_p02_DOMINION_RED, RegionFromId(12), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffBulliesByHybrid06_Init () {
    gt_TurnoffBulliesByHybrid06 = TriggerCreate("gt_TurnoffBulliesByHybrid06_Func");
    TriggerAddEventTimePeriodic(gt_TurnoffBulliesByHybrid06, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Attack
//--------------------------------------------------------------------------------------------------
bool gt_HybridAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexHybrid;

    // Variable Initialization
    lv_indexHybrid = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexHybrid = gf_HybridIndex(EventUnitTarget());
    if ((lv_indexHybrid > 0)) {
        if ((gv_aIHybridAttacker[lv_indexHybrid] == null)) {
            gv_aIHybridAttacker[lv_indexHybrid] = EventUnit();
        }
        else {
        }
    }
    else {
        lv_indexHybrid = gf_HybridIndex(EventUnit());
    }
    if ((lv_indexHybrid > 0)) {
        gv_aIHybridAttackIndex[lv_indexHybrid] = 5;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAttack_Init () {
    gt_HybridAttack = TriggerCreate("gt_HybridAttack_Func");
    TriggerAddEventUnitAttacked2(gt_HybridAttack, null, "ZHybrid");
    TriggerAddEventUnitAttacked2(gt_HybridAttack, UnitRefFromVariable("gv_hybridUnitArray[1]"), null);
    TriggerAddEventUnitAttacked2(gt_HybridAttack, UnitRefFromVariable("gv_hybridUnitArray[2]"), null);
    TriggerAddEventUnitAttacked2(gt_HybridAttack, UnitRefFromVariable("gv_hybridUnitArray[3]"), null);
    TriggerAddEventUnitAttacked2(gt_HybridAttack, UnitRefFromVariable("gv_hybridUnitArray[4]"), null);
    TriggerAddEventUnitAttacked2(gt_HybridAttack, UnitRefFromVariable("gv_hybridUnitArray[5]"), null);
    TriggerAddEventUnitAttacked2(gt_HybridAttack, UnitRefFromVariable("gv_hybridUnitArray[6]"), null);
    TriggerAddEventUnitAttacked2(gt_HybridAttack, UnitRefFromVariable("gv_hybridUnitArray[7]"), null);
    TriggerAddEventUnitAttacked2(gt_HybridAttack, UnitRefFromVariable("gv_hybridUnitArray[8]"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Attack Diminish
//--------------------------------------------------------------------------------------------------
bool gt_HybridAttackDiminish_Func (bool testConds, bool runActions) {
    int auto3FC1C709_ae;
    int auto3FC1C709_ai;

    // Variable Declarations
    int lv_indexHybrid;

    // Variable Initialization
    lv_indexHybrid = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3FC1C709_ae = 8;
    auto3FC1C709_ai = 1;
    lv_indexHybrid = 1;
    while ((auto3FC1C709_ai >= 0 && lv_indexHybrid <= auto3FC1C709_ae) || (auto3FC1C709_ai <= 0 && lv_indexHybrid >= auto3FC1C709_ae)) {
        if ((gv_aIHybridAttackIndex[lv_indexHybrid] > 0)) {
            gv_aIHybridAttackIndex[lv_indexHybrid] -= 1;
        }
        else {
        }
        if ((gv_aIHybridAttackIndex[lv_indexHybrid] == 0)) {
            gv_aIHybridAttacker[lv_indexHybrid] = null;
        }
        else {
        }
        if (lv_indexHybrid == auto3FC1C709_ae) {
            break;
        }
        lv_indexHybrid = lv_indexHybrid + auto3FC1C709_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAttackDiminish_Init () {
    gt_HybridAttackDiminish = TriggerCreate("gt_HybridAttackDiminish_Func");
    TriggerAddEventTimePeriodic(gt_HybridAttackDiminish, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/75E4842B"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, true);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_kerrigan), 0.0, -1, 10.0, false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    UnitCreateEffectPoint(gv_kerrigan, "EnergyNovaPersistent", UnitGetPosition(gv_kerrigan));
    TriggerEnable(gt_HandleKerriganDeath, false);
    UnitKill(gv_kerrigan);
    TriggerExecute(gt_ObjectiveDestroyAllHybridFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/6606CB90"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Hybrid Destroyed Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryHybridDestroyedComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryHybridDestroyedComplete_Init () {
    gt_VictoryHybridDestroyedComplete = TriggerCreate("gt_VictoryHybridDestroyedComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    UnitSetState(gv_kerrigan, c_unitStateInvulnerable, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyAllHybridComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libSwaC_gf_MissionObjectiveStateCheck("ZHybrid02Objective01", 2) == true)) {
        libSwaC_gf_CampaignAwardAchievement("ZHybrid02_1", gv_pLAYER_01_USER);
    }
    else {
    }
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BA7767DF"), IntToText(gv_statKerriganKills));
    TextExpressionSetToken("Param/Expression/9463D368", "CommandCentersDestroyed", IntToText(gv_achievementDestroyCommandCentersCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/13217C08"), TextExpressionAssemble("Param/Expression/9463D368"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/712EDDAB"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/830E7305"), IntToText(gv_statMaxArmy));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/735B0AB8"), IntToText(gv_statZergKilledByHybrid));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/791D6786"), IntToText(gv_achievementHybridKilledByTerrans));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/9D8587D8"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy Command Centers
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyCommandCenters_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementDestroyCommandCentersCount += 1;
    if ((gv_achievementDestroyCommandCentersCount >= 2)) {
        libSwaC_gf_CampaignAwardAchievement("ZHybrid02_2", gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyCommandCenters_Init () {
    gt_AchievementDestroyCommandCenters = TriggerCreate("gt_AchievementDestroyCommandCenters_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroyCommandCenters, UnitRefFromUnit(UnitFromId(400)));
    TriggerAddEventUnitDied(gt_AchievementDestroyCommandCenters, UnitRefFromUnit(UnitFromId(813)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Release 3 Hybrid N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementRelease3HybridNH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CampaignAwardAchievement("ZHybrid02_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementRelease3HybridNH_Init () {
    gt_AchievementRelease3HybridNH = TriggerCreate("gt_AchievementRelease3HybridNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Kill Hybrid With Terrans H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKillHybridWithTerransH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_achievementHybridKilledByTerrans == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libSwaC_gf_CampaignAwardAchievement("Mastery_Hybrid2", gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKillHybridWithTerransH_Init () {
    gt_AchievementKillHybridWithTerransH = TriggerCreate("gt_AchievementKillHybridWithTerransH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statistic: Max Army
//--------------------------------------------------------------------------------------------------
bool gt_StatisticMaxArmy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount") > gv_statMaxArmy)) {
        gv_statMaxArmy = PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatisticMaxArmy_Init () {
    gt_StatisticMaxArmy = TriggerCreate("gt_StatisticMaxArmy_Func");
    TriggerAddEventTimePeriodic(gt_StatisticMaxArmy, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statistic: Zerg Killed by Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_StatisticZergKilledbyHybrid_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statZergKilledByHybrid += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatisticZergKilledbyHybrid_Init () {
    gt_StatisticZergKilledbyHybrid = TriggerCreate("gt_StatisticZergKilledbyHybrid_Func");
    TriggerAddEventUnitDied(gt_StatisticZergKilledbyHybrid, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Hybrid Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllHybridCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid02Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    libSwaC_gf_UpdateMissionObjectiveText("ZHybrid02Objective01", (gv_objectiveDestroyHybridQuota - gv_objectiveDestroyHybridCount), false, StringExternal("Param/Value/1FC1ABF5"));
    Wait(1.0, c_timeReal);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid02Objective03");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllHybridCreate_Init () {
    gt_ObjectiveDestroyAllHybridCreate = TriggerCreate("gt_ObjectiveDestroyAllHybridCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Hybrid Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllHybridUpdate_Func (bool testConds, bool runActions) {
    int auto47408EB3_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyAllHybridCreate, true, false);
    SoundPlay(SoundLink("Alert_UniObjectiveUpdate", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_objectiveDestroyHybridCount += 1;
    libSwaC_gf_UpdateMissionObjectiveText("ZHybrid02Objective01", (gv_objectiveDestroyHybridQuota - gv_objectiveDestroyHybridCount), false, StringExternal("Param/Value/76A40363"));
    auto47408EB3_val = gv_objectiveDestroyHybridCount;
    if (auto47408EB3_val == 1) {
        Wait(2.0, c_timeReal);
        TriggerExecute(gt_TransmissionFirstHybridSlainQ, true, true);
        Wait(2.0, c_timeReal);
        gf_RevealNextHybridCell();
    }
    else if (auto47408EB3_val == 2) {
        Wait(2.0, c_timeReal);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/69499E12"));
        TriggerExecute(gt_TransmissionTwoHybridSlainQ, true, true);
    }
    else if (auto47408EB3_val == 3) {
        Wait(2.0, c_timeReal);
        TriggerExecute(gt_TransmissionThreeHybridSlainQ, true, true);
    }
    else if (auto47408EB3_val == 4) {
        Wait(2.0, c_timeReal);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/5451ABBF"));
        TriggerExecute(gt_TransmissionFourHybridSlainQ, true, true);
        Wait(2.0, c_timeReal);
        gf_RevealNextHybridCell();
    }
    else if (auto47408EB3_val == 6) {
        Wait(2.0, c_timeReal);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/131CB97C"));
        TriggerExecute(gt_TransmissionSixHybridSlainQ, true, true);
        Wait(2.0, c_timeReal);
        gf_RevealNextHybridCell();
    }
    else {
    }
    if ((gv_objectiveDestroyHybridCount >= gv_objectiveDestroyHybridQuota)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictoryHybridDestroyedComplete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllHybridUpdate_Init () {
    gt_ObjectiveDestroyAllHybridUpdate = TriggerCreate("gt_ObjectiveDestroyAllHybridUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Hybrid Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllHybridComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyAllHybridCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid02Objective01", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid02Objective03", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllHybridComplete_Init () {
    gt_ObjectiveDestroyAllHybridComplete = TriggerCreate("gt_ObjectiveDestroyAllHybridComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Hybrid Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllHybridFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyAllHybridCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase, c_objectiveStateFailed);
    ObjectiveSetState(gv_objectiveDestroyDominionBase2, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllHybridFailed_Init () {
    gt_ObjectiveDestroyAllHybridFailed = TriggerCreate("gt_ObjectiveDestroyAllHybridFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Brutalisk Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillProtossCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid02Objective02");
    gv_objectiveRescueBrutalisks = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid02Objective02", gv_objectiveRescueBrutalisksCount, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillProtossCreate_Init () {
    gt_ObjectiveKillProtossCreate = TriggerCreate("gt_ObjectiveKillProtossCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Brutalisk Proximity Reveal 01
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueBrutaliskProximityReveal01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_IntroBrutaliskObjective, true, true);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(409)), StringExternal("Param/Value/74772B8F"));
    libHots_gf_StorePingForUnit(UnitFromId(409), 1, PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueBrutaliskProximityReveal01_Init () {
    gt_ObjectiveRescueBrutaliskProximityReveal01 = TriggerCreate("gt_ObjectiveRescueBrutaliskProximityReveal01_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveRescueBrutaliskProximityReveal01, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Brutalisk Proximity Reveal 02
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueBrutaliskProximityReveal02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_IntroBrutaliskObjective, true, true);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(437)), StringExternal("Param/Value/D09C5B9E"));
    libHots_gf_StorePingForUnit(UnitFromId(437), 1, PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueBrutaliskProximityReveal02_Init () {
    gt_ObjectiveRescueBrutaliskProximityReveal02 = TriggerCreate("gt_ObjectiveRescueBrutaliskProximityReveal02_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveRescueBrutaliskProximityReveal02, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Brutalisk Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueBrutaliskUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveRescueBrutalisksCount += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid02Objective02", gv_objectiveRescueBrutalisksCount, true, null, true);
    if ((gv_objectiveRescueBrutalisksCount >= gv_objectiveRescueBrutalisksQuota)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveRescueBrutaliskComplete, true, false);
    }
    else {
    }
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_TransmissionBrutaliskRescueQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueBrutaliskUpdate_Init () {
    gt_ObjectiveRescueBrutaliskUpdate = TriggerCreate("gt_ObjectiveRescueBrutaliskUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Brutalisk Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueBrutaliskComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillProtossCreate, true, false);
    ObjectiveSetState(gv_objectiveRescueBrutalisks, c_objectiveStateCompleted);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueBrutaliskComplete_Init () {
    gt_ObjectiveRescueBrutaliskComplete = TriggerCreate("gt_ObjectiveRescueBrutaliskComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(29));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p02_DOMINION_RED, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicTempUnits);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_introMinerals = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introGas = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    CreepModify(PointFromId(2), 30.0, false, false);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    libNtve_gf_SetAlliance(gv_p02_DOMINION_RED, gv_pLAYER_02_DOMINION2, 7);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(77), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(312), 5.0, -1, 10.0, true);
    UnitCreate(1, "HybridDominator", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(78), UnitGetFacing(gv_hybridCellArray[1]));
    gv_introHybrid = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introHybrid);
    libNtve_gf_PauseUnit(gv_introHybrid, true);
    libNtve_gf_ShowHideUnit(gv_introHybrid, false);
    libNtve_gf_PauseUnit(gv_hybridCellArray[1], false);
    libNtve_gf_PauseUnit(UnitFromId(742), false);
    libNtve_gf_PauseUnit(UnitFromId(859), false);
    UnitIssueOrder(UnitFromId(742), Order(AbilityCommand("HybridSecurityWallRightLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(859), Order(AbilityCommand("HybridSecurityWallRightLowered", 0)), c_orderQueueReplace);
    TriggerExecute(gt_IntroZerg, true, false);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundPlay(SoundLink("Hybrid02_CS_Open", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introZergSounds = SoundLastPlayed();
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introAlarm = SoundLastPlayed();
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    while (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(PointFromId(1348), 1.0)) == true))) {
        Wait(0.5, c_timeGame);
    }
    while (!((UnitGroupCount(UnitGroup("Marine", gv_p02_DOMINION_RED, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Hybrid02|Line00026", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(341), 0.0, -1, 10.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1349), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid02|Line00045", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid02|Line00046", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid02|Line00045", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid02|Line00046", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    libNtve_gf_SetAlliance(gv_p02_DOMINION_RED, gv_pLAYER_02_DOMINION2, 5);
    UnitIssueOrder(gv_hybridCellArray[1], OrderTargetingPoint(AbilityCommand("HybridRelease", 0), PointFromId(78)), c_orderQueueReplace);
    while (!((gv_introHybridReleased == true))) {
        Wait(0.0625, c_timeGame);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(908), 3.0, -1, 10.0, true);
    Wait(1.4, c_timeGame);
    libNtve_gf_PauseUnit(gv_introHybrid, false);
    libNtve_gf_ShowHideUnit(gv_introHybrid, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION_RED, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("move", 4), gv_introHybrid), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, 1.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(gv_introHybrid, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(23))), c_orderQueueReplace);
    UnitIssueOrder(gv_introHybrid, Order(AbilityCommand("ZHybridPsionicShockwave", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introHybrid, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(11)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introHybrid, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(1.5, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 3.0);
    Wait(2.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(909), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid02|Line00039", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Hybrid02|Line00039", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitBehaviorAdd(gv_introHybrid, "HybridEnergyDrainCast", gv_introHybrid, 1);
    SoundPlayOnUnit(SoundLink("Hybrid_Link_on", -1), PlayerGroupAll(), gv_introHybrid, 0.0, 100.0, 0.0);
    gv_introHybridSound = SoundLastPlayed();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introHybrid), c_animNameDefault, "Stand Work", 0, 0.5);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Spell A", 0, c_animTimeDefault);
    Wait(1.0, c_timeReal);
    UnitSetPosition(gv_kerrigan, PointFromId(782), false);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(782)), 0.0);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorAddPlayer(gv_kerrigan, "HybridEnergyDrainImpact", gv_pLAYER_02_DOMINION2, 1);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(801), 0.0, -1, 10.0, true);
    CameraShake(gv_pLAYER_01_USER, "Medium", "SubtleMove", 1.0, 1.0, 5.0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Hybrid02|Line00048", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid02|Line00047", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Hybrid02|Line00044", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(909), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid02|Line00043", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    point lv_tempPoint;

    // Variable Initialization
    lv_fadeDuration = 1.5;
    lv_tempPoint = null;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroZerg);
    SoundStop(gv_introAlarm, true);
    SoundStop(gv_introZergSounds, true);
    SoundStop(gv_introHybridSound, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    if ((gv_cinematicCompleted == false) && (gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(UnitFromId(19), true);
    libNtve_gf_PauseUnit(UnitFromId(99), true);
    UnitSetPosition(gv_kerrigan, PointFromId(3), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(3)), 0.0);
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault);
    Wait(0.1, c_timeGame);
    CreepModify(PointFromId(1223), 40.0, false, false);
    UnitGroupLoopBegin(UnitGroup("CreepTumorUsed", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Larva", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.1, c_timeGame);
    gf_CreateCreepinRegion(RegionFromId(45));
    gf_CreateCreepinRegion(RegionFromId(42));
    gf_CreateCreepinRegion(RegionFromId(46));
    gf_CreateCreepinRegion(RegionFromId(47));
    gf_CreateCreepinRegion(RegionFromId(48));
    gf_CreateCreepinRegion(RegionFromId(49));
    gf_CreateCreepinRegion(RegionFromId(50));
    gf_CreateCreepinRegion(RegionFromId(51));
    gf_CreateCreepinRegion(RegionFromId(53));
    gf_CreateCreepinRegion(RegionFromId(54));
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitFromId(18), true);
    libSwaC_gf_SpawnLarvaForHatchery(UnitFromId(18), 3);
    UnitBehaviorAddPlayer(UnitFromId(29), "HybridEnergyDrainCast", gv_pLAYER_02_DOMINION2, 1);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas);
    TriggerExecute(gt_PerformanceHandler, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    libNtve_gf_SetAlliance(gv_p02_DOMINION_RED, gv_pLAYER_02_DOMINION2, 5);
    gf_MakeHybridCellNonInteractive(1);
    UnitIssueOrder(gv_hybridCellArray[1], OrderTargetingPoint(AbilityCommand("HybridRelease", 0), PointFromId(78)), c_orderQueueReplace);
    gf_ScriptedAttackGroup(RegionFromId(3), RegionFromId(2));
    gf_ScriptedAttackGroup(RegionFromId(5), RegionFromId(7));
    gf_ScriptedAttackGroup(RegionFromId(17), RegionFromId(16));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_01_USER, PointFromId(691));
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(64)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerg_Func (bool testConds, bool runActions) {
    int autoC233F0BB_n;
    int autoC233F0BB_i;
    int auto63130BB8_n;
    int auto63130BB8_i;

    // Variable Declarations
    unitgroup lv_introZerg;

    // Variable Initialization
    lv_introZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateCreepinRegion(RegionFromId(49));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, 0, PointFromId(463));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, 0, PointFromId(332));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, 0, PointFromId(464));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    autoC233F0BB_n = 5;
    autoC233F0BB_i = 1;
    while (autoC233F0BB_i <= autoC233F0BB_n) {
        UnitCreate(1, "Marine", 0, gv_p02_DOMINION_RED, RegionRandomPoint(RegionFromId(56)), 135.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        autoC233F0BB_i = autoC233F0BB_i + 1;
    }
    auto63130BB8_n = 25;
    auto63130BB8_i = 1;
    while (auto63130BB8_i <= auto63130BB8_n) {
        UnitCreate(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(44)), 315.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(56))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(57))), c_orderQueueAddToEnd);
        Wait(0.1, c_timeGame);
        auto63130BB8_i = auto63130BB8_i + 1;
    }
    UnitGroupLoopBegin(UnitGroup("Overlord", gv_pLAYER_01_USER, RegionFromId(58), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 8.0, (UnitGetFacing(UnitGroupLoopCurrent()) + 180.0)), UnitGetPosition(UnitGroupLoopCurrent()));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupLoopCurrent())), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitCreate(1, "Drone", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(44)), 315.0);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), 0, 1);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(913)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(18))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ZergBuild", 0), UnitGetPosition(UnitFromId(18))), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    UnitSetPosition(gv_kerrigan, PointFromId(1347), false);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(1347)), 0.0);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1348)), c_orderQueueReplace);
    while (true) {
        UnitGroupLoopBegin(lv_introZerg);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(57))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerg_Init () {
    gt_IntroZerg = TriggerCreate("gt_IntroZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Hybrid Released Follow
//--------------------------------------------------------------------------------------------------
bool gt_IntroHybridReleasedFollow_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_introHybridReleased = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroHybridReleasedFollow_Init () {
    gt_IntroHybridReleasedFollow = TriggerCreate("gt_IntroHybridReleasedFollow_Func");
    TriggerAddEventUnitAbility(gt_IntroHybridReleasedFollow, null, AbilityCommand("HybridRelease", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZHybrid02MissionIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    Wait(0.1, c_timeGame);
    gv_statKerriganKills = libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent);
    UnitRemove(gv_kerrigan);
    UnitPauseAll(true);
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("HybridHoldingCellSmallUnit", "PlatformConnector", "UmojanLabStasisTubeDestructible2", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1225), 0.0, -1, 10.0, true);
    TriggerExecute(gt_VictoryExplosions, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid02MusicCutscene_MissionVictory", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1224), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid02|Line00023", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    Wait(2.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.25);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00023", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00094", c_transmissionDurationAdd, 0.0, true, 0, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid02|Line00095", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryExplosions);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Explosions
//--------------------------------------------------------------------------------------------------
bool gt_VictoryExplosions_Func (bool testConds, bool runActions) {
    int auto20F24DED_n;
    int auto20F24DED_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(693));
    UnitKill(UnitFromId(639));
    CameraShake(1, "Heavy", "Earthquake", 1.0, 1.0, 4.0);
    auto20F24DED_n = 25;
    auto20F24DED_i = 1;
    while (auto20F24DED_i <= auto20F24DED_n) {
        libNtve_gf_CreateExplosionAtPoint(0, 0, RegionRandomPoint(RegionFromId(61)));
        Wait(0.05, c_timeReal);
        libNtve_gf_CreateExplosionAtPoint(1, 0, RegionRandomPoint(RegionFromId(61)));
        Wait(0.05, c_timeReal);
        libNtve_gf_CreateExplosionAtPoint(1, 0, RegionRandomPoint(RegionFromId(61)));
        Wait(0.05, c_timeReal);
        auto20F24DED_i = auto20F24DED_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryExplosions_Init () {
    gt_VictoryExplosions = TriggerCreate("gt_VictoryExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init03aHybrid_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PerformanceHandler_Init();
    gt_ShowMapCheatUsed_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_HandleKerriganDeath_Init();
    gt_StartGameQ_Init();
    gt_FirstHybridBehavior_Init();
    gt_TransmissionHybridIntroQ_Init();
    gt_IntroBrutaliskObjective_Init();
    gt_TransmissionBrutaliskIntro_Init();
    gt_RescueBrutaliskTop_Init();
    gt_RescueBrutaliskBottom_Init();
    gt_TransmissionBrutaliskRescueQ_Init();
    gt_TransmissionDominionAttackWavesOnlineQ_Init();
    gt_SpawnHybrid_Init();
    gt_Hybrid03PsychicClones_Init();
    gt_Hybrid05PsychicClones_Init();
    gt_Hybrid06PsychicClones_Init();
    gt_Hybrid07PsychicClones_Init();
    gt_Hybrid08PsychicClones_Init();
    gt_PsionicAssault_Init();
    gt_HybridKilled_Init();
    gt_KerriganDrained_Init();
    gt_PsionicAssaultEffects_Init();
    gt_RevealHybrid020304_Init();
    gt_TransmissionHybridLocationsQ_Init();
    gt_RevealHybrid0506_Init();
    gt_TransmissionMoreHybridDetectedQ_Init();
    gt_RevealHybrid0708EnterRegion_Init();
    gt_RevealHybrid0708_Init();
    gt_TransmissionLastHybridDetectedQ_Init();
    gt_ReleaseHybrid02_Init();
    gt_TransmissionHybrid02ReleasedQ_Init();
    gt_ReleaseHybrid03_Init();
    gt_TransmissionHybrid03ReleasedQ_Init();
    gt_ReleaseHybrid04_Init();
    gt_TransmissionHybrid04ReleasedQ_Init();
    gt_ReleaseHybrid05_Init();
    gt_TransmissionHybrid05ReleasedQ_Init();
    gt_ReleaseHybrid06_Init();
    gt_TransmissionHybrid06ReleasedQ_Init();
    gt_ReleaseHybrid0708_Init();
    gt_TransmissionHybrid07and08ReleasedQ_Init();
    gt_TransmissionHybrid07or08ReleasedQ_Init();
    gt_HybridCellBroken_Init();
    gt_TransmissionFirstHybridSlainQ_Init();
    gt_TransmissionTwoHybridSlainQ_Init();
    gt_TransmissionThreeHybridSlainQ_Init();
    gt_TransmissionFourHybridSlainQ_Init();
    gt_TransmissionSixHybridSlainQ_Init();
    gt_TransmissionFailureSoonQ_Init();
    gt_TransmissionFailureImminentQ_Init();
    gt_StartAI_Init();
    gt_StartUpgradesNormal_Init();
    gt_StartUpgradesHard_Init();
    gt_AIGiveResources_Init();
    gt_TurnoffBulliesByHybrid04_Init();
    gt_TurnoffBulliesByHybrid05_Init();
    gt_TurnoffBulliesByHybrid06_Init();
    gt_HybridAttack_Init();
    gt_HybridAttackDiminish_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryHybridDestroyedComplete_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_AchievementDestroyCommandCenters_Init();
    gt_AchievementRelease3HybridNH_Init();
    gt_AchievementKillHybridWithTerransH_Init();
    gt_StatisticMaxArmy_Init();
    gt_StatisticZergKilledbyHybrid_Init();
    gt_ObjectiveDestroyAllHybridCreate_Init();
    gt_ObjectiveDestroyAllHybridUpdate_Init();
    gt_ObjectiveDestroyAllHybridComplete_Init();
    gt_ObjectiveDestroyAllHybridFailed_Init();
    gt_ObjectiveKillProtossCreate_Init();
    gt_ObjectiveRescueBrutaliskProximityReveal01_Init();
    gt_ObjectiveRescueBrutaliskProximityReveal02_Init();
    gt_ObjectiveRescueBrutaliskUpdate_Init();
    gt_ObjectiveRescueBrutaliskComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZerg_Init();
    gt_IntroHybridReleasedFollow_Init();
    gt_IntroMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryExplosions_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
