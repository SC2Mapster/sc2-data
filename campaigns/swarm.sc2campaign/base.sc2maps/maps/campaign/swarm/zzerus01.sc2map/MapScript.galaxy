//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Waking the Ancient
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "TriggerLibs/SwarmCampaignDataHelperLib"
include "ai476031DB"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
    libSCDH_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;
const int gv_pLAYER_02_DOMINION33 = 5;
const int gv_pLAYER_02_DOMINION34 = 6;
const int gv_pLAYER_02_DOMINION35 = 7;
const int gv_pLAYER_02_DOMINION32 = 10;
const int gv_score_Quota_Player = 7;
const int gv_score_Quota_Enemy = 7;
const int gv_sPORE_RAY_MAX_COUNT = 5;
const int gv_qUILLGORCAMPCOUNT_MAX = 15;
const fixed gv_c_CORPSE_LIFEMAX = 60.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_SporeRayPatroller {
    unit lv_sporeRay;
    point[32] lv_patrolRoute;
    int lv_patrolPointCount;
    int lv_currentPatrolPoint;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyPlayers;
unit gv_kerrigan;
unit gv_tHE_ONE_BRAKK;
unit gv_tHE_ONE_DEHAKA;
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unitgroup gv_introMutalisks;
int gv_score_Player;
int gv_score_Enemy;
fixed gv_brakkLife;
int gv_inCombatIndicator;
actor gv_firstQuillgorModel;
bool gv_brakkStartedDefendingMeat;
bool gv_brakkStartedDestroyingMeat;
bool gv_playerHasStartedDraggingMeat;
int gv_feedingPointPing;
bool gv_trainMutaPressed;
int gv_firstHarvesterIndex;
int gv_firstHarvestingWarningPing;
int gv_dehakaEncounterCount;
unit[4] gv_poolEssence;
unit gv_poolEssenceBeingPinged;
unitgroup gv_primalCritterAttackers;
unitgroup gv_primalCritterTargets;
gs_RECORD_SporeRayPatroller[16] gv_sporeRayPatrollers;
int gv_lastCreatedSporeRayIndex;
int gv_quillgorCampCount;
unitgroup[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_quillgorCampCreeps;
region[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_quillgorCampRegions;
point[gv_qUILLGORCAMPCOUNT_MAX + 1][3] gv_quillgorCampReactionGatherPoint;
revealer[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_quillgorCampRevealer;
int[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_quillgorCampHarvestIndex;
bool[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_quillgorCampHarvestedBefore;
bool[16] gv_quillgorCampSpawned;
int[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_quillgorCampCorpseEatenIndex;
bool[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_quillgorCampCorpseHarvestedByDrone;
int[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_meatDialogLabel;
int[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_meatDialogValue;
int[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_meatDialogMax;
int[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_meatDialogProgressBar;
int[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_meatDialogBorder;
unitgroup gv_corpses_All;
unit[16] gv_corpse_PerCamp;
unit gv_firstCorpseHarvested;
bool gv_firstCorpseDrop;
bool[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_corpseRecentlyAttacked;
bool gv_corpseBeingEatenWarningFirstTime;
bool[gv_qUILLGORCAMPCOUNT_MAX + 1] gv_corpseEatenStopping;
unitgroup gv_meats;
unitgroup gv_corpseHarvesters;
bool gv_meatMovedByPlayer;
int[16] gv_corpse_Ping;
int[16] gv_corpse_PingWarning;
unitgroup gv_enemyHarvesters_All;
region[16] gv_quillgorRespawnOrder;
int gv_currentHarvestIndex;
bool gv_aIHarvestFirstWave;
unitgroup[101] gv_aIHarvestGroups;
unitgroup[101] gv_aIHarvestGroupsPeons;
unitgroup[101] gv_aIHarvestGroupsArmy;
int[101] gv_aIHarvestCamps;
bool[101] gv_aIHarvestRetreating;
bool[101] gv_aIHarvestIsReaction;
bool[101] gv_aIHarvestReactionWaveDestroyed;
bool[101] gv_aIHarvestIsReactionToDragging;
int[101] gv_aIHarvestInCombatIndex;
unitgroup gv_aIReactionaryGroups;
int gv_aIHarvestWaveCount;
unitgroup gv_harvesterLeashingGroup;
unit gv_aIHarvesterInCombatAttacker;
int gv_droneBeingAttackedTimes;
bool gv_droneBeingAttackedWarnedMultipleMeat;
bool gv_droneBeingAttackedWarnedSingleMeatFirstTime;
bool gv_droneBeingAttackedBeingWarnedSingleMeat;
int gv_brakk_Ping;
int gv_dronesLostCount;
int gv_kerriganKills;
int gv_primalHivesKilled;
int gv_largestZergForce;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase3;
int gv_objectiveDestroyDominionBase4;
int gv_objectiveDestroyDominionBase5;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicHiddenUnits2;
unitgroup gv_cinematicTempUnits;
sound gv_cinematicStinger1;
unit gv_cinematicBrakk;
unit gv_cinematicTempUnits22;
bool gv_introCinematicCompleted;
unit gv_introBrakk;
unit gv_introQuillgor;
unit gv_introCorpse;
unitgroup gv_introGuardians;
unitgroup gv_introZerglings;
sound gv_introPrimalSound;
bool gv_introMusicCompleted;
bool gv_midMusicCompleted;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;
unit gv_victoryKerrigan;
sound gv_victoryZurvanSound;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i1;

    gv_enemyPlayers = PlayerGroupEmpty();
    gv_kerrigan = null;
    gv_tHE_ONE_BRAKK = null;
    gv_tHE_ONE_DEHAKA = null;
    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_introMutalisks = UnitGroupEmpty();
    gv_score_Player = 0;
    gv_score_Enemy = 0;
    gv_brakkLife = 0.0;
    gv_inCombatIndicator = 0;
    gv_firstQuillgorModel = null;
    gv_brakkStartedDefendingMeat = false;
    gv_brakkStartedDestroyingMeat = false;
    gv_playerHasStartedDraggingMeat = false;
    gv_feedingPointPing = c_invalidPingId;
    gv_trainMutaPressed = false;
    gv_firstHarvesterIndex = 0;
    gv_firstHarvestingWarningPing = c_invalidPingId;
    gv_dehakaEncounterCount = 0;
    init_i = 0;
    while (init_i <= 3) {
        gv_poolEssence[init_i] = null;
        init_i = init_i + 1;
    }
    gv_poolEssenceBeingPinged = null;
    gv_primalCritterAttackers = UnitGroupEmpty();
    gv_primalCritterTargets = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 15) {
        gv_sporeRayPatrollers[init_i].lv_sporeRay = null;
        init_i1 = 0;
        while (init_i1 <= 31) {
            gv_sporeRayPatrollers[init_i].lv_patrolRoute[init_i1] = null;
            init_i1 = init_i1 + 1;
        }
        gv_sporeRayPatrollers[init_i].lv_patrolPointCount = 0;
        gv_sporeRayPatrollers[init_i].lv_currentPatrolPoint = 1;
        init_i = init_i + 1;
    }
    gv_lastCreatedSporeRayIndex = -1;
    gv_quillgorCampCount = 0;
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_quillgorCampCreeps[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_quillgorCampRegions[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        init_j = 0;
        while (init_j <= 2) {
            gv_quillgorCampReactionGatherPoint[init_i][init_j] = null;
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_quillgorCampRevealer[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_quillgorCampHarvestIndex[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_quillgorCampHarvestedBefore[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 15) {
        gv_quillgorCampSpawned[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_quillgorCampCorpseEatenIndex[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_quillgorCampCorpseHarvestedByDrone[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_meatDialogLabel[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_meatDialogValue[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_meatDialogMax[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_meatDialogProgressBar[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_meatDialogBorder[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    gv_corpses_All = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 15) {
        gv_corpse_PerCamp[init_i] = null;
        init_i = init_i + 1;
    }
    gv_firstCorpseHarvested = null;
    gv_firstCorpseDrop = true;
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_corpseRecentlyAttacked[init_i] = false;
        init_i = init_i + 1;
    }
    gv_corpseBeingEatenWarningFirstTime = false;
    init_i = 0;
    while (init_i <= gv_qUILLGORCAMPCOUNT_MAX) {
        gv_corpseEatenStopping[init_i] = false;
        init_i = init_i + 1;
    }
    gv_meats = UnitGroupEmpty();
    gv_corpseHarvesters = UnitGroupEmpty();
    gv_meatMovedByPlayer = false;
    init_i = 0;
    while (init_i <= 15) {
        gv_corpse_Ping[init_i] = c_invalidPingId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 15) {
        gv_corpse_PingWarning[init_i] = c_invalidPingId;
        init_i = init_i + 1;
    }
    gv_enemyHarvesters_All = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 15) {
        gv_quillgorRespawnOrder[init_i] = null;
        init_i = init_i + 1;
    }
    gv_currentHarvestIndex = 0;
    gv_aIHarvestFirstWave = true;
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestGroups[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestGroupsPeons[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestGroupsArmy[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestCamps[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestRetreating[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestIsReaction[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestReactionWaveDestroyed[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestIsReactionToDragging[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 100) {
        gv_aIHarvestInCombatIndex[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_aIReactionaryGroups = UnitGroupEmpty();
    gv_aIHarvestWaveCount = 0;
    gv_harvesterLeashingGroup = UnitGroupEmpty();
    gv_aIHarvesterInCombatAttacker = null;
    gv_droneBeingAttackedTimes = 0;
    gv_droneBeingAttackedWarnedMultipleMeat = false;
    gv_droneBeingAttackedWarnedSingleMeatFirstTime = false;
    gv_droneBeingAttackedBeingWarnedSingleMeat = false;
    gv_brakk_Ping = c_invalidPingId;
    gv_dronesLostCount = 0;
    gv_kerriganKills = 0;
    gv_primalHivesKilled = 0;
    gv_largestZergForce = 0;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase4 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase5 = 0;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits2 = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicStinger1 = null;
    gv_cinematicBrakk = null;
    gv_cinematicTempUnits22 = UnitFromId(1062);
    gv_introCinematicCompleted = false;
    gv_introBrakk = null;
    gv_introQuillgor = null;
    gv_introCorpse = null;
    gv_introGuardians = UnitGroupEmpty();
    gv_introZerglings = UnitGroupEmpty();
    gv_introPrimalSound = null;
    gv_introMusicCompleted = false;
    gv_midMusicCompleted = false;
    gv_victoryCinematicCompleted = false;
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryKerrigan = null;
    gv_victoryZurvanSound = null;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
void gf_AnimateTallGrassCluster (point lp_cHOSEN_POINT);
bool gf_UnitGroupIsIdle (unitgroup lp_group);
bool gf_UnitGroupWithinRangeOfTarget (unitgroup lp_group, point lp_target, int lp_range);
bool gf_UnitGroupCanAttackUnitGroup (unitgroup lp_attackingUnitGroup, unitgroup lp_defendingUnitGroup);
void gf_CorpseEatenEnemy (int lp_campIndex);
void gf_PutReticleonPrimalHive (unit lp_cHOSEN_UNIT);
void gf_OrderPrimaltoAttackCritter (unit lp_primal, unit lp_critter);
void gf_TurnSporeRayintoSporeRayPatroller (unit lp_sporeRay);
void gf_AddPatrolPointtoSporeRayPatroller (point lp_patrolPoint);
void gf_StartMeatHarvestTimer (int lp_campIndex, int lp_time);
void gf_CreateMeatProgressBar (int lp_meatIndex);
void gf_SetMeatProgressBarProgress (int lp_meatIndex, int lp_progress);
void gf_ShowHideMeatProgressBar (int lp_meatIndex, bool lp_showHide, bool lp_harvesting);
int gf_CampIndexOfQuillgor (unit lp_quillgor);
void gf_SpawnQuillgorCampSingle (int lp_campIndex);
void gf_CreateQuillgorCampPing (int lp_campIndex);
void gf_LeashQuillgor (unit lp_quillgor);
int gf_CampIndexOfQuillgorCorpse (unit lp_corpse);
bool gf_CorpseBeingEaten (int lp_campIndex);
void gf_CorpseStopBeingEaten (int lp_campIndex);
bool gf_IsCorpseOrMeat (unit lp_unit, int lp_corpseOrMeat);
bool gf_CorpseBeingHarvestedByPlayer (int lp_campIndex);
void gf_AttachWarningPingToReactionTeam (int lp_teamIndex);
int gf_MeatCountBeingMoved ();
int gf_HarvestIndexOfHarvester (unit lp_harvester);
int gf_HarvestIndexOfCamp (int lp_campIndex);
int gf_AIWhichCampToHarvest ();
point gf_AIWhereToSpawnHarvesters (int lp_harvestIndex);
void gf_AIPrepareAttackWave (int lp_harvestIndex);
void gf_AIPrepareWaveSingle (int lp_harvestIndex, int lp_player, int lp_zerglingCount, string lp_unitType1, int lp_count1, string lp_unitType2, int lp_count2, string lp_unitType3, int lp_count3, point lp_spawnLocation);
void gf_AISendHarvestWaveSingle (int lp_campIndex, bool lp_isReaction, bool lp_reactToDragging);
void gf_AIRetreatHarvestGroup (int lp_harvestIndex);
bool gf_AIHarvesterIsAttackingMeat (unit lp_harvester, int lp_campIndex);
void gf_AIQuillgorHarvesterLeashing (unit lp_harvester, int lp_campIndex);
void gf_AIQuillgorCampHarvesting (int lp_harvestIndex);
bool gf_AIReactionWaveSearchInvaderToAttack (int lp_harvestIndex);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init03aPrimalCreepCamps;
trigger gt_Init03bRespawnOrder;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGBrakkAttakk;
trigger gt_RevealMeatAreas;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_SetSpireMouseover;
trigger gt_StartGameQ;
trigger gt_GameSequence;
trigger gt_FirstQuillgorAttacked;
trigger gt_Reminders;
trigger gt_PrepareKerriganRevive;
trigger gt_CorpseEatenPlayer;
trigger gt_FirstCampSpawnedQ;
trigger gt_FirstMeatDroppedQ;
trigger gt_Transmission1stChunkBeingHarvestedPlayerQ;
trigger gt_PlayerStartsDraggingMeat;
trigger gt_MutaliskButtonClicked;
trigger gt_TransmissionTeachMutalisksQ;
trigger gt_BrakkForcesEatingMeatQ;
trigger gt_BrakkFrocesFightingQuillgarQ;
trigger gt_ProgressUpdatePlayerFirstMeatQ;
trigger gt_ProgressUpdatePlayer2MeatsQ;
trigger gt_ProgressUpdatePlayer4MeatsQ;
trigger gt_ProgressUpdatePlayer5MeatsQ;
trigger gt_ProgressUpdatePlayer6MeatsQ;
trigger gt_ProgressUpdateEnemyMeatsQ;
trigger gt_PrimalHiveWarningQ;
trigger gt_DehakaSpotted;
trigger gt_DehakaFlee;
trigger gt_EssencePoolApproached;
trigger gt_EssencePoolIntroQ;
trigger gt_EssencePoolPing;
trigger gt_EssencePoolAbsorbedQ;
trigger gt_SporeRayPatrols;
trigger gt_InitializeSporeRayPatrols;
trigger gt_FirstCrabeetle;
trigger gt_SpawnQuillgorCamps;
trigger gt_SpawnQuillgorCampsTransmissionQ;
trigger gt_QuillgorCampsLeash;
trigger gt_CorpseSetup;
trigger gt_CorpseBeingEatenQ;
trigger gt_CorpseBeingEatenIndicatorDiminish;
trigger gt_CorpseHarvestStarted;
trigger gt_TransmissionCorpseHarvestStartedQ;
trigger gt_TransmissionDefendDroneWarningQ;
trigger gt_CorpseHarvestEndedFinished;
trigger gt_CorpseHarvestEndedDied;
trigger gt_MeatMovementOrders;
trigger gt_MeatMovementOrdersrepeated;
trigger gt_MeatPingsUpdate;
trigger gt_TransmissionMultipleDronesPullingMeatQ;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_StartUpgradesNormal;
trigger gt_StartUpgradesHard;
trigger gt_AISendHarvestWaves;
trigger gt_AISendHarvestWaveSingle;
trigger gt_AIReactionWaveIsDestroyed;
trigger gt_AIUnitEnterAIRetreatRegion;
trigger gt_AIQuillgorHarvesterInCombat;
trigger gt_AIQuillgorHarvesterInCombatIndicatorDiminish;
trigger gt_TransmissionDroneUnderAttackQ;
trigger gt_TransmissionKerriganKillsQuillgorAttackersQ;
trigger gt_SendBrakkAttack;
trigger gt_CreatePingforBrakk;
trigger gt_BrakkKilled;
trigger gt_TransmissionBrakkAttackQ;
trigger gt_TransmissionBrakkKillsStuffQ;
trigger gt_TransmissionBrakkDeathQ;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatBrakkEats7Meat;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_AchievementDronesLost;
trigger gt_AchievementKillPrimalHivesNH;
trigger gt_AchievementMeatLostH;
trigger gt_LargestZergForce;
trigger gt_ObjectiveHarvestMeatCreate;
trigger gt_ObjectiveHarvestMeatUpdate;
trigger gt_ObjectiveHarvestMeatComplete;
trigger gt_ObjectiveHarvestMeatFailed;
trigger gt_ObjectiveQuillgorMeatEnemyCreate;
trigger gt_ObjectiveQuillgorMeatEnemyUpdate;
trigger gt_ObjectiveQuillgorMeatEnemyComplete;
trigger gt_ObjectiveQuillgorMeatEnemyFailed;
trigger gt_ObjectiveKillBrakkCreate;
trigger gt_ObjectiveKillBrakkComplete;
trigger gt_ObjectiveKillBrakkFailed;
trigger gt_ObjectiveCollectEssenceCreate;
trigger gt_ObjectiveCollectEssenceUpdate;
trigger gt_ObjectiveCollectEssenceComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroPrimals;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicCameraShakes;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    init_i = 0;
    while (init_i <= 16) {
        cai_playerAI[init_i] = null;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai476031DB") { ai476031DB_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai476031DB") { ai476031DB_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai476031DB") { return ai476031DB_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai476031DB") { ai476031DB_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai476031DB") { ai476031DB_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai476031DB") { ai476031DB_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai476031DB") { ai476031DB_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai476031DB") { ai476031DB_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai476031DB") { return ai476031DB_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai476031DB") { return ai476031DB_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai476031DB") { return ai476031DB_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai476031DB", 2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(10);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_AnimateTallGrassCluster (point lp_cHOSEN_POINT) {
    // Implementation
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lp_cHOSEN_POINT, 3.0), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", 0, c_animTimeDefault);
}

bool gf_UnitGroupIsIdle (unitgroup lp_group) {
    unitgroup autoEED44907_g;
    int autoEED44907_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization
    lv_indexUnit = null;

    // Implementation
    autoEED44907_g = lp_group;
    autoEED44907_u = 1;
    while (autoEED44907_u <= UnitGroupCount(autoEED44907_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(autoEED44907_g, autoEED44907_u);
        if ((UnitTestState(lv_indexUnit, c_unitStateIdle) == false)) {
            return false;
        }
        else {
        }
        if (lv_indexUnit == UnitGroupUnit(autoEED44907_g, autoEED44907_u)) {
            autoEED44907_u = autoEED44907_u + 1;
        }
    }
    return true;
}

bool gf_UnitGroupWithinRangeOfTarget (unitgroup lp_group, point lp_target, int lp_range) {
    unitgroup autoB1C22EAC_g;
    int autoB1C22EAC_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization
    lv_indexUnit = null;

    // Implementation
    autoB1C22EAC_g = lp_group;
    autoB1C22EAC_u = 1;
    while (autoB1C22EAC_u <= UnitGroupCount(autoB1C22EAC_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(autoB1C22EAC_g, autoB1C22EAC_u);
        if ((DistanceBetweenPoints(UnitGetPosition(lv_indexUnit), lp_target) > lp_range)) {
            return false;
        }
        else {
        }
        if (lv_indexUnit == UnitGroupUnit(autoB1C22EAC_g, autoB1C22EAC_u)) {
            autoB1C22EAC_u = autoB1C22EAC_u + 1;
        }
    }
    return true;
}

bool gf_UnitGroupCanAttackUnitGroup (unitgroup lp_attackingUnitGroup, unitgroup lp_defendingUnitGroup) {
    unitgroup autoB7AFCDED_g;
    int autoB7AFCDED_u;
    unitgroup autoAD5963EB_g;
    int autoAD5963EB_u;

    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_defendingUnit;

    // Variable Initialization
    lv_attackingUnit = null;
    lv_defendingUnit = null;

    // Implementation
    autoB7AFCDED_g = lp_attackingUnitGroup;
    autoB7AFCDED_u = 1;
    while (autoB7AFCDED_u <= UnitGroupCount(autoB7AFCDED_g, c_unitCountAll)) {
        lv_attackingUnit = UnitGroupUnit(autoB7AFCDED_g, autoB7AFCDED_u);
        autoAD5963EB_g = lp_defendingUnitGroup;
        autoAD5963EB_u = 1;
        while (autoAD5963EB_u <= UnitGroupCount(autoAD5963EB_g, c_unitCountAll)) {
            lv_defendingUnit = UnitGroupUnit(autoAD5963EB_g, autoAD5963EB_u);
            if ((UnitCanAttackTarget(lv_attackingUnit, lv_defendingUnit) == true)) {
                return true;
            }
            else {
            }
            if (lv_defendingUnit == UnitGroupUnit(autoAD5963EB_g, autoAD5963EB_u)) {
                autoAD5963EB_u = autoAD5963EB_u + 1;
            }
        }
        if (lv_attackingUnit == UnitGroupUnit(autoB7AFCDED_g, autoB7AFCDED_u)) {
            autoB7AFCDED_u = autoB7AFCDED_u + 1;
        }
    }
    return false;
}

void gf_CorpseEatenEnemy (int lp_campIndex) {
    // Implementation
    SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_corpse_PerCamp[lp_campIndex]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/03E2DC77"), null, UnitGetPosition(gv_corpse_PerCamp[lp_campIndex]));
    gv_score_Enemy += 1;
    TriggerExecute(gt_ObjectiveQuillgorMeatEnemyUpdate, true, false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_corpse_PerCamp[lp_campIndex], 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_corpse_PerCamp[lp_campIndex], 1));
    UnitKill(gv_corpse_PerCamp[lp_campIndex]);
    if ((gv_score_Enemy >= gv_score_Quota_Enemy)) {
        TriggerExecute(gt_DefeatBrakkEats7Meat, true, false);
        return ;
    }
    else {
    }
    TriggerExecute(gt_ProgressUpdateEnemyMeatsQ, true, false);
}

trigger auto_gf_PutReticleonPrimalHive_Trigger = null;
unit auto_gf_PutReticleonPrimalHive_lp_cHOSEN_UNIT;

void gf_PutReticleonPrimalHive (unit lp_cHOSEN_UNIT) {
    auto_gf_PutReticleonPrimalHive_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;

    if (auto_gf_PutReticleonPrimalHive_Trigger == null) {
        auto_gf_PutReticleonPrimalHive_Trigger = TriggerCreate("auto_gf_PutReticleonPrimalHive_TriggerFunc");
    }

    TriggerExecute(auto_gf_PutReticleonPrimalHive_Trigger, false, false);
}

bool auto_gf_PutReticleonPrimalHive_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_PutReticleonPrimalHive_lp_cHOSEN_UNIT;

    // Implementation
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 12.0), 15.0, true);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(lp_cHOSEN_UNIT), 2.0, -1, 10.0, true);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 1, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), lp_cHOSEN_UNIT, "Ref_Target");
    TextTagSetPosition(TextTagLastCreated(), UnitGetPosition(lp_cHOSEN_UNIT), 1.5);
    while (!(((UnitGetPropertyFixed(lp_cHOSEN_UNIT, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || (UnitIsAlive(lp_cHOSEN_UNIT) == false)))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    return true;
}

trigger auto_gf_OrderPrimaltoAttackCritter_Trigger = null;
unit auto_gf_OrderPrimaltoAttackCritter_lp_primal;
unit auto_gf_OrderPrimaltoAttackCritter_lp_critter;

void gf_OrderPrimaltoAttackCritter (unit lp_primal, unit lp_critter) {
    auto_gf_OrderPrimaltoAttackCritter_lp_primal = lp_primal;
    auto_gf_OrderPrimaltoAttackCritter_lp_critter = lp_critter;

    if (auto_gf_OrderPrimaltoAttackCritter_Trigger == null) {
        auto_gf_OrderPrimaltoAttackCritter_Trigger = TriggerCreate("auto_gf_OrderPrimaltoAttackCritter_TriggerFunc");
    }

    TriggerExecute(auto_gf_OrderPrimaltoAttackCritter_Trigger, false, false);
}

bool auto_gf_OrderPrimaltoAttackCritter_TriggerFunc (bool testConds, bool runActions) {
    unit lp_primal = auto_gf_OrderPrimaltoAttackCritter_lp_primal;
    unit lp_critter = auto_gf_OrderPrimaltoAttackCritter_lp_critter;

    // Variable Declarations
    point lv_idlePosition;
    bool lv_forceLeash;

    // Variable Initialization
    lv_idlePosition = null;
    lv_forceLeash = false;

    // Implementation
    if (((UnitIsAlive(lp_primal) == false) || (UnitIsAlive(lp_critter) == false))) {
        return true;
    }
    else {
    }
    lv_idlePosition = UnitGetPosition(lp_primal);
    UnitGroupAdd(gv_primalCritterAttackers, lp_primal);
    UnitGroupAdd(gv_primalCritterTargets, lp_critter);
    UnitIssueOrder(lp_primal, OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter), c_orderQueueReplace);
    UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueAddToEnd);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lp_primal) == false)) {
            UnitGroupRemove(gv_primalCritterTargets, lp_critter);
            return true;
        }
        else {
        }
        if (((UnitTestState(lp_primal, c_unitStateIdle) == true) || (UnitOrder(lp_primal, 0) == OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter)) || (UnitOrder(lp_primal, 0) == OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition)) || (UnitOrder(lp_primal, 1) == OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition)))) {
        }
        else {
            UnitGroupRemove(gv_primalCritterTargets, lp_critter);
            UnitGroupRemove(gv_primalCritterAttackers, lp_primal);
            return true;
        }
        if (((UnitIsAlive(lp_critter) == false) || (lv_forceLeash == true) || (DistanceBetweenPoints(UnitGetPosition(lp_critter), UnitGetPosition(lp_primal)) > 7.0))) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_primal), lv_idlePosition) <= 1.0)) {
                AISetUnitScriptControlled(lp_primal, false);
                UnitGroupRemove(gv_primalCritterAttackers, lp_primal);
                UnitGroupRemove(gv_primalCritterTargets, lp_critter);
                return true;
            }
            else {
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueReplace);
            }
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_primal), lv_idlePosition) > 7.0)) {
                lv_forceLeash = true;
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_primal, OrderTargetingUnit(AbilityCommand("attack", 0), lp_critter), c_orderQueueReplace);
                UnitIssueOrder(lp_primal, OrderTargetingPoint(AbilityCommand("attack", 0), lv_idlePosition), c_orderQueueAddToEnd);
            }
        }
    }
    return true;
}

void gf_TurnSporeRayintoSporeRayPatroller (unit lp_sporeRay) {
    int auto15B88E9E_ae;
    int auto15B88E9E_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Implementation
    gv_lastCreatedSporeRayIndex = -1;
    if ((UnitIsAlive(lp_sporeRay) == false)) {
        return ;
    }
    else {
    }
    auto15B88E9E_ae = gv_sPORE_RAY_MAX_COUNT;
    auto15B88E9E_ai = 1;
    lv_i = 0;
    while ((auto15B88E9E_ai >= 0 && lv_i <= auto15B88E9E_ae) || (auto15B88E9E_ai <= 0 && lv_i >= auto15B88E9E_ae)) {
        if (((gv_sporeRayPatrollers[lv_i].lv_sporeRay == null) || (UnitIsAlive(gv_sporeRayPatrollers[lv_i].lv_sporeRay) == false))) {
            gv_lastCreatedSporeRayIndex = lv_i;
            break;
        }
        else {
        }
        if (lv_i == auto15B88E9E_ae) {
            break;
        }
        lv_i = lv_i + auto15B88E9E_ai;
    }
    if ((gv_lastCreatedSporeRayIndex == -1)) {
        return ;
    }
    else {
    }
    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_sporeRay = lp_sporeRay;
    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount = 0;
    gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_currentPatrolPoint = 1;
    UnitIssueOrder(lp_sporeRay, OrderSetAutoCast(AbilityCommand("CritterFlee", 0), false), c_orderQueueReplace);
    UnitSetPropertyFixed(lp_sporeRay, c_unitPropMovementSpeed, 0.5);
}

void gf_AddPatrolPointtoSporeRayPatroller (point lp_patrolPoint) {
    // Implementation
    if (((gv_lastCreatedSporeRayIndex == -1) || (lp_patrolPoint == null))) {
        return ;
    }
    else {
    }
    if ((gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount == 31)) {
        return ;
    }
    else {
        gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount += 1;
        gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolRoute[gv_sporeRayPatrollers[gv_lastCreatedSporeRayIndex].lv_patrolPointCount] = lp_patrolPoint;
    }
}

trigger auto_gf_StartMeatHarvestTimer_Trigger = null;
int auto_gf_StartMeatHarvestTimer_lp_campIndex;
int auto_gf_StartMeatHarvestTimer_lp_time;

void gf_StartMeatHarvestTimer (int lp_campIndex, int lp_time) {
    auto_gf_StartMeatHarvestTimer_lp_campIndex = lp_campIndex;
    auto_gf_StartMeatHarvestTimer_lp_time = lp_time;

    if (auto_gf_StartMeatHarvestTimer_Trigger == null) {
        auto_gf_StartMeatHarvestTimer_Trigger = TriggerCreate("auto_gf_StartMeatHarvestTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartMeatHarvestTimer_Trigger, false, false);
}

bool auto_gf_StartMeatHarvestTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_campIndex = auto_gf_StartMeatHarvestTimer_lp_campIndex;
    int lp_time = auto_gf_StartMeatHarvestTimer_lp_time;

    int auto717BAAA0_n;
    int auto717BAAA0_i;

    // Variable Declarations
    int lv_timeCount;

    // Variable Initialization
    lv_timeCount = 0;

    // Implementation
    lv_timeCount = lp_time;
    gv_meatDialogMax[lp_campIndex] = lp_time;
    gf_ShowHideMeatProgressBar(lp_campIndex, true, true);
    gv_meatDialogMax[lp_campIndex] = lp_time;
    auto717BAAA0_n = lp_time;
    auto717BAAA0_i = 1;
    while (auto717BAAA0_i <= auto717BAAA0_n) {
        lv_timeCount -= 1;
        if ((gv_gameOver == false) && (gf_CorpseBeingHarvestedByPlayer(lp_campIndex) == true)) {
            gf_SetMeatProgressBarProgress(lp_campIndex, lv_timeCount);
        }
        else {
            break;
        }
        Wait(1.0, c_timeAI);
        auto717BAAA0_i = auto717BAAA0_i + 1;
    }
    gf_ShowHideMeatProgressBar(lp_campIndex, false, false);
    return true;
}

void gf_CreateMeatProgressBar (int lp_meatIndex) {
    // Implementation
    if ((gv_meatDialogLabel[lp_meatIndex] == c_invalidDialogControlId)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", gv_corpse_PerCamp[lp_meatIndex]);
        gv_meatDialogLabel[lp_meatIndex] = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", gv_corpse_PerCamp[lp_meatIndex]);
        gv_meatDialogValue[lp_meatIndex] = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", gv_corpse_PerCamp[lp_meatIndex]);
        gv_meatDialogProgressBar[lp_meatIndex] = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", gv_corpse_PerCamp[lp_meatIndex]);
        gv_meatDialogBorder[lp_meatIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(gv_meatDialogProgressBar[lp_meatIndex], libSwaC_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_meatDialogValue[lp_meatIndex], Color(100,100,100), PlayerGroupAll());
    }
    else {
    }
}

void gf_SetMeatProgressBarProgress (int lp_meatIndex, int lp_progress) {
    // Variable Declarations
    int lv_panel;
    const int lv_c_Width = 260;
    const int lv_c_Height = 12;
    color lv_textColor;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_textColor = Color(0.00, 0.00, 0.00);

    // Implementation
    if ((lp_progress <= 0)) {
        DialogControlSetVisible(gv_meatDialogProgressBar[lp_meatIndex], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetSize(gv_meatDialogProgressBar[lp_meatIndex], PlayerGroupAll(), FixedToInt((IntToFixed(lv_c_Width) * (IntToFixed(lp_progress) / IntToFixed(gv_meatDialogMax[lp_meatIndex])))), lv_c_Height);
        DialogControlSetVisible(gv_meatDialogProgressBar[lp_meatIndex], PlayerGroupAll(), true);
    }
    libNtve_gf_SetDialogItemText(gv_meatDialogValue[lp_meatIndex], IntToText(lp_progress), PlayerGroupAll());
}

void gf_ShowHideMeatProgressBar (int lp_meatIndex, bool lp_showHide, bool lp_harvesting) {
    // Implementation
    DialogControlSetVisible(gv_meatDialogBorder[lp_meatIndex], PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(gv_meatDialogLabel[lp_meatIndex], PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(gv_meatDialogProgressBar[lp_meatIndex], PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(gv_meatDialogValue[lp_meatIndex], PlayerGroupAll(), lp_showHide);
    if ((lp_showHide == true)) {
        if ((lp_harvesting == true)) {
            libNtve_gf_SetDialogItemText(gv_meatDialogLabel[lp_meatIndex], StringExternal("Param/Value/37C063F8"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(gv_meatDialogLabel[lp_meatIndex], StringExternal("Param/Value/3FC1A87F"), PlayerGroupAll());
        }
    }
    else {
    }
}

int gf_CampIndexOfQuillgor (unit lp_quillgor) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = FixedToInt(UnitGetCustomValue(lp_quillgor, 0));
    if ((UnitGroupHasUnit(gv_quillgorCampCreeps[lv_index], lp_quillgor) == false)) {
        return -1;
    }
    else {
    }
    return lv_index;
}

void gf_SpawnQuillgorCampSingle (int lp_campIndex) {
    string autoFE183A03_val;

    // Variable Declarations
    int lv_index;
    region lv_spawningRegion;
    int lv_unitIndex;

    // Variable Initialization
    lv_index = 0;
    lv_spawningRegion = null;
    lv_unitIndex = 0;

    // Implementation
    if ((gv_quillgorCampSpawned[lp_campIndex] == true)) {
        return ;
    }
    else {
    }
    gv_quillgorCampSpawned[lp_campIndex] = true;
    lv_spawningRegion = gv_quillgorCampRegions[lp_campIndex];
    UnitGroupLoopBegin(gv_quillgorCampCreeps[lp_campIndex]);
    while (!UnitGroupLoopDone()) {
        autoFE183A03_val = UnitGetType(UnitGroupLoopCurrent());
        if (autoFE183A03_val == "SpaceCowSmall") {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, lp_campIndex);
        }
        else if (autoFE183A03_val == "SpaceCowMedium") {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, lp_campIndex);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(RegionGetCenter(gv_quillgorCampRegions[lp_campIndex]), 6.0));
    gv_quillgorCampRevealer[lp_campIndex] = VisRevealerLastCreated();
    gf_CreateQuillgorCampPing(lp_campIndex);
}

void gf_CreateQuillgorCampPing (int lp_campIndex) {
    // Variable Declarations
    int lv_ping;
    unit lv_alpha;

    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_alpha = null;

    // Implementation
    lv_alpha = UnitGroupUnit(UnitGroupFilter("SpaceCowMedium", gv_pLAYER_02_DOMINION32, gv_quillgorCampCreeps[lp_campIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((UnitIsAlive(lv_alpha) == false)) {
        return ;
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", UnitGetPosition(lv_alpha), Color(0.00, 100.00, 0.00), 4.0, 270.0);
    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
}

void gf_LeashQuillgor (unit lp_quillgor) {
    // Variable Declarations
    point lv_location;

    // Variable Initialization
    lv_location = null;

    // Implementation
    lv_location = libHots_gf_PointStoredForUnit(lp_quillgor, 1);
    UnitIssueOrder(lp_quillgor, OrderTargetingPoint(AbilityCommand("move", 0), lv_location), c_orderQueueReplace);
    UnitIssueOrder(lp_quillgor, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lv_location, 1.0, PointGetFacing(lv_location))), c_orderQueueAddToEnd);
}

int gf_CampIndexOfQuillgorCorpse (unit lp_corpse) {
    // Implementation
    if ((UnitGetType(lp_corpse) != "MediumTastyCorpse") && (UnitGetType(lp_corpse) != "SpaceCowCorpse")) {
        return -1;
    }
    else {
    }
    return FixedToInt(UnitGetCustomValue(lp_corpse, 0));
}

bool gf_CorpseBeingEaten (int lp_campIndex) {
    // Implementation
    return (gv_quillgorCampCorpseEatenIndex[lp_campIndex] > 0);
}

trigger auto_gf_CorpseStopBeingEaten_Trigger = null;
int auto_gf_CorpseStopBeingEaten_lp_campIndex;

void gf_CorpseStopBeingEaten (int lp_campIndex) {
    auto_gf_CorpseStopBeingEaten_lp_campIndex = lp_campIndex;

    if (auto_gf_CorpseStopBeingEaten_Trigger == null) {
        auto_gf_CorpseStopBeingEaten_Trigger = TriggerCreate("auto_gf_CorpseStopBeingEaten_TriggerFunc");
    }

    TriggerExecute(auto_gf_CorpseStopBeingEaten_Trigger, false, false);
}

bool auto_gf_CorpseStopBeingEaten_TriggerFunc (bool testConds, bool runActions) {
    int lp_campIndex = auto_gf_CorpseStopBeingEaten_lp_campIndex;

    int auto48502DD8_n;
    int auto48502DD8_i;

    // Implementation
    if ((gv_corpseEatenStopping[lp_campIndex] == true)) {
        return true;
    }
    else {
    }
    gv_corpseEatenStopping[lp_campIndex] = true;
    auto48502DD8_n = 5;
    auto48502DD8_i = 1;
    while (auto48502DD8_i <= auto48502DD8_n) {
        if ((gv_quillgorCampHarvestIndex[lp_campIndex] > 0) && (libNtve_gf_UnitGroupIsDead(UnitGroupFilterRegion(gv_aIHarvestGroups[gv_quillgorCampHarvestIndex[lp_campIndex]], RegionCircle(UnitGetPosition(gv_corpse_PerCamp[lp_campIndex]), 5.0), 1)) == false)) {
            Wait(1.0, c_timeAI);
        }
        else {
            break;
        }
        auto48502DD8_i = auto48502DD8_i + 1;
    }
    if ((gv_corpseEatenStopping[lp_campIndex] == false)) {
        return true;
    }
    else {
    }
    UnitBehaviorRemovePlayer(gv_corpse_PerCamp[lp_campIndex], "MeatAttacked", gv_pLAYER_01_USER, 1);
    UnitSetPropertyFixed(gv_corpse_PerCamp[lp_campIndex], c_unitPropLife, gv_c_CORPSE_LIFEMAX);
    gf_ShowHideMeatProgressBar(lp_campIndex, false, false);
    if ((gv_corpse_PingWarning[lp_campIndex] != c_invalidPingId)) {
        PingDestroy(gv_corpse_PingWarning[lp_campIndex]);
        gv_corpse_PingWarning[lp_campIndex] = c_invalidPingId;
    }
    else {
    }
    gv_corpseEatenStopping[lp_campIndex] = false;
    return true;
}

bool gf_IsCorpseOrMeat (unit lp_unit, int lp_corpseOrMeat) {
    int autoC6CBC890_val;

    // Implementation
    autoC6CBC890_val = lp_corpseOrMeat;
    if (autoC6CBC890_val == 0) {
        return (UnitGetType(lp_unit) == "SpaceCowCorpse");
    }
    else if (autoC6CBC890_val == 1) {
        return (UnitGetType(lp_unit) == "MediumTastyCorpse");
    }
    else {
    }
    return false;
}

bool gf_CorpseBeingHarvestedByPlayer (int lp_campIndex) {
    // Implementation
    if ((UnitIsAlive(gv_corpse_PerCamp[lp_campIndex]) == false)) {
        return false;
    }
    else {
    }
    if ((gv_quillgorCampCorpseHarvestedByDrone[lp_campIndex] == false)) {
        return false;
    }
    else {
    }
    return true;
}

trigger auto_gf_AttachWarningPingToReactionTeam_Trigger = null;
int auto_gf_AttachWarningPingToReactionTeam_lp_teamIndex;

void gf_AttachWarningPingToReactionTeam (int lp_teamIndex) {
    auto_gf_AttachWarningPingToReactionTeam_lp_teamIndex = lp_teamIndex;

    if (auto_gf_AttachWarningPingToReactionTeam_Trigger == null) {
        auto_gf_AttachWarningPingToReactionTeam_Trigger = TriggerCreate("auto_gf_AttachWarningPingToReactionTeam_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttachWarningPingToReactionTeam_Trigger, false, false);
}

bool auto_gf_AttachWarningPingToReactionTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_teamIndex = auto_gf_AttachWarningPingToReactionTeam_lp_teamIndex;

    unitgroup auto2934096F_g;
    int auto2934096F_u;

    // Variable Declarations
    int lv_warningPing;
    unit lv_indexUnit;
    bool lv_visible;
    bool lv_allVisible;

    // Variable Initialization
    lv_warningPing = c_invalidPingId;
    lv_indexUnit = null;
    lv_visible = false;
    lv_allVisible = false;

    // Implementation
    while ((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lp_teamIndex]) == false)) {
        lv_visible = false;
        lv_allVisible = true;
        auto2934096F_g = gv_aIHarvestGroups[lp_teamIndex];
        auto2934096F_u = 1;
        while (auto2934096F_u <= UnitGroupCount(auto2934096F_g, c_unitCountAll)) {
            lv_indexUnit = UnitGroupUnit(auto2934096F_g, auto2934096F_u);
            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_indexUnit, gv_pLAYER_01_USER) == true)) {
                lv_visible = true;
            }
            else {
            }
            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_indexUnit, gv_pLAYER_01_USER) == false)) {
                lv_allVisible = false;
            }
            else {
            }
            if (lv_indexUnit == UnitGroupUnit(auto2934096F_g, auto2934096F_u)) {
                auto2934096F_u = auto2934096F_u + 1;
            }
        }
        if ((((lv_visible == true) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(gv_aIHarvestGroups[lp_teamIndex]), UnitGetPosition(gv_corpse_PerCamp[gv_aIHarvestCamps[lp_teamIndex]])) <= 10.0)) || (lv_allVisible == true))) {
            break;
        }
        else {
            if ((lv_warningPing == c_invalidPingId)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGroupCenterOfGroup(gv_aIHarvestGroups[lp_teamIndex]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
                lv_warningPing = PingLastCreated();
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4142730A"));
            }
            else {
                PingSetPosition(lv_warningPing, UnitGroupCenterOfGroup(gv_aIHarvestGroups[lp_teamIndex]));
            }
        }
        Wait(0.25, c_timeReal);
    }
    if ((lv_warningPing != c_invalidPingId)) {
        PingDestroy(lv_warningPing);
    }
    else {
    }
    return true;
}

int gf_MeatCountBeingMoved () {
    // Variable Declarations
    int lv_meatCount;

    // Variable Initialization
    lv_meatCount = 0;

    // Implementation
    UnitGroupLoopBegin(gv_meats);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER)) {
            lv_meatCount += 1;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return lv_meatCount;
}

int gf_HarvestIndexOfHarvester (unit lp_harvester) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = FixedToInt(UnitGetCustomValue(lp_harvester, 0));
    if ((UnitGroupHasUnit(gv_aIHarvestGroups[lv_index], lp_harvester) == false)) {
        return -1;
    }
    else {
    }
    return lv_index;
}

int gf_HarvestIndexOfCamp (int lp_campIndex) {
    // Implementation
    return gv_quillgorCampHarvestIndex[lp_campIndex];
}

int gf_AIWhichCampToHarvest () {
    int init_i;
    int init_j;

    int auto36983C90_ae;
    int auto36983C90_ai;
    int autoD33E41B6_ae;
    int autoD33E41B6_ai;
    int autoBE41F8CC_ae;
    int autoBE41F8CC_ai;
    int auto34991DAB_ae;
    int auto34991DAB_ai;

    // Variable Declarations
    int[7][11] lv_campsInLevel;
    int[7] lv_campCountInLevel;
    int lv_campLevelCount;
    int lv_campLevel;
    int lv_campIndexInLevel;
    int[14] lv_quillCamps;
    int lv_quillCampCount;
    int lv_corpseCount;
    int[14] lv_corpseCamps;
    int lv_corpseCampCount;
    int lv_currentIndex;

    // Variable Initialization
    init_i = 0;
    while (init_i <= 6) {
        init_j = 0;
        while (init_j <= 10) {
            lv_campsInLevel[init_i][init_j] = 0;
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 6) {
        lv_campCountInLevel[init_i] = 0;
        init_i = init_i + 1;
    }
    lv_campLevelCount = 0;
    lv_campLevel = 0;
    lv_campIndexInLevel = 0;
    init_i = 0;
    while (init_i <= 13) {
        lv_quillCamps[init_i] = 0;
        init_i = init_i + 1;
    }
    lv_quillCampCount = 0;
    lv_corpseCount = 0;
    init_i = 0;
    while (init_i <= 13) {
        lv_corpseCamps[init_i] = 0;
        init_i = init_i + 1;
    }
    lv_corpseCampCount = 0;
    lv_currentIndex = 0;

    // Implementation
    if ((gv_aIHarvestFirstWave == true)) {
        gv_aIHarvestFirstWave = false;
        lv_currentIndex = 6;
        if (((UnitIsAlive(gv_corpse_PerCamp[lv_currentIndex]) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroupFilter("SpaceCowMedium", gv_pLAYER_02_DOMINION32, gv_quillgorCampCreeps[lv_currentIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == false)) && (gv_quillgorCampHarvestIndex[lv_currentIndex] <= 0) && (gf_CorpseBeingHarvestedByPlayer(lv_currentIndex) == false)) {
            return 6;
        }
        else {
        }
    }
    else {
    }
    lv_campLevelCount += 1;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 3;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 6;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 8;
    lv_campLevelCount += 1;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 4;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 5;
    lv_campLevelCount += 1;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 7;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 9;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 13;
    lv_campLevelCount += 1;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 12;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 11;
    lv_campCountInLevel[lv_campLevelCount] += 1;
    lv_campsInLevel[lv_campLevelCount][lv_campCountInLevel[lv_campLevelCount]] = 10;
    UnitGroupLoopBegin(UnitGroup("SpaceCowCorpse", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(8)) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(7)) == false)) {
            lv_corpseCount += 1;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_corpseCount >= 2)) {
        auto36983C90_ae = lv_campLevelCount;
        auto36983C90_ai = 1;
        lv_campLevel = 1;
        while ((auto36983C90_ai >= 0 && lv_campLevel <= auto36983C90_ae) || (auto36983C90_ai <= 0 && lv_campLevel >= auto36983C90_ae)) {
            autoD33E41B6_ae = lv_campCountInLevel[lv_campLevel];
            autoD33E41B6_ai = 1;
            lv_campIndexInLevel = 1;
            while ((autoD33E41B6_ai >= 0 && lv_campIndexInLevel <= autoD33E41B6_ae) || (autoD33E41B6_ai <= 0 && lv_campIndexInLevel >= autoD33E41B6_ae)) {
                lv_currentIndex = lv_campsInLevel[lv_campLevel][lv_campIndexInLevel];
                if ((UnitIsAlive(gv_corpse_PerCamp[lv_currentIndex]) == true) && (gv_quillgorCampHarvestIndex[lv_currentIndex] <= 0) && (gf_CorpseBeingHarvestedByPlayer(lv_currentIndex) == false)) {
                    if ((gv_quillgorCampHarvestedBefore[lv_currentIndex] == false)) {
                        return lv_currentIndex;
                    }
                    else {
                        lv_corpseCampCount += 1;
                        lv_corpseCamps[lv_corpseCampCount] = lv_currentIndex;
                    }
                }
                else {
                }
                if (lv_campIndexInLevel == autoD33E41B6_ae) {
                    break;
                }
                lv_campIndexInLevel = lv_campIndexInLevel + autoD33E41B6_ai;
            }
            if (lv_campLevel == auto36983C90_ae) {
                break;
            }
            lv_campLevel = lv_campLevel + auto36983C90_ai;
        }
        if ((lv_corpseCampCount > 0)) {
            IntLoopBegin(1, lv_corpseCampCount);
            while (!IntLoopDone()) {
                gv_quillgorCampHarvestedBefore[lv_corpseCamps[IntLoopCurrent()]] = false;
                IntLoopStep();
            }
            IntLoopEnd();
            return lv_corpseCamps[1];
        }
        else {
        }
    }
    else {
        autoBE41F8CC_ae = lv_campLevelCount;
        autoBE41F8CC_ai = 1;
        lv_campLevel = 1;
        while ((autoBE41F8CC_ai >= 0 && lv_campLevel <= autoBE41F8CC_ae) || (autoBE41F8CC_ai <= 0 && lv_campLevel >= autoBE41F8CC_ae)) {
            auto34991DAB_ae = lv_campCountInLevel[lv_campLevel];
            auto34991DAB_ai = 1;
            lv_campIndexInLevel = 1;
            while ((auto34991DAB_ai >= 0 && lv_campIndexInLevel <= auto34991DAB_ae) || (auto34991DAB_ai <= 0 && lv_campIndexInLevel >= auto34991DAB_ae)) {
                lv_currentIndex = lv_campsInLevel[lv_campLevel][lv_campIndexInLevel];
                if ((UnitIsAlive(gv_corpse_PerCamp[lv_currentIndex]) == true) && (gv_quillgorCampHarvestIndex[lv_currentIndex] <= 0) && (gf_CorpseBeingHarvestedByPlayer(lv_currentIndex) == false) && (gv_quillgorCampHarvestedBefore[lv_currentIndex] == false)) {
                    return lv_currentIndex;
                }
                else {
                    if ((libNtve_gf_UnitGroupIsDead(UnitGroupFilter("SpaceCowMedium", gv_pLAYER_02_DOMINION32, gv_quillgorCampCreeps[lv_currentIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == false)) {
                        lv_quillCampCount += 1;
                        lv_quillCamps[lv_quillCampCount] = lv_currentIndex;
                    }
                    else {
                    }
                }
                if (lv_campIndexInLevel == auto34991DAB_ae) {
                    break;
                }
                lv_campIndexInLevel = lv_campIndexInLevel + auto34991DAB_ai;
            }
            if (lv_campLevel == autoBE41F8CC_ae) {
                break;
            }
            lv_campLevel = lv_campLevel + autoBE41F8CC_ai;
        }
        if ((lv_quillCampCount > 0)) {
            return lv_quillCamps[1];
        }
        else {
        }
    }
    lv_quillCampCount = 0;
    IntLoopBegin(1, 13);
    while (!IntLoopDone()) {
        lv_currentIndex = IntLoopCurrent();
        if (((UnitIsAlive(gv_corpse_PerCamp[lv_currentIndex]) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroupFilter("SpaceCowMedium", gv_pLAYER_02_DOMINION32, gv_quillgorCampCreeps[lv_currentIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == false)) && (gv_quillgorCampHarvestIndex[lv_currentIndex] <= 0) && (gf_CorpseBeingHarvestedByPlayer(lv_currentIndex) == false)) {
            lv_quillCampCount += 1;
            lv_quillCamps[lv_quillCampCount] = lv_currentIndex;
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    if ((lv_quillCampCount > 0)) {
        return lv_quillCamps[RandomInt(1, lv_quillCampCount)];
    }
    else {
    }
    return 0;
}

point gf_AIWhereToSpawnHarvesters (int lp_harvestIndex) {
    // Implementation
    if ((gv_aIHarvestIsReaction[lp_harvestIndex] == true)) {
        if (((gv_aIHarvestCamps[lp_harvestIndex] == 1) || (gv_aIHarvestCamps[lp_harvestIndex] == 3))) {
            return PointFromId(2057);
        }
        else if (((gv_aIHarvestCamps[lp_harvestIndex] == 5) || (gv_aIHarvestCamps[lp_harvestIndex] == 7) || (gv_aIHarvestCamps[lp_harvestIndex] == 8))) {
            return PointFromId(2082);
        }
        else if (((gv_aIHarvestCamps[lp_harvestIndex] == 12) || (gv_aIHarvestCamps[lp_harvestIndex] == 10) || (gv_aIHarvestCamps[lp_harvestIndex] == 9) || (gv_aIHarvestCamps[lp_harvestIndex] == 11) || (gv_aIHarvestCamps[lp_harvestIndex] == 13) || (gv_aIHarvestCamps[lp_harvestIndex] == 4))) {
            return PointFromId(2083);
        }
        else if (((gv_aIHarvestCamps[lp_harvestIndex] == 2) || (gv_aIHarvestCamps[lp_harvestIndex] == 6))) {
            return PointFromId(2056);
        }
    }
    else {
        if (((gv_aIHarvestCamps[lp_harvestIndex] == 1) || (gv_aIHarvestCamps[lp_harvestIndex] == 3) || (gv_aIHarvestCamps[lp_harvestIndex] == 5) || (gv_aIHarvestCamps[lp_harvestIndex] == 7) || (gv_aIHarvestCamps[lp_harvestIndex] == 8) || (gv_aIHarvestCamps[lp_harvestIndex] == 10) || (gv_aIHarvestCamps[lp_harvestIndex] == 12))) {
            return PointFromId(1137);
        }
        else {
            return PointFromId(227);
        }
    }
    return PointFromId(46);
}

void gf_AIPrepareAttackWave (int lp_harvestIndex) {
    int init_i;

    // Variable Declarations
    unit lv_indexUnit;
    point lv_spawnLocation;
    string[4] lv_waveUnitTypes;

    // Variable Initialization
    lv_indexUnit = null;
    lv_spawnLocation = null;
    init_i = 0;
    while (init_i <= 3) {
        lv_waveUnitTypes[init_i] = null;
        init_i = init_i + 1;
    }

    // Implementation
    if ((TriggerIsEnabled(gt_TransmissionDefendDroneWarningQ) == true)) {
        lv_spawnLocation = PointFromId(2083);
    }
    else {
        lv_spawnLocation = gf_AIWhereToSpawnHarvesters(lp_harvestIndex);
    }
    if ((gv_aIHarvestIsReaction[lp_harvestIndex] == true)) {
        if ((gv_score_Player <= 1)) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION3, 0, "PrimalMutalisk", libHots_gf_DifficultyValueInt2(1, 1, 2), "PrimalFlyer", libHots_gf_DifficultyValueInt2(1, 1, 2), null, 0, lv_spawnLocation);
        }
        else if ((gv_score_Player <= 3)) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION3, 0, "PrimalMutalisk", libHots_gf_DifficultyValueInt2(2, 2, 3), "PrimalFlyer", libHots_gf_DifficultyValueInt2(1, 1, 2), null, 0, lv_spawnLocation);
        }
        else if ((gv_score_Player <= 5)) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION3, 0, "PrimalMutalisk", libHots_gf_DifficultyValueInt2(2, 2, 3), "PrimalFlyer", libHots_gf_DifficultyValueInt2(2, 2, 3), null, 0, lv_spawnLocation);
        }
        else if ((gv_score_Player <= 7)) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION3, 0, "PrimalMutalisk", libHots_gf_DifficultyValueInt2(3, 3, 4), "PrimalFlyer", libHots_gf_DifficultyValueInt2(2, 2, 3), null, 0, lv_spawnLocation);
        }
    }
    else {
        gv_aIHarvestWaveCount += 1;
        if ((gv_aIHarvestWaveCount <= 2)) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION33, libHots_gf_DifficultyValueInt2(4, 4, 6), "PrimalHydralisk", libHots_gf_DifficultyValueInt2(2, 2, 3), null, libHots_gf_DifficultyValueInt2(0, 0, 0), null, 0, lv_spawnLocation);
        }
        else if ((gv_aIHarvestWaveCount <= 4)) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION33, libHots_gf_DifficultyValueInt2(4, 4, 6), "PrimalHydralisk", libHots_gf_DifficultyValueInt2(1, 1, 2), "PrimalRoach", libHots_gf_DifficultyValueInt2(2, 2, 3), null, 0, lv_spawnLocation);
        }
        else if ((gv_aIHarvestWaveCount <= 6)) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION33, libHots_gf_DifficultyValueInt2(6, 6, 8), "PrimalHydralisk", libHots_gf_DifficultyValueInt2(2, 2, 4), "PrimalRoach", libHots_gf_DifficultyValueInt2(2, 2, 3), null, 0, lv_spawnLocation);
        }
        else if ((gv_aIHarvestWaveCount <= 8)) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION33, libHots_gf_DifficultyValueInt2(6, 6, 8), "PrimalHydralisk", libHots_gf_DifficultyValueInt2(3, 3, 4), "PrimalRoach", libHots_gf_DifficultyValueInt2(2, 2, 3), null, 0, lv_spawnLocation);
        }
        else if (true) {
            gf_AIPrepareWaveSingle(lp_harvestIndex, gv_pLAYER_02_DOMINION33, libHots_gf_DifficultyValueInt2(6, 6, 8), "PrimalHydralisk", libHots_gf_DifficultyValueInt2(4, 4, 5), "PrimalRoach", libHots_gf_DifficultyValueInt2(1, 1, 1), null, 0, lv_spawnLocation);
        }
    }
}

void gf_AIPrepareWaveSingle (int lp_harvestIndex, int lp_player, int lp_zerglingCount, string lp_unitType1, int lp_count1, string lp_unitType2, int lp_count2, string lp_unitType3, int lp_count3, point lp_spawnLocation) {
    unitgroup autoF99E8FC0_g;
    int autoF99E8FC0_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization
    lv_indexUnit = null;

    // Implementation
    if ((lp_zerglingCount > 0)) {
        UnitCreate(lp_zerglingCount, "PrimalZergling", c_unitCreateIgnorePlacement, lp_player, lp_spawnLocation, 270.0);
        UnitGroupAddUnitGroup(gv_aIHarvestGroups[lp_harvestIndex], UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_aIHarvestGroupsPeons[lp_harvestIndex], UnitLastCreatedGroup());
    }
    else {
    }
    if ((lp_unitType1 != null) && (lp_count1 > 0)) {
        UnitCreate(lp_count1, lp_unitType1, c_unitCreateIgnorePlacement, lp_player, lp_spawnLocation, 270.0);
        UnitGroupAddUnitGroup(gv_aIHarvestGroups[lp_harvestIndex], UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_aIHarvestGroupsArmy[lp_harvestIndex], UnitLastCreatedGroup());
    }
    else {
    }
    if ((lp_unitType2 != null) && (lp_count2 > 0)) {
        UnitCreate(lp_count2, lp_unitType2, c_unitCreateIgnorePlacement, lp_player, lp_spawnLocation, 270.0);
        UnitGroupAddUnitGroup(gv_aIHarvestGroups[lp_harvestIndex], UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_aIHarvestGroupsArmy[lp_harvestIndex], UnitLastCreatedGroup());
    }
    else {
    }
    if ((lp_unitType3 != null) && (lp_count3 > 0)) {
        UnitCreate(lp_count3, lp_unitType3, c_unitCreateIgnorePlacement, lp_player, lp_spawnLocation, 270.0);
        UnitGroupAddUnitGroup(gv_aIHarvestGroups[lp_harvestIndex], UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_aIHarvestGroupsArmy[lp_harvestIndex], UnitLastCreatedGroup());
    }
    else {
    }
    autoF99E8FC0_g = gv_aIHarvestGroups[lp_harvestIndex];
    autoF99E8FC0_u = 1;
    while (autoF99E8FC0_u <= UnitGroupCount(autoF99E8FC0_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(autoF99E8FC0_g, autoF99E8FC0_u);
        UnitSetCustomValue(lv_indexUnit, 0, lp_harvestIndex);
        if (lv_indexUnit == UnitGroupUnit(autoF99E8FC0_g, autoF99E8FC0_u)) {
            autoF99E8FC0_u = autoF99E8FC0_u + 1;
        }
    }
    gf_AnimateTallGrassCluster(lp_spawnLocation);
}

trigger auto_gf_AISendHarvestWaveSingle_Trigger = null;
int auto_gf_AISendHarvestWaveSingle_lp_campIndex;
bool auto_gf_AISendHarvestWaveSingle_lp_isReaction;
bool auto_gf_AISendHarvestWaveSingle_lp_reactToDragging;

void gf_AISendHarvestWaveSingle (int lp_campIndex, bool lp_isReaction, bool lp_reactToDragging) {
    auto_gf_AISendHarvestWaveSingle_lp_campIndex = lp_campIndex;
    auto_gf_AISendHarvestWaveSingle_lp_isReaction = lp_isReaction;
    auto_gf_AISendHarvestWaveSingle_lp_reactToDragging = lp_reactToDragging;

    if (auto_gf_AISendHarvestWaveSingle_Trigger == null) {
        auto_gf_AISendHarvestWaveSingle_Trigger = TriggerCreate("auto_gf_AISendHarvestWaveSingle_TriggerFunc");
    }

    TriggerExecute(auto_gf_AISendHarvestWaveSingle_Trigger, false, false);
}

bool auto_gf_AISendHarvestWaveSingle_TriggerFunc (bool testConds, bool runActions) {
    int lp_campIndex = auto_gf_AISendHarvestWaveSingle_lp_campIndex;
    bool lp_isReaction = auto_gf_AISendHarvestWaveSingle_lp_isReaction;
    bool lp_reactToDragging = auto_gf_AISendHarvestWaveSingle_lp_reactToDragging;

    unitgroup auto07341190_g;
    int auto07341190_u;

    // Variable Declarations
    int lv_harvestIndex;
    unit lv_indexUnit;
    int lv_aIPlayer;

    // Variable Initialization
    lv_harvestIndex = 0;
    lv_indexUnit = null;
    lv_aIPlayer = 0;

    // Implementation
    if (((gv_gameOver == true) || (gv_score_Player >= gv_score_Quota_Player))) {
        return true;
    }
    else {
    }
    if ((gv_quillgorCampHarvestIndex[lp_campIndex] > 0)) {
        lv_harvestIndex = gv_quillgorCampHarvestIndex[lp_campIndex];
        if ((gv_aIHarvestIsReaction[lv_harvestIndex] == true) && (gv_aIHarvestRetreating[lv_harvestIndex] == true) && (libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lv_harvestIndex]) == false)) {
            gv_aIHarvestRetreating[lv_harvestIndex] = false;
            UnitGroupIssueOrder(gv_aIHarvestGroups[lv_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), gv_quillgorCampReactionGatherPoint[lp_campIndex][1]), c_orderQueueReplace);
            if ((gv_quillgorCampReactionGatherPoint[lp_campIndex][2] != null)) {
                UnitGroupIssueOrder(gv_aIHarvestGroups[lv_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), gv_quillgorCampReactionGatherPoint[lp_campIndex][2]), c_orderQueueAddToEnd);
            }
            else {
            }
            UnitGroupIssueOrder(gv_aIHarvestGroups[lv_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_quillgorCampRegions[lp_campIndex])), c_orderQueueAddToEnd);
            gf_AIQuillgorCampHarvesting(lv_harvestIndex);
            return true;
        }
        else {
        }
        return true;
    }
    else {
    }
    if ((gv_aIHarvestReactionWaveDestroyed[lp_campIndex] == true) && (lp_isReaction == true)) {
        return true;
    }
    else {
    }
    gv_currentHarvestIndex += 1;
    lv_harvestIndex = gv_currentHarvestIndex;
    gv_aIHarvestCamps[lv_harvestIndex] = lp_campIndex;
    gv_aIHarvestIsReaction[lv_harvestIndex] = lp_isReaction;
    gv_aIHarvestIsReactionToDragging[lv_harvestIndex] = lp_reactToDragging;
    gv_quillgorCampHarvestIndex[lp_campIndex] = lv_harvestIndex;
    gv_quillgorCampHarvestedBefore[lp_campIndex] = true;
    gf_AIPrepareAttackWave(lv_harvestIndex);
    libNtve_gf_AddUnitGroupToUnitGroup(gv_aIHarvestGroups[lv_harvestIndex], gv_enemyHarvesters_All);
    auto07341190_g = gv_aIHarvestGroups[lv_harvestIndex];
    auto07341190_u = 1;
    while (auto07341190_u <= UnitGroupCount(auto07341190_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(auto07341190_g, auto07341190_u);
        if ((lp_isReaction == true)) {
            UnitSetPropertyFixed(lv_indexUnit, c_unitPropMovementSpeed, UnitTypeGetProperty("PrimalFlyer", c_unitPropMovementSpeed));
        }
        else {
            UnitSetPropertyFixed(lv_indexUnit, c_unitPropMovementSpeed, UnitTypeGetProperty("PrimalHydralisk", c_unitPropMovementSpeed));
        }
        if (lv_indexUnit == UnitGroupUnit(auto07341190_g, auto07341190_u)) {
            auto07341190_u = auto07341190_u + 1;
        }
    }
    if ((lp_isReaction == true)) {
        UnitGroupIssueOrder(gv_aIHarvestGroups[lv_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), gv_quillgorCampReactionGatherPoint[lp_campIndex][1]), c_orderQueueReplace);
        if ((gv_quillgorCampReactionGatherPoint[lp_campIndex][2] != null)) {
            UnitGroupIssueOrder(gv_aIHarvestGroups[lv_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), gv_quillgorCampReactionGatherPoint[lp_campIndex][2]), c_orderQueueAddToEnd);
        }
        else {
        }
        UnitGroupIssueOrder(gv_aIHarvestGroups[lv_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_quillgorCampRegions[lp_campIndex])), c_orderQueueAddToEnd);
    }
    else {
        UnitGroupIssueOrder(gv_aIHarvestGroups[lv_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_quillgorCampRegions[lp_campIndex])), c_orderQueueReplace);
    }
    gf_AIQuillgorCampHarvesting(lv_harvestIndex);
    return true;
}

void gf_AIRetreatHarvestGroup (int lp_harvestIndex) {
    // Implementation
    if ((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lp_harvestIndex]) == true)) {
        gv_quillgorCampHarvestIndex[gv_aIHarvestCamps[lp_harvestIndex]] = 0;
        return ;
    }
    else {
    }
    gv_aIHarvestRetreating[lp_harvestIndex] = true;
    UnitGroupIssueOrder(gv_aIHarvestGroups[lp_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(46)), c_orderQueueReplace);
}

bool gf_AIHarvesterIsAttackingMeat (unit lp_harvester, int lp_campIndex) {
    int auto9042254E_ae;
    int auto9042254E_ai;

    // Variable Declarations
    int lv_index;
    fixed lv_distance;
    fixed lv_distanceMin;

    // Variable Initialization
    lv_index = 0;
    lv_distance = 0.0;
    lv_distanceMin = 0.0;

    // Implementation
    auto9042254E_ae = (UnitOrderCount(lp_harvester) - 1);
    auto9042254E_ai = 1;
    lv_index = 0;
    while ((auto9042254E_ai >= 0 && lv_index <= auto9042254E_ae) || (auto9042254E_ai <= 0 && lv_index >= auto9042254E_ae)) {
        if ((AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(lp_harvester, lv_index))) == "attack") && (OrderGetTargetUnit(UnitOrder(lp_harvester, lv_index)) != null) && (UnitGetType(OrderGetTargetUnit(UnitOrder(lp_harvester, lv_index))) == "SpaceCowCorpse")) {
            return true;
        }
        else {
        }
        if (lv_index == auto9042254E_ae) {
            break;
        }
        lv_index = lv_index + auto9042254E_ai;
    }
    return false;
}

trigger auto_gf_AIQuillgorHarvesterLeashing_Trigger = null;
unit auto_gf_AIQuillgorHarvesterLeashing_lp_harvester;
int auto_gf_AIQuillgorHarvesterLeashing_lp_campIndex;

void gf_AIQuillgorHarvesterLeashing (unit lp_harvester, int lp_campIndex) {
    auto_gf_AIQuillgorHarvesterLeashing_lp_harvester = lp_harvester;
    auto_gf_AIQuillgorHarvesterLeashing_lp_campIndex = lp_campIndex;

    if (auto_gf_AIQuillgorHarvesterLeashing_Trigger == null) {
        auto_gf_AIQuillgorHarvesterLeashing_Trigger = TriggerCreate("auto_gf_AIQuillgorHarvesterLeashing_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIQuillgorHarvesterLeashing_Trigger, false, false);
}

bool auto_gf_AIQuillgorHarvesterLeashing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_harvester = auto_gf_AIQuillgorHarvesterLeashing_lp_harvester;
    int lp_campIndex = auto_gf_AIQuillgorHarvesterLeashing_lp_campIndex;

    int autoF50988E1_n;
    int autoF50988E1_i;

    // Implementation
    if ((UnitGroupHasUnit(gv_harvesterLeashingGroup, lp_harvester) == true)) {
        if ((gv_corpse_PerCamp[lp_campIndex] != null) && (UnitIsAlive(gv_corpse_PerCamp[lp_campIndex]) == true)) {
            if ((gf_CorpseBeingHarvestedByPlayer(lp_campIndex) == false)) {
                UnitIssueOrder(lp_harvester, OrderTargetingUnit(AbilityCommand("attack", 0), gv_corpse_PerCamp[lp_campIndex]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_harvester, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_corpse_PerCamp[lp_campIndex])), c_orderQueueReplace);
            }
        }
        else {
        }
        return true;
    }
    else {
    }
    UnitGroupAdd(gv_harvesterLeashingGroup, lp_harvester);
    autoF50988E1_n = 6;
    autoF50988E1_i = 1;
    while (autoF50988E1_i <= autoF50988E1_n) {
        if (((gv_gameOver == true) || (UnitIsAlive(lp_harvester) == false) || (UnitGroupHasUnit(gv_harvesterLeashingGroup, lp_harvester) == false) || (gv_corpse_PerCamp[lp_campIndex] == null) || (UnitIsAlive(gv_corpse_PerCamp[lp_campIndex]) == false))) {
            UnitGroupRemove(gv_harvesterLeashingGroup, lp_harvester);
            return true;
        }
        else {
        }
        if ((DistanceBetweenPoints(UnitGetPosition(lp_harvester), UnitGetPosition(gv_corpse_PerCamp[lp_campIndex])) < 4.0)) {
            UnitGroupRemove(gv_harvesterLeashingGroup, lp_harvester);
            return true;
        }
        else {
        }
        if ((UnitIsAlive(gv_corpse_PerCamp[lp_campIndex]) == true)) {
            if ((gf_CorpseBeingHarvestedByPlayer(lp_campIndex) == false)) {
                UnitIssueOrder(lp_harvester, OrderTargetingUnit(AbilityCommand("attack", 0), gv_corpse_PerCamp[lp_campIndex]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_harvester, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_corpse_PerCamp[lp_campIndex])), c_orderQueueReplace);
            }
        }
        else {
        }
        Wait(0.5, c_timeAI);
        autoF50988E1_i = autoF50988E1_i + 1;
    }
    UnitGroupRemove(gv_harvesterLeashingGroup, lp_harvester);
    return true;
}

void gf_AIQuillgorCampHarvesting (int lp_harvestIndex) {
    unitgroup autoA62CBCFC_g;
    int autoA62CBCFC_u;
    unitgroup auto7F095C30_g;
    int auto7F095C30_u;
    unitgroup auto3C63A6AC_g;
    int auto3C63A6AC_u;

    // Variable Declarations
    int lv_campIndex;
    region lv_campRegion;
    unitgroup lv_potentialEnemies;
    unit lv_indexHarvester;
    unitgroup lv_tempGroup;
    unitgroup lv_enemyUnits;

    // Variable Initialization
    lv_campIndex = 0;
    lv_campRegion = null;
    lv_potentialEnemies = UnitGroupEmpty();
    lv_indexHarvester = null;
    lv_tempGroup = UnitGroupEmpty();
    lv_enemyUnits = UnitGroupEmpty();

    // Implementation
    lv_campIndex = gv_aIHarvestCamps[lp_harvestIndex];
    lv_campRegion = gv_quillgorCampRegions[lv_campIndex];
    if ((gv_aIHarvestIsReaction[lp_harvestIndex] == false)) {
        UnitGroupLoopBegin(gv_quillgorCampCreeps[lv_campIndex]);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_02_DOMINION33);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    while (true) {
        if (((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lp_harvestIndex]) == true) || (libSwaC_gf_MissionObjectiveStateCheck("ZZerus01Objective01", 2) == true))) {
            gf_AIRetreatHarvestGroup(lp_harvestIndex);
            return ;
        }
        else {
        }
        if ((UnitIsAlive(gv_corpse_PerCamp[lv_campIndex]) == true)) {
            if ((gf_IsCorpseOrMeat(gv_corpse_PerCamp[lv_campIndex], 0) == true)) {
                lv_enemyUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_corpse_PerCamp[lv_campIndex]), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
                if (((gv_aIHarvestInCombatIndex[lp_harvestIndex] > 0) || ((libNtve_gf_UnitGroupIsDead(lv_enemyUnits) == false) && (gf_UnitGroupCanAttackUnitGroup(gv_aIHarvestGroups[lp_harvestIndex], lv_enemyUnits) == true)))) {
                    if ((gv_aIHarvestIsReaction[lp_harvestIndex] == false)) {
                        auto3C63A6AC_g = gv_aIHarvestGroups[lp_harvestIndex];
                        auto3C63A6AC_u = 1;
                        while (auto3C63A6AC_u <= UnitGroupCount(auto3C63A6AC_g, c_unitCountAll)) {
                            lv_indexHarvester = UnitGroupUnit(auto3C63A6AC_g, auto3C63A6AC_u);
                            if ((DistanceBetweenPoints(UnitGetPosition(lv_indexHarvester), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])) > 12.0)) {
                                gf_AIQuillgorHarvesterLeashing(lv_indexHarvester, lv_campIndex);
                            }
                            else if ((gf_AIHarvesterIsAttackingMeat(lv_indexHarvester, 0) == true)) {
                            }
                            else if ((DistanceBetweenPoints(UnitGetPosition(lv_indexHarvester), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])) > 7.0) && (UnitTestState(lv_indexHarvester, c_unitStateIdle) == true)) {
                                UnitIssueOrder(lv_indexHarvester, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])), c_orderQueueReplace);
                            }
                            if (lv_indexHarvester == UnitGroupUnit(auto3C63A6AC_g, auto3C63A6AC_u)) {
                                auto3C63A6AC_u = auto3C63A6AC_u + 1;
                            }
                        }
                    }
                    else {
                    }
                }
                else {
                    if ((gf_UnitGroupWithinRangeOfTarget(gv_aIHarvestGroups[lp_harvestIndex], UnitGetPosition(gv_corpse_PerCamp[lv_campIndex]), 7) == true)) {
                        if ((gv_aIHarvestIsReaction[lp_harvestIndex] == true)) {
                            gf_AIRetreatHarvestGroup(lp_harvestIndex);
                            return ;
                        }
                        else {
                            if ((gf_CorpseBeingHarvestedByPlayer(lv_campIndex) == false)) {
                                UnitGroupIssueOrder(gv_aIHarvestGroups[lp_harvestIndex], OrderTargetingUnit(AbilityCommand("attack", 0), gv_corpse_PerCamp[lv_campIndex]), c_orderQueueReplace);
                            }
                            else {
                                UnitGroupIssueOrder(gv_aIHarvestGroups[lp_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_corpse_PerCamp[lp_harvestIndex])), c_orderQueueReplace);
                            }
                        }
                    }
                    else {
                        if ((gv_aIHarvestIsReaction[lp_harvestIndex] == false)) {
                            if ((gf_CorpseBeingEaten(lv_campIndex) == true)) {
                                auto7F095C30_g = gv_aIHarvestGroups[lp_harvestIndex];
                                auto7F095C30_u = 1;
                                while (auto7F095C30_u <= UnitGroupCount(auto7F095C30_g, c_unitCountAll)) {
                                    lv_indexHarvester = UnitGroupUnit(auto7F095C30_g, auto7F095C30_u);
                                    if ((DistanceBetweenPoints(UnitGetPosition(lv_indexHarvester), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])) > 7.0) && (UnitGroupHasUnit(gv_harvesterLeashingGroup, lv_indexHarvester) == false)) {
                                        UnitIssueOrder(lv_indexHarvester, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])), c_orderQueueReplace);
                                    }
                                    else {
                                    }
                                    if (lv_indexHarvester == UnitGroupUnit(auto7F095C30_g, auto7F095C30_u)) {
                                        auto7F095C30_u = auto7F095C30_u + 1;
                                    }
                                }
                            }
                            else {
                                lv_tempGroup = UnitGroupCopy(gv_aIHarvestGroups[lp_harvestIndex]);
                                autoA62CBCFC_g = lv_tempGroup;
                                autoA62CBCFC_u = 1;
                                while (autoA62CBCFC_u <= UnitGroupCount(autoA62CBCFC_g, c_unitCountAll)) {
                                    lv_indexHarvester = UnitGroupUnit(autoA62CBCFC_g, autoA62CBCFC_u);
                                    if ((UnitGroupHasUnit(gv_harvesterLeashingGroup, lv_indexHarvester) == true)) {
                                        UnitGroupRemove(lv_tempGroup, lv_indexHarvester);
                                    }
                                    else {
                                    }
                                    if (lv_indexHarvester == UnitGroupUnit(autoA62CBCFC_g, autoA62CBCFC_u)) {
                                        autoA62CBCFC_u = autoA62CBCFC_u + 1;
                                    }
                                }
                                UnitGroupIssueOrder(lv_tempGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])), c_orderQueueReplace);
                            }
                        }
                        else {
                            if ((gf_UnitGroupIsIdle(gv_aIHarvestGroups[lp_harvestIndex]) == true) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupClosestToPoint(gv_aIHarvestGroups[lp_harvestIndex], UnitGetPosition(gv_corpse_PerCamp[lv_campIndex]))), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])) < 10.0)) {
                                UnitGroupIssueOrder(gv_aIHarvestGroups[lp_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])), c_orderQueueReplace);
                            }
                            else {
                            }
                        }
                    }
                }
            }
            else {
                if ((gv_aIHarvestIsReaction[lp_harvestIndex] == true)) {
                    if ((gf_UnitGroupWithinRangeOfTarget(gv_aIHarvestGroups[lp_harvestIndex], RegionGetCenter(lv_campRegion), 6) == true)) {
                        gf_AIRetreatHarvestGroup(lp_harvestIndex);
                        return ;
                    }
                    else {
                    }
                }
                else {
                    gf_AIRetreatHarvestGroup(lp_harvestIndex);
                    return ;
                }
            }
        }
        else {
            if ((libNtve_gf_UnitGroupIsDead(gv_quillgorCampCreeps[lv_campIndex]) == false)) {
                if ((gv_aIHarvestIsReaction[lp_harvestIndex] == false)) {
                    UnitGroupIssueOrder(gv_aIHarvestGroups[lp_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lv_campRegion)), c_orderQueueReplace);
                }
                else {
                    if ((gv_aIHarvestInCombatIndex[lp_harvestIndex] > 0)) {
                    }
                    else {
                        if ((gf_AIReactionWaveSearchInvaderToAttack(lp_harvestIndex) == false)) {
                            if ((gf_UnitGroupWithinRangeOfTarget(gv_aIHarvestGroups[lp_harvestIndex], RegionGetCenter(lv_campRegion), 6) == true)) {
                                gf_AIRetreatHarvestGroup(lp_harvestIndex);
                                return ;
                            }
                            else {
                                if ((gf_UnitGroupIsIdle(gv_aIHarvestGroups[lp_harvestIndex]) == true)) {
                                    UnitGroupIssueOrder(gv_aIHarvestGroups[lp_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lv_campRegion)), c_orderQueueReplace);
                                }
                                else {
                                }
                            }
                        }
                        else {
                        }
                    }
                }
            }
            else {
                if ((UnitIsAlive(gv_corpse_PerCamp[lv_campIndex]) == false)) {
                    Wait(1.0, c_timeAI);
                    if ((UnitIsAlive(gv_corpse_PerCamp[lv_campIndex]) == false)) {
                        gf_AIRetreatHarvestGroup(lp_harvestIndex);
                        return ;
                    }
                    else {
                    }
                }
                else {
                }
            }
        }
        Wait(1.0, c_timeAI);
    }
}

bool gf_AIReactionWaveSearchInvaderToAttack (int lp_harvestIndex) {
    unitgroup auto6A23E2D3_g;
    int auto6A23E2D3_u;

    // Variable Declarations
    int lv_campIndex;
    region lv_campRegion;
    unitgroup lv_potentialEnemies;
    unitgroup lv_enemies;
    unit lv_closestEnemy;
    fixed lv_closestDistance;
    fixed lv_distance;
    unit lv_indexEnemy;

    // Variable Initialization
    lv_campIndex = 0;
    lv_campRegion = null;
    lv_potentialEnemies = UnitGroupEmpty();
    lv_enemies = UnitGroupEmpty();
    lv_closestEnemy = null;
    lv_closestDistance = 0.0;
    lv_distance = 0.0;
    lv_indexEnemy = null;

    // Implementation
    lv_campIndex = gv_aIHarvestCamps[lp_harvestIndex];
    lv_campRegion = gv_quillgorCampRegions[lv_campIndex];
    if ((libNtve_gf_UnitGroupIsDead(gv_quillgorCampCreeps[lv_campIndex]) == true)) {
        return false;
    }
    else {
    }
    UnitGroupLoopBegin(gv_quillgorCampCreeps[lv_campIndex]);
    while (!UnitGroupLoopDone()) {
        lv_enemies = UnitGroupAlliance(UnitGetOwner(UnitGroupLoopCurrent()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((libNtve_gf_UnitGroupIsDead(lv_enemies) == false)) {
            UnitGroupAddUnitGroup(lv_potentialEnemies, lv_enemies);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_UnitGroupIsDead(lv_potentialEnemies) == true)) {
        return false;
    }
    else {
    }
    auto6A23E2D3_g = lv_potentialEnemies;
    auto6A23E2D3_u = 1;
    while (auto6A23E2D3_u <= UnitGroupCount(auto6A23E2D3_g, c_unitCountAll)) {
        lv_indexEnemy = UnitGroupUnit(auto6A23E2D3_g, auto6A23E2D3_u);
        lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_indexEnemy), RegionGetCenter(lv_campRegion));
        if ((lv_closestEnemy == null)) {
            lv_closestEnemy = lv_indexEnemy;
            lv_closestDistance = lv_distance;
        }
        else {
            if ((lv_distance < lv_closestDistance)) {
                lv_closestEnemy = lv_indexEnemy;
                lv_closestDistance = lv_distance;
            }
            else {
            }
        }
        if (lv_indexEnemy == UnitGroupUnit(auto6A23E2D3_g, auto6A23E2D3_u)) {
            auto6A23E2D3_u = auto6A23E2D3_u + 1;
        }
    }
    UnitGroupIssueOrder(gv_aIHarvestGroupsPeons[lp_harvestIndex], OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_closestEnemy)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZZerus1");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init03aPrimalCreepCamps, true, true);
    TriggerExecute(gt_Init03bRespawnOrder, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libSwaC_gf_EnableCampaignTechUnit(true, "Mutalisk", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION34, gv_pLAYER_01_USER, 5);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION35, gv_pLAYER_01_USER, 7);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION32, gv_pLAYER_01_USER, 5);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION33);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION2, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION3, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION33, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION34, 7);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 50000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 50000);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 3, true);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION35, gv_pLAYER_02_DOMINION, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION35, gv_pLAYER_02_DOMINION2, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION35, gv_pLAYER_02_DOMINION3, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION35, gv_pLAYER_02_DOMINION33, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION35, gv_pLAYER_02_DOMINION34, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION32, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION32, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION32, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION33, gv_pLAYER_02_DOMINION32, 5);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION33);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION34);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION35);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION32);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_strangeCreature;

    // Variable Initialization
    lv_strangeCreature = null;

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(3), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(3)), 0, 0);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    UnitGroupLoopBegin(UnitGroup("Mutalisk", c_playerAny, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_introMutalisks, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitSetHeight(UnitGroupLoopCurrent(), 10.0, 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(6), PointFromId(541));
    gv_poolEssence[1] = UnitFromId(154);
    gv_poolEssence[2] = UnitFromId(1346);
    gv_poolEssence[3] = UnitFromId(2060);
    IntLoopBegin(1, 3);
    while (!IntLoopDone()) {
        libSwaC_gf_SetUnitInfoTextCampaign(gv_poolEssence[IntLoopCurrent()], null, StringExternal("Param/Value/94DEDBC1"), StringExternal("Param/Value/135395C4"));
        IntLoopStep();
    }
    IntLoopEnd();
    gv_tHE_ONE_DEHAKA = UnitFromId(1396);
    libNtve_gf_MakeUnitInvulnerable(gv_tHE_ONE_DEHAKA, true);
    UnitSetState(gv_tHE_ONE_DEHAKA, c_unitStateTargetable, false);
    UnitSetState(gv_tHE_ONE_DEHAKA, c_unitStateSelectable, false);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_tHE_ONE_DEHAKA, StringExternal("Param/Value/423E2973"), StringExternal("Param/Value/CAFE30AC"), null);
    UnitSetState(gv_tHE_ONE_DEHAKA, c_unitStateTooltipable, true);
    libNtve_gf_SendActorMessageToUnit(gv_tHE_ONE_DEHAKA, "Signal RemoveGlow");
    UnitGroupLoopBegin(UnitGroup("SpaceCowSmall", gv_pLAYER_02_DOMINION32, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(150.0, 150.0, 225.0));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpaceCowMedium", gv_pLAYER_02_DOMINION32, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(325.0, 325.0, 475.0));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_introGuardians = UnitGroup("PrimalFlyer", gv_pLAYER_02_DOMINION, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_introZerglings = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03a Primal Creep Camps
//--------------------------------------------------------------------------------------------------
bool gt_Init03aPrimalCreepCamps_Func (bool testConds, bool runActions) {
    int auto9625EB97_ae;
    int auto9625EB97_ai;

    // Variable Declarations
    int lv_campIndex;
    int lv_unitIndex;
    point lv_location;

    // Variable Initialization
    lv_campIndex = 0;
    lv_unitIndex = 0;
    lv_location = null;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_quillgorCampCount = 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(8);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(1425);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(7);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2192);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(13);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2193);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(9);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2194);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][2] = PointFromId(2058);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(6);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2195);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][2] = PointFromId(2061);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(10);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2196);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][2] = PointFromId(2065);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(12);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2197);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][2] = PointFromId(2076);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(11);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2198);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(4);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2199);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][2] = PointFromId(2077);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(5);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2200);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][2] = PointFromId(2080);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(14);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2201);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(23);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2202);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][2] = PointFromId(2081);
    gv_quillgorCampCount += 1;
    gv_quillgorCampRegions[gv_quillgorCampCount] = RegionFromId(15);
    gv_quillgorCampReactionGatherPoint[gv_quillgorCampCount][1] = PointFromId(2203);
    auto9625EB97_ae = gv_quillgorCampCount;
    auto9625EB97_ai = 1;
    lv_campIndex = 1;
    while ((auto9625EB97_ai >= 0 && lv_campIndex <= auto9625EB97_ae) || (auto9625EB97_ai <= 0 && lv_campIndex >= auto9625EB97_ae)) {
        gv_quillgorCampCreeps[lv_campIndex] = UnitGroup(null, gv_pLAYER_02_DOMINION32, gv_quillgorCampRegions[lv_campIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupLoopBegin(gv_quillgorCampCreeps[lv_campIndex]);
        while (!UnitGroupLoopDone()) {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, lv_campIndex);
            lv_location = UnitGetPosition(UnitGroupLoopCurrent());
            PointSetFacing(lv_location, UnitGetFacing(UnitGroupLoopCurrent()));
            libHots_gf_StorePointForUnit(UnitGroupLoopCurrent(), 1, lv_location);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if (lv_campIndex == auto9625EB97_ae) {
            break;
        }
        lv_campIndex = lv_campIndex + auto9625EB97_ai;
    }
    TriggerExecute(gt_QuillgorCampsLeash, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03aPrimalCreepCamps_Init () {
    gt_Init03aPrimalCreepCamps = TriggerCreate("gt_Init03aPrimalCreepCamps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03b Respawn Order
//--------------------------------------------------------------------------------------------------
bool gt_Init03bRespawnOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campindex;

    // Variable Initialization
    lv_campindex = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_quillgorRespawnOrder[lv_campindex] = RegionFromId(7);
    lv_campindex += 1;
    gv_quillgorRespawnOrder[lv_campindex] = RegionFromId(11);
    lv_campindex += 1;
    gv_quillgorRespawnOrder[lv_campindex] = RegionFromId(4);
    lv_campindex += 1;
    gv_quillgorRespawnOrder[lv_campindex] = RegionFromId(13);
    lv_campindex += 1;
    gv_quillgorRespawnOrder[lv_campindex] = RegionFromId(5);
    lv_campindex += 1;
    gv_quillgorRespawnOrder[lv_campindex] = RegionFromId(8);
    lv_campindex += 1;
    gv_quillgorRespawnOrder[lv_campindex] = RegionFromId(6);
    lv_campindex += 1;
    gv_quillgorRespawnOrder[lv_campindex] = RegionFromId(12);
    lv_campindex += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03bRespawnOrder_Init () {
    gt_Init03bRespawnOrder = TriggerCreate("gt_Init03bRespawnOrder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZZerus01MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(16), 0.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(3), 0.0, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(20), RegionFromId(20), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(22), gv_pLAYER_01_USER);
    TriggerExecute(gt_InitializeSporeRayPatrols, true, false);
    TriggerExecute(gt_FirstCrabeetle, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_brakkLife = libNtve_gf_DifficultyValueFixed(1000.0, 1000.0, 1500.0, 2500.0);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        PlayerGroupLoopBegin(gv_enemyPlayers);
        while (!PlayerGroupLoopDone()) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            PlayerGroupLoopStep();
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Quillgor");
    libSwaC_gf_AddMissionTipUserData("Biomass");
    libSwaC_gf_AddMissionTipUserData("Drones");
    libSwaC_gf_AddMissionTipUserData("Zerg Expansion");
    libSwaC_gf_AddMissionTipUserData("Mutalisk");
    libSwaC_gf_AddMissionTipUserData("Base Defense");
    libSwaC_gf_AddMissionTipUserData("Brakk");
    libSwaC_gf_AddMissionTipUserData("Bonus Objective");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalZergling", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalHydralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalRoach", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SwarmHost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalMutalisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalFlyer", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalUltralisk", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PrimalTownHall", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Brakk Attakk!
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGBrakkAttakk_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHarvestMeatComplete, true, true);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_SendBrakkAttack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGBrakkAttakk_Init () {
    gt_DEBUGBrakkAttakk = TriggerCreate("gt_DEBUGBrakkAttakk_Func");
    TriggerAddEventChatMessage(gt_DEBUGBrakkAttakk, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DEBUGBrakkAttakk, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Meat Areas
//--------------------------------------------------------------------------------------------------
bool gt_RevealMeatAreas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, 10);
    while (!IntLoopDone()) {
        if ((libSwaC_gf_MissionObjectiveStateCheck("ZZerus01Objective01", 2) == false) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION32, gv_quillgorCampRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) || ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_quillgorCampRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) && (UnitGroupCount(UnitGroup("SpaceCowCorpse", 0, gv_quillgorCampRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1)) || ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_quillgorCampRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) && (UnitGroupCount(UnitGroup("MediumTastyCorpse", c_playerAny, gv_quillgorCampRegions[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1)))) {
            VisRevealerEnable(gv_quillgorCampRevealer[IntLoopCurrent()], true);
        }
        else {
            VisRevealerEnable(gv_quillgorCampRevealer[IntLoopCurrent()], false);
        }
        IntLoopStep();
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealMeatAreas_Init () {
    gt_RevealMeatAreas = TriggerCreate("gt_RevealMeatAreas_Func");
    TriggerAddEventTimePeriodic(gt_RevealMeatAreas, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCombatIndicator = 4;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCombatIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Spire Mouseover
//--------------------------------------------------------------------------------------------------
bool gt_SetSpireMouseover_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Spire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetUnitInfoTextCampaign(EventUnit(), StringExternal("Param/Value/DCBCB90F"), StringExternal("Param/Value/CBBE2AC9"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetSpireMouseover_Init () {
    gt_SetSpireMouseover = TriggerCreate("gt_SetSpireMouseover_Func");
    TriggerAddEventUnitConstructProgress(gt_SetSpireMouseover, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(24), RegionFromId(42));
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
    }
    else {
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerEnable(gt_AchievementMeatLostH, true);
    }
    else {
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C9E9A6D5"), null, PointFromId(2));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(1), true, false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Mutalisk", true);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveHarvestMeatCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, true);
    gf_SpawnQuillgorCampSingle(1);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/51F0CBA6"), null, RegionGetCenter(RegionFromId(8)));
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 1, null, UnitFromId(83), "Ref_Center");
    gv_firstQuillgorModel = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_FirstCampSpawnedQ, true, false);
    Wait(60.0, c_timeAI);
    TriggerExecute(gt_StartAI, true, false);
    Wait(150.0, c_timeAI);
    TriggerExecute(gt_SpawnQuillgorCamps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Sequence
//--------------------------------------------------------------------------------------------------
bool gt_GameSequence_Func (bool testConds, bool runActions) {
    fixed auto6F7DCCA4_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(90.0, c_timeAI);
    auto6F7DCCA4_at = 0;
    while (!((gv_score_Player >= 2)) && auto6F7DCCA4_at <= 60.0) {
        Wait(1.0, c_timeAI);
        auto6F7DCCA4_at = auto6F7DCCA4_at + 1.0;
    }
    TriggerExecute(gt_BrakkForcesEatingMeatQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameSequence_Init () {
    gt_GameSequence = TriggerCreate("gt_GameSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Quillgor Attacked
//--------------------------------------------------------------------------------------------------
bool gt_FirstQuillgorAttacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_firstQuillgorModel);
    gv_firstQuillgorModel = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstQuillgorAttacked_Init () {
    gt_FirstQuillgorAttacked = TriggerCreate("gt_FirstQuillgorAttacked_Func");
    TriggerAddEventUnitDamaged(gt_FirstQuillgorAttacked, UnitRefFromUnit(UnitFromId(83)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reminders
//--------------------------------------------------------------------------------------------------
bool gt_Reminders_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(30.0, 6);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(23), 60.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reminders_Init () {
    gt_Reminders = TriggerCreate("gt_Reminders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Kerrigan Revive
//--------------------------------------------------------------------------------------------------
bool gt_PrepareKerriganRevive_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareKerriganRevive_Init () {
    gt_PrepareKerriganRevive = TriggerCreate("gt_PrepareKerriganRevive_Func");
    TriggerAddEventUnitDied(gt_PrepareKerriganRevive, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpse Eaten - Player
//--------------------------------------------------------------------------------------------------
bool gt_CorpseEatenPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;

    // Variable Initialization
    lv_campIndex = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_meats, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campIndex = gf_CampIndexOfQuillgorCorpse(EventUnit());
    if ((lv_campIndex <= 0)) {
        return true;
    }
    else {
    }
    if ((gv_corpse_Ping[lv_campIndex] != c_invalidPingId)) {
        PingDestroy(gv_corpse_Ping[lv_campIndex]);
        gv_corpse_Ping[lv_campIndex] = c_invalidPingId;
    }
    else {
    }
    if ((gv_corpse_PingWarning[lv_campIndex] != c_invalidPingId)) {
        PingDestroy(gv_corpse_PingWarning[lv_campIndex]);
        gv_corpse_PingWarning[lv_campIndex] = c_invalidPingId;
    }
    else {
    }
    UnitCreateEffectPoint(EventUnit(), "FeedZurvan", PointFromId(2020));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1062), "Signal Feed");
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted)) {
        return true;
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(UnitFromId(1062)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0, 270.0);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/303C2D24"), null, UnitGetPosition(UnitFromId(1062)));
    SoundPlay(SoundLink("Terran_Veterancy", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_score_Player += 1;
    TriggerExecute(gt_ObjectiveHarvestMeatUpdate, true, false);
    if ((gv_score_Player >= gv_score_Quota_Player)) {
        PingDestroy(gv_feedingPointPing);
        TriggerExecute(gt_ObjectiveHarvestMeatComplete, true, true);
        if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase3) == c_objectiveStateCompleted)) {
            TriggerExecute(gt_VictorySequence, true, false);
        }
        else {
            TriggerExecute(gt_MidQ, true, true);
            TriggerExecute(gt_SendBrakkAttack, true, false);
        }
        return true;
    }
    else {
    }
    if ((gv_score_Player == 1)) {
        TriggerExecute(gt_ProgressUpdatePlayerFirstMeatQ, true, false);
    }
    else {
    }
    if ((gv_score_Player == 2)) {
        TriggerExecute(gt_ProgressUpdatePlayer2MeatsQ, true, false);
    }
    else {
    }
    if ((gv_score_Player >= 4)) {
        TriggerExecute(gt_ProgressUpdatePlayer4MeatsQ, true, false);
    }
    else {
    }
    if ((gv_score_Player >= 5)) {
        TriggerExecute(gt_ProgressUpdatePlayer5MeatsQ, true, false);
    }
    else {
    }
    if ((gv_score_Player >= 6)) {
        TriggerExecute(gt_ProgressUpdatePlayer6MeatsQ, true, false);
    }
    else {
    }
    if (((gv_score_Player == 1) || (gv_score_Player == 3) || (gv_score_Player == 6))) {
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/10F81790"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpseEatenPlayer_Init () {
    gt_CorpseEatenPlayer = TriggerCreate("gt_CorpseEatenPlayer_Func");
    TriggerAddEventUnitRegion(gt_CorpseEatenPlayer, null, RegionCircle(PointFromId(1402), 1.5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Camp Spawned Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstCampSpawnedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00103", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstCampSpawnedQ_Init () {
    gt_FirstCampSpawnedQ = TriggerCreate("gt_FirstCampSpawnedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Meat Dropped Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstMeatDroppedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    while (!((gv_gameOver == false) && (gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if ((gv_meatMovedByPlayer == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00127", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00128", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstMeatDroppedQ_Init () {
    gt_FirstMeatDroppedQ = TriggerCreate("gt_FirstMeatDroppedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: 1st Chunk Being Harvested - Player Q
//--------------------------------------------------------------------------------------------------
bool gt_Transmission1stChunkBeingHarvestedPlayerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00116", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission1stChunkBeingHarvestedPlayerQ_Init () {
    gt_Transmission1stChunkBeingHarvestedPlayerQ = TriggerCreate("gt_Transmission1stChunkBeingHarvestedPlayerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Starts Dragging Meat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerStartsDraggingMeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MediumTastyCorpse"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerHasStartedDraggingMeat = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerStartsDraggingMeat_Init () {
    gt_PlayerStartsDraggingMeat = TriggerCreate("gt_PlayerStartsDraggingMeat_Func");
    TriggerAddEventUnitChangeOwner(gt_PlayerStartsDraggingMeat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutalisk Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MutaliskButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_trainMutaPressed = true;
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Mutalisk", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutaliskButtonClicked_Init () {
    gt_MutaliskButtonClicked = TriggerCreate("gt_MutaliskButtonClicked_Func");
    TriggerAddEventUnitAbility(gt_MutaliskButtonClicked, null, AbilityCommand("LarvaTrain", 4), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Teach Mutalisks Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTeachMutalisksQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00009", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00010", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTeachMutalisksQ_Init () {
    gt_TransmissionTeachMutalisksQ = TriggerCreate("gt_TransmissionTeachMutalisksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brakk Forces Eating Meat Q
//--------------------------------------------------------------------------------------------------
bool gt_BrakkForcesEatingMeatQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_inCinematic == false) && (gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_CorpseBeingEatenIndicatorDiminish, true, false);
    TriggerExecute(gt_AISendHarvestWaves, true, false);
    gv_brakkStartedDestroyingMeat = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrakkForcesEatingMeatQ_Init () {
    gt_BrakkForcesEatingMeatQ = TriggerCreate("gt_BrakkForcesEatingMeatQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brakk Froces Fighting Quillgar Q
//--------------------------------------------------------------------------------------------------
bool gt_BrakkFrocesFightingQuillgarQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_quillgarAlpha;
    int lv_campIndex;

    // Variable Initialization
    lv_quillgarAlpha = null;
    lv_campIndex = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_campIndex = gv_aIHarvestCamps[gv_firstHarvesterIndex];
    gv_corpseBeingEatenWarningFirstTime = false;
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_BRAKK, "zMission_Zerus01|Line00131", c_transmissionDurationAdd, 0.0, true, 1, 0);
    lv_quillgarAlpha = UnitGroupUnit(UnitGroupFilter("SpaceCowMedium", c_playerAny, gv_quillgorCampCreeps[lv_campIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((UnitIsAlive(lv_quillgarAlpha) == false)) {
        lv_quillgarAlpha = gv_corpse_PerCamp[lv_campIndex];
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_quillgarAlpha), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8823CC17"));
    gv_firstHarvestingWarningPing = PingLastCreated();
    Wait(1.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00093", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    if ((TriggerIsEnabled(gt_ObjectiveQuillgorMeatEnemyCreate) == true)) {
        Wait(1.0, c_timeReal);
        TriggerExecute(gt_ObjectiveQuillgorMeatEnemyCreate, true, true);
    }
    else {
    }
    TriggerQueueExit();
    if ((gv_firstHarvestingWarningPing != c_invalidPingId)) {
        while (!((gv_aIHarvestInCombatIndex[gv_firstHarvesterIndex] == 0))) {
            Wait(1.0, c_timeGame);
        }
        if ((gv_firstHarvestingWarningPing != c_invalidPingId)) {
            PingDestroy(gv_firstHarvestingWarningPing);
            gv_firstHarvestingWarningPing = c_invalidPingId;
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrakkFrocesFightingQuillgarQ_Init () {
    gt_BrakkFrocesFightingQuillgarQ = TriggerCreate("gt_BrakkFrocesFightingQuillgarQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Update - Player - First Meat Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressUpdatePlayerFirstMeatQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SpawnQuillgorCamps, false);
    TriggerExecute(gt_GameSequence, true, false);
    TriggerQueueEnter();
    if ((TriggerIsEnabled(gt_SpawnQuillgorCampsTransmissionQ) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00051", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00052", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00050", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    TriggerExecute(gt_SpawnQuillgorCampsTransmissionQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressUpdatePlayerFirstMeatQ_Init () {
    gt_ProgressUpdatePlayerFirstMeatQ = TriggerCreate("gt_ProgressUpdatePlayerFirstMeatQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Update - Player - 2 Meats Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressUpdatePlayer2MeatsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_BRAKK, "zMission_Zerus01|Line00038", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressUpdatePlayer2MeatsQ_Init () {
    gt_ProgressUpdatePlayer2MeatsQ = TriggerCreate("gt_ProgressUpdatePlayer2MeatsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Update - Player - 4 Meats Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressUpdatePlayer4MeatsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00039", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressUpdatePlayer4MeatsQ_Init () {
    gt_ProgressUpdatePlayer4MeatsQ = TriggerCreate("gt_ProgressUpdatePlayer4MeatsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Update - Player - 5 Meats Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressUpdatePlayer5MeatsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00002", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressUpdatePlayer5MeatsQ_Init () {
    gt_ProgressUpdatePlayer5MeatsQ = TriggerCreate("gt_ProgressUpdatePlayer5MeatsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Update - Player - 6 Meats Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressUpdatePlayer6MeatsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00042", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressUpdatePlayer6MeatsQ_Init () {
    gt_ProgressUpdatePlayer6MeatsQ = TriggerCreate("gt_ProgressUpdatePlayer6MeatsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress Update - Enemy Meats Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressUpdateEnemyMeatsQ_Func (bool testConds, bool runActions) {
    int auto216683F9_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    auto216683F9_val = gv_score_Enemy;
    if (auto216683F9_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00095", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00070", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto216683F9_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_BRAKK, "zMission_Zerus01|Line00097", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00096", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto216683F9_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00098", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto216683F9_val == 4) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00099", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto216683F9_val == 5) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00096", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00071", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto216683F9_val == 6) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00100", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressUpdateEnemyMeatsQ_Init () {
    gt_ProgressUpdateEnemyMeatsQ = TriggerCreate("gt_ProgressUpdateEnemyMeatsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primal Hive Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_PrimalHiveWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnitRangeUnit(), gv_pLAYER_01_USER) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnitRangeUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PutReticleonPrimalHive(EventUnitRangeUnit());
    TriggerQueueEnter();
    if ((UnitGetPropertyFixed(EventUnitRangeUnit(), c_unitPropLifePercent, c_unitPropCurrent) > 80.0)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00145", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimalHiveWarningQ_Init () {
    gt_PrimalHiveWarningQ = TriggerCreate("gt_PrimalHiveWarningQ_Func");
    TriggerAddEventUnitRange(gt_PrimalHiveWarningQ, null, UnitFromId(469), 10.0, true);
    TriggerAddEventUnitRange(gt_PrimalHiveWarningQ, null, UnitFromId(468), 10.0, true);
    TriggerAddEventUnitRange(gt_PrimalHiveWarningQ, null, UnitFromId(2088), 10.0, true);
    TriggerAddEventUnitRange(gt_PrimalHiveWarningQ, null, UnitFromId(206), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Spotted
//--------------------------------------------------------------------------------------------------
bool gt_DehakaSpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_tHE_ONE_DEHAKA), 13.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    UnitGroupLoopBegin(lv_playerUnits);
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(gv_tHE_ONE_DEHAKA, gv_pLAYER_01_USER) == true) && (libNtve_gf_UnitInRegion(gv_tHE_ONE_DEHAKA, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(UnitGroupLoopCurrent()), "Sight", gv_pLAYER_01_USER))) == true)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerExecute(gt_DehakaFlee, true, false);
            return true;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DehakaSpotted_Init () {
    gt_DehakaSpotted = TriggerCreate("gt_DehakaSpotted_Func");
    TriggerAddEventTimePeriodic(gt_DehakaSpotted, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Flee
//--------------------------------------------------------------------------------------------------
bool gt_DehakaFlee_Func (bool testConds, bool runActions) {
    int auto8DBA23FB_val;

    // Variable Declarations
    point lv_moveTo;
    point lv_moveInstantlyTo;

    // Variable Initialization
    lv_moveTo = null;
    lv_moveInstantlyTo = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_dehakaEncounterCount < 8)) {
        gv_dehakaEncounterCount += 1;
    }
    else {
    }
    auto8DBA23FB_val = gv_dehakaEncounterCount;
    if (auto8DBA23FB_val == 1) {
        lv_moveTo = PointFromId(2118);
        lv_moveInstantlyTo = PointFromId(1663);
    }
    else if (auto8DBA23FB_val == 2) {
        lv_moveTo = PointFromId(2119);
        lv_moveInstantlyTo = PointFromId(1665);
    }
    else if (auto8DBA23FB_val == 3) {
        lv_moveTo = PointFromId(528);
        lv_moveInstantlyTo = PointFromId(1699);
    }
    else if (auto8DBA23FB_val == 4) {
        lv_moveTo = PointFromId(228);
        lv_moveInstantlyTo = PointFromId(1700);
    }
    else if (auto8DBA23FB_val == 5) {
        lv_moveTo = PointFromId(526);
        lv_moveInstantlyTo = PointFromId(1704);
    }
    else if (auto8DBA23FB_val == 6) {
        lv_moveTo = PointFromId(527);
        lv_moveInstantlyTo = PointFromId(1705);
    }
    else if (auto8DBA23FB_val == 7) {
        lv_moveTo = PointFromId(536);
        lv_moveInstantlyTo = PointFromId(1661);
    }
    else if (auto8DBA23FB_val == 8) {
        Wait(0.5, c_timeAI);
        UnitIssueOrder(gv_tHE_ONE_DEHAKA, Order(AbilityCommand("BurrowDehakaDown", 0)), c_orderQueueReplace);
        while (!((UnitOrderCount(gv_tHE_ONE_DEHAKA) == 0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_tHE_ONE_DEHAKA), 13.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeGame);
        }
        UnitIssueOrder(gv_tHE_ONE_DEHAKA, Order(AbilityCommand("BurrowDehakaUp", 0)), c_orderQueueReplace);
        TriggerEnable(gt_DehakaSpotted, true);
        return true;
    }
    else {
    }
    Wait(0.5, c_timeAI);
    UnitIssueOrder(gv_tHE_ONE_DEHAKA, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveTo), c_orderQueueReplace);
    UnitIssueOrder(gv_tHE_ONE_DEHAKA, Order(AbilityCommand("BurrowDehakaDown", 0)), c_orderQueueAddToEnd);
    while (!((UnitOrderCount(gv_tHE_ONE_DEHAKA) == 0))) {
        Wait(1.0, c_timeAI);
    }
    Wait(1.0, c_timeAI);
    UnitSetPosition(gv_tHE_ONE_DEHAKA, lv_moveInstantlyTo, false);
    UnitIssueOrder(gv_tHE_ONE_DEHAKA, Order(AbilityCommand("BurrowDehakaUp", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    UnitSetFacing(gv_tHE_ONE_DEHAKA, PointGetFacing(lv_moveInstantlyTo), 1.0);
    TriggerEnable(gt_DehakaSpotted, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DehakaFlee_Init () {
    gt_DehakaFlee = TriggerCreate("gt_DehakaFlee_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Essence Pool Approached
//--------------------------------------------------------------------------------------------------
bool gt_EssencePoolApproached_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnitRangeUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_poolEssenceBeingPinged = EventUnitRangeUnit();
    TriggerExecute(gt_EssencePoolIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EssencePoolApproached_Init () {
    gt_EssencePoolApproached = TriggerCreate("gt_EssencePoolApproached_Func");
    TriggerAddEventUnitRange(gt_EssencePoolApproached, UnitRefFromVariable("gv_kerrigan"), UnitFromId(2060), 18.0, true);
    TriggerAddEventUnitRange(gt_EssencePoolApproached, UnitRefFromVariable("gv_kerrigan"), UnitFromId(154), 18.0, true);
    TriggerAddEventUnitRange(gt_EssencePoolApproached, UnitRefFromVariable("gv_kerrigan"), UnitFromId(1346), 18.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Essence Pool Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_EssencePoolIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    TriggerExecute(gt_EssencePoolPing, true, false);
    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZZerus01Objective03", 600.0);
    if (((UnitIsAlive(gv_poolEssence[1]) == true) || (UnitIsAlive(gv_poolEssence[2]) == true) || (UnitIsAlive(gv_poolEssence[3]) == true))) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00135", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00136", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00107", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerExecute(gt_ObjectiveCollectEssenceCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EssencePoolIntroQ_Init () {
    gt_EssencePoolIntroQ = TriggerCreate("gt_EssencePoolIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Essence Pool Ping
//--------------------------------------------------------------------------------------------------
bool gt_EssencePoolPing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_poolEssenceBeingPinged), 7.0), 10.0, true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_poolEssenceBeingPinged), 2.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/77E8F8B3"), null, UnitGetPosition(gv_poolEssenceBeingPinged));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EssencePoolPing_Init () {
    gt_EssencePoolPing = TriggerCreate("gt_EssencePoolPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Essence Pool Absorbed Q
//--------------------------------------------------------------------------------------------------
bool gt_EssencePoolAbsorbedQ_Func (bool testConds, bool runActions) {
    int auto0223D84C_val;
    int autoCBA2755F_val;

    // Variable Declarations
    int lv_index;
    point lv_location;

    // Variable Initialization
    lv_index = 0;
    lv_location = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnitRangeUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, 3);
    while (!IntLoopDone()) {
        if ((gv_poolEssence[IntLoopCurrent()] == EventUnitRangeUnit())) {
            lv_index = IntLoopCurrent();
            break;
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    if ((lv_index <= 0)) {
        return true;
    }
    else {
    }
    lv_location = UnitGetPosition(gv_poolEssence[lv_index]);
    libNtve_gf_RemoveDoodadsinRegion(RegionCircle(lv_location, 10.0), "ZerusPoolSparkles");
    UnitKill(gv_poolEssence[lv_index]);
    if ((UnitIsAlive(gv_poolEssence[1]) == false) && (UnitIsAlive(gv_poolEssence[2]) == false) && (UnitIsAlive(gv_poolEssence[3]) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    Wait(0.5, c_timeGame);
    auto0223D84C_val = lv_index;
    if (auto0223D84C_val == 1) {
        WaterSetState("ZerusPool|Alternate Setting", 2.0, c_wtcSquareRoot);
    }
    else if (auto0223D84C_val == 2) {
        WaterSetState("Xil|Alternate Setting", 2.0, c_wtcLinear);
    }
    else if (auto0223D84C_val == 3) {
        WaterSetState("ZhakulDas|Alternate Setting", 2.0, c_wtcLinear);
    }
    else {
    }
    SoundPlayAtPoint(SoundLink("FX_Zerus01_DNAPoolShrinkage", -1), PlayerGroupAll(), lv_location, 0.0, 100.0, 0.0);
    gv_objectiveDestroyDominionBase5 += 1;
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(gv_kerrigan), "ZZerus01Objective03", gv_pLAYER_01_USER);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectiveCollectEssenceUpdate, true, false);
    autoCBA2755F_val = gv_objectiveDestroyDominionBase5;
    if (autoCBA2755F_val == 1) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00137", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else if (autoCBA2755F_val == 3) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00138", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EssencePoolAbsorbedQ_Init () {
    gt_EssencePoolAbsorbedQ = TriggerCreate("gt_EssencePoolAbsorbedQ_Func");
    TriggerAddEventUnitRange(gt_EssencePoolAbsorbedQ, UnitRefFromVariable("gv_kerrigan"), UnitFromId(154), 1.5, true);
    TriggerAddEventUnitRange(gt_EssencePoolAbsorbedQ, UnitRefFromVariable("gv_kerrigan"), UnitFromId(1346), 1.5, true);
    TriggerAddEventUnitRange(gt_EssencePoolAbsorbedQ, UnitRefFromVariable("gv_kerrigan"), UnitFromId(2060), 1.5, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Ray Patrols
//--------------------------------------------------------------------------------------------------
bool gt_SporeRayPatrols_Func (bool testConds, bool runActions) {
    int auto634F5252_ae;
    int auto634F5252_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto634F5252_ae = gv_sPORE_RAY_MAX_COUNT;
    auto634F5252_ai = 1;
    lv_i = 0;
    while ((auto634F5252_ai >= 0 && lv_i <= auto634F5252_ae) || (auto634F5252_ai <= 0 && lv_i >= auto634F5252_ae)) {
        if ((UnitIsAlive(gv_sporeRayPatrollers[lv_i].lv_sporeRay) == true) && (gv_sporeRayPatrollers[lv_i].lv_patrolPointCount > 0)) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_sporeRayPatrollers[lv_i].lv_sporeRay), gv_sporeRayPatrollers[lv_i].lv_patrolRoute[gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint]) <= 1)) {
                if ((gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint < gv_sporeRayPatrollers[lv_i].lv_patrolPointCount)) {
                    gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint += 1;
                }
                else {
                    gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint = 1;
                }
            }
            else {
            }
            UnitIssueOrder(gv_sporeRayPatrollers[lv_i].lv_sporeRay, OrderTargetingPoint(AbilityCommand("move", 0), gv_sporeRayPatrollers[lv_i].lv_patrolRoute[gv_sporeRayPatrollers[lv_i].lv_currentPatrolPoint]), c_orderQueueReplace);
        }
        else {
        }
        if (lv_i == auto634F5252_ae) {
            break;
        }
        lv_i = lv_i + auto634F5252_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeRayPatrols_Init () {
    gt_SporeRayPatrols = TriggerCreate("gt_SporeRayPatrols_Func");
    TriggerAddEventTimePeriodic(gt_SporeRayPatrols, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Spore Ray Patrols
//--------------------------------------------------------------------------------------------------
bool gt_InitializeSporeRayPatrols_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(2234));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2161));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2162));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2163));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2164));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2165));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2166));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2167));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2168));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2169));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2170));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2171));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2172));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2173));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2174));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2175));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2176));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2177));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2182));
    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(2233));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2167));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2168));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2169));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2170));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2171));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2172));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2173));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2174));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2175));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2176));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2177));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2182));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2161));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2162));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2163));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2164));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2165));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2166));
    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(2251));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2160));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2184));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2185));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2188));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2189));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2190));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2191));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2206));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2208));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2209));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2210));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2211));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2212));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2213));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2216));
    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(2236));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2221));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2222));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2223));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2224));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2227));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2237));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2238));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2239));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2240));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2241));
    gf_TurnSporeRayintoSporeRayPatroller(UnitFromId(2235));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2242));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2243));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2245));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2246));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2247));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2248));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2249));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2250));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2252));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2253));
    gf_AddPatrolPointtoSporeRayPatroller(PointFromId(2254));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeSporeRayPatrols_Init () {
    gt_InitializeSporeRayPatrols = TriggerCreate("gt_InitializeSporeRayPatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Crabeetle
//--------------------------------------------------------------------------------------------------
bool gt_FirstCrabeetle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(905), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(905)), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(905), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2255)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstCrabeetle_Init () {
    gt_FirstCrabeetle = TriggerCreate("gt_FirstCrabeetle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Quillgor Camps
//--------------------------------------------------------------------------------------------------
bool gt_SpawnQuillgorCamps_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_GameSequence, true, false);
    TriggerExecute(gt_SpawnQuillgorCampsTransmissionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnQuillgorCamps_Init () {
    gt_SpawnQuillgorCamps = TriggerCreate("gt_SpawnQuillgorCamps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Quillgor Camps Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawnQuillgorCampsTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gf_SpawnQuillgorCampSingle(2);
    gf_SpawnQuillgorCampSingle(6);
    Wait(2.0, c_timeGame);
    gf_SpawnQuillgorCampSingle(3);
    gf_SpawnQuillgorCampSingle(5);
    Wait(2.0, c_timeGame);
    gf_SpawnQuillgorCampSingle(7);
    gf_SpawnQuillgorCampSingle(12);
    Wait(2.0, c_timeGame);
    gf_SpawnQuillgorCampSingle(4);
    gf_SpawnQuillgorCampSingle(13);
    Wait(2.0, c_timeGame);
    gf_SpawnQuillgorCampSingle(8);
    gf_SpawnQuillgorCampSingle(9);
    Wait(2.0, c_timeGame);
    gf_SpawnQuillgorCampSingle(11);
    gf_SpawnQuillgorCampSingle(10);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00001", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    TriggerExecute(gt_Reminders, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnQuillgorCampsTransmissionQ_Init () {
    gt_SpawnQuillgorCampsTransmissionQ = TriggerCreate("gt_SpawnQuillgorCampsTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quillgor Camps Leash
//--------------------------------------------------------------------------------------------------
bool gt_QuillgorCampsLeash_Func (bool testConds, bool runActions) {
    int auto3C3C55B1_ae;
    int auto3C3C55B1_ai;
    unitgroup autoE22E342F_g;
    int autoE22E342F_u;

    // Variable Declarations
    int lv_campIndex;
    unit lv_indexQuillgor;

    // Variable Initialization
    lv_campIndex = 0;
    lv_indexQuillgor = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto3C3C55B1_ae = gv_quillgorCampCount;
        auto3C3C55B1_ai = 1;
        lv_campIndex = 1;
        while ((auto3C3C55B1_ai >= 0 && lv_campIndex <= auto3C3C55B1_ae) || (auto3C3C55B1_ai <= 0 && lv_campIndex >= auto3C3C55B1_ae)) {
            autoE22E342F_g = gv_quillgorCampCreeps[lv_campIndex];
            autoE22E342F_u = 1;
            while (autoE22E342F_u <= UnitGroupCount(autoE22E342F_g, c_unitCountAll)) {
                lv_indexQuillgor = UnitGroupUnit(autoE22E342F_g, autoE22E342F_u);
                if ((UnitTestState(lv_indexQuillgor, c_unitStateIdle) == true)) {
                    gf_LeashQuillgor(lv_indexQuillgor);
                }
                else {
                }
                if (lv_indexQuillgor == UnitGroupUnit(autoE22E342F_g, autoE22E342F_u)) {
                    autoE22E342F_u = autoE22E342F_u + 1;
                }
            }
            if (lv_campIndex == auto3C3C55B1_ae) {
                break;
            }
            lv_campIndex = lv_campIndex + auto3C3C55B1_ai;
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuillgorCampsLeash_Init () {
    gt_QuillgorCampsLeash = TriggerCreate("gt_QuillgorCampsLeash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpse Setup
//--------------------------------------------------------------------------------------------------
bool gt_CorpseSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;

    // Variable Initialization
    lv_campIndex = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campIndex = gf_CampIndexOfQuillgor(EventUnit());
    if ((lv_campIndex <= 0)) {
        return true;
    }
    else {
    }
    VisRevealerDestroy(gv_quillgorCampRevealer[lv_campIndex]);
    gv_quillgorCampRevealer[lv_campIndex] = null;
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, gv_c_CORPSE_LIFEMAX);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, gv_c_CORPSE_LIFEMAX);
    UnitSetCustomValue(EventUnit(), 0, lv_campIndex);
    if ((gv_inCinematic == true)) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        return true;
    }
    else {
        if ((gv_firstCorpseDrop == true)) {
            gv_firstCorpseDrop = false;
            libNtve_gf_KillModel(gv_firstQuillgorModel);
            gv_firstQuillgorModel = null;
            TriggerExecute(gt_FirstMeatDroppedQ, true, false);
        }
        else {
        }
        if ((gv_gameOver == false) && (gv_score_Player < gv_score_Quota_Player)) {
            libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 1, StringExternal("Param/Value/1FD16CD6"), EventUnit(), "Ref_Center");
            libHots_gf_StoreActorForUnit(EventUnit(), 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(EventUnit(), 1, TextTagLastCreated());
            TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
        }
        else {
        }
    }
    if ((gv_gameOver == false) && (gv_score_Player < gv_score_Quota_Player)) {
        UnitSetState(EventUnit(), c_unitStateStatusBar, true);
        UnitStatusBarOverride(EventUnit(), c_unitStatusGroupAll);
        UnitSetState(EventUnit(), c_unitStateTooltipable, true);
        libNtve_gf_ShareVisionofUnit(EventUnit(), true, gv_pLAYER_01_USER);
        libSwaC_gf_SetUnitInfoTextCampaign(EventUnit(), StringExternal("Param/Value/BEFEBA35"), StringExternal("Param/Value/DF2D61EA"), null);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetVisible(PingLastCreated(), false);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DBA07935"));
        PingSetScale(PingLastCreated(), 0.65);
        PingSetColor(PingLastCreated(), Color(0.00, 100.00, 0.00));
        PingSetUnit(PingLastCreated(), EventUnit());
        gv_corpse_Ping[lv_campIndex] = PingLastCreated();
    }
    else {
    }
    UnitGroupAdd(gv_corpses_All, EventUnit());
    UnitGroupRemove(gv_quillgorCampCreeps[lv_campIndex], EventUnit());
    gv_corpse_PerCamp[lv_campIndex] = EventUnit();
    gf_CreateMeatProgressBar(lv_campIndex);
    gf_ShowHideMeatProgressBar(lv_campIndex, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpseSetup_Init () {
    gt_CorpseSetup = TriggerCreate("gt_CorpseSetup_Func");
    TriggerAddEventUnitAbility(gt_CorpseSetup, null, AbilityCommand("SpaceCowCorpse", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpse Being Eaten Q
//--------------------------------------------------------------------------------------------------
bool gt_CorpseBeingEatenQ_Func (bool testConds, bool runActions) {
    int auto1F90468F_val;

    // Variable Declarations
    int lv_campIndex;
    int lv_warningIndex;

    // Variable Initialization
    lv_campIndex = 0;
    lv_warningIndex = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_corpses_All, EventUnit()) == true))) {
            return false;
        }

        if (!((gf_IsCorpseOrMeat(EventUnit(), 0) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_02_DOMINION33))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campIndex = gf_CampIndexOfQuillgorCorpse(EventUnit());
    if ((lv_campIndex <= 0)) {
        return true;
    }
    else {
    }
    TriggerEnable(gt_BrakkFrocesFightingQuillgarQ, false);
    gv_quillgorCampCorpseEatenIndex[lv_campIndex] = 4;
    if ((gv_corpse_PingWarning[lv_campIndex] == c_invalidPingId)) {
        if ((gv_firstHarvesterIndex > 0) && (gv_aIHarvestCamps[gv_firstHarvesterIndex] == lv_campIndex) && (gv_firstHarvestingWarningPing != c_invalidPingId)) {
            gv_corpse_PingWarning[lv_campIndex] = gv_firstHarvestingWarningPing;
            gv_firstHarvestingWarningPing = c_invalidPingId;
        }
        else {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), EventUnit());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9691DBA8"));
            gv_corpse_PingWarning[lv_campIndex] = PingLastCreated();
        }
    }
    else {
    }
    if ((gv_corpseRecentlyAttacked[lv_campIndex] == false)) {
        gv_corpseRecentlyAttacked[lv_campIndex] = true;
        TriggerQueueEnter();
        SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A1B69959"), null, UnitGetPosition(EventUnit()));
        Wait(1.0, c_timeReal);
        if ((gv_corpseBeingEatenWarningFirstTime == true)) {
            lv_warningIndex = 1;
            gv_corpseBeingEatenWarningFirstTime = false;
        }
        else {
            lv_warningIndex = RandomInt(2, 4);
        }
        auto1F90468F_val = lv_warningIndex;
        if (auto1F90468F_val == 1) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00094", c_transmissionDurationAdd, 0.0, true, 1, 0);
            Wait(2.0, c_timeGame);
            libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_BRAKK, "zMission_Zerus01|Line00131", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00093", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
            if ((TriggerIsEnabled(gt_ObjectiveQuillgorMeatEnemyCreate) == true)) {
                Wait(1.0, c_timeReal);
                TriggerExecute(gt_ObjectiveQuillgorMeatEnemyCreate, true, true);
            }
            else {
            }
        }
        else if (auto1F90468F_val == 2) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00123", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        }
        else if (auto1F90468F_val == 3) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00122", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        }
        else if (auto1F90468F_val == 4) {
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00094", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        }
        else {
        }
        TriggerQueueExit();
        Wait(60.0, c_timeAI);
        while (!(((libNtve_gf_UnitGroupIsDead(gv_enemyHarvesters_All) == true) || (UnitIsAlive(gv_corpse_PerCamp[lv_campIndex]) == false)))) {
            Wait(1.0, c_timeAI);
        }
        gv_corpseRecentlyAttacked[lv_campIndex] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpseBeingEatenQ_Init () {
    gt_CorpseBeingEatenQ = TriggerCreate("gt_CorpseBeingEatenQ_Func");
    TriggerAddEventUnitAttacked(gt_CorpseBeingEatenQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpse Being Eaten Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_CorpseBeingEatenIndicatorDiminish_Func (bool testConds, bool runActions) {
    int autoEA4ACE2F_ae;
    int autoEA4ACE2F_ai;

    // Variable Declarations
    int lv_campIndex;
    fixed lv_life;

    // Variable Initialization
    lv_campIndex = 0;
    lv_life = 0.0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(0.5, c_timeGame);
        autoEA4ACE2F_ae = gv_quillgorCampCount;
        autoEA4ACE2F_ai = 1;
        lv_campIndex = 1;
        while ((autoEA4ACE2F_ai >= 0 && lv_campIndex <= autoEA4ACE2F_ae) || (autoEA4ACE2F_ai <= 0 && lv_campIndex >= autoEA4ACE2F_ae)) {
            if ((UnitIsAlive(gv_corpse_PerCamp[lv_campIndex]) == true) && (gf_IsCorpseOrMeat(gv_corpse_PerCamp[lv_campIndex], 0) == true)) {
                if ((gv_quillgorCampCorpseEatenIndex[lv_campIndex] > 0)) {
                    gv_quillgorCampCorpseEatenIndex[lv_campIndex] -= 1;
                }
                else {
                }
                if ((gv_quillgorCampCorpseEatenIndex[lv_campIndex] > 0)) {
                    gv_corpseEatenStopping[lv_campIndex] = false;
                    UnitBehaviorAddPlayer(gv_corpse_PerCamp[lv_campIndex], "MeatAttacked", gv_pLAYER_01_USER, 1);
                    gv_meatDialogMax[lv_campIndex] = FixedToInt(gv_c_CORPSE_LIFEMAX);
                    gf_ShowHideMeatProgressBar(lv_campIndex, true, false);
                    lv_life = UnitGetPropertyFixed(gv_corpse_PerCamp[lv_campIndex], c_unitPropLife, c_unitPropCurrent);
                    lv_life = MaxF((lv_life - 0.5), 0.0);
                    if ((gf_CorpseBeingHarvestedByPlayer(lv_campIndex) == false)) {
                        gf_SetMeatProgressBarProgress(lv_campIndex, FixedToInt(lv_life));
                    }
                    else {
                    }
                    if ((lv_life <= 0.0)) {
                        gf_CorpseEatenEnemy(lv_campIndex);
                        gf_ShowHideMeatProgressBar(lv_campIndex, false, false);
                    }
                    else {
                        UnitSetPropertyFixed(gv_corpse_PerCamp[lv_campIndex], c_unitPropLife, lv_life);
                    }
                }
                else {
                    if ((UnitHasBehavior(gv_corpse_PerCamp[lv_campIndex], "MeatAttacked") == true) && (gf_CorpseBeingHarvestedByPlayer(lv_campIndex) == false)) {
                        gf_CorpseStopBeingEaten(lv_campIndex);
                    }
                    else {
                    }
                }
            }
            else {
                if ((gv_corpse_Ping[lv_campIndex] != c_invalidPingId)) {
                    PingDestroy(gv_corpse_Ping[lv_campIndex]);
                    gv_corpse_Ping[lv_campIndex] = c_invalidPingId;
                }
                else {
                }
                if ((gv_corpse_PingWarning[lv_campIndex] != c_invalidPingId)) {
                    PingDestroy(gv_corpse_PingWarning[lv_campIndex]);
                    gv_corpse_PingWarning[lv_campIndex] = c_invalidPingId;
                }
                else {
                }
            }
            if (lv_campIndex == autoEA4ACE2F_ae) {
                break;
            }
            lv_campIndex = lv_campIndex + autoEA4ACE2F_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpseBeingEatenIndicatorDiminish_Init () {
    gt_CorpseBeingEatenIndicatorDiminish = TriggerCreate("gt_CorpseBeingEatenIndicatorDiminish_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpse Harvest Started
//--------------------------------------------------------------------------------------------------
bool gt_CorpseHarvestStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corpse;
    int lv_campIndex;
    int lv_corpseCount;

    // Variable Initialization
    lv_corpse = null;
    lv_campIndex = 0;
    lv_corpseCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_corpse = EventUnitTargetUnit();
    if ((lv_corpse == null)) {
        return true;
    }
    else {
    }
    lv_campIndex = gf_CampIndexOfQuillgorCorpse(lv_corpse);
    if ((lv_campIndex <= 0)) {
        return true;
    }
    else {
    }
    UnitGroupAdd(gv_corpseHarvesters, EventUnit());
    UnitBehaviorAdd(EventUnit(), "DroneCarcassHarvestSuppressMovement", EventUnit(), 1);
    UnitSetCustomValue(EventUnit(), 0, lv_campIndex);
    gv_quillgorCampCorpseHarvestedByDrone[lv_campIndex] = true;
    gf_StartMeatHarvestTimer(lv_campIndex, 60);
    if ((libHots_gf_ActorForUnit(EventUnitTargetUnit(), 1) != null)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnitTargetUnit(), 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(EventUnitTargetUnit(), 1));
    }
    else {
    }
    if ((gv_firstCorpseHarvested == null)) {
        gv_firstCorpseHarvested = EventUnitTargetUnit();
    }
    else {
        if ((EventUnitTargetUnit() != gv_firstCorpseHarvested)) {
            gv_brakkStartedDefendingMeat = true;
        }
        else {
        }
    }
    if ((gv_brakkStartedDefendingMeat == true) && ((lv_campIndex != 1) || (gv_score_Player >= 1))) {
        gf_AISendHarvestWaveSingle(lv_campIndex, true, false);
        TriggerExecute(gt_TransmissionDefendDroneWarningQ, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_corpseHarvesters, c_unitCountAlive) > 1)) {
        TriggerExecute(gt_TransmissionMultipleDronesPullingMeatQ, true, false);
    }
    else {
    }
    if ((gv_brakkStartedDefendingMeat == false)) {
        TriggerExecute(gt_TransmissionCorpseHarvestStartedQ, true, false);
        Wait(20.0, c_timeGame);
        gv_brakkStartedDefendingMeat = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpseHarvestStarted_Init () {
    gt_CorpseHarvestStarted = TriggerCreate("gt_CorpseHarvestStarted_Func");
    TriggerAddEventUnitAbility(gt_CorpseHarvestStarted, null, AbilityCommand("DroneCarcassHarvest", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Corpse Harvest Started Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCorpseHarvestStartedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00084", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCorpseHarvestStartedQ_Init () {
    gt_TransmissionCorpseHarvestStartedQ = TriggerCreate("gt_TransmissionCorpseHarvestStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Defend Drone Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDefendDroneWarningQ_Func (bool testConds, bool runActions) {
    fixed autoA03B2E99_at;
    unitgroup autoFE0772A3_g;
    int autoFE0772A3_u;

    // Variable Declarations
    int lv_harvesterIndex;
    int lv_campIndex;
    unit lv_indexUnit;

    // Variable Initialization
    lv_harvesterIndex = 0;
    lv_campIndex = 0;
    lv_indexUnit = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_harvesterIndex = gv_currentHarvestIndex;
    lv_campIndex = gv_aIHarvestCamps[lv_harvesterIndex];
    while (!(((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lv_harvesterIndex]) == true) || (DistanceBetweenPoints(UnitGroupCenterOfGroup(gv_aIHarvestGroups[lv_harvesterIndex]), UnitGetPosition(gv_corpse_PerCamp[lv_campIndex])) <= 45.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lv_harvesterIndex]) == true)) {
        return true;
    }
    else {
    }
    TriggerQueueEnter();
    autoA03B2E99_at = 0;
    while (!(((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lv_harvesterIndex]) == true) || (DistanceBetweenPoints(UnitGroupCenterOfGroup(gv_aIHarvestGroups[lv_harvesterIndex]), RegionGetCenter(gv_quillgorCampRegions[lv_campIndex])) <= 35.0))) && autoA03B2E99_at <= 5.0) {
        Wait(1.0, c_timeGame);
        autoA03B2E99_at = autoA03B2E99_at + 1.0;
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lv_harvesterIndex]) == true)) {
        return true;
    }
    else {
    }
    autoFE0772A3_g = gv_aIHarvestGroups[lv_harvesterIndex];
    autoFE0772A3_u = 1;
    while (autoFE0772A3_u <= UnitGroupCount(autoFE0772A3_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(autoFE0772A3_g, autoFE0772A3_u);
        UnitSetPropertyFixed(lv_indexUnit, c_unitPropMovementSpeed, (UnitTypeGetProperty("PrimalFlyer", c_unitPropMovementSpeed) - 0.6));
        if (lv_indexUnit == UnitGroupUnit(autoFE0772A3_g, autoFE0772A3_u)) {
            autoFE0772A3_u = autoFE0772A3_u + 1;
        }
    }
    gf_AttachWarningPingToReactionTeam(lv_harvesterIndex);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00129", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDefendDroneWarningQ_Init () {
    gt_TransmissionDefendDroneWarningQ = TriggerCreate("gt_TransmissionDefendDroneWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpse Harvest Ended - Finished
//--------------------------------------------------------------------------------------------------
bool gt_CorpseHarvestEndedFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corpse;
    int lv_campIndex;
    int lv_corpseCount;

    // Variable Initialization
    lv_corpse = null;
    lv_campIndex = 0;
    lv_corpseCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_corpse = EventUnitTargetUnit();
    if ((lv_corpse == null)) {
        return true;
    }
    else {
    }
    lv_campIndex = gf_CampIndexOfQuillgorCorpse(lv_corpse);
    if ((lv_campIndex <= 0)) {
        return true;
    }
    else {
    }
    if ((gf_IsCorpseOrMeat(lv_corpse, 1) == true)) {
        UnitStatusBarClearOverride(lv_corpse);
        UnitGroupRemove(gv_corpses_All, lv_corpse);
        gv_corpse_PerCamp[lv_campIndex] = null;
        UnitGroupAdd(gv_meats, lv_corpse);
        libSwaC_gf_SetUnitInfoTextCampaign(lv_corpse, StringExternal("Param/Value/F977BE30"), StringExternal("Param/Value/6BC70AF2"), null);
    }
    else {
    }
    gv_quillgorCampCorpseHarvestedByDrone[lv_campIndex] = false;
    UnitGroupRemove(gv_corpseHarvesters, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpseHarvestEndedFinished_Init () {
    gt_CorpseHarvestEndedFinished = TriggerCreate("gt_CorpseHarvestEndedFinished_Func");
    TriggerAddEventUnitAbility(gt_CorpseHarvestEndedFinished, null, AbilityCommand("DroneCarcassHarvest", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpse Harvest Ended - Died
//--------------------------------------------------------------------------------------------------
bool gt_CorpseHarvestEndedDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corpse;
    int lv_campIndex;
    int lv_corpseCount;

    // Variable Initialization
    lv_corpse = null;
    lv_campIndex = 0;
    lv_corpseCount = 0;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dronesLostCount += 1;
    lv_campIndex = FixedToInt(UnitGetCustomValue(EventUnit(), 0));
    if ((lv_campIndex <= 0)) {
        return true;
    }
    else {
    }
    lv_corpse = gv_corpse_PerCamp[lv_campIndex];
    if ((lv_corpse == null)) {
        return true;
    }
    else {
    }
    UnitGroupRemove(gv_corpseHarvesters, EventUnit());
    gv_quillgorCampCorpseHarvestedByDrone[lv_campIndex] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpseHarvestEndedDied_Init () {
    gt_CorpseHarvestEndedDied = TriggerCreate("gt_CorpseHarvestEndedDied_Func");
    TriggerAddEventUnitDied(gt_CorpseHarvestEndedDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meat Movement Orders
//--------------------------------------------------------------------------------------------------
bool gt_MeatMovementOrders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;
    unit lv_indexMeat;
    bool lv_inCinematicLocal;

    // Variable Initialization
    lv_campIndex = 0;
    lv_indexMeat = null;
    lv_inCinematicLocal = false;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MediumTastyCorpse"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_inCinematicLocal = gv_inCinematic;
    if ((lv_inCinematicLocal == false)) {
        gv_meatMovedByPlayer = true;
    }
    else {
    }
    Wait(0.5, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1402)), c_orderQueueReplace);
    if ((lv_inCinematicLocal == true)) {
        return true;
    }
    else {
    }
    TriggerExecute(gt_Transmission1stChunkBeingHarvestedPlayerQ, true, false);
    if ((gf_MeatCountBeingMoved() > 1)) {
        TriggerExecute(gt_TransmissionMultipleDronesPullingMeatQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeatMovementOrders_Init () {
    gt_MeatMovementOrders = TriggerCreate("gt_MeatMovementOrders_Func");
    TriggerAddEventUnitChangeOwner(gt_MeatMovementOrders, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meat Movement Orders (repeated)
//--------------------------------------------------------------------------------------------------
bool gt_MeatMovementOrdersrepeated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_meats);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER) || (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(43)) == true))) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(43)) == true)) {
                UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "CarryMediumCarcass", gv_pLAYER_01_USER, 1);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 2.8125);
            }
            else {
            }
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1402)), c_orderQueueReplace);
        }
        else {
            if ((UnitGetOwner(UnitGroupLoopCurrent()) == 0)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
            else {
            }
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeatMovementOrdersrepeated_Init () {
    gt_MeatMovementOrdersrepeated = TriggerCreate("gt_MeatMovementOrdersrepeated_Func");
    TriggerAddEventTimePeriodic(gt_MeatMovementOrdersrepeated, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meat Pings Update
//--------------------------------------------------------------------------------------------------
bool gt_MeatPingsUpdate_Func (bool testConds, bool runActions) {
    int auto71F611CE_val;

    // Variable Declarations
    int lv_campIndex;

    // Variable Initialization
    lv_campIndex = 0;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_meats, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campIndex = gf_CampIndexOfQuillgorCorpse(EventUnit());
    if ((lv_campIndex > 0)) {
        auto71F611CE_val = UnitGetOwner(EventUnit());
        if (auto71F611CE_val == gv_pLAYER_01_USER) {
            PingSetVisible(gv_corpse_Ping[lv_campIndex], true);
        }
        else if (auto71F611CE_val == 0) {
            PingSetVisible(gv_corpse_Ping[lv_campIndex], false);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeatPingsUpdate_Init () {
    gt_MeatPingsUpdate = TriggerCreate("gt_MeatPingsUpdate_Func");
    TriggerAddEventUnitChangeOwner(gt_MeatPingsUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Multiple Drones Pulling Meat Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMultipleDronesPullingMeatQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00120", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_BRAKK, "zMission_Zerus01|Line00061", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMultipleDronesPullingMeatQ_Init () {
    gt_TransmissionMultipleDronesPullingMeatQ = TriggerCreate("gt_TransmissionMultipleDronesPullingMeatQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AIQuillgorHarvesterInCombatIndicatorDiminish, true, false);
    cai_startall();
    cai_runall();
    AINearestTownBullyRebuild(gv_pLAYER_02_DOMINION2, true);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        TriggerExecute(gt_StartUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_StartUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 10000);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(630.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(330.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesNormal_Init () {
    gt_StartUpgradesNormal = TriggerCreate("gt_StartUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(330.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(330.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Send Harvest Waves
//--------------------------------------------------------------------------------------------------
bool gt_AISendHarvestWaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((gv_gameOver == true) || (gv_score_Player >= gv_score_Quota_Player))) {
            return true;
        }
        else {
        }
        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        TriggerExecute(gt_AISendHarvestWaveSingle, true, false);
        if ((gv_score_Player >= 5)) {
            Wait(10.0, c_timeAI);
            TriggerExecute(gt_AISendHarvestWaveSingle, true, false);
            Wait(150.0, c_timeAI);
        }
        else if ((gv_score_Player >= 4)) {
            Wait(120.0, c_timeAI);
        }
        else if ((gv_score_Player >= 3)) {
            Wait(150.0, c_timeAI);
        }
        else if (true) {
            Wait(180.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISendHarvestWaves_Init () {
    gt_AISendHarvestWaves = TriggerCreate("gt_AISendHarvestWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Send Harvest Wave Single
//--------------------------------------------------------------------------------------------------
bool gt_AISendHarvestWaveSingle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harvestIndex;
    int lv_campIndex;
    region lv_spawningRegion;
    unit lv_indexUnit;

    // Variable Initialization
    lv_harvestIndex = 0;
    lv_campIndex = 0;
    lv_spawningRegion = null;
    lv_indexUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campIndex = gf_AIWhichCampToHarvest();
    if (((lv_campIndex <= 0) || (gv_score_Player >= gv_score_Quota_Player))) {
        return true;
    }
    else {
    }
    gf_AISendHarvestWaveSingle(lv_campIndex, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISendHarvestWaveSingle_Init () {
    gt_AISendHarvestWaveSingle = TriggerCreate("gt_AISendHarvestWaveSingle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Reaction Wave Is Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_AIReactionWaveIsDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harvestIndex;
    int lv_campIndex;

    // Variable Initialization
    lv_harvestIndex = 0;
    lv_campIndex = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_harvestIndex = gf_HarvestIndexOfHarvester(EventUnit());
    if ((lv_harvestIndex <= 0)) {
        return true;
    }
    else {
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lv_harvestIndex]) == true) && (gv_aIHarvestIsReaction[lv_harvestIndex] == true)) {
        lv_campIndex = gv_aIHarvestCamps[lv_harvestIndex];
        gv_aIHarvestReactionWaveDestroyed[lv_campIndex] = true;
        Wait(60.0, c_timeGame);
        gv_aIHarvestReactionWaveDestroyed[lv_campIndex] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIReactionWaveIsDestroyed_Init () {
    gt_AIReactionWaveIsDestroyed = TriggerCreate("gt_AIReactionWaveIsDestroyed_Func");
    TriggerAddEventUnitDied(gt_AIReactionWaveIsDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Unit Enter AI Retreat Region
//--------------------------------------------------------------------------------------------------
bool gt_AIUnitEnterAIRetreatRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harvestIndex;
    unitgroup lv_potentialEnemies;

    // Variable Initialization
    lv_harvestIndex = 0;
    lv_potentialEnemies = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_harvestIndex = gf_HarvestIndexOfHarvester(EventUnit());
    if ((lv_harvestIndex <= 0)) {
        return true;
    }
    else {
    }
    if ((gv_aIHarvestRetreating[lv_harvestIndex] == false)) {
        return true;
    }
    else {
    }
    UnitRemove(EventUnit());
    if ((libNtve_gf_UnitGroupIsDead(gv_aIHarvestGroups[lv_harvestIndex]) == true)) {
        gv_quillgorCampHarvestIndex[gv_aIHarvestCamps[lv_harvestIndex]] = 0;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUnitEnterAIRetreatRegion_Init () {
    gt_AIUnitEnterAIRetreatRegion = TriggerCreate("gt_AIUnitEnterAIRetreatRegion_Func");
    TriggerAddEventUnitRangePoint(gt_AIUnitEnterAIRetreatRegion, null, PointFromId(46), 4.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Quillgor Harvester In Combat
//--------------------------------------------------------------------------------------------------
bool gt_AIQuillgorHarvesterInCombat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harvestIndex;
    unitgroup lv_potentialEnemies;
    unitgroup lv_attackGroup;
    unit lv_harvester;
    unit lv_attacker;

    // Variable Initialization
    lv_harvestIndex = 0;
    lv_potentialEnemies = UnitGroupEmpty();
    lv_attackGroup = UnitGroupEmpty();
    lv_harvester = null;
    lv_attacker = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpaceCowCorpse"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "PrimalZergling") || (UnitGetType(EventUnit()) == "PrimalHydralisk") || (UnitGetType(EventUnit()) == "PrimalRoach") || (UnitGetType(EventUnitTarget()) == "PrimalZergling") || (UnitGetType(EventUnitTarget()) == "PrimalHydralisk") || (UnitGetType(EventUnitTarget()) == "PrimalRoach")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_harvestIndex = gf_HarvestIndexOfHarvester(EventUnit());
    lv_harvester = EventUnit();
    lv_attacker = EventUnitTarget();
    if ((lv_harvestIndex <= 0)) {
        lv_harvestIndex = gf_HarvestIndexOfHarvester(EventUnitTarget());
        lv_harvester = EventUnitTarget();
        lv_attacker = null;
        if ((lv_harvestIndex <= 0)) {
            return true;
        }
        else {
        }
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_harvesterLeashingGroup, lv_harvester) == true) && (lv_attacker != null)) {
        return true;
    }
    else {
    }
    if ((((lv_attacker != null) && ((UnitGetType(lv_attacker) == "SpaceCowSmall") || (UnitGetType(lv_attacker) == "SpaceCowMedium"))) || ((EventUnit() != null) && ((UnitGetType(EventUnit()) == "SpaceCowSmall") || (UnitGetType(EventUnit()) == "SpaceCowMedium"))))) {
        if ((gv_firstHarvesterIndex == 0)) {
            gv_firstHarvesterIndex = lv_harvestIndex;
            TriggerExecute(gt_BrakkFrocesFightingQuillgarQ, true, false);
        }
        else {
        }
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_aIHarvestInCombatIndex[lv_harvestIndex] = 4;
    if ((lv_attacker != null)) {
        UnitGroupLoopBegin(gv_aIHarvestGroups[lv_harvestIndex]);
        while (!UnitGroupLoopDone()) {
            if ((UnitCanAttackTarget(UnitGroupLoopCurrent(), lv_attacker) == true)) {
                UnitGroupAdd(lv_attackGroup, UnitGroupLoopCurrent());
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupIssueOrder(lv_attackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_attacker)), c_orderQueueReplace);
    }
    else {
    }
    Wait(0.5, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIQuillgorHarvesterInCombat_Init () {
    gt_AIQuillgorHarvesterInCombat = TriggerCreate("gt_AIQuillgorHarvesterInCombat_Func");
    TriggerAddEventUnitAttacked(gt_AIQuillgorHarvesterInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Quillgor Harvester In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_AIQuillgorHarvesterInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    int auto35DDE167_ae;
    int auto35DDE167_ai;

    // Variable Declarations
    int lv_harvestIndex;

    // Variable Initialization
    lv_harvestIndex = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(0.5, c_timeAI);
        auto35DDE167_ae = gv_currentHarvestIndex;
        auto35DDE167_ai = 1;
        lv_harvestIndex = 1;
        while ((auto35DDE167_ai >= 0 && lv_harvestIndex <= auto35DDE167_ae) || (auto35DDE167_ai <= 0 && lv_harvestIndex >= auto35DDE167_ae)) {
            if ((gv_aIHarvestInCombatIndex[lv_harvestIndex] > 0)) {
                gv_aIHarvestInCombatIndex[lv_harvestIndex] -= 1;
            }
            else {
            }
            if (lv_harvestIndex == auto35DDE167_ae) {
                break;
            }
            lv_harvestIndex = lv_harvestIndex + auto35DDE167_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIQuillgorHarvesterInCombatIndicatorDiminish_Init () {
    gt_AIQuillgorHarvesterInCombatIndicatorDiminish = TriggerCreate("gt_AIQuillgorHarvesterInCombatIndicatorDiminish_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Drone Under Attack! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDroneUnderAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_02_DOMINION2) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_02_DOMINION3) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_02_DOMINION33)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_MeatCountBeingMoved() > 1)) {
        if ((gv_droneBeingAttackedWarnedMultipleMeat == false)) {
            gv_droneBeingAttackedWarnedMultipleMeat = true;
            TriggerQueueEnter();
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00102", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
            TriggerQueueExit();
        }
        else {
        }
    }
    else {
        gv_droneBeingAttackedTimes += 1;
        if ((gv_droneBeingAttackedTimes == 1)) {
            if ((gv_droneBeingAttackedWarnedSingleMeatFirstTime == false)) {
                gv_droneBeingAttackedWarnedSingleMeatFirstTime = true;
                TriggerQueueEnter();
                libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00113", c_transmissionDurationAdd, 0.0, true, 1, 0);
                libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
                TriggerQueueExit();
            }
            else {
            }
        }
        else {
            if ((TriggerQueueIsEmpty() == true)) {
                if ((gv_droneBeingAttackedBeingWarnedSingleMeat == false)) {
                    gv_droneBeingAttackedBeingWarnedSingleMeat = true;
                    TriggerQueueEnter();
                    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
                    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00060", c_transmissionDurationAdd, 0.0, true, 1, 0);
                    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
                    TriggerQueueExit();
                    Wait(60.0, c_timeGame);
                    gv_droneBeingAttackedBeingWarnedSingleMeat = false;
                }
                else {
                }
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDroneUnderAttackQ_Init () {
    gt_TransmissionDroneUnderAttackQ = TriggerCreate("gt_TransmissionDroneUnderAttackQ_Func");
    TriggerAddEventUnitAttacked(gt_TransmissionDroneUnderAttackQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Kerrigan Kills Quillgor Attackers Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganKillsQuillgorAttackersQ_Func (bool testConds, bool runActions) {
    int auto56EBCF2B_val;

    // Variable Declarations
    int lv_iNT;

    // Variable Initialization
    lv_iNT = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_enemyHarvesters_All, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(UnitGetPosition(gv_kerrigan), 10.0)) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_enemyHarvesters_All, RegionCircle(UnitGetPosition(gv_kerrigan), 10.0), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_corpses_All, RegionCircle(UnitGetPosition(gv_kerrigan), 10.0), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((RandomInt(1, 2) == 1)) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00073", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
        lv_iNT = RandomInt(1, 3);
        auto56EBCF2B_val = lv_iNT;
        if (auto56EBCF2B_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00002", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (auto56EBCF2B_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00065", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (auto56EBCF2B_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00067", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else {
        }
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganKillsQuillgorAttackersQ_Init () {
    gt_TransmissionKerriganKillsQuillgorAttackersQ = TriggerCreate("gt_TransmissionKerriganKillsQuillgorAttackersQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionKerriganKillsQuillgorAttackersQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Brakk Attack!
//--------------------------------------------------------------------------------------------------
bool gt_SendBrakkAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    cai_waves_stop("ai476031DB");
    cai_wave_enable(12, gv_pLAYER_01_USER, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Brakk", 0, gv_pLAYER_02_DOMINION2, PointFromId(1360));
    gv_tHE_ONE_BRAKK = UnitLastCreated();
    UnitGroupAdd(gv_aIHarvestGroups[0], gv_tHE_ONE_BRAKK);
    UnitGroupAdd(gv_aIHarvestGroupsArmy[0], gv_tHE_ONE_BRAKK);
    UnitSetPropertyFixed(gv_tHE_ONE_BRAKK, c_unitPropLifeMax, gv_brakkLife);
    UnitSetPropertyFixed(gv_tHE_ONE_BRAKK, c_unitPropLifePercent, 100.0);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_tHE_ONE_BRAKK, null, StringExternal("Param/Value/5B7AF36F"), null);
    TriggerEnable(gt_BrakkKilled, true);
    TriggerExecute(gt_ObjectiveKillBrakkCreate, true, true);
    TriggerExecute(gt_CreatePingforBrakk, true, false);
    Wait(0.5, c_timeAI);
    gf_AIPrepareWaveSingle(0, gv_pLAYER_02_DOMINION2, libHots_gf_DifficultyValueInt2(6, 6, 8), "PrimalFlyer", libHots_gf_DifficultyValueInt2(4, 4, 6), "PrimalHydralisk", libHots_gf_DifficultyValueInt2(2, 2, 3), null, 0, PointFromId(1137));
    Wait(3.0, c_timeAI);
    TriggerExecute(gt_TransmissionBrakkAttackQ, true, false);
    TriggerEnable(gt_TransmissionBrakkKillsStuffQ, true);
    UnitGroupLoopBegin(gv_aIHarvestGroups[0]);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION2, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION2, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_02_DOMINION2, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendBrakkAttack_Init () {
    gt_SendBrakkAttack = TriggerCreate("gt_SendBrakkAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping for Brakk
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingforBrakk_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShareVisionofUnit(gv_tHE_ONE_BRAKK, true, gv_pLAYER_01_USER);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_tHE_ONE_BRAKK), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/276D87D8"), null, gv_tHE_ONE_BRAKK);
    libSCDH_gf_CreateHeroPing(gv_tHE_ONE_BRAKK, 1);
    gv_brakk_Ping = PingLastCreated();
    PingSetTooltip(gv_brakk_Ping, StringExternal("Param/Value/C4DBB38E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingforBrakk_Init () {
    gt_CreatePingforBrakk = TriggerCreate("gt_CreatePingforBrakk_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brakk Killed
//--------------------------------------------------------------------------------------------------
bool gt_BrakkKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionBrakkDeathQ, true, false);
    PingDestroy(gv_brakk_Ping);
    TriggerExecute(gt_ObjectiveKillBrakkComplete, true, true);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase3) == c_objectiveStateCompleted)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrakkKilled_Init () {
    gt_BrakkKilled = TriggerCreate("gt_BrakkKilled_Func");
    TriggerEnable(gt_BrakkKilled, false);
    TriggerAddEventUnitDied(gt_BrakkKilled, UnitRefFromVariable("gv_tHE_ONE_BRAKK"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Brakk Attack! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBrakkAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_tHE_ONE_BRAKK) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_BRAKK, "zMission_Zerus01|Line00066", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBrakkAttackQ_Init () {
    gt_TransmissionBrakkAttackQ = TriggerCreate("gt_TransmissionBrakkAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Brakk Kills Stuff! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBrakkKillsStuffQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_tHE_ONE_BRAKK, c_unitPropKills, c_unitPropCurrent) >= 5.0) && (UnitGetPropertyFixed(gv_tHE_ONE_BRAKK, c_unitPropKills, c_unitPropCurrent) <= 10.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_BRAKK, "zMission_Zerus01|Line00140", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
        Wait(10.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        if ((UnitGetPropertyFixed(gv_tHE_ONE_BRAKK, c_unitPropKills, c_unitPropCurrent) >= 11.0) && (UnitGetPropertyFixed(gv_tHE_ONE_BRAKK, c_unitPropKills, c_unitPropCurrent) <= 15.0)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerQueueEnter();
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
            libSwaC_gf_SendTransmissionCampaign(gv_tHE_ONE_BRAKK, "zMission_Zerus01|Line00142", c_transmissionDurationAdd, 0.0, true, 1, 0);
            libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
            TriggerQueueExit();
            Wait(10.0, c_timeGame);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBrakkKillsStuffQ_Init () {
    gt_TransmissionBrakkKillsStuffQ = TriggerCreate("gt_TransmissionBrakkKillsStuffQ_Func");
    TriggerEnable(gt_TransmissionBrakkKillsStuffQ, false);
    TriggerAddEventUnitProperty(gt_TransmissionBrakkKillsStuffQ, UnitRefFromVariable("gv_tHE_ONE_BRAKK"), c_unitPropKills);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Brakk Death Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBrakkDeathQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Zerus01|Line00143", c_transmissionDurationAdd, 0.0, true, 1, 2);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1062), "zMission_Zerus01|Line00133", c_transmissionDurationAdd, 0.0, true, 1, 2);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBrakkDeathQ_Init () {
    gt_TransmissionBrakkDeathQ = TriggerCreate("gt_TransmissionBrakkDeathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase2) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionBase3) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZZerus01_1", gv_pLAYER_01_USER);
    }
    else {
    }
    TriggerExecute(gt_AchievementDronesLost, true, false);
    TriggerExecute(gt_AchievementMeatLostH, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/36135BBC"), IntToText(gv_kerriganKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BCD6BD9F"), IntToText(gv_dronesLostCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/54BA5053"), IntToText(gv_score_Enemy));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/35CBC987"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4528EC03"), IntToText(gv_largestZergForce));
    TextExpressionSetToken("Param/Expression/C2624869", "HivesDestroyed", IntToText(gv_primalHivesKilled));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5EA9E13C"), TextExpressionAssemble("Param/Expression/C2624869"));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/364DA5E3"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Brakk Eats 7 Meat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBrakkEats7Meat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveHarvestMeatFailed, true, false);
    TriggerExecute(gt_ObjectiveQuillgorMeatEnemyFailed, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/733C25A0"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBrakkEats7Meat_Init () {
    gt_DefeatBrakkEats7Meat = TriggerCreate("gt_DefeatBrakkEats7Meat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/89254BC0"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Drones Lost
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDronesLost_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_dronesLostCount <= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZZerus01_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDronesLost_Init () {
    gt_AchievementDronesLost = TriggerCreate("gt_AchievementDronesLost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Kill Primal Hives N/H 
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKillPrimalHivesNH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_primalHivesKilled += 1;
    if ((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1) && (gv_primalHivesKilled >= 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libSwaC_gf_CampaignAwardAchievement("ZZerus01_3", gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKillPrimalHivesNH_Init () {
    gt_AchievementKillPrimalHivesNH = TriggerCreate("gt_AchievementKillPrimalHivesNH_Func");
    TriggerAddEventUnitDied(gt_AchievementKillPrimalHivesNH, UnitRefFromUnit(UnitFromId(469)));
    TriggerAddEventUnitDied(gt_AchievementKillPrimalHivesNH, UnitRefFromUnit(UnitFromId(468)));
    TriggerAddEventUnitDied(gt_AchievementKillPrimalHivesNH, UnitRefFromUnit(UnitFromId(2088)));
    TriggerAddEventUnitDied(gt_AchievementKillPrimalHivesNH, UnitRefFromUnit(UnitFromId(206)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Meat Lost H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementMeatLostH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((gv_score_Enemy == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Zerus1", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementMeatLostH_Init () {
    gt_AchievementMeatLostH = TriggerCreate("gt_AchievementMeatLostH_Func");
    TriggerEnable(gt_AchievementMeatLostH, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Largest Zerg Force
//--------------------------------------------------------------------------------------------------
bool gt_LargestZergForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentForce;

    // Variable Initialization
    lv_currentForce = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentForce = PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount");
    if ((lv_currentForce > gv_largestZergForce)) {
        gv_largestZergForce = lv_currentForce;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LargestZergForce_Init () {
    gt_LargestZergForce = TriggerCreate("gt_LargestZergForce_Func");
    TriggerAddEventTimePeriodic(gt_LargestZergForce, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Harvest Meat Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestMeatCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus01Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus01Objective01", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1062)), StringExternal("Param/Value/90BE5D7F"));
    gv_feedingPointPing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestMeatCreate_Init () {
    gt_ObjectiveHarvestMeatCreate = TriggerCreate("gt_ObjectiveHarvestMeatCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Harvest Meat Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestMeatUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveHarvestMeatCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus01Objective01", gv_score_Player, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestMeatUpdate_Init () {
    gt_ObjectiveHarvestMeatUpdate = TriggerCreate("gt_ObjectiveHarvestMeatUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Harvest Meat Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestMeatComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveHarvestMeatCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus01Objective01", 2);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus01Objective02", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestMeatComplete_Init () {
    gt_ObjectiveHarvestMeatComplete = TriggerCreate("gt_ObjectiveHarvestMeatComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Harvest Meat Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestMeatFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHarvestMeatCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus01Objective01", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestMeatFailed_Init () {
    gt_ObjectiveHarvestMeatFailed = TriggerCreate("gt_ObjectiveHarvestMeatFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Quillgor Meat Enemy Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveQuillgorMeatEnemyCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus01Objective02");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveQuillgorMeatEnemyCreate_Init () {
    gt_ObjectiveQuillgorMeatEnemyCreate = TriggerCreate("gt_ObjectiveQuillgorMeatEnemyCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Quillgor Meat Enemy Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveQuillgorMeatEnemyUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveQuillgorMeatEnemyCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgressAdvanced("ZZerus01Objective02", gv_score_Enemy, true, StringExternal("Param/Value/CEB0D364"), true, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveQuillgorMeatEnemyUpdate_Init () {
    gt_ObjectiveQuillgorMeatEnemyUpdate = TriggerCreate("gt_ObjectiveQuillgorMeatEnemyUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Quillgor Meat Enemy Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveQuillgorMeatEnemyComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveQuillgorMeatEnemyCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus01Objective02", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveQuillgorMeatEnemyComplete_Init () {
    gt_ObjectiveQuillgorMeatEnemyComplete = TriggerCreate("gt_ObjectiveQuillgorMeatEnemyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Quillgor Meat Enemy Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveQuillgorMeatEnemyFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveQuillgorMeatEnemyCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus01Objective02", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveQuillgorMeatEnemyFailed_Init () {
    gt_ObjectiveQuillgorMeatEnemyFailed = TriggerCreate("gt_ObjectiveQuillgorMeatEnemyFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Brakk Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillBrakkCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus01Objective012");
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillBrakkCreate_Init () {
    gt_ObjectiveKillBrakkCreate = TriggerCreate("gt_ObjectiveKillBrakkCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Brakk Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillBrakkComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveKillBrakkCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus01Objective012", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillBrakkComplete_Init () {
    gt_ObjectiveKillBrakkComplete = TriggerCreate("gt_ObjectiveKillBrakkComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Brakk Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillBrakkFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillBrakkCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus01Objective012", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillBrakkFailed_Init () {
    gt_ObjectiveKillBrakkFailed = TriggerCreate("gt_ObjectiveKillBrakkFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Essence Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectEssenceCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZZerus01Objective03");
    gv_objectiveDestroyDominionBase4 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus01Objective03", 0, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectEssenceCreate_Init () {
    gt_ObjectiveCollectEssenceCreate = TriggerCreate("gt_ObjectiveCollectEssenceCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Essence Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectEssenceUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCollectEssenceCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZZerus01Objective03", gv_objectiveDestroyDominionBase5, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectEssenceUpdate_Init () {
    gt_ObjectiveCollectEssenceUpdate = TriggerCreate("gt_ObjectiveCollectEssenceUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Essence Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectEssenceComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCollectEssenceCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZZerus01Objective03", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectEssenceComplete_Init () {
    gt_ObjectiveCollectEssenceComplete = TriggerCreate("gt_ObjectiveCollectEssenceComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    gv_cinematicHiddenUnits = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(1396));
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "Brakk", 0, gv_pLAYER_02_DOMINION, PointFromId(1440));
    gv_introBrakk = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introBrakk);
    UnitSetState(gv_introBrakk, c_unitStateFidget, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "PrimalUltralisk", 0, gv_pLAYER_02_DOMINION, PointFromId(52));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "PrimalUltralisk", 0, gv_pLAYER_02_DOMINION, PointFromId(165));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SpaceCowMedium", 0, gv_pLAYER_02_DOMINION32, PointFromId(2021));
    gv_introQuillgor = UnitLastCreated();
    UnitSetPropertyFixed(gv_introQuillgor, c_unitPropLife, 1.0);
    UnitGroupAdd(gv_cinematicTempUnits, gv_introQuillgor);
    libNtve_gf_ShowHideUnit(gv_introQuillgor, false);
    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_introGuardians);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(408), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(2095), true);
    CatalogFieldValueSet(c_gameCatalogAbil, "DroneCarcassHarvest", "CastIntroTime[" + IntToString(0) + "]", gv_pLAYER_01_USER, "3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_introDrone;

    // Variable Initialization
    lv_introDrone = null;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1079), 0.0, -1, 10.0, true);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1125), ((SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus01|Line00004", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus01|Line00009", true), c_soundIndexAny))) - 1.0), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus01|Line00004", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus01|Line00009", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2036), 0.0, -1, 10.0, true);
    UnitSetPosition(gv_kerrigan, PointFromId(2025), false);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    libNtve_gf_PauseUnit(gv_cinematicTempUnits22, false);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(2025)), 0.0);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    libNtve_gf_ShowHideUnit(gv_introQuillgor, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2032), 5.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus01|Line00010", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_kerrigan, OrderTargetingUnit(AbilityCommand("attack", 0), gv_introQuillgor), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    gv_introCorpse = UnitGroupUnit(UnitGroup("SpaceCowCorpse", 0, RegionCircle(PointFromId(2021), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    UnitGroupAdd(gv_cinematicTempUnits, gv_introCorpse);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 1, null, gv_introCorpse, "Ref_Center");
    libHots_gf_StoreActorForUnit(gv_introCorpse, 1, libNtve_gf_ActorLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_01_USER, PointFromId(2035));
    lv_introDrone = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), gv_introCorpse), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_introCorpse, 1));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneCarcassHarvest", 0), gv_introCorpse), c_orderQueueReplace);
    Wait(3.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1081), 4.0, -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus01|Line00021", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(4.5, c_timeGame);
    UnitCreateEffectPoint(gv_introCorpse, "FeedZurvan", PointFromId(2020));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1062), "Signal Feed");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(666), 0.0, -1, 10.0, true);
    TriggerExecute(gt_IntroPrimals, true, false);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 1.0, 1.0, (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus01|Line00090", true), c_soundIndexAny)) + 1));
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1437), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus01|Line00090", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    SoundPlay(SoundLink("Zerus01_CS_Open_GrpMvmnt", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introPrimalSound = SoundLastPlayed();
    libSwaC_gf_SendTransmissionCampaign(gv_introBrakk, "zMission_Zerus01|Line00090", c_transmissionDurationAdd, 0.0, false, 2, 0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introBrakk), c_animNameDefault, "Custom 01", 0, 0.5);
    TransmissionWait(TransmissionLastSent(), 0.5);
    UnitSetPosition(gv_kerrigan, PointFromId(2038), false);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, 0, 1);
    UnitRemove(lv_introDrone);
    UnitGroupLoopBegin(gv_introZerglings);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_introGuardians);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 4);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 1, 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupIssueOrder(gv_introGuardians, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2045)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2039), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2044), 11.0, -1, 10.0, true);
    SoundPlay(SoundLink("Zerus01_CS_Open_PrimalFlyers", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introPrimalSound = SoundLastPlayed();
    libSwaC_gf_SendTransmissionCampaign(gv_introBrakk, "zMission_Zerus01|Line00040", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(8.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupLoopBegin(gv_introMutalisks);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty("Mutalisk", c_unitPropHeight), 2.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(gv_introBrakk, "zMission_Zerus01|Line00150", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2055)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    while (!((libNtve_gf_UnitGroupIsDead(gv_introGuardians) == true))) {
        Wait(0.25, c_timeGame);
    }
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(3), 1.0, PointGetFacing(PointFromId(3)))), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(43), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus01|Line00011", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Zerus01|Line00012", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Zerus01|Line00011", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Zerus01|Line00012", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
    if ((gv_introCinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == false) && (gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    TriggerStop(gt_IntroPrimals);
    TransmissionClearAll();
    CameraShakeStop(gv_pLAYER_01_USER);
    CatalogFieldValueSet(c_gameCatalogAbil, "DroneCarcassHarvest", "CastIntroTime[" + IntToString(0) + "]", gv_pLAYER_01_USER, "60");
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_introCinematicCompleted == false)) {
        libNtve_gf_ShowHideUnit(gv_kerrigan, true);
        UnitSetPosition(gv_kerrigan, PointFromId(3), false);
        UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(3)), 0.0);
        UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
    }
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropKills, 0.0);
    UnitSetPropertyFixed(UnitFromId(219), c_unitPropKills, 0.0);
    UnitSetPropertyFixed(UnitFromId(441), c_unitPropKills, 0.0);
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_introMutalisks);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty("Mutalisk", c_unitPropHeight), 0.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropKills, 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_introGuardians);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_introZerglings);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(33), null, c_animNameDefault);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(37), null, c_animNameDefault);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, 0, 0);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(408), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(2095), false);
    UnitGroupLoopBegin(gv_introMutalisks);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
        CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(465)), lv_fadeDuration, -1, 10.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        SoundStop(gv_introPrimalSound, true);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(465)), lv_fadeDuration);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Primals
//--------------------------------------------------------------------------------------------------
bool gt_IntroPrimals_Func (bool testConds, bool runActions) {
    int auto531CAA63_n;
    int auto531CAA63_i;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(33), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(37), "ZerusTallGrassCluster", c_animNameDefault, "Cover End", c_animFlagPlayForever, c_animTimeDefault);
    auto531CAA63_n = 5;
    auto531CAA63_i = 1;
    while (auto531CAA63_i <= auto531CAA63_n) {
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(35)), 90.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(38))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 4), gv_introBrakk), c_orderQueueAddToEnd);
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(36)), 180.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(39))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 4), gv_introBrakk), c_orderQueueAddToEnd);
        Wait(0.5, c_timeGame);
        UnitCreate(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(35)), 90.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(38))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 4), gv_introBrakk), c_orderQueueAddToEnd);
        UnitCreate(1, "PrimalHydralisk", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(36)), 180.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(39))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 4), gv_introBrakk), c_orderQueueAddToEnd);
        Wait(0.5, c_timeGame);
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(35)), 90.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(38))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 4), gv_introBrakk), c_orderQueueAddToEnd);
        UnitCreate(1, "PrimalZergling", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(36)), 180.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(39))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 4), gv_introBrakk), c_orderQueueAddToEnd);
        Wait(0.5, c_timeGame);
        auto531CAA63_i = auto531CAA63_i + 1;
    }
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(33), null, c_animNameDefault);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionFromId(37), null, c_animNameDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroPrimals_Init () {
    gt_IntroPrimals = TriggerCreate("gt_IntroPrimals_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZZerus01MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, 0);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicHiddenUnits2, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "Brakk", 0, gv_pLAYER_02_DOMINION2, PointFromId(1440));
    gv_cinematicBrakk = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicBrakk);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_cinematicBrakk), 30.0), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_cinematicBrakk), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(666), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1437), 12.0, -1, 10, true);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicBrakk, "zMission_Zerus01|Line00132", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Zerus01|Line00144", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus01MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits2);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_ReviveHeroInstantly(0, false);
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZZerus01MusicCutscene02_DefendHiveCluster";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus01MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_kerriganKills = libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    AITimePause(true);
    IntLoopBegin(2, 10);
    while (!IntLoopDone()) {
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, IntLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_victoryHiddenUnitGroup);
        IntLoopStep();
    }
    IntLoopEnd();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_victoryHiddenUnitGroup);
    UnitGroupLoopBegin(gv_victoryHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MediumTastyCorpse", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(47), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_victoryHiddenUnitGroup);
    UnitGroupLoopBegin(gv_victoryHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "CreepTumor") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorUsed")) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZerusAlienTreeHover", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Crabeetle", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Artosilope", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    RegionPlayableMapSet(RegionEntireMap());
    libNtve_gf_PauseUnit(gv_cinematicTempUnits22, false);
    UnitSetState(gv_cinematicTempUnits22, c_unitStateFidget, false);
    PlayerSetState(0, c_playerStateFidgetingEnabled, false);
    libSwaC_gf_CreateHero2(PointFromId(172), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(172)), 0, 1);
    gv_victoryKerrigan = UnitLastCreated();
    UnitSetState(gv_victoryKerrigan, c_unitStateFidget, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1129), 0.0, -1, 10.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, 7);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus01MusicCutscene03_AncientOneAwakens", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1040), 10.0, -1, 10.0, true);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.5, 0.5, 3.0);
    TriggerExecute(gt_VictoryCinematicCameraShakes, true, false);
    SoundPlay(SoundLink("TVReports_ShipsFlyByRumble", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundSetVolume(SoundLastPlayed(), 75.0);
    gv_cinematicStinger1 = SoundLastPlayed();
    libNtve_gf_SendActorMessageToUnit(gv_cinematicTempUnits22, "Signal Emerge");
    Wait(3.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    Wait(7.0, c_timeGame);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicTempUnits22, "zMission_Zerus01|Line00025", c_transmissionDurationAdd, 0.0, true, 2, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1348), 3.0, -1, 10.0, true);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1334)), c_orderQueueReplace);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(166)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Queen", 0, gv_pLAYER_01_USER, PointFromId(1029));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1335)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(166)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Queen", 0, gv_pLAYER_01_USER, PointFromId(283));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1336)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(166)), c_orderQueueAddToEnd);
    Wait(3.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Zerus01|Line00028", c_transmissionDurationAdd, 0.0, true, 2, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1349), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus01|Line00080", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus01|Line00018", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Zerus01|Line00004", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicTempUnits22, "zMission_Zerus01|Line00080", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicTempUnits22, "zMission_Zerus01|Line00018", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicTempUnits22, "zMission_Zerus01|Line00004", c_transmissionDurationAdd, 0.0, true, 2, 0);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic - Camera Shakes
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicCameraShakes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 0.0);
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.75, c_timeGame);
    SoundPlay(SoundLink("ZurvanThud", -1), PlayerGroupAll(), 50.0, 0.0);
    gv_victoryZurvanSound = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.2, 0.2, 1.0);
    Wait(1.65, c_timeGame);
    SoundPlay(SoundLink("ZurvanThud2", -1), PlayerGroupAll(), 40.0, 0.0);
    gv_victoryZurvanSound = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.2, 0.2, 1.0);
    Wait(2.35, c_timeGame);
    SoundPlay(SoundLink("ZurvanThud", -1), PlayerGroupAll(), 30.0, 0.0);
    gv_victoryZurvanSound = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.2, 0.2, 1.0);
    Wait(0.65, c_timeGame);
    SoundPlay(SoundLink("ZurvanThud2", -1), PlayerGroupAll(), 40.0, 0.0);
    gv_victoryZurvanSound = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.2, 0.2, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicCameraShakes_Init () {
    gt_VictoryCinematicCameraShakes = TriggerCreate("gt_VictoryCinematicCameraShakes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Variable Initialization
    lv_fadeDuratioin = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryCinematicCameraShakes);
    SoundStop(gv_cinematicStinger1, true);
    SoundStop(gv_victoryZurvanSound, true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init03aPrimalCreepCamps_Init();
    gt_Init03bRespawnOrder_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGBrakkAttakk_Init();
    gt_RevealMeatAreas_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_SetSpireMouseover_Init();
    gt_StartGameQ_Init();
    gt_GameSequence_Init();
    gt_FirstQuillgorAttacked_Init();
    gt_Reminders_Init();
    gt_PrepareKerriganRevive_Init();
    gt_CorpseEatenPlayer_Init();
    gt_FirstCampSpawnedQ_Init();
    gt_FirstMeatDroppedQ_Init();
    gt_Transmission1stChunkBeingHarvestedPlayerQ_Init();
    gt_PlayerStartsDraggingMeat_Init();
    gt_MutaliskButtonClicked_Init();
    gt_TransmissionTeachMutalisksQ_Init();
    gt_BrakkForcesEatingMeatQ_Init();
    gt_BrakkFrocesFightingQuillgarQ_Init();
    gt_ProgressUpdatePlayerFirstMeatQ_Init();
    gt_ProgressUpdatePlayer2MeatsQ_Init();
    gt_ProgressUpdatePlayer4MeatsQ_Init();
    gt_ProgressUpdatePlayer5MeatsQ_Init();
    gt_ProgressUpdatePlayer6MeatsQ_Init();
    gt_ProgressUpdateEnemyMeatsQ_Init();
    gt_PrimalHiveWarningQ_Init();
    gt_DehakaSpotted_Init();
    gt_DehakaFlee_Init();
    gt_EssencePoolApproached_Init();
    gt_EssencePoolIntroQ_Init();
    gt_EssencePoolPing_Init();
    gt_EssencePoolAbsorbedQ_Init();
    gt_SporeRayPatrols_Init();
    gt_InitializeSporeRayPatrols_Init();
    gt_FirstCrabeetle_Init();
    gt_SpawnQuillgorCamps_Init();
    gt_SpawnQuillgorCampsTransmissionQ_Init();
    gt_QuillgorCampsLeash_Init();
    gt_CorpseSetup_Init();
    gt_CorpseBeingEatenQ_Init();
    gt_CorpseBeingEatenIndicatorDiminish_Init();
    gt_CorpseHarvestStarted_Init();
    gt_TransmissionCorpseHarvestStartedQ_Init();
    gt_TransmissionDefendDroneWarningQ_Init();
    gt_CorpseHarvestEndedFinished_Init();
    gt_CorpseHarvestEndedDied_Init();
    gt_MeatMovementOrders_Init();
    gt_MeatMovementOrdersrepeated_Init();
    gt_MeatPingsUpdate_Init();
    gt_TransmissionMultipleDronesPullingMeatQ_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_StartUpgradesNormal_Init();
    gt_StartUpgradesHard_Init();
    gt_AISendHarvestWaves_Init();
    gt_AISendHarvestWaveSingle_Init();
    gt_AIReactionWaveIsDestroyed_Init();
    gt_AIUnitEnterAIRetreatRegion_Init();
    gt_AIQuillgorHarvesterInCombat_Init();
    gt_AIQuillgorHarvesterInCombatIndicatorDiminish_Init();
    gt_TransmissionDroneUnderAttackQ_Init();
    gt_TransmissionKerriganKillsQuillgorAttackersQ_Init();
    gt_SendBrakkAttack_Init();
    gt_CreatePingforBrakk_Init();
    gt_BrakkKilled_Init();
    gt_TransmissionBrakkAttackQ_Init();
    gt_TransmissionBrakkKillsStuffQ_Init();
    gt_TransmissionBrakkDeathQ_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatBrakkEats7Meat_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_AchievementDronesLost_Init();
    gt_AchievementKillPrimalHivesNH_Init();
    gt_AchievementMeatLostH_Init();
    gt_LargestZergForce_Init();
    gt_ObjectiveHarvestMeatCreate_Init();
    gt_ObjectiveHarvestMeatUpdate_Init();
    gt_ObjectiveHarvestMeatComplete_Init();
    gt_ObjectiveHarvestMeatFailed_Init();
    gt_ObjectiveQuillgorMeatEnemyCreate_Init();
    gt_ObjectiveQuillgorMeatEnemyUpdate_Init();
    gt_ObjectiveQuillgorMeatEnemyComplete_Init();
    gt_ObjectiveQuillgorMeatEnemyFailed_Init();
    gt_ObjectiveKillBrakkCreate_Init();
    gt_ObjectiveKillBrakkComplete_Init();
    gt_ObjectiveKillBrakkFailed_Init();
    gt_ObjectiveCollectEssenceCreate_Init();
    gt_ObjectiveCollectEssenceUpdate_Init();
    gt_ObjectiveCollectEssenceComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroPrimals_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicCameraShakes_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
