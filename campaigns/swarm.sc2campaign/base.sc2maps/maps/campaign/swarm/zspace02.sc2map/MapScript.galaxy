//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Conviction
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_DOMINION = 2;
const int gv_p03_DOMINION = 3;
const int gv_p03_ZERG_ALLY = 4;
const int gv_p05_PRISONERS = 5;
const int gv_p03_KERRIGAN_AI = 6;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
playergroup gv_dominionPlayers;
unit gv_kerrigan;
unit gv__1PrisonDeckCoupling;
fixed gv__2ShipExplodeTime;
int gv_maxNoOfZerglings;
int gv_maxNoOfRoaches;
int gv_maxNoOfHydralisks;
int gv_maxNoOfAberrations;
int gv_maxNoOfInfestors;
int gv_maxNoOfQueens;
unitgroup gv_secretDocuments;
actor gv_actorImpactHeal;
unitgroup gv_scaredPrisoners;
int gv_documentsFound;
int gv_interruptable_Transmission;
int gv__1ObjectiveRescueJimPing;
int gv__1ObjectiveProtectKerriganPing;
bool gv__1FirstDominionAttacked;
unitgroup gv__1FirstDominionGuards;
unitgroup gv__1BridgeBullies;
unitgroup gv__1LockedDoorBullies;
unitgroup gv__1LockedDoorWave;
int[5] gv__1PrisonCellPings;
unit[5] gv__1PrisonCellBeacons;
int gv__1PrisonCellsInfested;
unitgroup gv__1TheHoleBullies;
unitgroup gv__1ElevatorKillers;
unitgroup gv__1ElevatorPatrollers;
bool gv__1ElevatorRoomEntered;
timer gv_objective_EscapeTimer;
int gv_objective_EscapeTimerWindow;
unitgroup gv__2AfterBridgeDominion;
unitgroup gv__2FleeingGuards01;
unitgroup gv__2FleeingGuards02;
unitgroup gv__2LockedGateDominion;
bool gv_achievementKerriganLife;
timer gv_achievementPrisonDeckTimedRunTimer;
timer gv_achievementMasteryTimedRun;
fixed gv_kerriganLowestLife;
int gv_numberOfReinforcements;
int gv_objectiveDestroyDominionBase2;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase3;
int gv_objectiveDestroyDominionBase5;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
unit gv_cinematicKerrigan;
bool gv_cinematicCompleted;
unit gv_introCreepTumor;
bool gv_introTentacleActivated;
bool gv_introMusicCompleted;
sound gv_introSoundNydusUnload;
sound gv_introSoundNydusExplosion;
sound gv_introSoundNydusVox1;
sound gv_introSoundNydusVox2;
unitgroup gv_cinematicSavedPrisoners;
unit gv_midMarine;
int gv_elevatorCutscene;
bool gv_midMusicCompleted;
sound gv_midAlertSound;
sound gv_midMovementSound1;
sound gv_midMovementSound2;
sound gv_victoryTentacleSound1;
sound gv_victoryTentacleSound2;
sound gv_victoryTentacleSound3;

void InitGlobals () {
    int init_i;

    gv_dominionPlayers = PlayerGroupEmpty();
    gv_secretDocuments = UnitGroupEmpty();
    gv_scaredPrisoners = UnitGroupEmpty();
    gv_interruptable_Transmission = c_invalidTransmissionId;
    gv__1ObjectiveRescueJimPing = c_invalidPingId;
    gv__1ObjectiveProtectKerriganPing = c_invalidPingId;
    gv__1FirstDominionGuards = UnitGroupEmpty();
    gv__1BridgeBullies = UnitGroupEmpty();
    gv__1LockedDoorBullies = UnitGroupEmpty();
    gv__1LockedDoorWave = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv__1PrisonCellPings[init_i] = c_invalidPingId;
    }
    gv__1TheHoleBullies = UnitGroupEmpty();
    gv__1ElevatorKillers = UnitGroupEmpty();
    gv__1ElevatorPatrollers = UnitGroupEmpty();
    gv_objective_EscapeTimer = TimerCreate();
    gv_objective_EscapeTimerWindow = c_timerWindowNone;
    gv__2AfterBridgeDominion = UnitGroupEmpty();
    gv__2FleeingGuards01 = UnitGroupEmpty();
    gv__2FleeingGuards02 = UnitGroupEmpty();
    gv__2LockedGateDominion = UnitGroupEmpty();
    gv_achievementKerriganLife = true;
    gv_achievementPrisonDeckTimedRunTimer = TimerCreate();
    gv_achievementMasteryTimedRun = TimerCreate();
    gv_kerriganLowestLife = 5000.0;
    gv_objectiveDestroyDominionBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase5 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicSavedPrisoners = UnitGroupEmpty();
    gv_elevatorCutscene = c_cutsceneNone;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RefreshKerriganUIHP ();
void gf_RefreshPlayerUnitVitals ();
void gf_IssueNudgeOrder (unit lp_unit, fixed lp_distance);
void gf_IssueAlertedOrder (unit lp_unit, point lp_point);
fixed gf_HPOfUnitGroup (unitgroup lp_unitgroup);
unit gf_WeakestUnitfromUnitGroup (unitgroup lp_unitgroup);
void gf_FleePrisoners (unit lp_flee, point lp_killer);
void gf_PlayAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_message);
void gf_CreateRescueJimPing (point lp_pingPoint);
void gf_SpawnUnitsAtPoint (int lp_qty, string lp_unitType, int lp_player, doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint);
int gf_PlayerZerglingBanelingCount ();
void gf_SpawnZerglingReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint);
int gf_PlayerRoachCount ();
void gf_SpawnRoachReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint);
int gf_PlayerHydraliskLurkerImpalerCount ();
void gf_SpawnHydraliskReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint);
void gf_SpawnAberrationReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint);
void gf_SpawnInfestorReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint);
void gf_SpawnQueenReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUGStage2;
trigger gt_RemoveHarmlessBehavior;
trigger gt_RemoveHealImpactFX;
trigger gt_FearedbyDeath;
trigger gt_FearedbyDamage;
trigger gt_FearSourceKerrigan;
trigger gt_SecretDocumentsIntroQ;
trigger gt_SecretDocumentPickups;
trigger gt_SecretDocumentsFoundQ;
trigger gt__1StartGameArea1Q;
trigger gt__1FirstDominionReactionQ;
trigger gt__1FirstDominionAttacked;
trigger gt__1FirstDominionEncounter;
trigger gt__1PlayerWaitsbyFirstDominion1Q;
trigger gt__1PlayerWaitsbyFirstDominion2Q;
trigger gt__1PlayerWaitsbyFirstDominion3Q;
trigger gt__1EntryHullBreach01;
trigger gt__1DominionBridgeEncounter;
trigger gt__1DominionBridgeEncounterTentacle;
trigger gt__1EntryHullBreach02;
trigger gt__1DominionReactionAtBridgeQ;
trigger gt__1MengskISAwareQ;
trigger gt__1PsycheWardDominionMoveOut;
trigger gt__1PsycheWardHullBreach;
trigger gt__1SiegeTankSiege;
trigger gt__1EntryHullBreach03;
trigger gt__1LockedDoorRoomEntered;
trigger gt__1LockedDoorRoomThorIntroQ;
trigger gt__1LockedDoorRoomClear;
trigger gt__1LockedDoorRoomClearedQ;
trigger gt__1LockedDoorBeaconActivated;
trigger gt__1LockedDoorBeaconObjectiveActivatedQ;
trigger gt__1ProtectKerriganPing;
trigger gt__1LockedDoorRoomActivatedQ;
trigger gt__1LockedDoorEventTiming;
trigger gt__1LockedDoorAttack01;
trigger gt__1LockedDoorAttack01Q;
trigger gt__1LockedDoorAttack02;
trigger gt__1LockedDoorAttack02Q;
trigger gt__1LockedDoorAttack03;
trigger gt__1LockedDoorAttack03Q;
trigger gt__1LockedDoorAttack04;
trigger gt__1LockedDoorReinforcements01;
trigger gt__1LockedDoorReinforcements01Q;
trigger gt__1LockedDoorReinforcements02;
trigger gt__1LockedDoorReinforcements02Q;
trigger gt__1LockedDoorDestroyed;
trigger gt__1LockedDoorDestroyedQ;
trigger gt__1PrisonCellRoomEntered;
trigger gt__1PrisonCellReacttoLurkerImpaler;
trigger gt__1PrisonCellRoomIntroQ;
trigger gt__1PrisonCellRoomTentacles;
trigger gt__1CreatePrisonCellPings;
trigger gt__1PrisonCellInfestation;
trigger gt__1PrisonCellLineEngaged;
trigger gt__1TheHoleRevealed;
trigger gt__1TheHoleBreach;
trigger gt__1TheHoleTentacle;
trigger gt__1TheHoleBulliesEngagedQ;
trigger gt__1TheHoleReinforcements;
trigger gt__1TransitiontoElevatorRoom;
trigger gt__1ElevatorRoomIntro;
trigger gt__1ElevatorRoomTentacles;
trigger gt__1ElevatorShakingSound;
trigger gt__1Elevatorat75LifeQ;
trigger gt__1Elevatorat50LifeQ;
trigger gt__1Elevatorat30LifeQ;
trigger gt__1ElevatorAI;
trigger gt__1ThorTakesDamage;
trigger gt__1ThorIsDominated;
trigger gt__1CreateElevatorBossBar;
trigger gt__1ElevatorVictory;
trigger gt__1CouplingDestroyed;
trigger gt__2StartGameMissionStartQ;
trigger gt__2StartShipDestructionTimer;
trigger gt__2TurnoffArea1Triggers;
trigger gt__2ThorReactionQ;
trigger gt__2DeckBridgeTentacle;
trigger gt__2ShipIsExploding;
trigger gt__2ShipShaking1;
trigger gt__2ShipShaking2;
trigger gt__2ShipIsExplodingWarning1Q;
trigger gt__2ShipShaking3;
trigger gt__2ShipIsExplodingWarning2Q;
trigger gt__2ShipCeilingFallingAfterJumpDrive;
trigger gt__2DominionFleeing01;
trigger gt__2DominionFlee01Q;
trigger gt__2TrappedDominion;
trigger gt__2HullBreachReinforcements01;
trigger gt__2TrappedDominionQ;
trigger gt__2TrappedDominionDead;
trigger gt__2DestroyGatetoProceedQ;
trigger gt__2FirstGateDestroyed;
trigger gt__2DominionFleeing02;
trigger gt__2DominionFlee02Q;
trigger gt__2FleeingDominionTentacle;
trigger gt__2PrisonBreakOut;
trigger gt__2PrisonersAttackDominionQ;
trigger gt__2PrisonBreakTentacle;
trigger gt__2ReaperAmbush;
trigger gt__2ReaperAmbushPlayerQ;
trigger gt__2DominionFleeing03;
trigger gt__2DominionFlee03Q;
trigger gt__2ExplosionsatShipWreckage;
trigger gt__2LockedOutDominionForces;
trigger gt__2LockedOutTroopsQ;
trigger gt__2HullBreachReinforcements02;
trigger gt__2GatetoRaynorPrisonDestroyed;
trigger gt__2EnteredRaynorCellRoom;
trigger gt__2PrisonRoomEnteredQ;
trigger gt__2RaynorCellReinforcements01;
trigger gt_DefeatKerriganDiedObjectiveFailed;
trigger gt_DefeatCouplingDestroyedFailed;
trigger gt_DefeatShipDestroyedFailed;
trigger gt_VictoryJimRescued;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementKerriganLife;
trigger gt_AchievementPrisonDeckTimedRunNH;
trigger gt_AchievementTimedRunH;
trigger gt_KerriganLowestLife;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveKerriganMustSurviveCreate;
trigger gt_ObjectiveKerriganMustSurviveComplete;
trigger gt_ObjectiveKerriganMustSurviveFailed;
trigger gt_ObjectiveRescueJimCreate;
trigger gt_ObjectiveRescueJimComplete;
trigger gt_ObjectiveRescueJimFailed;
trigger gt_ObjectiveProtecttheQueenCreate;
trigger gt_ObjectiveProtecttheQueenComplete;
trigger gt_ObjectiveProtecttheQueenFailed;
trigger gt_ObjectiveFindSecretDocumentsCreate;
trigger gt_ObjectiveFindSecretDocumentsUpdate;
trigger gt_ObjectiveFindSecretDocumentsComplete;
trigger gt_ObjectiveFindSecretDocumentsFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroExplosions;
trigger gt_IntroFirstEncounterUnits;
trigger gt_IntroMusic;
trigger gt_CinematicElevatorTransitionMidQ;
trigger gt_CinematicElevatorTransitionMidSetup;
trigger gt_CinematicElevatorTransitionMidCinematic;
trigger gt_CinematicElevatorTransitionMidCinematicEnd;
trigger gt_CinematicElevatorTransitionMidCleanup;
trigger gt_CinematicLowerDeckTransitionMidQ;
trigger gt_CinematicLowerDeckTransitionMidSetup;
trigger gt_CinematicLowerDeckTransitionMidCinematic;
trigger gt_CinematicLowerDeckTransitionMidCinematicEnd;
trigger gt_CinematicLowerDeckTransitionMidCleanup;
trigger gt_MidElevatorAnimations;
trigger gt_MidBridgeControllers;
trigger gt_MidElevatorDescentCamera;
trigger gt_MidExplosions;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryTentacle1;
trigger gt_VictoryTentacle2;
trigger gt_VictoryTentacle3;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RefreshKerriganUIHP_Trigger = null;

void gf_RefreshKerriganUIHP () {
    if (auto_gf_RefreshKerriganUIHP_Trigger == null) {
        auto_gf_RefreshKerriganUIHP_Trigger = TriggerCreate("auto_gf_RefreshKerriganUIHP_TriggerFunc");
    }

    TriggerExecute(auto_gf_RefreshKerriganUIHP_Trigger, false, false);
}

bool auto_gf_RefreshKerriganUIHP_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, 0, 0);
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, false);
    UnitSetState(gv_kerrigan, c_unitStateSelectable, true);
    UnitClearSelection(gv_p01_USER);
    UnitSelect(gv_kerrigan, gv_p01_USER, true);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

void gf_RefreshPlayerUnitVitals () {
    // Variable Declarations
    actor lv_actorShieldImpact;

    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("Spell_Mend_Launch", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, c_unitPropNormal))) {
            libNtve_gf_AttachModelToUnit(UnitGroupLoopCurrent(), "PrimalHealBuffImpactModel", "Ref_Center");
            gv_actorImpactHeal = libNtve_gf_ActorLastCreated();
            TriggerExecute(gt_RemoveHealImpactFX, true, false);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

void gf_IssueNudgeOrder (unit lp_unit, fixed lp_distance) {
    // Implementation
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(lp_unit), lp_distance, UnitGetFacing(lp_unit))), c_orderQueueReplace);
}

void gf_IssueAlertedOrder (unit lp_unit, point lp_point) {
    // Implementation
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lp_point), c_orderQueueReplace);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lp_point, 0.1, PointGetFacing(lp_point))), c_orderQueueAddToEnd);
}

fixed gf_HPOfUnitGroup (unitgroup lp_unitgroup) {
    // Variable Declarations
    fixed lv_totalhp;

    // Variable Initialization

    // Implementation
    UnitGroupLoopBegin(lp_unitgroup);
    while (!UnitGroupLoopDone()) {
        lv_totalhp += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return lv_totalhp;
}

unit gf_WeakestUnitfromUnitGroup (unitgroup lp_unitgroup) {
    // Variable Declarations
    unit lv_lowesthpunit;
    fixed lv_lowesthpofunit;

    // Variable Initialization

    // Implementation
    UnitGroupLoopBegin(lp_unitgroup);
    while (!UnitGroupLoopDone()) {
        if ((lv_lowesthpunit == null)) {
            lv_lowesthpunit = UnitGroupLoopCurrent();
        }
        else {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lv_lowesthpunit, c_unitPropLife, c_unitPropCurrent))) {
                lv_lowesthpunit = UnitGroupLoopCurrent();
            }
            else {
            }
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return lv_lowesthpunit;
}

trigger auto_gf_FleePrisoners_Trigger = null;
unit auto_gf_FleePrisoners_lp_flee;
point auto_gf_FleePrisoners_lp_killer;

void gf_FleePrisoners (unit lp_flee, point lp_killer) {
    auto_gf_FleePrisoners_lp_flee = lp_flee;
    auto_gf_FleePrisoners_lp_killer = lp_killer;

    if (auto_gf_FleePrisoners_Trigger == null) {
        auto_gf_FleePrisoners_Trigger = TriggerCreate("auto_gf_FleePrisoners_TriggerFunc");
    }

    TriggerExecute(auto_gf_FleePrisoners_Trigger, false, false);
}

bool auto_gf_FleePrisoners_TriggerFunc (bool testConds, bool runActions) {
    unit lp_flee = auto_gf_FleePrisoners_lp_flee;
    point lp_killer = auto_gf_FleePrisoners_lp_killer;

    int autoD8D45EF9_val;

    // Implementation
    if ((UnitGetCustomValue(lp_flee, 0) == 0.0)) {
        UnitGroupAdd(gv_scaredPrisoners, lp_flee);
        UnitSetCustomValue(lp_flee, 0, 1.0);
        UnitBehaviorAdd(lp_flee, "Run", lp_flee, 1);
        UnitSetPropertyFixed(lp_flee, c_unitPropMovementSpeed, 2.0);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lp_flee), c_animNameDefault);
        UnitIssueOrder(lp_flee, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_flee), 6.0, AngleBetweenPoints(lp_killer, UnitGetPosition(lp_flee)))), c_orderQueueReplace);
        Wait(RandomFixed(1.0, 2.0), c_timeGame);
        UnitIssueOrder(lp_flee, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        autoD8D45EF9_val = RandomInt(0, 1);
        if (autoD8D45EF9_val == 0) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_flee), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
        }
        else if (autoD8D45EF9_val == 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_flee), c_animNameDefault, "Fidget Equal One", c_animFlagPlayForever, c_animTimeDefault);
        }
        else {
        }
        UnitSetCustomValue(lp_flee, 0, 0.0);
    }
    else {
    }
    return true;
}

void gf_PlayAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_message) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_termsString;

    // Variable Initialization
    lv_termsString = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_termsString = ("ScopeContains " + (lp_doodadType));
    }
    else {
    }
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_termsString);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void gf_CreateRescueJimPing (point lp_pingPoint) {
    // Implementation
    if ((gv__1ObjectiveRescueJimPing != c_invalidPingId)) {
        PingDestroy(gv__1ObjectiveRescueJimPing);
    }
    else {
    }
    libSwaC_gf_CreateObjectivePing(true, lp_pingPoint, StringExternal("Param/Value/F9F59F4C"));
    gv__1ObjectiveRescueJimPing = PingLastCreated();
}

trigger auto_gf_SpawnUnitsAtPoint_Trigger = null;
int auto_gf_SpawnUnitsAtPoint_lp_qty;
string auto_gf_SpawnUnitsAtPoint_lp_unitType;
int auto_gf_SpawnUnitsAtPoint_lp_player;
doodad auto_gf_SpawnUnitsAtPoint_lp_doodad;
point auto_gf_SpawnUnitsAtPoint_lp_spawnPoint;
point auto_gf_SpawnUnitsAtPoint_lp_targetPoint;

void gf_SpawnUnitsAtPoint (int lp_qty, string lp_unitType, int lp_player, doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint) {
    auto_gf_SpawnUnitsAtPoint_lp_qty = lp_qty;
    auto_gf_SpawnUnitsAtPoint_lp_unitType = lp_unitType;
    auto_gf_SpawnUnitsAtPoint_lp_player = lp_player;
    auto_gf_SpawnUnitsAtPoint_lp_doodad = lp_doodad;
    auto_gf_SpawnUnitsAtPoint_lp_spawnPoint = lp_spawnPoint;
    auto_gf_SpawnUnitsAtPoint_lp_targetPoint = lp_targetPoint;

    if (auto_gf_SpawnUnitsAtPoint_Trigger == null) {
        auto_gf_SpawnUnitsAtPoint_Trigger = TriggerCreate("auto_gf_SpawnUnitsAtPoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUnitsAtPoint_Trigger, false, false);
}

bool auto_gf_SpawnUnitsAtPoint_TriggerFunc (bool testConds, bool runActions) {
    int lp_qty = auto_gf_SpawnUnitsAtPoint_lp_qty;
    string lp_unitType = auto_gf_SpawnUnitsAtPoint_lp_unitType;
    int lp_player = auto_gf_SpawnUnitsAtPoint_lp_player;
    doodad lp_doodad = auto_gf_SpawnUnitsAtPoint_lp_doodad;
    point lp_spawnPoint = auto_gf_SpawnUnitsAtPoint_lp_spawnPoint;
    point lp_targetPoint = auto_gf_SpawnUnitsAtPoint_lp_targetPoint;

    // Implementation
    if ((gv_gameOver == false)) {
        ActorSend(ActorFromDoodad(lp_doodad), "Signal Work");
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        UnitCreate(lp_qty, lp_unitType, 0, lp_player, lp_spawnPoint, PointGetFacing(lp_spawnPoint));
        gv_numberOfReinforcements += lp_qty;
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

int gf_PlayerZerglingBanelingCount () {
    // Variable Declarations
    int lv_zerglingCount;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingA") == true)) {
        lv_zerglingCount += UnitGroupCount(UnitGroup("HotSSwarmling", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_zerglingCount += UnitGroupCount(UnitGroup("HotSSwarmlingBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingB") == true)) {
        lv_zerglingCount += UnitGroupCount(UnitGroup("HotSRaptor", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_zerglingCount += UnitGroupCount(UnitGroup("HotSRaptorBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingA") == false) && (libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingB") == false)) {
        lv_zerglingCount += UnitGroupCount(UnitGroup("Zergling", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_zerglingCount += UnitGroupCount(UnitGroup("ZerglingBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("BanelingA") == true)) {
        lv_zerglingCount += UnitGroupCount(UnitGroup("HotSSplitterlingBig", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_zerglingCount += UnitGroupCount(UnitGroup("HotSSplitterlingBigBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("BanelingB") == true)) {
        lv_zerglingCount += UnitGroupCount(UnitGroup("HotSHunter", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_zerglingCount += UnitGroupCount(UnitGroup("HotSHunterBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("BanelingA") == false) && (libSwaC_gf_CampaignTechUnitIsEnabled("BanelingB") == false)) {
        lv_zerglingCount += UnitGroupCount(UnitGroup("Baneling", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_zerglingCount += UnitGroupCount(UnitGroup("BanelingBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    return lv_zerglingCount;
}

void gf_SpawnZerglingReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    int lv_zerglingsOwned;

    // Variable Initialization

    // Implementation
    lv_zerglingsOwned = gf_PlayerZerglingBanelingCount();
    if ((gv_gameOver == false) && (lv_zerglingsOwned < gv_maxNoOfZerglings)) {
        ActorSend(ActorFromDoodad(lp_doodad), "Signal Work");
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        UnitCreate((gv_maxNoOfZerglings - lv_zerglingsOwned), "Zergling", 0, gv_p01_USER, lp_spawnPoint, PointGetFacing(lp_spawnPoint));
        gv_numberOfReinforcements += UnitGroupCount(UnitLastCreatedGroup(), c_unitCountAlive);
        Wait(1.0, c_timeGame);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
    }
    else {
    }
}

int gf_PlayerRoachCount () {
    // Variable Declarations
    int lv_roachCount;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("RoachA") == true)) {
        lv_roachCount += UnitGroupCount(UnitGroup("RoachVile", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_roachCount += UnitGroupCount(UnitGroup("RoachVileBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("RoachB") == true)) {
        lv_roachCount += UnitGroupCount(UnitGroup("RoachCorpser", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_roachCount += UnitGroupCount(UnitGroup("RoachCorpserBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("RoachA") == false) && (libSwaC_gf_CampaignTechUnitIsEnabled("RoachB") == false)) {
        lv_roachCount += UnitGroupCount(UnitGroup("Roach", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_roachCount += UnitGroupCount(UnitGroup("RoachBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    return lv_roachCount;
}

void gf_SpawnRoachReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint) {
    int autoD8310491_ae;
    int autoD8310491_ai;

    // Variable Declarations
    int lv_roachesOwned;
    int lv_numberOfUnitsToSpawn;
    int lv_i;

    // Variable Initialization

    // Implementation
    lv_roachesOwned = gf_PlayerRoachCount();
    lv_numberOfUnitsToSpawn = (gv_maxNoOfRoaches - lv_roachesOwned);
    if ((gv_gameOver == false) && (lv_roachesOwned < gv_maxNoOfRoaches)) {
        ActorSend(ActorFromDoodad(lp_doodad), "Signal Work");
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        autoD8310491_ae = lv_numberOfUnitsToSpawn;
        autoD8310491_ai = 1;
        lv_i = 0;
        while ((autoD8310491_ai >= 0 && lv_i <= autoD8310491_ae) || (autoD8310491_ai <= 0 && lv_i >= autoD8310491_ae)) {
            UnitCreate(1, "Roach", 0, gv_p01_USER, lp_spawnPoint, PointGetFacing(lp_spawnPoint));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
            gv_numberOfReinforcements += 1;
            Wait(0.25, c_timeGame);
            lv_i += autoD8310491_ai;
        }
    }
    else {
    }
}

int gf_PlayerHydraliskLurkerImpalerCount () {
    // Variable Declarations
    int lv_hydraliskCount;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskB") == true)) {
        lv_hydraliskCount += UnitGroupCount(UnitGroup("HydraliskLurker", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_hydraliskCount += UnitGroupCount(UnitGroup("HydraliskLurkerBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_hydraliskCount += UnitGroupCount(UnitGroup("Lurker", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_hydraliskCount += UnitGroupCount(UnitGroup("LurkerBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskA") == true)) {
        lv_hydraliskCount += UnitGroupCount(UnitGroup("HydraliskImpaler", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_hydraliskCount += UnitGroupCount(UnitGroup("HydraliskImpalerBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_hydraliskCount += UnitGroupCount(UnitGroup("Impaler", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_hydraliskCount += UnitGroupCount(UnitGroup("ImpalerBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskA") == false) && (libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskB") == false)) {
        lv_hydraliskCount += UnitGroupCount(UnitGroup("Hydralisk", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_hydraliskCount += UnitGroupCount(UnitGroup("HydraliskBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    return lv_hydraliskCount;
}

void gf_SpawnHydraliskReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    int lv_hydralisksOwned;

    // Variable Initialization

    // Implementation
    lv_hydralisksOwned = gf_PlayerHydraliskLurkerImpalerCount();
    if ((gv_gameOver == false) && (lv_hydralisksOwned < gv_maxNoOfHydralisks)) {
        ActorSend(ActorFromDoodad(lp_doodad), "Signal Work");
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        UnitCreate((gv_maxNoOfHydralisks - lv_hydralisksOwned), "Hydralisk", 0, gv_p01_USER, lp_spawnPoint, PointGetFacing(lp_spawnPoint));
        gv_numberOfReinforcements += UnitGroupCount(UnitLastCreatedGroup(), c_unitCountAlive);
        Wait(1.0, c_timeGame);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
    }
    else {
    }
}

void gf_SpawnAberrationReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    int lv_aberrationsOwned;

    // Variable Initialization

    // Implementation
    lv_aberrationsOwned += UnitGroupCount(UnitGroup("InfestedAbomination", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_aberrationsOwned += UnitGroupCount(UnitGroup("InfestedAbominationBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((gv_gameOver == false) && (lv_aberrationsOwned < gv_maxNoOfAberrations)) {
        ActorSend(ActorFromDoodad(lp_doodad), "Signal Work");
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        UnitCreate((gv_maxNoOfAberrations - lv_aberrationsOwned), "InfestedAbomination", 0, gv_p01_USER, lp_spawnPoint, PointGetFacing(lp_spawnPoint));
        gv_numberOfReinforcements += UnitGroupCount(UnitLastCreatedGroup(), c_unitCountAlive);
        Wait(1.0, c_timeGame);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
    }
    else {
    }
}

void gf_SpawnInfestorReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    int lv_infestorsOwned;

    // Variable Initialization

    // Implementation
    lv_infestorsOwned += UnitGroupCount(UnitGroup("Infestor", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_infestorsOwned += UnitGroupCount(UnitGroup("InfestorBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((gv_gameOver == false) && (lv_infestorsOwned < gv_maxNoOfInfestors)) {
        ActorSend(ActorFromDoodad(lp_doodad), "Signal Work");
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        UnitCreate(1, "Infestor", 0, gv_p01_USER, lp_spawnPoint, PointGetFacing(lp_spawnPoint));
        gv_numberOfReinforcements += 1;
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        Wait(1.0, c_timeGame);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
    }
    else {
    }
}

void gf_SpawnQueenReinforcements (doodad lp_doodad, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    int lv_queensOwned;

    // Variable Initialization

    // Implementation
    lv_queensOwned += UnitGroupCount(UnitGroup("Queen", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_queensOwned += UnitGroupCount(UnitGroup("QueenBurrowed", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((gv_gameOver == false) && (lv_queensOwned < gv_maxNoOfQueens)) {
        ActorSend(ActorFromDoodad(lp_doodad), "Signal Work");
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        UnitCreate(1, "Queen", 0, gv_p01_USER, lp_spawnPoint, PointGetFacing(lp_spawnPoint));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        gv_numberOfReinforcements += 1;
        Wait(1.0, c_timeGame);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZSpace2");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt__1StartGameArea1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_ZERG_ALLY, 0);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_PRISONERS, 7);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_PRISONERS, 0);
    PlayerSetAlliance(gv_p03_ZERG_ALLY, c_allianceIdPushable, gv_p01_USER, true);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_KERRIGAN_AI, 1);
    libNtve_gf_SetAlliance(gv_p02_DOMINION, gv_p03_ZERG_ALLY, 5);
    libNtve_gf_SetAlliance(gv_p02_DOMINION, gv_p05_PRISONERS, 7);
    libNtve_gf_SetAlliance(gv_p02_DOMINION, gv_p03_KERRIGAN_AI, 5);
    libNtve_gf_SetAlliance(gv_p03_DOMINION, gv_p03_ZERG_ALLY, 5);
    libNtve_gf_SetAlliance(gv_p03_DOMINION, gv_p05_PRISONERS, 7);
    libNtve_gf_SetAlliance(gv_p03_DOMINION, gv_p03_KERRIGAN_AI, 5);
    libNtve_gf_SetAlliance(gv_p03_ZERG_ALLY, gv_p05_PRISONERS, 7);
    libNtve_gf_SetAlliance(gv_p03_ZERG_ALLY, gv_p03_KERRIGAN_AI, 0);
    PlayerSetAlliance(gv_p03_KERRIGAN_AI, c_allianceIdPushable, gv_p01_USER, false);
    PlayerSetAlliance(gv_p03_KERRIGAN_AI, c_allianceIdPushable, gv_p02_DOMINION, false);
    PlayerSetAlliance(gv_p03_KERRIGAN_AI, c_allianceIdPushable, gv_p03_DOMINION, false);
    libNtve_gf_SetAlliance(gv_p02_DOMINION, gv_p03_DOMINION, 0);
    PlayerSetColorIndex(gv_p02_DOMINION, 1, true);
    PlayerSetColorIndex(gv_p03_DOMINION, 1, true);
    PlayerGroupAdd(gv_dominionPlayers, gv_p02_DOMINION);
    PlayerGroupAdd(gv_dominionPlayers, gv_p03_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_p02_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_p03_DOMINION);
    PlayerGroupAdd(lv_visionGroup, gv_p03_ZERG_ALLY);
    PlayerGroupAdd(lv_visionGroup, gv_p05_PRISONERS);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerSetState(gv_p01_USER, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p02_DOMINION, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p03_DOMINION, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p03_ZERG_ALLY, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p05_PRISONERS, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p03_KERRIGAN_AI, c_playerStateFidgetingEnabled, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 1000);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 1000);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitFromId(1236), false);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(969), StringExternal("Param/Value/DD191AE3"), StringExternal("Param/Value/9D5586E3"), StringExternal("Param/Value/6152648B"));
    UnitBehaviorAdd(UnitFromId(969), "ColonistWander", UnitFromId(969), 1);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(1229), StringExternal("Param/Value/89EB144B"), StringExternal("Param/Value/A1DECB23"), StringExternal("Param/Value/E2416B7F"));
    UnitBehaviorAdd(UnitFromId(1229), "ColonistWander", UnitFromId(1229), 1);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(1288), StringExternal("Param/Value/83592BE4"), StringExternal("Param/Value/2210E071"), StringExternal("Param/Value/9CBB8688"));
    UnitBehaviorAdd(UnitFromId(1288), "ColonistWander", UnitFromId(1288), 1);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(1916), StringExternal("Param/Value/47B08003"), StringExternal("Param/Value/36C67C59"), StringExternal("Param/Value/A548ED27"));
    UnitSetState(UnitFromId(1916), c_unitStateFidget, false);
    UnitSetPropertyFixed(UnitFromId(1916), c_unitPropLifeMax, 50.0);
    UnitSetPropertyFixed(UnitFromId(1916), c_unitPropLifePercent, 100.0);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libNtve_gf_ShowHideUnit(UnitFromId(423), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv__1PrisonCellBeacons[1] = UnitFromId(576);
    gv__1PrisonCellBeacons[2] = UnitFromId(575);
    gv__1PrisonCellBeacons[3] = UnitFromId(607);
    gv__1PrisonCellBeacons[4] = UnitFromId(613);
    IntLoopBegin(1, 4);
    while (!IntLoopDone()) {
        libNtve_gf_ShowHideUnit(gv__1PrisonCellBeacons[IntLoopCurrent()], false);
        IntLoopStep();
    }
    IntLoopEnd();
    UnitGroupLoopBegin(UnitGroup("UmojanLabDoorsLeftLowered", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestationSpire", gv_p03_ZERG_ALLY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Harmless", UnitGroupLoopCurrent(), 1);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SecretDocuments", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_secretDocuments, UnitGroupLoopCurrent());
        libSwaC_gf_SetUnitInfoTextCampaign(UnitGroupLoopCurrent(), StringExternal("Param/Value/CB206308"), null, null);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv__1FirstDominionGuards = UnitGroup(null, gv_p02_DOMINION, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv__1BridgeBullies = UnitGroup(null, gv_p02_DOMINION, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitScriptControlled(UnitFromId(150), true);
    AISetUnitScriptControlled(UnitFromId(344), true);
    gv__1LockedDoorBullies = UnitGroup(null, gv_p02_DOMINION, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitScriptControlled(UnitFromId(1089), true);
    AISetUnitScriptControlled(UnitFromId(1107), true);
    gv__1TheHoleBullies = UnitGroup(null, gv_p02_DOMINION, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv__1ElevatorPatrollers = UnitGroup(null, gv_p02_DOMINION, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv__1ElevatorKillers = UnitGroup(null, gv_p02_DOMINION, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv__1PrisonDeckCoupling = UnitFromId(2071);
    AISetUnitScriptControlled(UnitFromId(1412), true);
    AISetUnitScriptControlled(UnitFromId(17), true);
    AISetUnitScriptControlled(UnitFromId(13), true);
    libNtve_gf_ChangeUnitDamage(gv__1PrisonDeckCoupling, 0, 1);
    libSwaC_gf_SetUnitInfoTextCampaign(gv__1PrisonDeckCoupling, null, StringExternal("Param/Value/72D84D19"), null);
    UnitGroupLoopBegin(UnitGroup("Scientist", c_playerAny, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetScale(UnitGroupLoopCurrent(), 130.0, 130.0, 130.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv__2AfterBridgeDominion = UnitGroup(null, gv_p02_DOMINION, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv__2FleeingGuards01 = UnitGroup(null, gv_p02_DOMINION, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv__2FleeingGuards02 = UnitGroup(null, gv_p02_DOMINION, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv__2LockedGateDominion = UnitGroup(null, gv_p02_DOMINION, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitScriptControlled(UnitFromId(1813), true);
    AISetUnitScriptControlled(UnitFromId(1825), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZSpace02MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    GameSetLighting("PrisonShip", 0.0);
    GameSetBackground(c_backgroundFixed, "UlnarSkyBox", 100.0);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(26), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(74), RegionFromId(74), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(12), RegionFromId(12), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(71), RegionFromId(72), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(31), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(34), RegionFromId(34), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(53), RegionFromId(53), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(73), RegionFromId(73), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(50), RegionFromId(50), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(56), RegionFromId(56), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(62), RegionFromId(62), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(63), RegionFromId(63), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(64), RegionFromId(64), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(57), RegionFromId(57), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(58), RegionFromId(58), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(76), RegionFromId(76), gv_p01_USER);
    ActorSend(ActorFromDoodad(DoodadFromId(1673)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1246)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(421)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(704)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1073)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1247)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(35)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1045)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(285)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1326)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1604)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1607)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1402)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1606)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1803)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1609)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1897)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1608)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1670)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1363)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1671)), "Signal Off");
    ActorSend(ActorFromDoodad(DoodadFromId(1668)), "Signal Off");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShieldWall", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "PunisherGrenades", 1);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Snipe", 0), true);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ReaperJump", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "SiegeTech", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "FortifiedBunkerCarapace", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        PlayerGroupLoopBegin(gv_dominionPlayers);
        while (!PlayerGroupLoopDone()) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShrikeTurret", 1);
            TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("EMP", 0), true);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
            PlayerGroupLoopStep();
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    gv__2ShipExplodeTime = libHots_gf_DifficultyValueFixed2(5.0, 5.0, 4.85);
    UnitSetPropertyFixed(gv__1PrisonDeckCoupling, c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(2500.0, 2500.0, 2000.0));
    UnitSetPropertyFixed(gv__1PrisonDeckCoupling, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(750), c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(2000.0, 2000.0, 2500.0));
    UnitSetPropertyFixed(UnitFromId(750), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(296), c_unitPropLifeMax, libHots_gf_DifficultyValueFixed2(2000.0, 2000.0, 2500.0));
    UnitSetPropertyFixed(UnitFromId(296), c_unitPropLifePercent, 100.0);
    gv_maxNoOfZerglings = libHots_gf_DifficultyValueInt2(12, 12, 12);
    gv_maxNoOfRoaches = libHots_gf_DifficultyValueInt2(5, 5, 4);
    gv_maxNoOfHydralisks = libHots_gf_DifficultyValueInt2(5, 5, 4);
    gv_maxNoOfAberrations = libHots_gf_DifficultyValueInt2(3, 3, 2);
    gv_maxNoOfInfestors = libHots_gf_DifficultyValueInt2(2, 2, 2);
    gv_maxNoOfQueens = libHots_gf_DifficultyValueInt2(3, 3, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Combat (Space02)");
    libSwaC_gf_AddMissionTipUserData("Strategy");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HellionTank", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_p01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PerditionTurret", false, gv_p01_USER);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_p01_USER);
    }
    else {
    }
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("Zergling") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingA") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSSwarmling", false, gv_p01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("ZerglingB") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSRaptor", false, gv_p01_USER);
    }
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("Baneling") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("BanelingA") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSSplitterlingBig", false, gv_p01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("BanelingB") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HotSHunter", false, gv_p01_USER);
    }
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("Roach") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("RoachA") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("RoachVile", false, gv_p01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("RoachB") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("RoachCorpser", false, gv_p01_USER);
    }
    if ((libSwaC_gf_CampaignTechUnitIsEnabled("Hydralisk") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskA") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HydraliskImpaler", false, gv_p01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Impaler", false, gv_p01_USER);
    }
    else if ((libSwaC_gf_CampaignTechUnitIsEnabled("HydraliskB") == true)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("HydraliskLurker", false, gv_p01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Lurker", false, gv_p01_USER);
    }
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_p01_USER);
    if ((libSwaC_gf_MissionStatus("ZHybrid3") == 2)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_p01_USER);
    }
    else {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Queen", false, gv_p01_USER);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(gt__1ElevatorVictory) > 0)) {
        return true;
    }
    else {
    }
    TriggerExecute(gt__1ElevatorVictory, false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStage2_Init () {
    gt_DEBUGStage2 = TriggerCreate("gt_DEBUGStage2_Func");
    TriggerAddEventChatMessage(gt_DEBUGStage2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Harmless Behavior
//--------------------------------------------------------------------------------------------------
bool gt_RemoveHarmlessBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTarget()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Harmless") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Harmless", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveHarmlessBehavior_Init () {
    gt_RemoveHarmlessBehavior = TriggerCreate("gt_RemoveHarmlessBehavior_Func");
    TriggerAddEventUnitAttacked(gt_RemoveHarmlessBehavior, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Heal Impact FX
//--------------------------------------------------------------------------------------------------
bool gt_RemoveHealImpactFX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_healImpactTransferLocal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healImpactTransferLocal = gv_actorImpactHeal;
    Wait(3.0, c_timeGame);
    libNtve_gf_KillModel(lv_healImpactTransferLocal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveHealImpactFX_Init () {
    gt_RemoveHealImpactFX = TriggerCreate("gt_RemoveHealImpactFX_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feared by Death!
//--------------------------------------------------------------------------------------------------
bool gt_FearedbyDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p05_PRISONERS, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_FleePrisoners(UnitGroupLoopCurrent(), UnitGetPosition(libNtve_gf_KillingUnit()));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FearedbyDeath_Init () {
    gt_FearedbyDeath = TriggerCreate("gt_FearedbyDeath_Func");
    TriggerAddEventUnitDied(gt_FearedbyDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feared by Damage!
//--------------------------------------------------------------------------------------------------
bool gt_FearedbyDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p05_PRISONERS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p05_PRISONERS, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_FleePrisoners(UnitGroupLoopCurrent(), UnitGetPosition(EventUnitDamageSourceUnit()));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FearedbyDamage_Init () {
    gt_FearedbyDamage = TriggerCreate("gt_FearedbyDamage_Func");
    TriggerAddEventUnitDamaged(gt_FearedbyDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fear Source - Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_FearSourceKerrigan_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_scaredPrisoners);
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0)) == true) && (libNtve_gf_UnitIsVisibleToPlayer(gv_kerrigan, gv_p05_PRISONERS) == true)) {
            gf_FleePrisoners(UnitGroupLoopCurrent(), UnitGetPosition(gv_kerrigan));
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FearSourceKerrigan_Init () {
    gt_FearSourceKerrigan = TriggerCreate("gt_FearSourceKerrigan_Func");
    TriggerAddEventTimePeriodic(gt_FearSourceKerrigan, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Secret Documents Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_SecretDocumentsIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    TriggerQueueEnter();
    UnitGroupLoopBegin(gv_secretDocuments);
    while (!UnitGroupLoopDone()) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(1, 1, null, UnitGroupLoopCurrent(), "Ref_Center");
        libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 1, libNtve_gf_ActorLastCreated());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ObjectiveFindSecretDocumentsCreate, true, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00145", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00148", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecretDocumentsIntroQ_Init () {
    gt_SecretDocumentsIntroQ = TriggerCreate("gt_SecretDocumentsIntroQ_Func");
    TriggerAddEventUnitRegion(gt_SecretDocumentsIntroQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(75), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Secret Document Pickups
//--------------------------------------------------------------------------------------------------
bool gt_SecretDocumentPickups_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnitRangeUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_documentsFound == 0)) {
        UnitGroupLoopBegin(gv_secretDocuments);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1));
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    UnitKill(EventUnitRangeUnit());
    TriggerExecute(gt_ObjectiveFindSecretDocumentsUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecretDocumentPickups_Init () {
    gt_SecretDocumentPickups = TriggerCreate("gt_SecretDocumentPickups_Func");
    TriggerAddEventUnitRange(gt_SecretDocumentPickups, UnitRefFromVariable("gv_kerrigan"), UnitFromId(1047), 1.5, true);
    TriggerAddEventUnitRange(gt_SecretDocumentPickups, UnitRefFromVariable("gv_kerrigan"), UnitFromId(1118), 1.5, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Secret Documents Found Q
//--------------------------------------------------------------------------------------------------
bool gt_SecretDocumentsFoundQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Space02|Line00147", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00150", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecretDocumentsFoundQ_Init () {
    gt_SecretDocumentsFoundQ = TriggerCreate("gt_SecretDocumentsFoundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Start Game - Area 1 Q
//--------------------------------------------------------------------------------------------------
bool gt__1StartGameArea1Q_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerriganLowestLife = UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifeMax, c_unitPropCurrent);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/56CC9218"), null, gv_kerrigan);
    TimerStart(gv_achievementPrisonDeckTimedRunTimer, c_timerDurationInfinite, false, c_timeAI);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TimerStart(gv_achievementMasteryTimedRun, 600.0, false, c_timeAI);
    }
    else {
    }
    UnitSelect(gv_kerrigan, gv_p01_USER, true);
    UnitControlGroupAddUnit(gv_p01_USER, 1, gv_kerrigan);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveRescueJimCreate, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, true);
    gf_CreateRescueJimPing(PointFromId(1307));
    TriggerQueueExit();
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1StartGameArea1Q_Init () {
    gt__1StartGameArea1Q = TriggerCreate("gt__1StartGameArea1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 First Dominion Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt__1FirstDominionReactionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_waitTimer;

    // Variable Initialization
    lv_waitTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(292)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(292), "zMission_Space02|Line00020", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    gv__1FirstDominionAttacked = false;
    TimerStart(lv_waitTimer, 140.0, false, c_timeAI);
    libNtve_gf_WaitForTimer(lv_waitTimer, 90.0, false);
    TriggerExecute(gt__1PlayerWaitsbyFirstDominion1Q, true, false);
    libNtve_gf_WaitForTimer(lv_waitTimer, 45.0, false);
    TriggerExecute(gt__1PlayerWaitsbyFirstDominion2Q, true, false);
    libNtve_gf_WaitForTimer(lv_waitTimer, 0.0, false);
    TriggerExecute(gt__1PlayerWaitsbyFirstDominion3Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1FirstDominionReactionQ_Init () {
    gt__1FirstDominionReactionQ = TriggerCreate("gt__1FirstDominionReactionQ_Func");
    TriggerAddEventUnitRegion(gt__1FirstDominionReactionQ, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 First Dominion Attacked
//--------------------------------------------------------------------------------------------------
bool gt__1FirstDominionAttacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__1FirstDominionGuards, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv__1FirstDominionAttacked = true;
    TransmissionClear(gv_interruptable_Transmission);
    TriggerStop(gt__1PlayerWaitsbyFirstDominion1Q);
    TriggerStop(gt__1PlayerWaitsbyFirstDominion2Q);
    TriggerStop(gt__1PlayerWaitsbyFirstDominion3Q);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1FirstDominionAttacked_Init () {
    gt__1FirstDominionAttacked = TriggerCreate("gt__1FirstDominionAttacked_Func");
    TriggerAddEventUnitDamaged(gt__1FirstDominionAttacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 First Dominion Encounter
//--------------------------------------------------------------------------------------------------
bool gt__1FirstDominionEncounter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__1EntryHullBreach01, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1FirstDominionEncounter_Init () {
    gt__1FirstDominionEncounter = TriggerCreate("gt__1FirstDominionEncounter_Func");
    TriggerAddEventUnitRegion(gt__1FirstDominionEncounter, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Player Waits by First Dominion 1 Q
//--------------------------------------------------------------------------------------------------
bool gt__1PlayerWaitsbyFirstDominion1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv__1FirstDominionAttacked == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv__1FirstDominionGuards, c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((UnitIsAlive(UnitFromId(1025)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1025), "zMission_Space02|Line00105", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(29)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(29), "zMission_Space02|Line00107", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(1052)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1052), "zMission_Space02|Line00106", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(1026)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1026), "zMission_Space02|Line00108", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(29)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(29), "zMission_Space02|Line00109", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(1025)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1025), "zMission_Space02|Line00110", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(164)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(164), "zMission_Space02|Line00111", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PlayerWaitsbyFirstDominion1Q_Init () {
    gt__1PlayerWaitsbyFirstDominion1Q = TriggerCreate("gt__1PlayerWaitsbyFirstDominion1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Player Waits by First Dominion 2 Q
//--------------------------------------------------------------------------------------------------
bool gt__1PlayerWaitsbyFirstDominion2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv__1FirstDominionAttacked == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv__1FirstDominionGuards, c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((UnitIsAlive(UnitFromId(1052)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1052), "zMission_Space02|Line00112", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(292)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(292), "zMission_Space02|Line00113", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(1052)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1052), "zMission_Space02|Line00114", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PlayerWaitsbyFirstDominion2Q_Init () {
    gt__1PlayerWaitsbyFirstDominion2Q = TriggerCreate("gt__1PlayerWaitsbyFirstDominion2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Player Waits by First Dominion 3 Q
//--------------------------------------------------------------------------------------------------
bool gt__1PlayerWaitsbyFirstDominion3Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv__1FirstDominionAttacked == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv__1FirstDominionGuards, c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((UnitIsAlive(UnitFromId(1052)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1052), "zMission_Space02|Line00115", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(61)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(61), "zMission_Space02|Line00116", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PlayerWaitsbyFirstDominion3Q_Init () {
    gt__1PlayerWaitsbyFirstDominion3Q = TriggerCreate("gt__1PlayerWaitsbyFirstDominion3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Entry Hull Breach 01
//--------------------------------------------------------------------------------------------------
bool gt__1EntryHullBreach01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(286);
    lv_targetPoint = PointFromId(250);
    lv_spawnDoodad = DoodadFromId(1246);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/E2E982DB"), null, lv_spawnPoint);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal OnShort");
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(286), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    gf_SpawnUnitsAtPoint(4, "Zergling", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(3, "Zergling", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(4, "Zergling", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(3, "Hydralisk", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1EntryHullBreach01_Init () {
    gt__1EntryHullBreach01 = TriggerCreate("gt__1EntryHullBreach01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Dominion Bridge Encounter
//--------------------------------------------------------------------------------------------------
bool gt__1DominionBridgeEncounter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(138), Order(AbilityCommand("ExtendingBridgeNEShort8", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("HansonABChoiceAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt__1DominionReactionAtBridgeQ, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__1EntryHullBreach02, true, false);
    while (!((libNtve_gf_UnitGroupIsDead(gv__1BridgeBullies) == true))) {
        Wait(0.5, c_timeGame);
    }
    TriggerExecute(gt__1DominionBridgeEncounterTentacle, true, false);
    UnitIssueOrder(UnitFromId(109), Order(AbilityCommand("SpacePrisonDoorsThinRightLowered", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt__1MengskISAwareQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1DominionBridgeEncounter_Init () {
    gt__1DominionBridgeEncounter = TriggerCreate("gt__1DominionBridgeEncounter_Func");
    TriggerAddEventUnitRegion(gt__1DominionBridgeEncounter, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Dominion Bridge Encounter Tentacle
//--------------------------------------------------------------------------------------------------
bool gt__1DominionBridgeEncounterTentacle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1604)), "Signal Hover");
    Wait(0.85, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1773)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1DominionBridgeEncounterTentacle_Init () {
    gt__1DominionBridgeEncounterTentacle = TriggerCreate("gt__1DominionBridgeEncounterTentacle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Entry Hull Breach 02
//--------------------------------------------------------------------------------------------------
bool gt__1EntryHullBreach02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(21);
    lv_targetPoint = PointFromId(33);
    lv_spawnDoodad = DoodadFromId(1247);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/D286B1CC"), null, lv_spawnPoint);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal OnShort");
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(21), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(2, "Roach", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(1, "Queen", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1EntryHullBreach02_Init () {
    gt__1EntryHullBreach02 = TriggerCreate("gt__1EntryHullBreach02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Dominion Reaction At Bridge Q
//--------------------------------------------------------------------------------------------------
bool gt__1DominionReactionAtBridgeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(208)) == true)) {
        TransmissionClear(gv_interruptable_Transmission);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.1);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 0.1);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(208), "zMission_Space02|Line00004", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Space02|Line00099", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1DominionReactionAtBridgeQ_Init () {
    gt__1DominionReactionAtBridgeQ = TriggerCreate("gt__1DominionReactionAtBridgeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Mengsk IS Aware Q
//--------------------------------------------------------------------------------------------------
bool gt__1MengskISAwareQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpace02MusicEvent06_MengskCallToArms", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00039", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00040", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1MengskISAwareQ_Init () {
    gt__1MengskISAwareQ = TriggerCreate("gt__1MengskISAwareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Psyche Ward Dominion Move Out
//--------------------------------------------------------------------------------------------------
bool gt__1PsycheWardDominionMoveOut_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(161)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PsycheWardDominionMoveOut_Init () {
    gt__1PsycheWardDominionMoveOut = TriggerCreate("gt__1PsycheWardDominionMoveOut_Func");
    TriggerAddEventUnitRegion(gt__1PsycheWardDominionMoveOut, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Psyche Ward Hull Breach
//--------------------------------------------------------------------------------------------------
bool gt__1PsycheWardHullBreach_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(1120);
    lv_targetPoint = PointFromId(1121);
    lv_spawnDoodad = DoodadFromId(1073);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/F82E7540"), null, lv_spawnPoint);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal On");
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1120), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    gf_SpawnUnitsAtPoint(1, "InfestedAbomination", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(2, "Hydralisk", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PsycheWardHullBreach_Init () {
    gt__1PsycheWardHullBreach = TriggerCreate("gt__1PsycheWardHullBreach_Func");
    TriggerAddEventUnitRegion(gt__1PsycheWardHullBreach, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Siege Tank Siege
//--------------------------------------------------------------------------------------------------
bool gt__1SiegeTankSiege_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        UnitIssueOrder(UnitFromId(344), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(UnitFromId(150), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    }
    Wait(1.5, c_timeGame);
    AISetUnitScriptControlled(UnitFromId(344), false);
    AISetUnitScriptControlled(UnitFromId(150), false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt__1EntryHullBreach03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1SiegeTankSiege_Init () {
    gt__1SiegeTankSiege = TriggerCreate("gt__1SiegeTankSiege_Func");
    TriggerAddEventUnitRegion(gt__1SiegeTankSiege, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Entry Hull Breach 03
//--------------------------------------------------------------------------------------------------
bool gt__1EntryHullBreach03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(1007);
    lv_targetPoint = PointFromId(1021);
    lv_spawnDoodad = DoodadFromId(35);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/36C592E6"), null, lv_spawnPoint);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal On");
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1007), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(2, "Roach", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    if ((libSwaC_gf_MissionStatus("ZHybrid3") == 2)) {
        gf_SpawnUnitsAtPoint(2, "Infestor", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    }
    else {
        gf_SpawnUnitsAtPoint(2, "Queen", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1EntryHullBreach03_Init () {
    gt__1EntryHullBreach03 = TriggerCreate("gt__1EntryHullBreach03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Room Entered
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorRoomEntered_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1LockedDoorRoomClear, true);
    VisRevealArea(gv_p01_USER, RegionFromId(15), 12.0, false);
    TriggerExecute(gt__1LockedDoorRoomThorIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorRoomEntered_Init () {
    gt__1LockedDoorRoomEntered = TriggerCreate("gt__1LockedDoorRoomEntered_Func");
    TriggerAddEventUnitRegion(gt__1LockedDoorRoomEntered, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Room Thor Intro Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorRoomThorIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Space02|Line00038", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorRoomThorIntroQ_Init () {
    gt__1LockedDoorRoomThorIntroQ = TriggerCreate("gt__1LockedDoorRoomThorIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Room Clear
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorRoomClear_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_DOMINION, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__1LockedDoorRoomClearedQ, true, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(62)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/160AEED5"), null, UnitFromId(62));
    libNtve_gf_ShowHideUnit(UnitFromId(423), true);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(423), StringExternal("Param/Value/28582F51"), StringExternal("Param/Value/6F97185B"), null);
    TriggerEnable(gt__1LockedDoorBeaconActivated, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorRoomClear_Init () {
    gt__1LockedDoorRoomClear = TriggerCreate("gt__1LockedDoorRoomClear_Func");
    TriggerEnable(gt__1LockedDoorRoomClear, false);
    TriggerAddEventTimePeriodic(gt__1LockedDoorRoomClear, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Room Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorRoomClearedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00100", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorRoomClearedQ_Init () {
    gt__1LockedDoorRoomClearedQ = TriggerCreate("gt__1LockedDoorRoomClearedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Beacon Activated
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorBeaconActivated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(UnitGetPosition(UnitFromId(423)), 2.5)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, true);
    UnitSetState(gv_kerrigan, c_unitStateSelectable, false);
    UnitSelect(gv_kerrigan, gv_p01_USER, false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/FA8D28C4"));
    TriggerExecute(gt__1LockedDoorBeaconObjectiveActivatedQ, true, false);
    TriggerExecute(gt__1ProtectKerriganPing, true, false);
    gf_RefreshPlayerUnitVitals();
    UnitSelect(gv_kerrigan, gv_p01_USER, false);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionCircle(UnitGetPosition(UnitFromId(423)), 3.0))), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(62)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    while (!((OrderGetAbilityCommand(UnitOrder(gv_kerrigan, 0)) == AbilityCommand("move", 2)))) {
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    UnitKill(UnitFromId(423));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpace02MusicEvent08_SecurityDoor", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitSetPropertyFixed(UnitFromId(1236), c_unitPropHeight, 9.0);
    UnitBehaviorAdd(gv_kerrigan, "KerriganDoorBeamOfDeath", gv_kerrigan, 1);
    UnitSetState(gv_kerrigan, c_unitStateStatusBar, true);
    UnitStatusBarOverride(gv_kerrigan, c_unitStatusGroupAll);
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(62), 1));
    TriggerExecute(gt__1LockedDoorRoomActivatedQ, true, false);
    TriggerExecute(gt__1LockedDoorEventTiming, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorBeaconActivated_Init () {
    gt__1LockedDoorBeaconActivated = TriggerCreate("gt__1LockedDoorBeaconActivated_Func");
    TriggerEnable(gt__1LockedDoorBeaconActivated, false);
    TriggerAddEventTimePeriodic(gt__1LockedDoorBeaconActivated, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Beacon Objective Activated Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorBeaconObjectiveActivatedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveProtecttheQueenCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorBeaconObjectiveActivatedQ_Init () {
    gt__1LockedDoorBeaconObjectiveActivatedQ = TriggerCreate("gt__1LockedDoorBeaconObjectiveActivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Protect Kerrigan Ping
//--------------------------------------------------------------------------------------------------
bool gt__1ProtectKerriganPing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_kerrigan), StringExternal("Param/Value/E19358B9"));
    gv__1ObjectiveProtectKerriganPing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ProtectKerriganPing_Init () {
    gt__1ProtectKerriganPing = TriggerCreate("gt__1ProtectKerriganPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Room Activated Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorRoomActivatedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Space02|Line00135", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorRoomActivatedQ_Init () {
    gt__1LockedDoorRoomActivatedQ = TriggerCreate("gt__1LockedDoorRoomActivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Event Timing
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorEventTiming_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_waitTimer;

    // Variable Initialization
    lv_waitTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_waitTimer, 100.0, false, c_timeAI);
    libNtve_gf_WaitForTimer(lv_waitTimer, 90.0, false);
    TriggerExecute(gt__1LockedDoorReinforcements01, true, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(62)), c_animNameDefault, "Stand Work Start", 0, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(62)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_WaitForTimer(lv_waitTimer, 80.0, false);
    TriggerExecute(gt__1LockedDoorAttack01, true, false);
    libNtve_gf_WaitForTimer(lv_waitTimer, 70.0, false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    libNtve_gf_WaitForTimer(lv_waitTimer, 60.0, false);
    TriggerExecute(gt__1LockedDoorAttack02, true, false);
    libNtve_gf_WaitForTimer(lv_waitTimer, 50.0, false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    libNtve_gf_WaitForTimer(lv_waitTimer, 40.0, false);
    TriggerExecute(gt__1LockedDoorAttack03, true, false);
    libNtve_gf_WaitForTimer(lv_waitTimer, 32.0, false);
    TriggerExecute(gt__1LockedDoorReinforcements02, true, false);
    libNtve_gf_WaitForTimer(lv_waitTimer, 20.0, false);
    TriggerExecute(gt__1LockedDoorAttack04, true, false);
    libNtve_gf_WaitForTimer(lv_waitTimer, 10.0, false);
    while (!((UnitGroupCount(UnitGroupFilterPlayer(gv__1LockedDoorWave, gv_p02_DOMINION, 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CameraPan(gv_p01_USER, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kerrigan), 2.0, PointFromId(1239)), 1.0, -1, 10.0, true);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    UnitKill(UnitFromId(62));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorEventTiming_Init () {
    gt__1LockedDoorEventTiming = TriggerCreate("gt__1LockedDoorEventTiming_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Attack 01
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorAttack01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(192), Order(AbilityCommand("SpacePrisonDoorsThinRightLowered", 0)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(7)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__1LockedDoorAttack01Q, true, false);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker4x4Diagonal", 0, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(7), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p01_USER);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_p02_DOMINION, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(gv_p02_DOMINION, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorAttack01_Init () {
    gt__1LockedDoorAttack01 = TriggerCreate("gt__1LockedDoorAttack01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Attack 01 Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorAttack01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00069", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorAttack01Q_Init () {
    gt__1LockedDoorAttack01Q = TriggerCreate("gt__1LockedDoorAttack01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Attack 02
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorAttack02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(95), Order(AbilityCommand("SpacePrisonDoorsThinRightLowered", 0)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(28)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__1LockedDoorAttack02Q, true, false);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker4x4Diagonal", 0, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(28), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p01_USER);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_p02_DOMINION, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(gv_p02_DOMINION, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorAttack02_Init () {
    gt__1LockedDoorAttack02 = TriggerCreate("gt__1LockedDoorAttack02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Attack 02 Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorAttack02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1243), "zMission_Space02|Line00119", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorAttack02Q_Init () {
    gt__1LockedDoorAttack02Q = TriggerCreate("gt__1LockedDoorAttack02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Attack 03
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorAttack03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(84), Order(AbilityCommand("SpacePrisonDoorsThinRightLowered", 0)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(30)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__1LockedDoorAttack03Q, true, false);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker4x4Diagonal", 0, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(30), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p01_USER);
        if ((UnitGetType(UnitGroupLoopCurrent()) != "SiegeTank") && (UnitGetType(UnitGroupLoopCurrent()) != "MengskSiegeTank")) {
            AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
            AIAttackWaveUseUnit(gv_p02_DOMINION, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(gv_p02_DOMINION, 0, true);
    UnitIssueOrder(UnitFromId(1107), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(436)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1107), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(1089), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(513)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1089), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_kerrigan)), c_orderQueueAddToEnd);
    Wait(6.0, c_timeGame);
    AISetUnitScriptControlled(UnitFromId(1107), false);
    AISetUnitScriptControlled(UnitFromId(1089), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorAttack03_Init () {
    gt__1LockedDoorAttack03 = TriggerCreate("gt__1LockedDoorAttack03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Attack 03 Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorAttack03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00120", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorAttack03Q_Init () {
    gt__1LockedDoorAttack03Q = TriggerCreate("gt__1LockedDoorAttack03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Attack 04
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorAttack04_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(185), Order(AbilityCommand("SpacePrisonDoorsThinRightLowered", 0)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(29)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker4x4Diagonal", 0, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(29), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_p01_USER);
        UnitGroupAdd(gv__1LockedDoorWave, UnitGroupLoopCurrent());
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_p02_DOMINION, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(gv_p02_DOMINION, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorAttack04_Init () {
    gt__1LockedDoorAttack04 = TriggerCreate("gt__1LockedDoorAttack04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Reinforcements 01
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorReinforcements01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(1122);
    lv_targetPoint = PointFromId(1123);
    lv_spawnDoodad = DoodadFromId(421);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/9DC54269"), null, lv_spawnPoint);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal On");
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1122), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    TriggerExecute(gt__1LockedDoorReinforcements01Q, true, false);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnRoachReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnHydraliskReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnAberrationReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(1, "Queen", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorReinforcements01_Init () {
    gt__1LockedDoorReinforcements01 = TriggerCreate("gt__1LockedDoorReinforcements01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Reinforcements 01 Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorReinforcements01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00118", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorReinforcements01Q_Init () {
    gt__1LockedDoorReinforcements01Q = TriggerCreate("gt__1LockedDoorReinforcements01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Reinforcements 02
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorReinforcements02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__1LockedDoorReinforcements02Q, true, false);
    lv_spawnPoint = PointFromId(1122);
    lv_targetPoint = PointFromId(1123);
    lv_spawnDoodad = DoodadFromId(421);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/8BBBF57E"), null, lv_spawnPoint);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnRoachReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnHydraliskReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnAberrationReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnQueenReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorReinforcements02_Init () {
    gt__1LockedDoorReinforcements02 = TriggerCreate("gt__1LockedDoorReinforcements02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Reinforcements 02 Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorReinforcements02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00121", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorReinforcements02Q_Init () {
    gt__1LockedDoorReinforcements02Q = TriggerCreate("gt__1LockedDoorReinforcements02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Destroyed
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker4x4Diagonal", 0, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ObjectiveProtecttheQueenComplete, true, false);
    PingDestroy(gv__1ObjectiveProtectKerriganPing);
    UnitBehaviorRemove(gv_kerrigan, "KerriganDoorBeamOfDeath", 1);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, false);
    UnitSetState(gv_kerrigan, c_unitStateSelectable, true);
    UnitSelect(gv_kerrigan, gv_p01_USER, true);
    gf_RefreshPlayerUnitVitals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorDestroyed_Init () {
    gt__1LockedDoorDestroyed = TriggerCreate("gt__1LockedDoorDestroyed_Func");
    TriggerAddEventUnitDied(gt__1LockedDoorDestroyed, UnitRefFromUnit(UnitFromId(62)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Locked Door Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt__1LockedDoorDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Space02|Line00139", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1LockedDoorDestroyedQ_Init () {
    gt__1LockedDoorDestroyedQ = TriggerCreate("gt__1LockedDoorDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Prison Cell Room Entered
//--------------------------------------------------------------------------------------------------
bool gt__1PrisonCellRoomEntered_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E96E59B8"));
    VisRevealArea(gv_p01_USER, RegionFromId(33), 12.0, false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(33)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/FDDBAA0F"), null, RegionGetCenter(RegionFromId(33)));
    TriggerExecute(gt__1PrisonCellRoomIntroQ, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt__1PrisonCellReacttoLurkerImpaler, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p05_PRISONERS, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 1.0);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PrisonCellRoomEntered_Init () {
    gt__1PrisonCellRoomEntered = TriggerCreate("gt__1PrisonCellRoomEntered_Func");
    TriggerAddEventUnitRegion(gt__1PrisonCellRoomEntered, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Prison Cell React to Lurker/Impaler
//--------------------------------------------------------------------------------------------------
bool gt__1PrisonCellReacttoLurkerImpaler_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_DOMINION))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "ImpalerBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "LurkerBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PrisonCellReacttoLurkerImpaler_Init () {
    gt__1PrisonCellReacttoLurkerImpaler = TriggerCreate("gt__1PrisonCellReacttoLurkerImpaler_Func");
    TriggerEnable(gt__1PrisonCellReacttoLurkerImpaler, false);
    TriggerAddEventUnitDamaged(gt__1PrisonCellReacttoLurkerImpaler, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Prison Cell Room Intro Q
//--------------------------------------------------------------------------------------------------
bool gt__1PrisonCellRoomIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00041", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Space02|Line00136", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00137", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerExecute(gt__1CreatePrisonCellPings, true, false);
    TriggerQueueExit();
    Wait(0.5, c_timeReal);
    TriggerExecute(gt__1PrisonCellRoomTentacles, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PrisonCellRoomIntroQ_Init () {
    gt__1PrisonCellRoomIntroQ = TriggerCreate("gt__1PrisonCellRoomIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Prison Cell Room Tentacles
//--------------------------------------------------------------------------------------------------
bool gt__1PrisonCellRoomTentacles_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(1402)), "Signal Hover");
    Wait(0.3, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1871), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    Wait(0.3, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1872), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1870)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    ActorSendTo(ActorFromDoodad(DoodadFromId(1607)), "SidewaysNydusAdditionDown", "ModelSwap SpaceTentacle");
    ActorSendTo(ActorFromDoodad(DoodadFromId(1607)), "SidewaysNydusAdditionDown", "AnimBracketStart HoverShort Hover,Start Stand IGNORE");
    Wait(0.8, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1873), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1869)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PrisonCellRoomTentacles_Init () {
    gt__1PrisonCellRoomTentacles = TriggerCreate("gt__1PrisonCellRoomTentacles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Create Prison Cell Pings
//--------------------------------------------------------------------------------------------------
bool gt__1CreatePrisonCellPings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    IntLoopBegin(1, 4);
    while (!IntLoopDone()) {
        libNtve_gf_ShowHideUnit(gv__1PrisonCellBeacons[IntLoopCurrent()], true);
        libSwaC_gf_SetUnitInfoTextCampaign(gv__1PrisonCellBeacons[IntLoopCurrent()], StringExternal("Param/Value/284046BA"), StringExternal("Param/Value/D2B661E4"), null);
        libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(gv__1PrisonCellBeacons[IntLoopCurrent()]), StringExternal("Param/Value/A1F14A34"));
        gv__1PrisonCellPings[IntLoopCurrent()] = PingLastCreated();
        IntLoopStep();
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1CreatePrisonCellPings_Init () {
    gt__1CreatePrisonCellPings = TriggerCreate("gt__1CreatePrisonCellPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Prison Cell Infestation
//--------------------------------------------------------------------------------------------------
bool gt__1PrisonCellInfestation_Func (bool testConds, bool runActions) {
    unit autoAB2BECF6_val;
    int auto433DD4E2_n;
    int auto433DD4E2_i;

    // Variable Declarations
    point lv_point;
    int lv_index;
    unit lv_local_Virophage;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnitRangeUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAB2BECF6_val = EventUnitRangeUnit();
    if (autoAB2BECF6_val == gv__1PrisonCellBeacons[1]) {
        lv_index = 1;
    }
    else if (autoAB2BECF6_val == gv__1PrisonCellBeacons[2]) {
        lv_index = 2;
    }
    else if (autoAB2BECF6_val == gv__1PrisonCellBeacons[3]) {
        lv_index = 3;
    }
    else if (autoAB2BECF6_val == gv__1PrisonCellBeacons[4]) {
        lv_index = 4;
    }
    else {
        return true;
    }
    gv__1PrisonCellsInfested += 1;
    PingDestroy(gv__1PrisonCellPings[lv_index]);
    lv_point = UnitGetPosition(gv__1PrisonCellBeacons[lv_index]);
    UnitKill(gv__1PrisonCellBeacons[lv_index]);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Virophage", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_p03_ZERG_ALLY, lv_point);
    lv_local_Virophage = UnitLastCreated();
    libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/E6D9D4E1"), null);
    while (!((libNtve_gf_UnitIsUnderConstruction(lv_local_Virophage) == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupLoopBegin(UnitGroup("InfestationSpire", gv_p03_ZERG_ALLY, RegionCircle(UnitGetPosition(lv_local_Virophage), 6.0), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpacePrisonerBig", gv_p05_PRISONERS, RegionCircle(UnitGetPosition(lv_local_Virophage), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateExplosionAtPoint(1, 2, UnitGetPosition(UnitGroupLoopCurrent()));
        libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p03_ZERG_ALLY, UnitGetPosition(UnitGroupLoopCurrent()));
        AIAttackWaveUseUnit(gv_p03_ZERG_ALLY, UnitLastCreated());
        AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpacePrisoner", gv_p05_PRISONERS, RegionCircle(UnitGetPosition(lv_local_Virophage), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateExplosionAtPoint(1, 2, UnitGetPosition(UnitGroupLoopCurrent()));
        libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p03_ZERG_ALLY, UnitGetPosition(UnitGroupLoopCurrent()));
        AIAttackWaveUseUnit(gv_p03_ZERG_ALLY, UnitLastCreated());
        AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpacePrisonerSpecial", gv_p05_PRISONERS, RegionCircle(UnitGetPosition(lv_local_Virophage), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateExplosionAtPoint(1, 2, UnitGetPosition(UnitGroupLoopCurrent()));
        libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p03_ZERG_ALLY, UnitGetPosition(UnitGroupLoopCurrent()));
        AIAttackWaveUseUnit(gv_p03_ZERG_ALLY, UnitLastCreated());
        AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    SoundPlayAtPoint(SoundLink("Zerg_PreExplosionSmall", -1), PlayerGroupAll(), lv_point, 0.0, 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(8, 8, 6), "InfestedCivilian", 0, gv_p03_ZERG_ALLY, lv_point);
    AIAttackWaveUseGroup(gv_p03_ZERG_ALLY, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(3, 3, 2), "InfestedTerranCampaign", 0, gv_p03_ZERG_ALLY, lv_point);
    AIAttackWaveUseGroup(gv_p03_ZERG_ALLY, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
    UnitIssueOrder(lv_local_Virophage, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroup("InfestationSpire", gv_p03_ZERG_ALLY, RegionCircle(UnitGetPosition(lv_local_Virophage), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("Zerg_PreExplosionSmall", -1), PlayerGroupAll(), lv_point, 0.0, 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(8, 8, 6), "InfestedCivilian", 0, gv_p03_ZERG_ALLY, lv_point);
    AIAttackWaveUseGroup(gv_p03_ZERG_ALLY, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(3, 3, 2), "InfestedTerranCampaign", 0, gv_p03_ZERG_ALLY, lv_point);
    AIAttackWaveUseGroup(gv_p03_ZERG_ALLY, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
    auto433DD4E2_n = 8;
    for (auto433DD4E2_i = 1; auto433DD4E2_i <= auto433DD4E2_n; auto433DD4E2_i += 1) {
        if ((gv__1ElevatorRoomEntered == false) && (UnitGroupCount(UnitGroup(null, gv_p03_ZERG_ALLY, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80)) {
            UnitIssueOrder(lv_local_Virophage, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroup("InfestationSpire", gv_p03_ZERG_ALLY, RegionCircle(UnitGetPosition(lv_local_Virophage), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
            Wait(9.0, c_timeGame);
            SoundPlayAtPoint(SoundLink("Zerg_PreExplosionSmall", -1), PlayerGroupAll(), lv_point, 0.0, 100.0, 0.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(2, 2, 2), "InfestedCivilian", 0, gv_p03_ZERG_ALLY, lv_point);
            AIAttackWaveUseGroup(gv_p03_ZERG_ALLY, UnitLastCreatedGroup());
            AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
            libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(1, 1, 0), "InfestedTerranCampaign", 0, gv_p03_ZERG_ALLY, lv_point);
            AIAttackWaveUseGroup(gv_p03_ZERG_ALLY, UnitLastCreatedGroup());
            AIAttackWaveSend(gv_p03_ZERG_ALLY, 0, true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PrisonCellInfestation_Init () {
    gt__1PrisonCellInfestation = TriggerCreate("gt__1PrisonCellInfestation_Func");
    TriggerAddEventUnitRange(gt__1PrisonCellInfestation, UnitRefFromVariable("gv_kerrigan"), UnitFromId(576), 3.0, true);
    TriggerAddEventUnitRange(gt__1PrisonCellInfestation, UnitRefFromVariable("gv_kerrigan"), UnitFromId(575), 3.0, true);
    TriggerAddEventUnitRange(gt__1PrisonCellInfestation, UnitRefFromVariable("gv_kerrigan"), UnitFromId(607), 3.0, true);
    TriggerAddEventUnitRange(gt__1PrisonCellInfestation, UnitRefFromVariable("gv_kerrigan"), UnitFromId(613), 3.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Prison Cell Line Engaged
//--------------------------------------------------------------------------------------------------
bool gt__1PrisonCellLineEngaged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1PrisonCellLineEngaged_Init () {
    gt__1PrisonCellLineEngaged = TriggerCreate("gt__1PrisonCellLineEngaged_Func");
    TriggerAddEventUnitRegion(gt__1PrisonCellLineEngaged, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 The Hole Revealed
//--------------------------------------------------------------------------------------------------
bool gt__1TheHoleRevealed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!(((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true) || (UnitFilterMatch(EventUnit(), gv_p03_ZERG_ALLY, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_p01_USER, RegionFromId(53), 6.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TheHoleRevealed_Init () {
    gt__1TheHoleRevealed = TriggerCreate("gt__1TheHoleRevealed_Func");
    TriggerAddEventUnitRegion(gt__1TheHoleRevealed, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 The Hole Breach
//--------------------------------------------------------------------------------------------------
bool gt__1TheHoleBreach_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(703);
    lv_targetPoint = PointFromId(705);
    lv_spawnDoodad = DoodadFromId(704);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/90EA9351"), null, lv_spawnPoint);
    TriggerExecute(gt__1TheHoleTentacle, true, false);
    Wait(1.2, c_timeGame);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal On");
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(703), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(2.8, c_timeGame);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnRoachReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnHydraliskReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnAberrationReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnQueenReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TheHoleBreach_Init () {
    gt__1TheHoleBreach = TriggerCreate("gt__1TheHoleBreach_Func");
    TriggerAddEventUnitRegion(gt__1TheHoleBreach, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 The Hole Tentacle
//--------------------------------------------------------------------------------------------------
bool gt__1TheHoleTentacle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1605), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1606)), "Signal Hover");
    Wait(0.4, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1887)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TheHoleTentacle_Init () {
    gt__1TheHoleTentacle = TriggerCreate("gt__1TheHoleTentacle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 The Hole Bullies Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt__1TheHoleBulliesEngagedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_HPOfUnitGroup(gv__1TheHoleBullies) <= 700.0))) {
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(87), Order(AbilityCommand("SpacePrisonDoorsWideLeftLowered", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeAI);
    UnitGroupLoopBegin(UnitGroup(null, gv_p03_DOMINION, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv__1TheHoleBullies, UnitGroupLoopCurrent());
        gf_IssueNudgeOrder(UnitGroupLoopCurrent(), 20.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeAI);
    TriggerExecute(gt__1TheHoleReinforcements, true, false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(131), "zMission_Space02|Line00045", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TheHoleBulliesEngagedQ_Init () {
    gt__1TheHoleBulliesEngagedQ = TriggerCreate("gt__1TheHoleBulliesEngagedQ_Func");
    TriggerAddEventUnitRegion(gt__1TheHoleBulliesEngagedQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 The Hole Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt__1TheHoleReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(703);
    lv_targetPoint = PointFromId(705);
    lv_spawnDoodad = DoodadFromId(704);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/A8545851"), null, lv_spawnPoint);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnRoachReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnAberrationReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnQueenReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    if ((libSwaC_gf_MissionStatus("ZHybrid3") == 2)) {
        gf_SpawnInfestorReinforcements(null, lv_spawnPoint, lv_targetPoint);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TheHoleReinforcements_Init () {
    gt__1TheHoleReinforcements = TriggerCreate("gt__1TheHoleReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Transition to Elevator Room
//--------------------------------------------------------------------------------------------------
bool gt__1TransitiontoElevatorRoom_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7A1EF2D6"));
    PingDestroy(gv__1ObjectiveRescueJimPing);
    TriggerExecute(gt_CinematicElevatorTransitionMidQ, true, false);
    gv__1ElevatorRoomEntered = true;
    IntLoopBegin(1, 4);
    while (!IntLoopDone()) {
        PingDestroy(gv__1PrisonCellPings[IntLoopCurrent()]);
        IntLoopStep();
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1TransitiontoElevatorRoom_Init () {
    gt__1TransitiontoElevatorRoom = TriggerCreate("gt__1TransitiontoElevatorRoom_Func");
    TriggerAddEventUnitRegion(gt__1TransitiontoElevatorRoom, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Elevator Room Intro
//--------------------------------------------------------------------------------------------------
bool gt__1ElevatorRoomIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShareVisionofUnit(UnitFromId(218), true, gv_p01_USER);
    TriggerExecute(gt__1ElevatorAI, true, false);
    Wait(2.0, c_timeReal);
    gf_CreateRescueJimPing(PointFromId(1307));
    TriggerExecute(gt__1CreateElevatorBossBar, true, false);
    TriggerEnable(gt__1ElevatorVictory, true);
    TriggerExecute(gt__1ElevatorRoomTentacles, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ElevatorRoomIntro_Init () {
    gt__1ElevatorRoomIntro = TriggerCreate("gt__1ElevatorRoomIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Elevator Room Tentacles
//--------------------------------------------------------------------------------------------------
bool gt__1ElevatorRoomTentacles_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(1609)), "Signal Hover");
    Wait(0.1, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1879), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    Wait(0.4, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1900), 0.0, 100.0, 0.0);
    Wait(0.6, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(1608)), "Signal Hover");
    Wait(0.3, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1883), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1877)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.4, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1901), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ElevatorRoomTentacles_Init () {
    gt__1ElevatorRoomTentacles = TriggerCreate("gt__1ElevatorRoomTentacles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Elevator Shaking Sound
//--------------------------------------------------------------------------------------------------
bool gt__1ElevatorShakingSound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_shakingSound;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Event_Space02_CameraQuake", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_shakingSound = SoundLastPlayed();
    Wait(3.0, c_timeReal);
    SoundStop(lv_shakingSound, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ElevatorShakingSound_Init () {
    gt__1ElevatorShakingSound = TriggerCreate("gt__1ElevatorShakingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Elevator at 75% Life Q
//--------------------------------------------------------------------------------------------------
bool gt__1Elevatorat75LifeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv__1PrisonDeckCoupling, c_unitPropLifePercent, c_unitPropCurrent) < 75.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1Elevatorat50LifeQ, true);
    TriggerExecute(gt__1ElevatorShakingSound, true, false);
    Wait(1.0, c_timeReal);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.25, 0.5, 100.0, 2.0);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00046", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1Elevatorat75LifeQ_Init () {
    gt__1Elevatorat75LifeQ = TriggerCreate("gt__1Elevatorat75LifeQ_Func");
    TriggerAddEventUnitProperty(gt__1Elevatorat75LifeQ, UnitRefFromVariable("gv__1PrisonDeckCoupling"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Elevator at 50% Life Q
//--------------------------------------------------------------------------------------------------
bool gt__1Elevatorat50LifeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv__1PrisonDeckCoupling, c_unitPropLifePercent, c_unitPropCurrent) < 50.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1Elevatorat30LifeQ, true);
    TriggerExecute(gt__1ElevatorShakingSound, true, false);
    Wait(1.0, c_timeReal);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.25, 0.5, 100.0, 2.0);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00047", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1Elevatorat50LifeQ_Init () {
    gt__1Elevatorat50LifeQ = TriggerCreate("gt__1Elevatorat50LifeQ_Func");
    TriggerEnable(gt__1Elevatorat50LifeQ, false);
    TriggerAddEventUnitProperty(gt__1Elevatorat50LifeQ, UnitRefFromVariable("gv__1PrisonDeckCoupling"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Elevator at 30% Life Q
//--------------------------------------------------------------------------------------------------
bool gt__1Elevatorat30LifeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv__1PrisonDeckCoupling, c_unitPropLifePercent, c_unitPropCurrent) < 30.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__1ElevatorShakingSound, true, false);
    Wait(1.0, c_timeReal);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.25, 0.5, 100.0, 2.0);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00048", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1Elevatorat30LifeQ_Init () {
    gt__1Elevatorat30LifeQ = TriggerCreate("gt__1Elevatorat30LifeQ_Func");
    TriggerEnable(gt__1Elevatorat30LifeQ, false);
    TriggerAddEventUnitProperty(gt__1Elevatorat30LifeQ, UnitRefFromVariable("gv__1PrisonDeckCoupling"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Elevator AI
//--------------------------------------------------------------------------------------------------
bool gt__1ElevatorAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_thor;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup(null, gv_p02_DOMINION, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(AbilityCommand("attack", 0), gv__1PrisonDeckCoupling), c_orderQueueReplace);
    while (!((gf_HPOfUnitGroup(gv__1ElevatorPatrollers) <= 150.0))) {
        Wait(1.0, c_timeGame);
    }
    lv_thor = UnitFromId(218);
    UnitGroupRemove(gv__1ElevatorKillers, lv_thor);
    UnitGroupAdd(gv__1ElevatorPatrollers, lv_thor);
    UnitIssueOrder(lv_thor, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(628)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ElevatorAI_Init () {
    gt__1ElevatorAI = TriggerCreate("gt__1ElevatorAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Thor Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt__1ThorTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_thor;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(218), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ThorTakesDamage_Init () {
    gt__1ThorTakesDamage = TriggerCreate("gt__1ThorTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt__1ThorTakesDamage, UnitRefFromUnit(UnitFromId(218)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Thor Is Dominated
//--------------------------------------------------------------------------------------------------
bool gt__1ThorIsDominated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((EventUnitTargetUnit() == UnitFromId(218)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1ThorTakesDamage, false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(218), 1));
    UnitIssueOrder(UnitFromId(218), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitGroupRemove(gv__1ElevatorKillers, UnitFromId(218));
    UnitGroupRemove(gv__1ElevatorPatrollers, UnitFromId(218));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ThorIsDominated_Init () {
    gt__1ThorIsDominated = TriggerCreate("gt__1ThorIsDominated_Func");
    TriggerAddEventUnitAbility(gt__1ThorIsDominated, null, AbilityCommand("NPSwarm", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Create Elevator Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt__1CreateElevatorBossBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_deckCouplingBossBarID = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv__1PrisonDeckCoupling, 0, 0);
    libSwaC_gf_DisplaySingularBossBarSwarmCampaign("Assets\\Textures\\btn-boss-prisongenerator.dds", StringExternal("Param/Value/09CC2867"), FixedToInt(UnitGetPropertyFixed(gv__1PrisonDeckCoupling, c_unitPropLifeMax, c_unitPropCurrent)));
    libSwaC_gf_SetSingularBossBarBossSwarmCampaign(gv__1PrisonDeckCoupling, true);
    libSwaC_gf_SetSingularBossBarColor(Color(16.47, 83.53, 0.00));
    libSwaC_gf_SetSingularBossBarTitleColor(Color(100.00, 100.00, 100.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1CreateElevatorBossBar_Init () {
    gt__1CreateElevatorBossBar = TriggerCreate("gt__1CreateElevatorBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Elevator Victory
//--------------------------------------------------------------------------------------------------
bool gt__1ElevatorVictory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_DOMINION, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, 0, 1);
    PingDestroy(gv__1ObjectiveRescueJimPing);
    gv__1ObjectiveRescueJimPing = c_invalidPingId;
    libSwaC_gf_ShowHideSingularBossBarSwarmCampaign(false);
    Wait(2.0, c_timeGame);
    TimerPause(gv_achievementPrisonDeckTimedRunTimer, true);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/181751DD"));
    TriggerExecute(gt_CinematicLowerDeckTransitionMidQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1ElevatorVictory_Init () {
    gt__1ElevatorVictory = TriggerCreate("gt__1ElevatorVictory_Func");
    TriggerEnable(gt__1ElevatorVictory, false);
    TriggerAddEventTimePeriodic(gt__1ElevatorVictory, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 Coupling Destroyed
//--------------------------------------------------------------------------------------------------
bool gt__1CouplingDestroyed_Func (bool testConds, bool runActions) {
    int auto4ED8D842_n;
    int auto4ED8D842_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 4.0);
    GameSetLighting("PrisonShipEmergency", 4.0);
    auto4ED8D842_n = 40;
    for (auto4ED8D842_i = 1; auto4ED8D842_i <= auto4ED8D842_n; auto4ED8D842_i += 1) {
        libNtve_gf_CreateExplosionAtPoint(0, 0, RegionRandomPoint(RegionFromId(22)));
        Wait(0.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1CouplingDestroyed_Init () {
    gt__1CouplingDestroyed = TriggerCreate("gt__1CouplingDestroyed_Func");
    TriggerAddEventUnitDied(gt__1CouplingDestroyed, UnitRefFromVariable("gv__1PrisonDeckCoupling"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Start Game - Mission Start Q
//--------------------------------------------------------------------------------------------------
bool gt__2StartGameMissionStartQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt__2TurnoffArea1Triggers, true, false);
    TriggerExecute(gt_AchievementPrisonDeckTimedRunNH, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    gf_CreateRescueJimPing(PointFromId(1309));
    TriggerExecute(gt__2StartShipDestructionTimer, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StartGameMissionStartQ_Init () {
    gt__2StartGameMissionStartQ = TriggerCreate("gt__2StartGameMissionStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Start Ship Destruction Timer
//--------------------------------------------------------------------------------------------------
bool gt__2StartShipDestructionTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_objective_EscapeTimer, (gv__2ShipExplodeTime * 60.0), false, c_timeAI);
    TriggerExecute(gt__2ShipIsExploding, true, false);
    libSwaC_gf_TimerWindowCreate2(TimerLastStarted(), StringExternal("Param/Value/4ECE024A"), true, false, 1);
    gv_objective_EscapeTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StartShipDestructionTimer_Init () {
    gt__2StartShipDestructionTimer = TriggerCreate("gt__2StartShipDestructionTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Turn off Area 1 Triggers
//--------------------------------------------------------------------------------------------------
bool gt__2TurnoffArea1Triggers_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_FearSourceKerrigan, false);
    TriggerEnable(gt_FearedbyDamage, false);
    TriggerEnable(gt_FearedbyDeath, false);
    TriggerStop(gt__1PrisonCellInfestation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2TurnoffArea1Triggers_Init () {
    gt__2TurnoffArea1Triggers = TriggerCreate("gt__2TurnoffArea1Triggers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Thor Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt__2ThorReactionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1141), "zMission_Space02|Line00087", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    Wait(1.0, c_timeGame);
    TriggerExecute(gt__2DeckBridgeTentacle, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1370));
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(1379), Order(AbilityCommand("SpacePrisonDoorsThinLeft", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ThorReactionQ_Init () {
    gt__2ThorReactionQ = TriggerCreate("gt__2ThorReactionQ_Func");
    TriggerAddEventUnitRegion(gt__2ThorReactionQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Deck Bridge Tentacle
//--------------------------------------------------------------------------------------------------
bool gt__2DeckBridgeTentacle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(1670)), "Signal Hover");
    Wait(0.1, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1888), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    Wait(0.7, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1889), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DeckBridgeTentacle_Init () {
    gt__2DeckBridgeTentacle = TriggerCreate("gt__2DeckBridgeTentacle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ship Is Exploding
//--------------------------------------------------------------------------------------------------
bool gt__2ShipIsExploding_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(((gv__2ShipExplodeTime - 4.0) * 60.0), c_timeGame);
    TriggerExecute(gt__2ShipShaking1, true, false);
    Wait(60.0, c_timeGame);
    GameSetLighting("PrisonShipEmergency", 120.0);
    TriggerExecute(gt__2ShipShaking2, true, false);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt__2ShipIsExplodingWarning1Q, true, false);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt__2ShipShaking3, true, false);
    TriggerExecute(gt__2ShipIsExplodingWarning2Q, true, false);
    TriggerExecute(gt__2ShipCeilingFallingAfterJumpDrive, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ShipIsExploding_Init () {
    gt__2ShipIsExploding = TriggerCreate("gt__2ShipIsExploding_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ship Shaking 1
//--------------------------------------------------------------------------------------------------
bool gt__2ShipShaking1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }
        else {
            CameraShake(gv_p01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
            Wait(RandomFixed(20.0, 30.0), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ShipShaking1_Init () {
    gt__2ShipShaking1 = TriggerCreate("gt__2ShipShaking1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ship Shaking 2
//--------------------------------------------------------------------------------------------------
bool gt__2ShipShaking2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__2ShipShaking1);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }
        else {
            CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
            Wait(RandomFixed(15.0, 20.0), c_timeGame);
        }
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }
        else {
            CameraShake(gv_p01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
            Wait(RandomFixed(15.0, 20.0), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ShipShaking2_Init () {
    gt__2ShipShaking2 = TriggerCreate("gt__2ShipShaking2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ship Is Exploding Warning 1 Q
//--------------------------------------------------------------------------------------------------
bool gt__2ShipIsExplodingWarning1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00133", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ShipIsExplodingWarning1Q_Init () {
    gt__2ShipIsExplodingWarning1Q = TriggerCreate("gt__2ShipIsExplodingWarning1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ship Shaking 3
//--------------------------------------------------------------------------------------------------
bool gt__2ShipShaking3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__2ShipShaking2);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }
        else {
            CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
            Wait(RandomFixed(10.0, 15.0), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ShipShaking3_Init () {
    gt__2ShipShaking3 = TriggerCreate("gt__2ShipShaking3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ship Is Exploding Warning 2 Q
//--------------------------------------------------------------------------------------------------
bool gt__2ShipIsExplodingWarning2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00134", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ShipIsExplodingWarning2Q_Init () {
    gt__2ShipIsExplodingWarning2Q = TriggerCreate("gt__2ShipIsExplodingWarning2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Ship Ceiling Falling After Jump Drive
//--------------------------------------------------------------------------------------------------
bool gt__2ShipCeilingFallingAfterJumpDrive_Func (bool testConds, bool runActions) {
    int auto9C737E07_ae;
    int auto9C737E07_ai;
    int auto529A5C1E_ae;
    int auto529A5C1E_ai;

    // Variable Declarations
    point lv_center;
    fixed lv_angle;
    int lv_index;
    actor[4] lv_actors;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }
        else {
        }
        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        lv_angle = libNtve_gf_RandomAngle();
        auto9C737E07_ae = 2;
        auto9C737E07_ai = 1;
        lv_index = 1;
        while ((auto9C737E07_ai >= 0 && lv_index <= auto9C737E07_ae) || (auto9C737E07_ai <= 0 && lv_index >= auto9C737E07_ae)) {
            libNtve_gf_CreateModelAtPoint("SpaceFallingDebris", PointWithOffsetPolar(CameraGetTarget(gv_p01_USER), 6.0, lv_angle));
            lv_actors[lv_index] = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,2.000000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.800000");
            lv_angle += 120.0;
            Wait(1.0, c_timeGame);
            lv_index += auto9C737E07_ai;
        }
        Wait(RandomFixed(2.0, 4.0), c_timeGame);
        auto529A5C1E_ae = 2;
        auto529A5C1E_ai = 1;
        lv_index = 1;
        while ((auto529A5C1E_ai >= 0 && lv_index <= auto529A5C1E_ae) || (auto529A5C1E_ai <= 0 && lv_index >= auto529A5C1E_ae)) {
            libNtve_gf_KillModel(lv_actors[lv_index]);
            Wait(1.0, c_timeGame);
            lv_index += auto529A5C1E_ai;
        }
        Wait(RandomFixed(2.0, 5.0), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ShipCeilingFallingAfterJumpDrive_Init () {
    gt__2ShipCeilingFallingAfterJumpDrive = TriggerCreate("gt__2ShipCeilingFallingAfterJumpDrive_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Dominion Fleeing 01
//--------------------------------------------------------------------------------------------------
bool gt__2DominionFleeing01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__2DominionFlee01Q, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(743)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1315)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(4.0, c_timeGame);
    UnitKill(UnitFromId(1381));
    TerrainShowRegion(RegionFromId(65), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DominionFleeing01_Init () {
    gt__2DominionFleeing01 = TriggerCreate("gt__2DominionFleeing01_Func");
    TriggerAddEventUnitRegion(gt__2DominionFleeing01, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Dominion Flee 01 Q
//--------------------------------------------------------------------------------------------------
bool gt__2DominionFlee01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(805), "zMission_Space02|Line00125", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DominionFlee01Q_Init () {
    gt__2DominionFlee01Q = TriggerCreate("gt__2DominionFlee01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Trapped Dominion
//--------------------------------------------------------------------------------------------------
bool gt__2TrappedDominion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__2TrappedDominionDead, true);
    VisRevealArea(gv_p01_USER, RegionFromId(42), 12.0, false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(42)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/C7C272F6"), null, RegionGetCenter(RegionFromId(42)));
    TriggerExecute(gt__2TrappedDominionQ, true, false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt__2HullBreachReinforcements01, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1371));
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(277), Order(AbilityCommand("SpacePrisonDoorsThinLeft", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2TrappedDominion_Init () {
    gt__2TrappedDominion = TriggerCreate("gt__2TrappedDominion_Func");
    TriggerAddEventUnitRegion(gt__2TrappedDominion, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Hull Breach Reinforcements 01
//--------------------------------------------------------------------------------------------------
bool gt__2HullBreachReinforcements01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(1323);
    lv_targetPoint = PointFromId(1036);
    lv_spawnDoodad = DoodadFromId(1045);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/F29D9BEB"), null, lv_spawnPoint);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal On");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnRoachReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnHydraliskReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnAberrationReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnQueenReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2HullBreachReinforcements01_Init () {
    gt__2HullBreachReinforcements01 = TriggerCreate("gt__2HullBreachReinforcements01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Trapped Dominion Q
//--------------------------------------------------------------------------------------------------
bool gt__2TrappedDominionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((UnitIsAlive(UnitFromId(1115)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1115), "zMission_Space02|Line00126", c_transmissionDurationAdd, 0.0, true, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    if ((UnitIsAlive(UnitFromId(1410)) == true)) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(1410), "zMission_Space02|Line00127", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_interruptable_Transmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2TrappedDominionQ_Init () {
    gt__2TrappedDominionQ = TriggerCreate("gt__2TrappedDominionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Trapped Dominion Dead
//--------------------------------------------------------------------------------------------------
bool gt__2TrappedDominionDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_DOMINION, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__2DestroyGatetoProceedQ, true, false);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 0, null, UnitFromId(296), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(296), 1, libNtve_gf_ActorLastCreated());
    libNtve_gf_ChangeUnitDamage(UnitFromId(296), 0, 0);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(296), false);
    UnitSetState(UnitFromId(296), c_unitStateHighlightable, true);
    UnitSetState(UnitFromId(296), c_unitStateHighlighted, true);
    UnitSetState(UnitFromId(296), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(296), c_unitStateTargetable, true);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(296), null, StringExternal("Param/Value/32775041"), null);
    UnitSetState(UnitFromId(296), c_unitStateTooltipable, true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(296)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/EE529E9C"), null, UnitFromId(296));
    while (!((UnitGetPropertyFixed(UnitFromId(296), c_unitPropLifePercent, c_unitPropCurrent) < 100.0))) {
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(296), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2TrappedDominionDead_Init () {
    gt__2TrappedDominionDead = TriggerCreate("gt__2TrappedDominionDead_Func");
    TriggerEnable(gt__2TrappedDominionDead, false);
    TriggerAddEventTimePeriodic(gt__2TrappedDominionDead, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Destroy Gate to Proceed Q
//--------------------------------------------------------------------------------------------------
bool gt__2DestroyGatetoProceedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_interruptable_Transmission);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Space02|Line00128", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DestroyGatetoProceedQ_Init () {
    gt__2DestroyGatetoProceedQ = TriggerCreate("gt__2DestroyGatetoProceedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 First Gate Destroyed
//--------------------------------------------------------------------------------------------------
bool gt__2FirstGateDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(296), 1));
    Wait(2.5, c_timeGame);
    UnitKill(UnitFromId(1051));
    TerrainShowRegion(RegionFromId(66), false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/1A232AA4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2FirstGateDestroyed_Init () {
    gt__2FirstGateDestroyed = TriggerCreate("gt__2FirstGateDestroyed_Func");
    TriggerAddEventUnitDied(gt__2FirstGateDestroyed, UnitRefFromUnit(UnitFromId(296)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Dominion Fleeing 02
//--------------------------------------------------------------------------------------------------
bool gt__2DominionFleeing02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__2DominionFlee02Q, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1380)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1314)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(4.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1372));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DominionFleeing02_Init () {
    gt__2DominionFleeing02 = TriggerCreate("gt__2DominionFleeing02_Func");
    TriggerAddEventUnitRegion(gt__2DominionFleeing02, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Dominion Flee 02 Q
//--------------------------------------------------------------------------------------------------
bool gt__2DominionFlee02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1080), "zMission_Space02|Line00129", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1091), "zMission_Space02|Line00130", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    TriggerExecute(gt__2FleeingDominionTentacle, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DominionFlee02Q_Init () {
    gt__2DominionFlee02Q = TriggerCreate("gt__2DominionFlee02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Fleeing Dominion Tentacle
//--------------------------------------------------------------------------------------------------
bool gt__2FleeingDominionTentacle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(1803)), "Signal Hover");
    Wait(0.3, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1895), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1890)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.35, c_timeGame);
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1899), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2FleeingDominionTentacle_Init () {
    gt__2FleeingDominionTentacle = TriggerCreate("gt__2FleeingDominionTentacle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Prison Break Out!
//--------------------------------------------------------------------------------------------------
bool gt__2PrisonBreakOut_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_p01_USER, RegionFromId(56), 12.0, false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(56)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/B5396B38"), null, RegionGetCenter(RegionFromId(56)));
    UnitBehaviorAddPlayer(UnitFromId(1288), "Harmless", gv_p05_PRISONERS, 1);
    libNtve_gf_SetAlliance(gv_p05_PRISONERS, gv_p01_USER, 5);
    libNtve_gf_SetAlliance(gv_p05_PRISONERS, gv_p02_DOMINION, 5);
    UnitIssueOrder(UnitFromId(1813), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1825), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("SpacePrisonerBig", gv_p05_PRISONERS, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, true);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt__2PrisonersAttackDominionQ, true, false);
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1373));
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1374));
    Wait(2.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1375));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2PrisonBreakOut_Init () {
    gt__2PrisonBreakOut = TriggerCreate("gt__2PrisonBreakOut_Func");
    TriggerAddEventUnitRegion(gt__2PrisonBreakOut, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Prisoners Attack Dominion Q
//--------------------------------------------------------------------------------------------------
bool gt__2PrisonersAttackDominionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1040), "zMission_Space02|Line00141", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    Wait(1.0, c_timeReal);
    TriggerExecute(gt__2PrisonBreakTentacle, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2PrisonersAttackDominionQ_Init () {
    gt__2PrisonersAttackDominionQ = TriggerCreate("gt__2PrisonersAttackDominionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Prison Break Tentacle
//--------------------------------------------------------------------------------------------------
bool gt__2PrisonBreakTentacle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(1897)), "Signal Hover");
    SoundPlayAtPoint(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), PointFromId(1898), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("NydusSpace_HoverStart", -1), PlayerGroupAll(), PointFromId(1867), 0.0, 100.0, 0.0);
    Wait(0.35, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1896)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2PrisonBreakTentacle_Init () {
    gt__2PrisonBreakTentacle = TriggerCreate("gt__2PrisonBreakTentacle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Reaper Ambush!
//--------------------------------------------------------------------------------------------------
bool gt__2ReaperAmbush_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reaperGroup;

    // Variable Initialization
    lv_reaperGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(41)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/9E750E47"), null, RegionGetCenter(RegionFromId(41)));
    TriggerExecute(gt__2ReaperAmbushPlayerQ, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1169)), c_orderQueueReplace);
        UnitGroupAdd(lv_reaperGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1310)), c_orderQueueReplace);
        UnitGroupAdd(lv_reaperGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1311)), c_orderQueueReplace);
        UnitGroupAdd(lv_reaperGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1312)), c_orderQueueReplace);
        UnitGroupAdd(lv_reaperGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeGame);
    UnitGroupLoopBegin(lv_reaperGroup);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_p02_DOMINION, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(gv_p02_DOMINION, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ReaperAmbush_Init () {
    gt__2ReaperAmbush = TriggerCreate("gt__2ReaperAmbush_Func");
    TriggerAddEventUnitRegion(gt__2ReaperAmbush, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Reaper Ambush Player Q
//--------------------------------------------------------------------------------------------------
bool gt__2ReaperAmbushPlayerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1163), "zMission_Space02|Line00138", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ReaperAmbushPlayerQ_Init () {
    gt__2ReaperAmbushPlayerQ = TriggerCreate("gt__2ReaperAmbushPlayerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Dominion Fleeing 03
//--------------------------------------------------------------------------------------------------
bool gt__2DominionFleeing03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__2DominionFlee03Q, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1317)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1316)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(750)), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DominionFleeing03_Init () {
    gt__2DominionFleeing03 = TriggerCreate("gt__2DominionFleeing03_Func");
    TriggerAddEventUnitRegion(gt__2DominionFleeing03, null, RegionFromId(55), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Dominion Flee 03 Q
//--------------------------------------------------------------------------------------------------
bool gt__2DominionFlee03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1265), "zMission_Space02|Line00131", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DominionFlee03Q_Init () {
    gt__2DominionFlee03Q = TriggerCreate("gt__2DominionFlee03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Explosions at Ship Wreckage
//--------------------------------------------------------------------------------------------------
bool gt__2ExplosionsatShipWreckage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1376));
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1377));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2ExplosionsatShipWreckage_Init () {
    gt__2ExplosionsatShipWreckage = TriggerCreate("gt__2ExplosionsatShipWreckage_Func");
    TriggerAddEventUnitRegion(gt__2ExplosionsatShipWreckage, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Locked Out Dominion Forces
//--------------------------------------------------------------------------------------------------
bool gt__2LockedOutDominionForces_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__2LockedOutTroopsQ, true, false);
    VisRevealArea(gv_p01_USER, RegionFromId(19), 12.0, false);
    MinimapPing(PlayerGroupAll(), PointFromId(1313), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/08CF4D08"), null, PointFromId(1313));
    libNtve_gf_ChangeUnitDamage(UnitFromId(750), 0, 0);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(750), false);
    UnitSetState(UnitFromId(750), c_unitStateHighlightable, true);
    UnitSetState(UnitFromId(750), c_unitStateHighlighted, true);
    UnitSetState(UnitFromId(750), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(750), c_unitStateTargetable, true);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(750), null, StringExternal("Param/Value/16D0AD7B"), null);
    UnitSetState(UnitFromId(750), c_unitStateTooltipable, true);
    UnitGroupLoopBegin(gv__2LockedGateDominion);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(750)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    TriggerExecute(gt__2HullBreachReinforcements02, true, false);
    UnitGroupLoopBegin(gv__2LockedGateDominion);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_p02_DOMINION, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(gv_p02_DOMINION, 0, true);
    Wait(1.5, c_timeGame);
    UnitKill(UnitFromId(1382));
    TerrainShowRegion(RegionFromId(67), false);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(0, 0, PointFromId(1378));
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(586), Order(AbilityCommand("SpacePrisonDoorsThinLeft", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2LockedOutDominionForces_Init () {
    gt__2LockedOutDominionForces = TriggerCreate("gt__2LockedOutDominionForces_Func");
    TriggerAddEventUnitRegion(gt__2LockedOutDominionForces, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Locked Out Troops Q
//--------------------------------------------------------------------------------------------------
bool gt__2LockedOutTroopsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(1275), "zMission_Space02|Line00132", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2LockedOutTroopsQ_Init () {
    gt__2LockedOutTroopsQ = TriggerCreate("gt__2LockedOutTroopsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Hull Breach Reinforcements 02
//--------------------------------------------------------------------------------------------------
bool gt__2HullBreachReinforcements02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(1325);
    lv_targetPoint = PointFromId(1324);
    lv_spawnDoodad = DoodadFromId(285);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/1FC5C952"), null, lv_spawnPoint);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal On");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    gf_SpawnZerglingReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnRoachReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnHydraliskReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnAberrationReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    if ((libSwaC_gf_MissionStatus("ZHybrid3") == 2)) {
        gf_SpawnInfestorReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    }
    else {
        gf_SpawnQueenReinforcements(lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2HullBreachReinforcements02_Init () {
    gt__2HullBreachReinforcements02 = TriggerCreate("gt__2HullBreachReinforcements02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Gate to Raynor Prison Destroyed
//--------------------------------------------------------------------------------------------------
bool gt__2GatetoRaynorPrisonDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_VictoryJimRescued, true);
    VisRevealArea(gv_p01_USER, RegionFromId(59), 12.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2GatetoRaynorPrisonDestroyed_Init () {
    gt__2GatetoRaynorPrisonDestroyed = TriggerCreate("gt__2GatetoRaynorPrisonDestroyed_Func");
    TriggerAddEventUnitDied(gt__2GatetoRaynorPrisonDestroyed, UnitRefFromUnit(UnitFromId(750)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Entered Raynor Cell Room
//--------------------------------------------------------------------------------------------------
bool gt__2EnteredRaynorCellRoom_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__2RaynorCellReinforcements01, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2EnteredRaynorCellRoom_Init () {
    gt__2EnteredRaynorCellRoom = TriggerCreate("gt__2EnteredRaynorCellRoom_Func");
    TriggerAddEventUnitRegion(gt__2EnteredRaynorCellRoom, null, RegionFromId(61), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Prison Room Entered Q
//--------------------------------------------------------------------------------------------------
bool gt__2PrisonRoomEnteredQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(873), "zMission_Space02|Line00142", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2PrisonRoomEnteredQ_Init () {
    gt__2PrisonRoomEnteredQ = TriggerCreate("gt__2PrisonRoomEnteredQ_Func");
    TriggerAddEventUnitAcquiredTarget(gt__2PrisonRoomEnteredQ, UnitRefFromUnit(UnitFromId(850)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 Raynor Cell Reinforcements 01
//--------------------------------------------------------------------------------------------------
bool gt__2RaynorCellReinforcements01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    doodad lv_spawnDoodad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnPoint = PointFromId(773);
    lv_targetPoint = PointFromId(765);
    lv_spawnDoodad = DoodadFromId(1326);
    MinimapPing(PlayerGroupAll(), lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/4D1514D2"), null, lv_spawnPoint);
    ActorSend(ActorFromDoodad(lv_spawnDoodad), "Signal On");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(lv_spawnPoint, 3.0), "SpaceWallPanel", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    if ((RegionContainsPoint(RegionCircle(lv_spawnPoint, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.0, c_timeGame);
    gf_SpawnUnitsAtPoint(12, "Zergling", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    if ((libSwaC_gf_MissionStatus("ZHybrid3") == 2)) {
        gf_SpawnUnitsAtPoint(1, "Ultralisk", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p01_USER);
    }
    else {
        gf_SpawnUnitsAtPoint(2, "InfestedAbomination", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    }
    if ((libSwaC_gf_MissionStatus("ZHybrid3") == 2)) {
        gf_SpawnUnitsAtPoint(1, "Ultralisk", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    }
    else {
        gf_SpawnUnitsAtPoint(2, "InfestedAbomination", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    }
    gf_SpawnUnitsAtPoint(3, "Roach", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    gf_SpawnUnitsAtPoint(3, "Hydralisk", gv_p01_USER, lv_spawnDoodad, lv_spawnPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2RaynorCellReinforcements01_Init () {
    gt__2RaynorCellReinforcements01 = TriggerCreate("gt__2RaynorCellReinforcements01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Kerrigan Died Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKerriganDiedObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/0C648370"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKerriganDiedObjectiveFailed_Init () {
    gt_DefeatKerriganDiedObjectiveFailed = TriggerCreate("gt_DefeatKerriganDiedObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatKerriganDiedObjectiveFailed, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Coupling Destroyed Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCouplingDestroyedFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    CameraLockInput(gv_p01_USER, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10.0, true);
    CameraPan(gv_p01_USER, PointFromId(353), 0.0, -1, 10.0, false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveRescueJimFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/4BD4FDD4"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCouplingDestroyedFailed_Init () {
    gt_DefeatCouplingDestroyedFailed = TriggerCreate("gt_DefeatCouplingDestroyedFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatCouplingDestroyedFailed, UnitRefFromVariable("gv__1PrisonDeckCoupling"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Ship Destroyed Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatShipDestroyedFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(50.20, 0.00, 0.00), 0.0, false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 2.0, 100.0, 3.0);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveRescueJimFailed, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveFailed, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/174084E9"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatShipDestroyedFailed_Init () {
    gt_DefeatShipDestroyedFailed = TriggerCreate("gt_DefeatShipDestroyedFailed_Func");
    TriggerAddEventTimer(gt_DefeatShipDestroyedFailed, gv_objective_EscapeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Jim Rescued
//--------------------------------------------------------------------------------------------------
bool gt_VictoryJimRescued_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_DOMINION, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryJimRescued_Init () {
    gt_VictoryJimRescued = TriggerCreate("gt_VictoryJimRescued_Func");
    TriggerEnable(gt_VictoryJimRescued, false);
    TriggerAddEventTimePeriodic(gt_VictoryJimRescued, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TimerPause(gv_achievementMasteryTimedRun, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveRescueJimComplete, true, false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libSwaC_gf_MissionObjectiveStateCheck("ZSpace02Objective01", 2) == true)) {
        libSwaC_gf_CampaignAwardAchievement("ZSpace02_1", gv_p01_USER);
    }
    else {
    }
    TriggerExecute(gt_AchievementKerriganLife, true, false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AchievementTimedRunH, true, false);
    }
    else {
    }
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5AD2A920"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent)));
    TextExpressionSetToken("Param/Expression/FE40F6E3", "A", FixedToText(FixedToInt((gv_kerriganLowestLife/UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifeMax, c_unitPropCurrent)*100)), 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9CDC6969"), TextExpressionAssemble("Param/Expression/FE40F6E3"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9678C189"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_achievementPrisonDeckTimedRunTimer))));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3B294871"), IntToText(PlayerScoreValueGetAsInt(gv_p01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/42B8A27C"), IntToText(PlayerScoreValueGetAsInt(gv_p01_USER, "UnitsLostCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A2556D19"), IntToText(gv_numberOfReinforcements));
    libSwaC_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Kerrigan Life
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKerriganLife_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_achievementKerriganLife == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZSpace02_2", gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKerriganLife_Init () {
    gt_AchievementKerriganLife = TriggerCreate("gt_AchievementKerriganLife_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Prison Deck Timed Run N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementPrisonDeckTimedRunNH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((TimerGetElapsed(gv_achievementPrisonDeckTimedRunTimer) <= 480.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZSpace02_3", gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementPrisonDeckTimedRunNH_Init () {
    gt_AchievementPrisonDeckTimedRunNH = TriggerCreate("gt_AchievementPrisonDeckTimedRunNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Timed Run H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimedRunH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_achievementMasteryTimedRun) != 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Space2", gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimedRunH_Init () {
    gt_AchievementTimedRunH = TriggerCreate("gt_AchievementTimedRunH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Lowest Life
//--------------------------------------------------------------------------------------------------
bool gt_KerriganLowestLife_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_kerrigan, c_unitPropLife, c_unitPropCurrent) < gv_kerriganLowestLife)) {
        gv_kerriganLowestLife = UnitGetPropertyFixed(gv_kerrigan, c_unitPropLife, c_unitPropCurrent);
    }
    else {
    }
    if ((UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)) {
        gv_achievementKerriganLife = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganLowestLife_Init () {
    gt_KerriganLowestLife = TriggerCreate("gt_KerriganLowestLife_Func");
    TriggerAddEventUnitProperty(gt_KerriganLowestLife, UnitRefFromVariable("gv_kerrigan"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/BAA07000"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSpace02Objective02");
    gv_objectiveDestroyDominionBase2 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), -1);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveCreate_Init () {
    gt_ObjectiveKerriganMustSurviveCreate = TriggerCreate("gt_ObjectiveKerriganMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZSpace02Objective02", 1, true, null, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSpace02Objective02", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveComplete_Init () {
    gt_ObjectiveKerriganMustSurviveComplete = TriggerCreate("gt_ObjectiveKerriganMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kerrigan Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKerriganMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKerriganMustSurviveCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSpace02Objective02", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKerriganMustSurviveFailed_Init () {
    gt_ObjectiveKerriganMustSurviveFailed = TriggerCreate("gt_ObjectiveKerriganMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Jim Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueJimCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSpace02Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueJimCreate_Init () {
    gt_ObjectiveRescueJimCreate = TriggerCreate("gt_ObjectiveRescueJimCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Jim Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueJimComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueJimCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZSpace02Objective01", 1, true, null, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSpace02Objective01", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueJimComplete_Init () {
    gt_ObjectiveRescueJimComplete = TriggerCreate("gt_ObjectiveRescueJimComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Jim Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueJimFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueJimCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSpace02Objective01", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueJimFailed_Init () {
    gt_ObjectiveRescueJimFailed = TriggerCreate("gt_ObjectiveRescueJimFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect the Queen Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtecttheQueenCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSpace02Objective05");
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtecttheQueenCreate_Init () {
    gt_ObjectiveProtecttheQueenCreate = TriggerCreate("gt_ObjectiveProtecttheQueenCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect the Queen Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtecttheQueenComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProtecttheQueenCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZSpace02Objective05", 1, true, null, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSpace02Objective05", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtecttheQueenComplete_Init () {
    gt_ObjectiveProtecttheQueenComplete = TriggerCreate("gt_ObjectiveProtecttheQueenComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect the Queen Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtecttheQueenFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProtecttheQueenCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSpace02Objective05", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtecttheQueenFailed_Init () {
    gt_ObjectiveProtecttheQueenFailed = TriggerCreate("gt_ObjectiveProtecttheQueenFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Secret Documents Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindSecretDocumentsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZSpace02Objective06");
    gv_objectiveDestroyDominionBase5 = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZSpace02Objective06", gv_documentsFound, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindSecretDocumentsCreate_Init () {
    gt_ObjectiveFindSecretDocumentsCreate = TriggerCreate("gt_ObjectiveFindSecretDocumentsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Secret Documents Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindSecretDocumentsUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveFindSecretDocumentsCreate, true, false);
    gv_documentsFound += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZSpace02Objective06", gv_documentsFound, true, null, true);
    SoundPlayAtPoint(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), UnitGetPosition(UnitGroupLoopCurrent()), 8.0, 100.0, 0.0);
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(gv_kerrigan), "ZSpace02Objective06", gv_p01_USER);
    if ((gv_documentsFound >= libSwaC_gf_MissionObjectiveItemCount("ZSpace02Objective06"))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveFindSecretDocumentsComplete, true, false);
        TriggerExecute(gt_SecretDocumentsFoundQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindSecretDocumentsUpdate_Init () {
    gt_ObjectiveFindSecretDocumentsUpdate = TriggerCreate("gt_ObjectiveFindSecretDocumentsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Secret Documents Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindSecretDocumentsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindSecretDocumentsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSpace02Objective06", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindSecretDocumentsComplete_Init () {
    gt_ObjectiveFindSecretDocumentsComplete = TriggerCreate("gt_ObjectiveFindSecretDocumentsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Secret Documents Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindSecretDocumentsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindSecretDocumentsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZSpace02Objective06", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindSecretDocumentsFailed_Init () {
    gt_ObjectiveFindSecretDocumentsFailed = TriggerCreate("gt_ObjectiveFindSecretDocumentsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_IntroFirstEncounterUnits, true, false);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_CreateHero2(PointFromId(594), gv_p01_USER, 0, PointGetFacing(PointFromId(594)), c_unitCreateIgnorePlacement, 0);
    gv_kerrigan = UnitLastCreated();
    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1863), 0.0, -1, 10.0, true);
    EnvironmentShow(c_environmentAll, false);
    FogSetEnabled(false);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libSwaC_gf_DisplayTimestamp("zBriefing_Space02", false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CampaignPlayCutscene("Cutscenes\\zSpace02_Intro.SC2Cutscene", Point(90.0, 12.0), true, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1674), 0.0, -1, 10.0, true);
    CutsceneFade(true, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    FogSetEnabled(true);
    EnvironmentShow(c_environmentAll, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 30.0, 0.1);
    TriggerExecute(gt_IntroExplosions, true, false);
    SoundPlay(SoundLink("Event_Space2_NydusExplosion", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSoundNydusExplosion = SoundLastPlayed();
    ActorSend(ActorFromDoodad(DoodadFromId(1673)), "Signal On");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(341)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    gv_introTentacleActivated = true;
    SoundPlay(SoundLink("Event_Space2_NydusVox", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSoundNydusVox1 = SoundLastPlayed();
    SoundPlay(SoundLink("Event_Space2_NydusVox2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSoundNydusVox2 = SoundLastPlayed();
    Wait(3.5, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(1673)), "Signal Work");
    SoundPlay(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSoundNydusUnload = SoundLastPlayed();
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Jump End", 0, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1675), 3.0, -1, 10.0, true);
    while (!((libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(PointFromId(3), 1.0)) == true))) {
        Wait(0.1, c_timeGame);
    }
    Wait(1.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Space02|Line00017", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1676), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Space02|Line00014", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Space02|Line00008", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Space02|Line00014", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Space02|Line00008", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Space02|Line00005", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_HaltTimestamp();
    if ((gv_cinematicCompleted == false) && (gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_RefreshKerriganUIHP();
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    GameTimeOfDayPause(false);
    FogSetEnabled(true);
    EnvironmentShow(c_environmentAll, true);
    if ((gv_cinematicCompleted == false)) {
        TriggerStop(gt_IntroExplosions);
        if ((gv_introTentacleActivated == false)) {
            ActorSendTo(ActorFromDoodad(DoodadFromId(1673)), "SidewaysNydusAdditionDownRight", "ModelSwap SpaceTentacle");
            libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1673)), c_animNameDefault, "Stand", 0, c_animTimeDefault);
            libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(341)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        }
        else {
            CameraShakeStop(gv_p01_USER);
            libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1673)), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        }
        if ((UnitIsAlive(gv_introCreepTumor) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, 0, PointFromId(465));
        }
        else {
        }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault);
        UnitSetPosition(gv_kerrigan, PointFromId(3), false);
        libNtve_gf_ShowHideUnit(gv_kerrigan, true);
        UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetFacing(gv_kerrigan, 45.0, 0.0);
    }
    else {
    }
    RegionPlayableMapSet(RegionFromId(11));
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    CampaignInitAI();
    AIAttackWaveSetTargetPlayer(gv_p02_DOMINION, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p03_DOMINION, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p03_ZERG_ALLY, gv_dominionPlayers);
    AIAttackWaveSetTargetPlayer(gv_p03_KERRIGAN_AI, gv_dominionPlayers);
    AIToggleBulliesInRegion(gv_p02_DOMINION, RegionPlayableMap(), false);
    AIToggleBulliesInRegion(gv_p03_DOMINION, RegionPlayableMap(), false);
    SoundStop(gv_introSoundNydusExplosion, true);
    SoundStop(gv_introSoundNydusUnload, true);
    SoundStop(gv_introSoundNydusVox1, true);
    SoundStop(gv_introSoundNydusVox2, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_p01_USER, CameraInfoFromId(82), lv_fadeDuration, -1, 10.0, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(82)), lv_fadeDuration);
        CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Explosions
//--------------------------------------------------------------------------------------------------
bool gt_IntroExplosions_Func (bool testConds, bool runActions) {
    int auto50D0DBE4_n;
    int auto50D0DBE4_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_p01_USER, "Heavy", "Earthquake", 0.5, 0.5, 4.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, 0, PointFromId(465));
    gv_introCreepTumor = UnitLastCreated();
    auto50D0DBE4_n = 10;
    for (auto50D0DBE4_i = 1; auto50D0DBE4_i <= auto50D0DBE4_n; auto50D0DBE4_i += 1) {
        libNtve_gf_CreateExplosionAtPoint(0, 0, RegionRandomPoint(RegionFromId(69)));
        libNtve_gf_CreateExplosionAtPoint(1, 0, RegionRandomPoint(RegionFromId(69)));
        Wait(0.3, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroExplosions_Init () {
    gt_IntroExplosions = TriggerCreate("gt_IntroExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro First Encounter Units
//--------------------------------------------------------------------------------------------------
bool gt_IntroFirstEncounterUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_unitGroup, UnitGroupLoopCurrent());
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 4.0, 45.0), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupLoopBegin(lv_unitGroup);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 4.0, 225.0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroFirstEncounterUnits_Init () {
    gt_IntroFirstEncounterUnits = TriggerCreate("gt_IntroFirstEncounterUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZSpace02MusicEvent03_MissionIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Elevator Transition - Mid Q 
//--------------------------------------------------------------------------------------------------
bool gt_CinematicElevatorTransitionMidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_CinematicElevatorTransitionMidSetup, true, true);
    TriggerExecute(gt_CinematicElevatorTransitionMidCinematic, true, true);
    TriggerExecute(gt_CinematicElevatorTransitionMidCinematicEnd, true, true);
    TriggerExecute(gt_CinematicElevatorTransitionMidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicElevatorTransitionMidQ_Init () {
    gt_CinematicElevatorTransitionMidQ = TriggerCreate("gt_CinematicElevatorTransitionMidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Elevator Transition - Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicElevatorTransitionMidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, 0);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    GameSetLighting("PrisonShip", 0.0);
    gv_cinematicPausedUnits = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == true)) {
            UnitGroupRemove(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupRemoveUnitGroup(gv_cinematicPausedUnits, UnitGroup("CreepTumor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemoveUnitGroup(gv_cinematicPausedUnits, UnitGroup("CreepTumorBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemoveUnitGroup(gv_cinematicPausedUnits, UnitGroup("CreepTumorQueen", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemoveUnitGroup(gv_cinematicPausedUnits, gv__1ElevatorKillers);
    UnitGroupRemoveUnitGroup(gv_cinematicPausedUnits, gv__1ElevatorPatrollers);
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemove(gv_cinematicHiddenUnits, gv__1PrisonDeckCoupling);
    UnitGroupRemoveUnitGroup(gv_cinematicHiddenUnits, gv__1ElevatorKillers);
    UnitGroupRemoveUnitGroup(gv_cinematicHiddenUnits, gv__1ElevatorPatrollers);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_cinematicTempUnits = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicElevatorTransitionMidSetup_Init () {
    gt_CinematicElevatorTransitionMidSetup = TriggerCreate("gt_CinematicElevatorTransitionMidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Elevator Transition - Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicElevatorTransitionMidCinematic_Func (bool testConds, bool runActions) {
    int auto272819F7_n;
    int auto272819F7_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(633), 0.0, -1, 10.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "MengskMarine", 0, gv_p02_DOMINION, PointFromId(1441));
    gv_midMarine = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(523), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Space02|Line00035", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00035", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(675), 5.0, -1, 10.0, true);
    UnitIssueOrder(gv_midMarine, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1454)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(gv_midMarine, "zMission_Space02|Line00075", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(2.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    UnitIssueOrder(UnitFromId(218), OrderTargetingUnit(AbilityCommand("attack", 0), gv__1PrisonDeckCoupling), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    auto272819F7_n = 20;
    for (auto272819F7_i = 1; auto272819F7_i <= auto272819F7_n; auto272819F7_i += 1) {
        Wait(0.1, c_timeReal);
        UnitIssueOrder(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(218)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(218)), c_orderQueueReplace);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(2.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicElevatorTransitionMidCinematic_Init () {
    gt_CinematicElevatorTransitionMidCinematic = TriggerCreate("gt_CinematicElevatorTransitionMidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Elevator Transition - Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicElevatorTransitionMidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicElevatorTransitionMidCinematicEnd_Init () {
    gt_CinematicElevatorTransitionMidCinematicEnd = TriggerCreate("gt_CinematicElevatorTransitionMidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Elevator Transition - Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicElevatorTransitionMidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_RefreshPlayerUnitVitals();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), RegionGetCenter(RegionFromId(4)), 0.0);
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPosition(gv_kerrigan, PointFromId(1327), false);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(gv_kerrigan, 45.0, 0.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(78)), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), UnitGetPosition(gv_kerrigan), 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Beacon_Zerg", 0, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    RegionPlayableMapSet(RegionFromId(24));
    UIAlertClear(gv_p01_USER);
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    UnitRemove(UnitFromId(190));
    UnitRemove(UnitFromId(832));
    ObjectiveSetState(gv_objectiveDestroyDominionBase3, c_objectiveStateHidden);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 1, null, UnitFromId(218), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(218), 1, libNtve_gf_ActorLastCreated());
    UnitIssueOrder(UnitFromId(218), OrderTargetingUnit(AbilityCommand("attack", 0), gv__1PrisonDeckCoupling), c_orderQueueReplace);
    VisRevealArea(gv_p01_USER, RegionFromId(25), 5.0, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(4), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(25), gv_p01_USER);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10.0, true);
    CameraPan(gv_p01_USER, CameraInfoGetTarget(CameraInfoFromId(610)), 0.0, -1, 10.0, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt__1ElevatorRoomIntro, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicElevatorTransitionMidCleanup_Init () {
    gt_CinematicElevatorTransitionMidCleanup = TriggerCreate("gt_CinematicElevatorTransitionMidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Lower Deck Transition - Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_CinematicLowerDeckTransitionMidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_CinematicLowerDeckTransitionMidSetup, true, true);
    TriggerExecute(gt_CinematicLowerDeckTransitionMidCinematic, true, true);
    TriggerExecute(gt_CinematicLowerDeckTransitionMidCinematicEnd, true, true);
    TriggerExecute(gt_CinematicLowerDeckTransitionMidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicLowerDeckTransitionMidQ_Init () {
    gt_CinematicLowerDeckTransitionMidQ = TriggerCreate("gt_CinematicLowerDeckTransitionMidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Lower Deck Transition - Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicLowerDeckTransitionMidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, 0);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(25));
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) != 1)) {
            UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        }
        else {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(77)), false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), PointFromId(1479), 0.0);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAdd(gv_cinematicHiddenUnits, gv_kerrigan);
    UnitGroupRemove(gv_cinematicHiddenUnits, UnitFromId(769));
    UnitGroupRemoveUnitGroup(gv_cinematicHiddenUnits, gv__2AfterBridgeDominion);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(gv__1PrisonDeckCoupling, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicLowerDeckTransitionMidSetup_Init () {
    gt_CinematicLowerDeckTransitionMidSetup = TriggerCreate("gt_CinematicLowerDeckTransitionMidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Lower Deck Transition - Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicLowerDeckTransitionMidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(676), 0.0, -1, 10.0, true);
    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    GameSetBackground(c_backgroundTerrain, "BraxisAlphaSkyParallax", 100.0);
    UnitGroupLoopBegin(UnitGroup("Scientist", c_playerAny, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_MidBridgeControllers, true, false);
    libNtve_gf_AttachModelToActor(ActorFromDoodad(DoodadFromId(224)), "InfestedKerrigan", "Ref_Origin");
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(678), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Space02|Line00076", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Space02|Line00090", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00076", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00090", c_transmissionDurationAdd, 0.0, false, 2, 0);
    TransmissionWait(TransmissionLastSent(), 3.0);
    TriggerExecute(gt_MidElevatorAnimations, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midAlertSound = SoundLastPlayed();
    CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Leviathan", c_unitCreateIgnorePlacement, gv_p01_USER, PointFromId(1864));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 2.000000");
    UnitSetHeight(UnitLastCreated(), (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropHeight, c_unitPropCurrent) - 4), 0.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1201), 0.0, -1, 10.0, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00021", c_transmissionDurationAdd, 0.0, false, 1, 0);
    UnitIssueOrder(UnitFromId(1469), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(1470))), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(UnitFromId(1470), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(1469))), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitIssueOrder(UnitFromId(1469), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1469)), 1.0, 90.0)), c_orderQueueReplace);
    Wait(0.25, c_timeReal);
    UnitIssueOrder(UnitFromId(1470), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1470)), 1.0, 90.0)), c_orderQueueReplace);
    CameraShake(gv_p01_USER, "Heavy", "Earthquake", 1.0, 1.0, 5.0);
    TriggerExecute(gt_MidExplosions, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CinematicFade(false, 5.0, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.15);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00091", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    ActorSend(libNtve_gf_MainActorofUnit(gv_kerrigan), "AliasAdd Kerrigan");
    ActorSend(ActorFromDoodad(DoodadFromId(193)), "AliasAdd SpaceElevator");
    ActorSend(ActorFromDoodad(DoodadFromId(193)), "SetVisibility");
    libSwaC_gf_CampaignPlayCutscene("Cutscenes\\ZSpace02Elevator.SC2Cutscene", PointFromId(1586), false, false);
    gv_elevatorCutscene = CutsceneLastCreated();
    CutsceneGoToBookmark(gv_elevatorCutscene, "LowerStart");
    TriggerExecute(gt_MidElevatorDescentCamera, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00077", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00124", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00140", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicLowerDeckTransitionMidCinematic_Init () {
    gt_CinematicLowerDeckTransitionMidCinematic = TriggerCreate("gt_CinematicLowerDeckTransitionMidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Lower Deck Transition - Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicLowerDeckTransitionMidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicLowerDeckTransitionMidCinematicEnd_Init () {
    gt_CinematicLowerDeckTransitionMidCinematicEnd = TriggerCreate("gt_CinematicLowerDeckTransitionMidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Lower Deck Transition - Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicLowerDeckTransitionMidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unitgroup lv_stage1Units;

    // Variable Initialization
    lv_stage1Units = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidBridgeControllers);
    TriggerStop(gt_MidElevatorDescentCamera);
    TriggerStop(gt_MidExplosions);
    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpace02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    gf_RefreshKerriganUIHP();
    UnitSetPosition(gv_kerrigan, PointFromId(320), false);
    UnitSetFacing(gv_kerrigan, PointGetFacing(PointFromId(320)), 0.0);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(60)), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorUsed", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    lv_stage1Units = UnitGroup(null, c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemove(lv_stage1Units, gv_kerrigan);
    UnitGroupRemoveUnitGroup(lv_stage1Units, UnitGroupFilterPlayer(lv_stage1Units, gv_p01_USER, 0));
    UnitGroupLoopBegin(lv_stage1Units);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    lv_stage1Units = UnitGroup(null, c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_stage1Units, UnitGroup(null, c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(lv_stage1Units);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_DOMINION, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    VisExploreArea(gv_p01_USER, RegionFromId(11), false, false);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    RegionPlayableMapSet(RegionFromId(14));
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10.0, true);
    CameraPan(gv_p01_USER, CameraInfoGetTarget(CameraInfoFromId(1200)), 0.0, -1, 10.0, false);
    SoundStop(gv_midAlertSound, true);
    SoundStop(gv_midMovementSound1, true);
    SoundStop(gv_midMovementSound2, true);
    CutsceneStop(gv_elevatorCutscene);
    ActorSend(ActorFromDoodad(DoodadFromId(193)), "SetVisibility 1");
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(193)), c_animNameDefault, "Cover", c_animFlagPlayForever, 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(224)), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt__2StartGameMissionStartQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicLowerDeckTransitionMidCleanup_Init () {
    gt_CinematicLowerDeckTransitionMidCleanup = TriggerCreate("gt_CinematicLowerDeckTransitionMidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Elevator Animations
//--------------------------------------------------------------------------------------------------
bool gt_MidElevatorAnimations_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Thor_Movement", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midMovementSound1 = SoundLastPlayed();
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(224)), c_animNameDefault, "Cover Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(4.333, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(224)), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidElevatorAnimations_Init () {
    gt_MidElevatorAnimations = TriggerCreate("gt_MidElevatorAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Bridge Controllers
//--------------------------------------------------------------------------------------------------
bool gt_MidBridgeControllers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 3) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(45))), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 1.0, RandomFixed(70.0, 110.0))), c_orderQueueAddToEnd);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 3) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(46))), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 1.0, RandomFixed(70.0, 110.0))), c_orderQueueAddToEnd);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 3) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(47))), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 1.0, RandomFixed(70.0, 110.0))), c_orderQueueAddToEnd);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 3) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(48))), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 1.0, RandomFixed(70.0, 110.0))), c_orderQueueAddToEnd);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBridgeControllers_Init () {
    gt_MidBridgeControllers = TriggerCreate("gt_MidBridgeControllers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Elevator Descent Camera
//--------------------------------------------------------------------------------------------------
bool gt_MidElevatorDescentCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Event_Space2_ElevatorDescend", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midMovementSound2 = SoundLastPlayed();
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(679), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1477), 5.0, -1, 10.0, true);
    Wait(5.5, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1199), 4.0, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidElevatorDescentCamera_Init () {
    gt_MidElevatorDescentCamera = TriggerCreate("gt_MidElevatorDescentCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Explosions
//--------------------------------------------------------------------------------------------------
bool gt_MidExplosions_Func (bool testConds, bool runActions) {
    int auto73C1F265_n;
    int auto73C1F265_i;
    int auto7DA183EE_n;
    int auto7DA183EE_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_p01_USER, "Medium", "Earthquake", 0.5, 1.0, 4.0);
    auto73C1F265_n = 8;
    for (auto73C1F265_i = 1; auto73C1F265_i <= auto73C1F265_n; auto73C1F265_i += 1) {
        libNtve_gf_CreateExplosionAtPoint(0, 0, RegionRandomPoint(RegionFromId(70)));
        libNtve_gf_CreateExplosionAtPoint(1, 0, RegionRandomPoint(RegionFromId(70)));
        Wait(0.2, c_timeGame);
    }
    auto7DA183EE_n = 17;
    for (auto7DA183EE_i = 1; auto7DA183EE_i <= auto7DA183EE_n; auto7DA183EE_i += 1) {
        UnitKill(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        libNtve_gf_CreateExplosionAtPoint(0, 0, RegionRandomPoint(RegionFromId(70)));
        libNtve_gf_CreateExplosionAtPoint(1, 0, RegionRandomPoint(RegionFromId(70)));
        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidExplosions_Init () {
    gt_MidExplosions = TriggerCreate("gt_MidExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZSpace02MusicEvent12_ElevatorDescent";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpace02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p01_USER);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_CreateHero2(PointFromId(1204), gv_p01_USER, 0, PointGetFacing(PointFromId(1204)), 0, 1);
    UnitSetTeamColorIndex(UnitLastCreated(), 4);
    gv_cinematicKerrigan = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicKerrigan);
    UnitSetState(gv_cinematicKerrigan, c_unitStateFidget, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1666), 0.0, -1, 10.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpace02MusicCutscene19_KerriganSavesRaynor", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "zMission_Space02|Line00143", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1667), 4.0, -1, 10.0, true);
    UnitBehaviorAdd(gv_cinematicKerrigan, "KerriganWalk", gv_cinematicKerrigan, 1);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1205)), c_orderQueueReplace);
    CameraShake(gv_p01_USER, "Heavy", "Earthquake", 0.5, 1.0, 4.0);
    TriggerExecute(gt_VictoryTentacle1, true, false);
    Wait(0.6, c_timeReal);
    TriggerExecute(gt_VictoryTentacle2, true, false);
    Wait(0.6, c_timeReal);
    TriggerExecute(gt_VictoryTentacle3, true, false);
    Wait(4.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Space02|Line00144", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "zMission_Space02|Line00104", c_transmissionDurationAdd, 0.0, true, 1, 0);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1672)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_victoryTentacleSound1, true);
    SoundStop(gv_victoryTentacleSound2, true);
    SoundStop(gv_victoryTentacleSound3, true);
    UnitPauseAll(true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libSwaC_gf_PlayCinematic("Zerg10 - Reunited", true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Tentacle 1
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTentacle1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSendTo(ActorFromDoodad(DoodadFromId(1363)), "SidewaysNydusAdditionDownRight", "ModelSwap SpaceTentacle");
    ActorSendTo(ActorFromDoodad(DoodadFromId(1363)), "SidewaysNydusAdditionDownRight", "AnimPlay Stabilize Spell,B");
    SoundPlay(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("NydusSpace_BirthA", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryTentacleSound1 = SoundLastPlayed();
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1002)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.8, c_timeReal);
    SoundPlay(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpaceDestructibleDoodad", 0, 0, PointFromId(1669));
    UnitKill(UnitLastCreated());
    Wait(1.2, c_timeReal);
    ActorSendTo(ActorFromDoodad(DoodadFromId(1363)), "SidewaysNydusAdditionDownRight", "AnimSetPausedAll");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTentacle1_Init () {
    gt_VictoryTentacle1 = TriggerCreate("gt_VictoryTentacle1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Tentacle 2
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTentacle2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSendTo(ActorFromDoodad(DoodadFromId(1671)), "SidewaysNydusAdditionDownLeftSideways", "ModelSwap SpaceTentacle");
    ActorSendTo(ActorFromDoodad(DoodadFromId(1671)), "SidewaysNydusAdditionDownLeftSideways", "AnimPlay Stabilize Spell,B");
    SoundPlay(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("NydusSpace_BirthA", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryTentacleSound1 = SoundLastPlayed();
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(160)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.8, c_timeReal);
    SoundPlay(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1004)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.2, c_timeReal);
    ActorSendTo(ActorFromDoodad(DoodadFromId(1671)), "SidewaysNydusAdditionDownLeftSideways", "AnimSetPausedAll");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTentacle2_Init () {
    gt_VictoryTentacle2 = TriggerCreate("gt_VictoryTentacle2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Tentacle 3
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTentacle3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSendTo(ActorFromDoodad(DoodadFromId(1668)), "SidewaysNydusAdditionDownLeft", "ModelSwap SpaceTentacle");
    ActorSendTo(ActorFromDoodad(DoodadFromId(1668)), "SidewaysNydusAdditionDownLeft", "AnimPlay Stabilize Spell,B");
    SoundPlay(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("NydusSpace_BirthA", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryTentacleSound1 = SoundLastPlayed();
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1070)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.8, c_timeReal);
    SoundPlay(SoundLink("Space02_MetalCrash", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpaceDestructibleDoodad", 0, 0, PointFromId(1911));
    UnitKill(UnitLastCreated());
    Wait(1.2, c_timeReal);
    ActorSendTo(ActorFromDoodad(DoodadFromId(1668)), "SidewaysNydusAdditionDownLeft", "AnimSetPausedAll");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTentacle3_Init () {
    gt_VictoryTentacle3 = TriggerCreate("gt_VictoryTentacle3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUGStage2_Init();
    gt_RemoveHarmlessBehavior_Init();
    gt_RemoveHealImpactFX_Init();
    gt_FearedbyDeath_Init();
    gt_FearedbyDamage_Init();
    gt_FearSourceKerrigan_Init();
    gt_SecretDocumentsIntroQ_Init();
    gt_SecretDocumentPickups_Init();
    gt_SecretDocumentsFoundQ_Init();
    gt__1StartGameArea1Q_Init();
    gt__1FirstDominionReactionQ_Init();
    gt__1FirstDominionAttacked_Init();
    gt__1FirstDominionEncounter_Init();
    gt__1PlayerWaitsbyFirstDominion1Q_Init();
    gt__1PlayerWaitsbyFirstDominion2Q_Init();
    gt__1PlayerWaitsbyFirstDominion3Q_Init();
    gt__1EntryHullBreach01_Init();
    gt__1DominionBridgeEncounter_Init();
    gt__1DominionBridgeEncounterTentacle_Init();
    gt__1EntryHullBreach02_Init();
    gt__1DominionReactionAtBridgeQ_Init();
    gt__1MengskISAwareQ_Init();
    gt__1PsycheWardDominionMoveOut_Init();
    gt__1PsycheWardHullBreach_Init();
    gt__1SiegeTankSiege_Init();
    gt__1EntryHullBreach03_Init();
    gt__1LockedDoorRoomEntered_Init();
    gt__1LockedDoorRoomThorIntroQ_Init();
    gt__1LockedDoorRoomClear_Init();
    gt__1LockedDoorRoomClearedQ_Init();
    gt__1LockedDoorBeaconActivated_Init();
    gt__1LockedDoorBeaconObjectiveActivatedQ_Init();
    gt__1ProtectKerriganPing_Init();
    gt__1LockedDoorRoomActivatedQ_Init();
    gt__1LockedDoorEventTiming_Init();
    gt__1LockedDoorAttack01_Init();
    gt__1LockedDoorAttack01Q_Init();
    gt__1LockedDoorAttack02_Init();
    gt__1LockedDoorAttack02Q_Init();
    gt__1LockedDoorAttack03_Init();
    gt__1LockedDoorAttack03Q_Init();
    gt__1LockedDoorAttack04_Init();
    gt__1LockedDoorReinforcements01_Init();
    gt__1LockedDoorReinforcements01Q_Init();
    gt__1LockedDoorReinforcements02_Init();
    gt__1LockedDoorReinforcements02Q_Init();
    gt__1LockedDoorDestroyed_Init();
    gt__1LockedDoorDestroyedQ_Init();
    gt__1PrisonCellRoomEntered_Init();
    gt__1PrisonCellReacttoLurkerImpaler_Init();
    gt__1PrisonCellRoomIntroQ_Init();
    gt__1PrisonCellRoomTentacles_Init();
    gt__1CreatePrisonCellPings_Init();
    gt__1PrisonCellInfestation_Init();
    gt__1PrisonCellLineEngaged_Init();
    gt__1TheHoleRevealed_Init();
    gt__1TheHoleBreach_Init();
    gt__1TheHoleTentacle_Init();
    gt__1TheHoleBulliesEngagedQ_Init();
    gt__1TheHoleReinforcements_Init();
    gt__1TransitiontoElevatorRoom_Init();
    gt__1ElevatorRoomIntro_Init();
    gt__1ElevatorRoomTentacles_Init();
    gt__1ElevatorShakingSound_Init();
    gt__1Elevatorat75LifeQ_Init();
    gt__1Elevatorat50LifeQ_Init();
    gt__1Elevatorat30LifeQ_Init();
    gt__1ElevatorAI_Init();
    gt__1ThorTakesDamage_Init();
    gt__1ThorIsDominated_Init();
    gt__1CreateElevatorBossBar_Init();
    gt__1ElevatorVictory_Init();
    gt__1CouplingDestroyed_Init();
    gt__2StartGameMissionStartQ_Init();
    gt__2StartShipDestructionTimer_Init();
    gt__2TurnoffArea1Triggers_Init();
    gt__2ThorReactionQ_Init();
    gt__2DeckBridgeTentacle_Init();
    gt__2ShipIsExploding_Init();
    gt__2ShipShaking1_Init();
    gt__2ShipShaking2_Init();
    gt__2ShipIsExplodingWarning1Q_Init();
    gt__2ShipShaking3_Init();
    gt__2ShipIsExplodingWarning2Q_Init();
    gt__2ShipCeilingFallingAfterJumpDrive_Init();
    gt__2DominionFleeing01_Init();
    gt__2DominionFlee01Q_Init();
    gt__2TrappedDominion_Init();
    gt__2HullBreachReinforcements01_Init();
    gt__2TrappedDominionQ_Init();
    gt__2TrappedDominionDead_Init();
    gt__2DestroyGatetoProceedQ_Init();
    gt__2FirstGateDestroyed_Init();
    gt__2DominionFleeing02_Init();
    gt__2DominionFlee02Q_Init();
    gt__2FleeingDominionTentacle_Init();
    gt__2PrisonBreakOut_Init();
    gt__2PrisonersAttackDominionQ_Init();
    gt__2PrisonBreakTentacle_Init();
    gt__2ReaperAmbush_Init();
    gt__2ReaperAmbushPlayerQ_Init();
    gt__2DominionFleeing03_Init();
    gt__2DominionFlee03Q_Init();
    gt__2ExplosionsatShipWreckage_Init();
    gt__2LockedOutDominionForces_Init();
    gt__2LockedOutTroopsQ_Init();
    gt__2HullBreachReinforcements02_Init();
    gt__2GatetoRaynorPrisonDestroyed_Init();
    gt__2EnteredRaynorCellRoom_Init();
    gt__2PrisonRoomEnteredQ_Init();
    gt__2RaynorCellReinforcements01_Init();
    gt_DefeatKerriganDiedObjectiveFailed_Init();
    gt_DefeatCouplingDestroyedFailed_Init();
    gt_DefeatShipDestroyedFailed_Init();
    gt_VictoryJimRescued_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementKerriganLife_Init();
    gt_AchievementPrisonDeckTimedRunNH_Init();
    gt_AchievementTimedRunH_Init();
    gt_KerriganLowestLife_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveKerriganMustSurviveCreate_Init();
    gt_ObjectiveKerriganMustSurviveComplete_Init();
    gt_ObjectiveKerriganMustSurviveFailed_Init();
    gt_ObjectiveRescueJimCreate_Init();
    gt_ObjectiveRescueJimComplete_Init();
    gt_ObjectiveRescueJimFailed_Init();
    gt_ObjectiveProtecttheQueenCreate_Init();
    gt_ObjectiveProtecttheQueenComplete_Init();
    gt_ObjectiveProtecttheQueenFailed_Init();
    gt_ObjectiveFindSecretDocumentsCreate_Init();
    gt_ObjectiveFindSecretDocumentsUpdate_Init();
    gt_ObjectiveFindSecretDocumentsComplete_Init();
    gt_ObjectiveFindSecretDocumentsFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroExplosions_Init();
    gt_IntroFirstEncounterUnits_Init();
    gt_IntroMusic_Init();
    gt_CinematicElevatorTransitionMidQ_Init();
    gt_CinematicElevatorTransitionMidSetup_Init();
    gt_CinematicElevatorTransitionMidCinematic_Init();
    gt_CinematicElevatorTransitionMidCinematicEnd_Init();
    gt_CinematicElevatorTransitionMidCleanup_Init();
    gt_CinematicLowerDeckTransitionMidQ_Init();
    gt_CinematicLowerDeckTransitionMidSetup_Init();
    gt_CinematicLowerDeckTransitionMidCinematic_Init();
    gt_CinematicLowerDeckTransitionMidCinematicEnd_Init();
    gt_CinematicLowerDeckTransitionMidCleanup_Init();
    gt_MidElevatorAnimations_Init();
    gt_MidBridgeControllers_Init();
    gt_MidElevatorDescentCamera_Init();
    gt_MidExplosions_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryTentacle1_Init();
    gt_VictoryTentacle2_Init();
    gt_VictoryTentacle3_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
