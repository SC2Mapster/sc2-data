//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Rendezvous
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "aiE0C99455"
include "aiC8B8F737"
include "aiB58073EB"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_RESCUEZERG = 2;
const int gv_pLAYER_03_DOMINION_MAIN = 3;
const int gv_pLAYER_04_DOMINION_RIGHT = 4;
const int gv_pLAYER_05_INFESTED = 5;
const int gv_pLAYER_07_DOMINION_LEFT = 7;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
playergroup gv_dominionPlayers;
unit gv_tHE_ONE_QUEEN;
unit gv_kerrigan;
unitgroup gv_gunPathingBlockers;
int gv_reinforcementCount;
unit gv_retractedBridge;
int gv_inCombatIndicator;
string gv_overlord_OriginalTooltip;
string gv_drone_OriginalTooltip;
string gv_selectLarva_OriginalTooltip;
unitgroup gv_queenGroup;
bool gv_s01_ActorBeingUsed;
bool gv_lessonsComplete;
bool gv_droneHelpersCreated;
bool gv_buttonPressed_CreepTumor;
bool gv_abilityUsed_CreepTumor;
actor[2] gv_evoChamber_PlacementModel;
bool gv_buttonPressed_BuildEvoChamber;
bool gv_evoUpgradePurchased;
actor[2] gv_sporeCrawler_PlacementModel_Left;
actor[2] gv_sporeCrawler_PlacementModel_Right;
bool gv_abilityUsed_SporeCrawlerMorph;
bool gv_tutorialBusy;
int gv_tutorialTypeGlobal;
int gv_spawningPool_NumberOfDroneActors;
unit gv_spawningPool_Drone;
actor[16] gv_spawningPool_DroneActors;
int[16] gv_spawningPool_DroneTextTag;
bool gv_spawningPool_ButtonPressed;
int gv_spawningPool_TextTag;
actor gv_spawningPool_PlacementModel;
bool gv_spawningPoolBuildingStarted;
bool gv_spawningPoolBuildingCompleted;
actor gv_zergling_Actor;
int gv_zergling_TextTag;
bool gv_zergling_ButtonPressed;
unit gv_spine_Drone;
actor[16] gv_spine_DroneActors;
int[16] gv_spine_DroneTextTag;
timer gv_spine_LessonTimer;
bool gv_spine_MorphStarted;
int gv_spine_NumberOfDroneActors;
actor gv_spine_PlacementModel;
bool gv_spine_SpineCrawlerCompleted;
int gv_spine_TextTag;
bool gv_queen_ButtonPressed;
bool gv_queen_Completed;
actor gv_queen_Actor;
timer gv_queen_LessonTimer;
actor gv_extractor_Actor;
bool gv_extractor_ButtonPressed;
actor[16] gv_extractor_DroneActors;
bool gv_extractor_GasCollected;
timer gv_extractor_LessonTimer;
int gv_extractor_NumberOfDroneActors;
int gv_extractorText;
actor gv_overlord_Actor;
bool gv_overlord_ButtonPressed;
actor gv_drone_Actor;
int gv_droneBuildTransmission;
unitgroup gv_rescue_DominionLeft;
unitgroup gv_rescue_DominionRight;
unitgroup gv_rescue_DominionCenter;
int[5] gv_rescue_Pings;
timer gv_rescue_StartTimer;
int gv_rescue_QueensRescued;
bool gv_rescue_FirstTime;
bool gv_rescue_LeftActivated;
bool gv_rescue_RightActivated;
bool gv_rescue_CenterActivated;
revealer gv_rescue_RevealerLeft;
revealer gv_rescue_RevealerRight;
revealer gv_rescue_RevealerCenter;
actor gv_rescue_SoundLeft;
actor gv_rescue_SoundRight;
actor gv_rescue_SoundCenter;
int gv_holdOut_Window;
timer gv_reinforcement_Timer;
timer gv_reinforcement_HalfwayTimer;
bool gv_reinforcementsHaveArrived;
unit gv_naktul;
bool gv_nightDropped;
bool gv_nightAmbiencePlayed;
int gv_dominionTransmission01;
unit gv_dominionFlavorMarine;
unitgroup gv_aI_FirstAttackWave;
bool gv_aI_FirstAttackHappening;
unitgroup gv_aI_FinalAttackWave;
unitgroup gv_hellionWave;
int gv_structuresDestroyedS1Stat;
int gv_structuresDestroyedS1Max;
int gv_queensRescuedBeforeNaktul;
int gv_enemiesKilledByCrawlers;
int gv_objectiveHoldOut;
int gv_objectiveDestroyPulseCannon;
int gv_pulseCannonPing;
unit gv_pulseCannonUnit;
int gv_objectiveRescueQueens;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_introCinematicCompleted;
int gv_introMineralsTotal;
int[16] gv_introMineralCounts;
unit[16] gv_introMineralFields;
int gv_introNumberOfMineralFields;
unit gv_introDropship;
sound gv_introSound;
bool gv_introMusicFinished;
bool gv_cameraAmbienceFinished;
unit gv_midNydus1;
unit gv_midNydus2;
sound gv_midNydusSound1;
sound gv_midNydusSound2;
sound gv_midRockSound1;
sound gv_midRockSound2;
bool gv_midCinematicCompleted;
bool gv_midMusicCompleted;
bool gv_victoryCinematicCompleted;
unit gv_victoryKerrigan;
bool gv_victoryMusicCompleted;
sound gv_victoryExplodeSound;
sound gv_victoryDebrisSound;
sound gv_victoryZergSound;
sound gv_victoryLoadSound;

void InitGlobals () {
    int init_i;

    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_dominionPlayers = PlayerGroupEmpty();
    gv_tHE_ONE_QUEEN = null;
    gv_kerrigan = null;
    gv_gunPathingBlockers = UnitGroupEmpty();
    gv_reinforcementCount = 50;
    gv_retractedBridge = null;
    gv_inCombatIndicator = 0;
    gv_overlord_OriginalTooltip = "";
    gv_drone_OriginalTooltip = "";
    gv_selectLarva_OriginalTooltip = "";
    gv_queenGroup = UnitGroupEmpty();
    gv_s01_ActorBeingUsed = false;
    gv_lessonsComplete = false;
    gv_droneHelpersCreated = false;
    gv_buttonPressed_CreepTumor = false;
    gv_abilityUsed_CreepTumor = false;
    init_i = 0;
    while (init_i <= 1) {
        gv_evoChamber_PlacementModel[init_i] = null;
        init_i = init_i + 1;
    }
    gv_buttonPressed_BuildEvoChamber = false;
    gv_evoUpgradePurchased = false;
    init_i = 0;
    while (init_i <= 1) {
        gv_sporeCrawler_PlacementModel_Left[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 1) {
        gv_sporeCrawler_PlacementModel_Right[init_i] = null;
        init_i = init_i + 1;
    }
    gv_abilityUsed_SporeCrawlerMorph = false;
    gv_tutorialBusy = false;
    gv_tutorialTypeGlobal = 0;
    gv_spawningPool_NumberOfDroneActors = 0;
    gv_spawningPool_Drone = null;
    init_i = 0;
    while (init_i <= 15) {
        gv_spawningPool_DroneActors[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 15) {
        gv_spawningPool_DroneTextTag[init_i] = c_textTagNone;
        init_i = init_i + 1;
    }
    gv_spawningPool_ButtonPressed = false;
    gv_spawningPool_TextTag = c_textTagNone;
    gv_spawningPool_PlacementModel = null;
    gv_spawningPoolBuildingStarted = false;
    gv_spawningPoolBuildingCompleted = false;
    gv_zergling_Actor = null;
    gv_zergling_TextTag = c_textTagNone;
    gv_zergling_ButtonPressed = false;
    gv_spine_Drone = null;
    init_i = 0;
    while (init_i <= 15) {
        gv_spine_DroneActors[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 15) {
        gv_spine_DroneTextTag[init_i] = c_textTagNone;
        init_i = init_i + 1;
    }
    gv_spine_LessonTimer = TimerCreate();
    gv_spine_MorphStarted = false;
    gv_spine_NumberOfDroneActors = 0;
    gv_spine_PlacementModel = null;
    gv_spine_SpineCrawlerCompleted = false;
    gv_spine_TextTag = c_textTagNone;
    gv_queen_ButtonPressed = false;
    gv_queen_Completed = false;
    gv_queen_Actor = null;
    gv_queen_LessonTimer = null;
    gv_extractor_Actor = null;
    gv_extractor_ButtonPressed = false;
    init_i = 0;
    while (init_i <= 15) {
        gv_extractor_DroneActors[init_i] = null;
        init_i = init_i + 1;
    }
    gv_extractor_GasCollected = false;
    gv_extractor_LessonTimer = TimerCreate();
    gv_extractor_NumberOfDroneActors = 0;
    gv_extractorText = c_textTagNone;
    gv_overlord_Actor = null;
    gv_overlord_ButtonPressed = false;
    gv_drone_Actor = null;
    gv_droneBuildTransmission = c_invalidTransmissionId;
    gv_rescue_DominionLeft = UnitGroupEmpty();
    gv_rescue_DominionRight = UnitGroupEmpty();
    gv_rescue_DominionCenter = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 4) {
        gv_rescue_Pings[init_i] = c_invalidPingId;
        init_i = init_i + 1;
    }
    gv_rescue_StartTimer = TimerCreate();
    gv_rescue_QueensRescued = 0;
    gv_rescue_FirstTime = false;
    gv_rescue_LeftActivated = false;
    gv_rescue_RightActivated = false;
    gv_rescue_CenterActivated = false;
    gv_rescue_RevealerLeft = null;
    gv_rescue_RevealerRight = null;
    gv_rescue_RevealerCenter = null;
    gv_rescue_SoundLeft = null;
    gv_rescue_SoundRight = null;
    gv_rescue_SoundCenter = null;
    gv_holdOut_Window = c_timerWindowNone;
    gv_reinforcement_Timer = TimerCreate();
    gv_reinforcement_HalfwayTimer = TimerCreate();
    gv_reinforcementsHaveArrived = false;
    gv_naktul = null;
    gv_nightDropped = false;
    gv_nightAmbiencePlayed = false;
    gv_dominionTransmission01 = c_invalidTransmissionId;
    gv_dominionFlavorMarine = null;
    gv_aI_FirstAttackWave = UnitGroupEmpty();
    gv_aI_FirstAttackHappening = false;
    gv_aI_FinalAttackWave = UnitGroupEmpty();
    gv_hellionWave = UnitGroupEmpty();
    gv_structuresDestroyedS1Stat = 0;
    gv_structuresDestroyedS1Max = 0;
    gv_queensRescuedBeforeNaktul = 0;
    gv_enemiesKilledByCrawlers = 0;
    gv_objectiveHoldOut = c_invalidObjectiveId;
    gv_objectiveDestroyPulseCannon = c_invalidObjectiveId;
    gv_pulseCannonPing = c_invalidPingId;
    gv_pulseCannonUnit = null;
    gv_objectiveRescueQueens = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introCinematicCompleted = false;
    gv_introMineralsTotal = 0;
    init_i = 0;
    while (init_i <= 15) {
        gv_introMineralCounts[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 15) {
        gv_introMineralFields[init_i] = null;
        init_i = init_i + 1;
    }
    gv_introNumberOfMineralFields = 0;
    gv_introDropship = UnitFromId(254);
    gv_introSound = null;
    gv_introMusicFinished = false;
    gv_cameraAmbienceFinished = false;
    gv_midNydus1 = null;
    gv_midNydus2 = null;
    gv_midNydusSound1 = null;
    gv_midNydusSound2 = null;
    gv_midRockSound1 = null;
    gv_midRockSound2 = null;
    gv_midCinematicCompleted = false;
    gv_midMusicCompleted = false;
    gv_victoryCinematicCompleted = false;
    gv_victoryKerrigan = null;
    gv_victoryMusicCompleted = false;
    gv_victoryExplodeSound = null;
    gv_victoryDebrisSound = null;
    gv_victoryZergSound = null;
    gv_victoryLoadSound = null;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat ();
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void gf_CreateInfoText (unit lp_cHOSEN_UNIT);
void gf_ChangeButtonTooltip (string lp_button, string lp_tooltipPath);
void gf_RestoreButtonTooltip (string lp_button);
bool gf_UnitHasOrder (unit lp_u, abilcmd lp_abilityCommand);
void gf_StartTutorial (int lp_tutorialType);
void gf_EndTutorial (int lp_tutorialType);
void gf_CreateSpawningPoolDroneHelper (bool lp_single);
void gf_DestroySpawningPoolDroneHelper ();
void gf_CreateSpawningPoolHelper ();
void gf_DestroySpawningPoolHelper ();
void gf_CreateZerglingHatcheryHelper ();
void gf_DestroyZerglingHatcheryHelper ();
void gf_CreateSpineCrawlerDroneHelper (bool lp_single);
void gf_DestroySpineCrawlerDroneHelper ();
void gf_CreateSpineCrawlerHelper ();
void gf_DestroySpineCrawlerHelper ();
void gf_PingNydusWorm (point lp_nydusPoint);
unit gf_AITargetNextHut (int lp_attackVector);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DEBUG_SkipTimer;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_HandleKerriganDeath;
trigger gt_BroodlingsSpawnFromHutDeath;
trigger gt_CreepTumorUsed;
trigger gt_AttachInfoTextPlayerTraining;
trigger gt_StartGameStage01Q;
trigger gt_StartHarvesting;
trigger gt_TransmissionStage01OpeningQ;
trigger gt_StartGameStage02;
trigger gt_ShowArmyButtonQ;
trigger gt_ArmyButtonMusicStinger;
trigger gt_PlayerUnitSpawned;
trigger gt_PlayerUnitMorphed;
trigger gt_QueenSandbagCrushing;
trigger gt_SpawningPoolLesson;
trigger gt_SpawningPoolDroneIssuedOrder;
trigger gt_SpawningPoolStarted;
trigger gt_SpawningPoolCanceled;
trigger gt_SpawningPoolCompleted;
trigger gt_SpawningPoolMutationUIUpdate;
trigger gt_ZerglingLesson;
trigger gt_ZerglingStarted;
trigger gt_ZerglingCompleted;
trigger gt_TransmissionZerglingReminderQ;
trigger gt_ZerglingMorphUIUpdate;
trigger gt_SpineCrawlerLesson;
trigger gt_SpineCrawlerButtonPressed;
trigger gt_SpineCrawlerDroneIssuedOrder;
trigger gt_SpineCrawlerStarted;
trigger gt_SpineCrawlerCanceled;
trigger gt_SpineCrawlerComplete;
trigger gt_TransmissionSpineCrawlerQ;
trigger gt_TransmissionSpineCrawlersWestQ;
trigger gt_SpineCrawlerMutationUIUpdate;
trigger gt_QueenLesson;
trigger gt_QueenHatcherySelected;
trigger gt_QueenStarted;
trigger gt_QueenCompleted;
trigger gt_TransmissionQueenLessonQ;
trigger gt_ExtractorLesson;
trigger gt_TransmissionBuildExtractorQ;
trigger gt_ExtractorDroneSelected;
trigger gt_ExtractorStarted;
trigger gt_ExtractorComplete;
trigger gt_CollectGasOrderIssued;
trigger gt_TransmissionDronesHarvestGasQ;
trigger gt_OverlordLesson;
trigger gt_OverlordHatcherySelected;
trigger gt_OverlordStarted;
trigger gt_OverlordCompleted;
trigger gt_TransmissionOverlordLessonQ;
trigger gt_DronesLesson;
trigger gt_DronesHatcherySelected;
trigger gt_DronesButtonPressed;
trigger gt_TransmissionDronesLessonQ;
trigger gt_QueenRescueTimer;
trigger gt_QueenRescueIntro;
trigger gt_QueenRescueFailsafe;
trigger gt_TransmissionQueenRescueQ;
trigger gt_QueenRescueIntroRightQ;
trigger gt_QueenRescuePlayerGetsCloseRight;
trigger gt_QueenRescueBeingAttackedRight;
trigger gt_QueenRescueRight;
trigger gt_QueenRescuePingRight;
trigger gt_QueenRescueIntroLeft;
trigger gt_QueenRescuePlayerGetsCloseLeft;
trigger gt_QueenRescueBeingAttackedLeft;
trigger gt_QueenRescueLeft;
trigger gt_QueenRescuePingLeft;
trigger gt_QueenRescueIntroCenter;
trigger gt_QueenRescuePlayerGetsCloseCenter;
trigger gt_QueenRescueBeingAttackedCenter;
trigger gt_QueenRescueCenter;
trigger gt_QueenRescuePingCenter;
trigger gt_TransmissionQueenRescueUpdateQ;
trigger gt_DominionBaseWarningLeft;
trigger gt_DominionBaseWarningMiddle;
trigger gt_DominionBaseWarningRight;
trigger gt_DominionBaseWarningQ;
trigger gt_KerriganDiesQ;
trigger gt_EvolutionUpgradePurchased;
trigger gt_CreateTimerWindowReinforcements;
trigger gt_HoldOutTimerFinished;
trigger gt_CreateNydusWorm3;
trigger gt_CreateNydusWorm4;
trigger gt_CreateNydusWormNaktul;
trigger gt_NaktulDontDie;
trigger gt_HoldOutFinishedEarly;
trigger gt_SetLightingandSoundtrack;
trigger gt_SetLightingandSoundtrackEarlyFinish;
trigger gt_TransmissionReinforcementsClose1Q;
trigger gt_TransmissionReinforcementsClose2Q;
trigger gt_TransmissionNaktulArrivesQ;
trigger gt_ZergAttackLeftBase;
trigger gt_ZergAttackLeftBaseReactionQ;
trigger gt_ZergAttackRightBase;
trigger gt_ZergAttackRightBaseReactionQ;
trigger gt_BottomMarinesReaction;
trigger gt_BottomMarinesSpeakerDies;
trigger gt_BottomMarinesFleeQ;
trigger gt_TransmissionMainBaseInvasionQ;
trigger gt_CannonExplosionScene;
trigger gt_StartAI;
trigger gt_AttackWaveFirstScriptedWave;
trigger gt_AttackWaveCustomTarget01;
trigger gt_AttackWaveCustomTarget02;
trigger gt_AttackWaveTargetNextWest;
trigger gt_AttackWaveTargetNextEast;
trigger gt_HoldOutFinal2Minutes;
trigger gt_SetHellionWave;
trigger gt_HellionBattleModeEnabled;
trigger gt_InfestedHutRemoveHarmless;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_AIUpgradesHard;
trigger gt_TransmissionFirstAttackQ;
trigger gt_TransmissionFirstNorthAttackQ;
trigger gt_TransmissionDominionBunkersQHard;
trigger gt_TransmissionLargeWaveIncomingQ;
trigger gt_AchievementEnemyStructurespreNaktul;
trigger gt_AchievementQueensRescuedpreNaktulNH;
trigger gt_AchievementEnemyStructuresAllDestroyedH;
trigger gt_EnemyStructureDestroyedbeforeVictoryLap;
trigger gt_EnemyTroopsKilledbyCrawlers;
trigger gt_DefeatBaseDead;
trigger gt_VictoryCannonDestroyed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveHoldOutCreate;
trigger gt_ObjectiveHoldOutComplete;
trigger gt_ObjectiveHoldOutFailed;
trigger gt_ObjectiveDestroyPulseCannonCreate;
trigger gt_ObjectiveDestroyPulseCannonComplete;
trigger gt_ObjectiveDestroyPulseCannonFailed;
trigger gt_ObjectiveRescueTrappedQueensCreate;
trigger gt_ObjectiveRescueTrappedQueensUpdate;
trigger gt_ObjectiveRescueTrappedQueensComplete;
trigger gt_ObjectiveRescueTrappedQueensFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroPilotCamera;
trigger gt_IntroZerglings;
trigger gt_IntroZergSeparate;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidCreateNydusWorm1;
trigger gt_MidCreateNydusWorm2;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryBattle;
trigger gt_VictoryMusic;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    init_i = 0;
    while (init_i <= 16) {
        cai_playerAI[init_i] = null;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiE0C99455") { aiE0C99455_start(p); }
    if (cai_playerAI[p] == "aiC8B8F737") { aiC8B8F737_start(p); }
    if (cai_playerAI[p] == "aiB58073EB") { aiB58073EB_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE0C99455") { aiE0C99455_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiC8B8F737") { aiC8B8F737_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiB58073EB") { aiB58073EB_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiE0C99455") { return aiE0C99455_getCustomData(p); }
    if (cai_playerAI[p] == "aiC8B8F737") { return aiC8B8F737_getCustomData(p); }
    if (cai_playerAI[p] == "aiB58073EB") { return aiB58073EB_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE0C99455") { aiE0C99455_waves_run(p, target); }
    if (cai_playerAI[p] == "aiC8B8F737") { aiC8B8F737_waves_run(p, target); }
    if (cai_playerAI[p] == "aiB58073EB") { aiB58073EB_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE0C99455") { aiE0C99455_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiC8B8F737") { aiC8B8F737_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiB58073EB") { aiB58073EB_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiE0C99455") { aiE0C99455_waves_stop(); }
    if (ai == "aiC8B8F737") { aiC8B8F737_waves_stop(); }
    if (ai == "aiB58073EB") { aiB58073EB_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE0C99455") { aiE0C99455_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiC8B8F737") { aiC8B8F737_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiB58073EB") { aiB58073EB_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE0C99455") { aiE0C99455_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiC8B8F737") { aiC8B8F737_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiB58073EB") { aiB58073EB_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiE0C99455") { return aiE0C99455_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiC8B8F737") { return aiC8B8F737_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiB58073EB") { return aiB58073EB_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiE0C99455") { return aiE0C99455_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiC8B8F737") { return aiC8B8F737_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiB58073EB") { return aiB58073EB_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiE0C99455") { return aiE0C99455_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiC8B8F737") { return aiC8B8F737_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiB58073EB") { return aiB58073EB_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiE0C99455", 3);
    cai_start("aiC8B8F737", 4);
    cai_start("aiB58073EB", 7);
    AICampaignStart(2);
    AICampaignStart(5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(7, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat () {
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

void gf_CreateInfoText (unit lp_cHOSEN_UNIT) {
    string autoC9DB8A5F_val;

    // Implementation
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) != 1)) {
        return ;
    }
    else {
    }
    autoC9DB8A5F_val = UnitGetType(lp_cHOSEN_UNIT);
    if (autoC9DB8A5F_val == "Hatchery") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/F605D6F9"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/10565536"));
    }
    else if (autoC9DB8A5F_val == "SpawningPool") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/35692B69"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/34EF9B3C"));
    }
    else if (autoC9DB8A5F_val == "EvolutionChamber") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/AC797F6F"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/DD3B9EBF"));
    }
    else if (autoC9DB8A5F_val == "Extractor") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/07F06757"));
    }
    else if (autoC9DB8A5F_val == "CreepTumor") {
        TextExpressionSetToken("Param/Expression/9B47126B", "A", UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/2AF6BE52"), TextExpressionAssemble("Param/Expression/9B47126B"), StringExternal("Param/Value/E24FDA29"));
    }
    else if (autoC9DB8A5F_val == "CreepTumorUsed") {
        TextExpressionSetToken("Param/Expression/C058BBAC", "A", UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/83BC878C"), TextExpressionAssemble("Param/Expression/C058BBAC"), StringExternal("Param/Value/2D1B3279"));
    }
    else if (autoC9DB8A5F_val == "SpineCrawler") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/CF801334"));
    }
    else if (autoC9DB8A5F_val == "SpineCrawlerUprooted") {
        TextExpressionSetToken("Param/Expression/C71E69E9", "A", UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, TextExpressionAssemble("Param/Expression/C71E69E9"), StringExternal("Param/Value/3D2C1C9A"));
    }
    else if (autoC9DB8A5F_val == "SporeCrawler") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/582C9103"));
    }
    else if (autoC9DB8A5F_val == "SporeCrawlerUprooted") {
        TextExpressionSetToken("Param/Expression/5CD0552B", "A", UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)));
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, TextExpressionAssemble("Param/Expression/5CD0552B"), StringExternal("Param/Value/096482E9"));
    }
    else if (autoC9DB8A5F_val == "Larva") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/C4387B15"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/B3DBC863"));
    }
    else if (autoC9DB8A5F_val == "Overlord") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/08D67A52"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/6299F80D"));
    }
    else if (autoC9DB8A5F_val == "Drone") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/EF726468"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/8D2F8EBC"));
    }
    else if (autoC9DB8A5F_val == "DroneBurrowed") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/05EF5933"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/7552A7C5"));
    }
    else if (autoC9DB8A5F_val == "Queen") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/AE902458"));
    }
    else if (autoC9DB8A5F_val == "QueenBurrowed") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, null, UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/2AED0433"));
    }
    else if (autoC9DB8A5F_val == "VespeneGeyser") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/AEA6E5EF"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/052DA5CA"));
    }
    else if (autoC9DB8A5F_val == "Egg") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/44099B31"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/C044F885"));
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

void gf_ChangeButtonTooltip (string lp_button, string lp_tooltipPath) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, "Tooltip", gv_pLAYER_01_USER, lp_tooltipPath);
}

void gf_RestoreButtonTooltip (string lp_button) {
    string autoFC84FDBE_val;

    // Variable Declarations
    string lv_originalText;

    // Variable Initialization
    lv_originalText = "";

    // Implementation
    autoFC84FDBE_val = lp_button;
    if (autoFC84FDBE_val == "Overlord") {
        lv_originalText = gv_overlord_OriginalTooltip;
    }
    else if (autoFC84FDBE_val == "Drone") {
        lv_originalText = gv_drone_OriginalTooltip;
    }
    else if (autoFC84FDBE_val == "Larva") {
        lv_originalText = gv_selectLarva_OriginalTooltip;
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, "Tooltip", gv_pLAYER_01_USER, lv_originalText);
}

bool gf_UnitHasOrder (unit lp_u, abilcmd lp_abilityCommand) {
    int auto0F8AD8A8_ae;
    int auto0F8AD8A8_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    auto0F8AD8A8_ae = UnitOrderCount(lp_u);
    auto0F8AD8A8_ai = 1;
    lv_index = 0;
    while ((auto0F8AD8A8_ai >= 0 && lv_index <= auto0F8AD8A8_ae) || (auto0F8AD8A8_ai <= 0 && lv_index >= auto0F8AD8A8_ae)) {
        if ((OrderGetAbilityCommand(UnitOrder(lp_u, lv_index)) == lp_abilityCommand)) {
            return true;
        }
        else {
        }
        if (lv_index == auto0F8AD8A8_ae) {
            break;
        }
        lv_index = lv_index + auto0F8AD8A8_ai;
    }
    return false;
}

void gf_StartTutorial (int lp_tutorialType) {
    // Implementation
    while (!((gv_gameOver == false) && (gv_inCinematic == false) && (gf_PlayerIsInCombat() == false) && (TriggerQueueIsEmpty() == true) && (gv_tutorialTypeGlobal == 0) && (libSwaC_gf_NeedOverlordHighlightOn() == false))) {
        Wait(1.0, c_timeGame);
    }
    gv_tutorialTypeGlobal = lp_tutorialType;
}

void gf_EndTutorial (int lp_tutorialType) {
    // Implementation
    if ((gv_tutorialTypeGlobal != lp_tutorialType)) {
        return ;
    }
    else {
    }
    gv_tutorialTypeGlobal = 0;
}

void gf_CreateSpawningPoolDroneHelper (bool lp_single) {
    int auto607D4CB5_ae;
    int auto607D4CB5_ai;

    // Variable Declarations
    unit lv_drone;
    int lv_index;
    text lv_hint;

    // Variable Initialization
    lv_drone = null;
    lv_index = 0;
    lv_hint = null;

    // Implementation
    if ((gv_spawningPool_NumberOfDroneActors > 0)) {
        return ;
    }
    else {
    }
    auto607D4CB5_ae = gv_spawningPool_NumberOfDroneActors;
    auto607D4CB5_ai = 1;
    lv_index = 1;
    while ((auto607D4CB5_ai >= 0 && lv_index <= auto607D4CB5_ae) || (auto607D4CB5_ai <= 0 && lv_index >= auto607D4CB5_ae)) {
        if ((gv_spawningPool_DroneActors[lv_index] != null)) {
            return ;
        }
        else {
        }
        if (lv_index == auto607D4CB5_ae) {
            break;
        }
        lv_index = lv_index + auto607D4CB5_ai;
    }
    gv_spawningPool_NumberOfDroneActors = 0;
    if ((lp_single == false)) {
        UnitGroupLoopBegin(UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            gv_spawningPool_NumberOfDroneActors += 1;
            libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 2, null, UnitGroupLoopCurrent(), "Origin");
            gv_spawningPool_DroneActors[gv_spawningPool_NumberOfDroneActors] = libNtve_gf_ActorLastCreated();
            if ((gv_spawningPool_NumberOfDroneActors >= 15)) {
                break;
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
        lv_hint = StringExternal("Param/Value/D373691E");
        gv_spawningPool_NumberOfDroneActors += 1;
        if ((gv_spawningPool_Drone != null) && (DistanceBetweenPoints(UnitGetPosition(gv_spawningPool_Drone), PointFromId(57)) <= 8.0)) {
            lv_drone = gv_spawningPool_Drone;
        }
        else {
            lv_drone = UnitGroupClosestToPoint(UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(57));
        }
        if ((lv_drone != null)) {
            libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 2, lv_hint, lv_drone, "Origin");
            gv_spawningPool_DroneActors[gv_spawningPool_NumberOfDroneActors] = libNtve_gf_ActorLastCreated();
            gv_spawningPool_DroneTextTag[gv_spawningPool_NumberOfDroneActors] = TextTagLastCreated();
        }
        else {
        }
    }
}

void gf_DestroySpawningPoolDroneHelper () {
    int auto99DB8C1D_ae;
    int auto99DB8C1D_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    auto99DB8C1D_ae = gv_spawningPool_NumberOfDroneActors;
    auto99DB8C1D_ai = 1;
    lv_index = 1;
    while ((auto99DB8C1D_ai >= 0 && lv_index <= auto99DB8C1D_ae) || (auto99DB8C1D_ai <= 0 && lv_index >= auto99DB8C1D_ae)) {
        if ((gv_spawningPool_DroneActors[lv_index] != null)) {
            libNtve_gf_KillModel(gv_spawningPool_DroneActors[lv_index]);
            gv_spawningPool_DroneActors[lv_index] = null;
        }
        else {
        }
        if ((gv_spawningPool_DroneTextTag[lv_index] != c_textTagNone)) {
            TextTagDestroy(gv_spawningPool_DroneTextTag[lv_index]);
            gv_spawningPool_DroneTextTag[lv_index] = c_textTagNone;
        }
        else {
        }
        if (lv_index == auto99DB8C1D_ae) {
            break;
        }
        lv_index = lv_index + auto99DB8C1D_ai;
    }
    gv_spawningPool_NumberOfDroneActors = 0;
}

void gf_CreateSpawningPoolHelper () {
    // Implementation
    if ((gv_spawningPool_PlacementModel != null)) {
        return ;
    }
    else {
    }
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(0, 1, StringExternal("Param/Value/6AAD0C25"), PointFromId(57));
    gv_spawningPool_PlacementModel = libNtve_gf_ActorLastCreated();
    gv_spawningPool_TextTag = TextTagLastCreated();
}

void gf_DestroySpawningPoolHelper () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    if ((gv_spawningPool_PlacementModel != null)) {
        libNtve_gf_KillModel(gv_spawningPool_PlacementModel);
        gv_spawningPool_PlacementModel = null;
    }
    else {
    }
    if ((gv_spawningPool_TextTag != c_textTagNone)) {
        TextTagDestroy(gv_spawningPool_TextTag);
        gv_spawningPool_TextTag = c_textTagNone;
    }
    else {
    }
}

void gf_CreateZerglingHatcheryHelper () {
    // Implementation
    if ((gv_zergling_Actor != null)) {
        return ;
    }
    else {
    }
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 0, StringExternal("Param/Value/669BA0F3"), UnitFromId(1), "Origin");
    gv_zergling_Actor = libNtve_gf_ActorLastCreated();
    gv_zergling_TextTag = TextTagLastCreated();
}

void gf_DestroyZerglingHatcheryHelper () {
    // Implementation
    if ((gv_zergling_Actor != null)) {
        libNtve_gf_KillModel(gv_zergling_Actor);
        gv_zergling_Actor = null;
    }
    else {
    }
    if ((gv_zergling_TextTag != c_textTagNone)) {
        TextTagDestroy(gv_zergling_TextTag);
        gv_zergling_TextTag = c_textTagNone;
    }
    else {
    }
}

void gf_CreateSpineCrawlerDroneHelper (bool lp_single) {
    int autoA8B9693A_ae;
    int autoA8B9693A_ai;

    // Variable Declarations
    unit lv_drone;
    int lv_index;
    text lv_hint;

    // Variable Initialization
    lv_drone = null;
    lv_index = 0;
    lv_hint = null;

    // Implementation
    if ((gv_spine_NumberOfDroneActors > 0)) {
        return ;
    }
    else {
    }
    autoA8B9693A_ae = gv_spine_NumberOfDroneActors;
    autoA8B9693A_ai = 1;
    lv_index = 1;
    while ((autoA8B9693A_ai >= 0 && lv_index <= autoA8B9693A_ae) || (autoA8B9693A_ai <= 0 && lv_index >= autoA8B9693A_ae)) {
        if ((gv_spine_DroneActors[lv_index] != null)) {
            return ;
        }
        else {
        }
        if (lv_index == autoA8B9693A_ae) {
            break;
        }
        lv_index = lv_index + autoA8B9693A_ai;
    }
    gv_spine_NumberOfDroneActors = 0;
    if ((lp_single == false)) {
        UnitGroupLoopBegin(UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            gv_spine_NumberOfDroneActors += 1;
            libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 2, null, UnitGroupLoopCurrent(), "Origin");
            gv_spine_DroneActors[gv_spine_NumberOfDroneActors] = libNtve_gf_ActorLastCreated();
            if ((gv_spine_NumberOfDroneActors >= 15)) {
                break;
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
        lv_hint = StringExternal("Param/Value/33AC9686");
        gv_spine_NumberOfDroneActors += 1;
        if ((gv_spine_Drone != null) && (DistanceBetweenPoints(UnitGetPosition(gv_spine_Drone), PointFromId(561)) <= 8.0)) {
            lv_drone = gv_spine_Drone;
        }
        else {
            lv_drone = UnitGroupClosestToPoint(UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(561));
        }
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 2, lv_hint, lv_drone, "Origin");
        gv_spine_DroneActors[gv_spine_NumberOfDroneActors] = libNtve_gf_ActorLastCreated();
        gv_spine_DroneTextTag[gv_spine_NumberOfDroneActors] = TextTagLastCreated();
    }
}

void gf_DestroySpineCrawlerDroneHelper () {
    int autoFABCA7AE_ae;
    int autoFABCA7AE_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    autoFABCA7AE_ae = gv_spine_NumberOfDroneActors;
    autoFABCA7AE_ai = 1;
    lv_index = 1;
    while ((autoFABCA7AE_ai >= 0 && lv_index <= autoFABCA7AE_ae) || (autoFABCA7AE_ai <= 0 && lv_index >= autoFABCA7AE_ae)) {
        if ((gv_spine_DroneActors[lv_index] != null)) {
            libNtve_gf_KillModel(gv_spine_DroneActors[lv_index]);
            gv_spine_DroneActors[lv_index] = null;
        }
        else {
        }
        if ((gv_spine_DroneTextTag[lv_index] != c_textTagNone)) {
            TextTagDestroy(gv_spine_DroneTextTag[lv_index]);
            gv_spine_DroneTextTag[lv_index] = c_textTagNone;
        }
        else {
        }
        if (lv_index == autoFABCA7AE_ae) {
            break;
        }
        lv_index = lv_index + autoFABCA7AE_ai;
    }
    gv_spine_NumberOfDroneActors = 0;
}

void gf_CreateSpineCrawlerHelper () {
    // Implementation
    if ((gv_spine_PlacementModel != null)) {
        return ;
    }
    else {
    }
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(0, 1, StringExternal("Param/Value/11ED00B2"), PointFromId(561));
    gv_spine_PlacementModel = libNtve_gf_ActorLastCreated();
    gv_spine_TextTag = TextTagLastCreated();
}

void gf_DestroySpineCrawlerHelper () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    if ((gv_spine_PlacementModel != null)) {
        libNtve_gf_KillModel(gv_spine_PlacementModel);
        gv_spine_PlacementModel = null;
    }
    else {
    }
    if ((gv_spine_TextTag != c_textTagNone)) {
        TextTagDestroy(gv_spine_TextTag);
        gv_spine_TextTag = c_textTagNone;
    }
    else {
    }
}

trigger auto_gf_PingNydusWorm_Trigger = null;
point auto_gf_PingNydusWorm_lp_nydusPoint;

void gf_PingNydusWorm (point lp_nydusPoint) {
    auto_gf_PingNydusWorm_lp_nydusPoint = lp_nydusPoint;

    if (auto_gf_PingNydusWorm_Trigger == null) {
        auto_gf_PingNydusWorm_Trigger = TriggerCreate("auto_gf_PingNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_PingNydusWorm_Trigger, false, false);
}

bool auto_gf_PingNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    point lp_nydusPoint = auto_gf_PingNydusWorm_lp_nydusPoint;

    // Variable Declarations
    int lv_nydusPing;

    // Variable Initialization
    lv_nydusPing = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", lp_nydusPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/762330D5"));
    PingSetScale(PingLastCreated(), 0.5);
    lv_nydusPing = PingLastCreated();
    Wait(10.0, c_timeAI);
    while (!((UnitGroupCount(UnitGroup("Queen", gv_pLAYER_01_USER, RegionCircle(lp_nydusPoint, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(lv_nydusPing);
    return true;
}

unit gf_AITargetNextHut (int lp_attackVector) {
    int auto0FF24CAA_val;

    // Variable Declarations
    unit lv_tARGET;

    // Variable Initialization
    lv_tARGET = null;

    // Implementation
    auto0FF24CAA_val = lp_attackVector;
    if (auto0FF24CAA_val == 0) {
        if ((UnitIsAlive(UnitFromId(66)) == true)) {
            lv_tARGET = UnitFromId(66);
        }
        else {
            if ((UnitIsAlive(UnitFromId(213)) == true)) {
                lv_tARGET = UnitFromId(213);
            }
            else {
                if ((UnitIsAlive(UnitFromId(85)) == true)) {
                    lv_tARGET = UnitFromId(85);
                }
                else {
                }
            }
        }
    }
    else if (auto0FF24CAA_val == 1) {
        if ((UnitIsAlive(UnitFromId(180)) == true)) {
            lv_tARGET = UnitFromId(180);
        }
        else {
            if ((UnitIsAlive(UnitFromId(416)) == true)) {
                lv_tARGET = UnitFromId(416);
            }
            else {
            }
        }
    }
    else {
        lv_tARGET = UnitFromId(1);
    }
    return lv_tARGET;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZLab3");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libSwaC_gf_EnableCampaignTechUnit(true, "Queen", gv_pLAYER_01_USER);
    libSwaC_gf_EnableCampaignTechUnit(true, "SpineCrawler", gv_pLAYER_01_USER);
    libSwaC_gf_EnableCampaignTechUnit(true, "SporeCrawler", gv_pLAYER_01_USER);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_03_DOMINION_MAIN);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_04_DOMINION_RIGHT);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_07_DOMINION_LEFT);
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MorphToHellionTank", 0), false);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "SiegeTech", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;
    playergroup lv_visionGroup02;

    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();
    lv_visionGroup02 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_RESCUEZERG, 9);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_DOMINION_MAIN, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_DOMINION_RIGHT, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_INFESTED, 8);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_DOMINION_LEFT, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RESCUEZERG, gv_pLAYER_03_DOMINION_MAIN, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RESCUEZERG, gv_pLAYER_04_DOMINION_RIGHT, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RESCUEZERG, gv_pLAYER_05_INFESTED, 8);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RESCUEZERG, gv_pLAYER_07_DOMINION_LEFT, 5);
    libNtve_gf_SetAlliance(gv_pLAYER_05_INFESTED, gv_pLAYER_03_DOMINION_MAIN, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_05_INFESTED, gv_pLAYER_04_DOMINION_RIGHT, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_05_INFESTED, gv_pLAYER_07_DOMINION_LEFT, 7);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DOMINION_MAIN, gv_pLAYER_04_DOMINION_RIGHT, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DOMINION_MAIN, gv_pLAYER_07_DOMINION_LEFT, 2);
    libNtve_gf_SetAlliance(gv_pLAYER_04_DOMINION_RIGHT, gv_pLAYER_07_DOMINION_LEFT, 2);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_RESCUEZERG);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_03_DOMINION_MAIN);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_04_DOMINION_RIGHT);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_07_DOMINION_LEFT);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_05_INFESTED);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup02);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 75);
    PlayerModifyPropertyInt(gv_pLAYER_03_DOMINION_MAIN, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_DOMINION_MAIN, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_DOMINION_RIGHT, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_DOMINION_RIGHT, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_07_DOMINION_LEFT, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_07_DOMINION_LEFT, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_pLAYER_03_DOMINION_MAIN, 1, true);
    PlayerSetColorIndex(gv_pLAYER_04_DOMINION_RIGHT, 1, true);
    PlayerSetColorIndex(gv_pLAYER_07_DOMINION_LEFT, 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "KerriganGhostLab", 0, gv_pLAYER_01_USER, PointFromId(574), 270.0);
    libSwaC_gf_RegisterCampaignKerrigan(UnitLastCreated());
    gv_kerrigan = UnitLastCreated();
    UnitStatusBarOverride(gv_kerrigan, c_unitStatusGroupAll);
    libSwaC_gf_SetHeroPanelUnit(1, gv_kerrigan);
    gv_pulseCannonUnit = UnitFromId(99);
    libSwaC_gf_SetUnitInfoTextCampaign(gv_pulseCannonUnit, StringExternal("Param/Value/02FFECD2"), StringExternal("Param/Value/CED573F5"), null);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_gunPathingBlockers, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(1), PointFromId(80));
    UnitGroupLoopBegin(UnitGroup("SiegeTank", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SiegeTankSieged", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetTeamColorIndex(UnitFromId(254), 2);
    UnitSetState(UnitFromId(254), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(254), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(254), c_unitStateSelectable, false);
    UnitSetTeamColorIndex(UnitFromId(254), 2);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(254), null, StringExternal("Param/Value/E29C91C6"), null);
    UnitGroupLoopBegin(UnitGroup("ColonistHutDecayedUnit", gv_pLAYER_05_INFESTED, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, 300.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, RandomFixed(82.0, 92.0));
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "MakeCreep5x5", UnitGroupLoopCurrent(), 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ColonyInfestation", UnitGroupLoopCurrent(), 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ZergBuildingDies6", UnitGroupLoopCurrent(), 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Harmless", UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_DOMINION_RIGHT, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_aI_FirstAttackWave, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("DesertPlanetSearchlight", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, 8.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("DestructibleSandbags", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, 8.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("DestructibleBullhornLights", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, 8.0);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_dominionFlavorMarine = UnitFromId(423);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_rescue_DominionCenter, UnitGroupLoopCurrent());
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(781)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(52)), c_orderQueueReplace);
        UnitGroupAdd(gv_rescue_DominionLeft, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(146)), c_orderQueueReplace);
        UnitGroupAdd(gv_rescue_DominionRight, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            gf_CreateInfoText(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("VespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            gf_CreateInfoText(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("VespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            gf_CreateInfoText(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    gv_selectLarva_OriginalTooltip = CatalogFieldValueGet(c_gameCatalogButton, "Larva", "Tooltip", gv_pLAYER_01_USER);
    gv_overlord_OriginalTooltip = CatalogFieldValueGet(c_gameCatalogButton, "Overlord", "Tooltip", gv_pLAYER_01_USER);
    gv_drone_OriginalTooltip = CatalogFieldValueGet(c_gameCatalogButton, "Drone", "Tooltip", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZLab03MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libNtve_gf_AttachActorToUnit(UnitFromId(52), "ZergCavesLoopSound", "Center");
    gv_rescue_SoundLeft = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachActorToUnit(UnitFromId(146), "ZergCavesLoopSound", "Center");
    gv_rescue_SoundRight = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachActorToUnit(UnitFromId(781), "ZergCavesLoopSound", "Center");
    gv_rescue_SoundCenter = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(40), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(42), RegionFromId(42), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_reinforcementCount = libNtve_gf_DifficultyValueInt(35, 35, 25, 20);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        PlayerGroupLoopBegin(gv_dominionPlayers);
        while (!PlayerGroupLoopDone()) {
            TechTreeUpgradeAllow(PlayerGroupLoopCurrent(), "CombatShield", true);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShieldWall", 1);
            TechTreeUpgradeAllow(PlayerGroupLoopCurrent(), "JackhammerConcussionGrenades", true);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "PunisherGrenades", 1);
            PlayerGroupLoopStep();
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Base Defense (Lab03)");
    libSwaC_gf_AddMissionTipUserData("Spine Crawlers");
    libSwaC_gf_AddMissionTipUserData("Spore Crawlers");
    libSwaC_gf_AddMissionTipUserData("Vespene Geyser");
    libSwaC_gf_AddMissionTipUserData("Extractor");
    libSwaC_gf_AddMissionTipUserData("Swarm Queen");
    libSwaC_gf_AddMissionTipUserData("Game (Lab03)");
    libSwaC_gf_AddMissionTipUserData("Mission");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG_Skip Timer
//--------------------------------------------------------------------------------------------------
bool gt_DEBUG_SkipTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TransmissionReinforcementsClose1Q, false);
    TriggerEnable(gt_TransmissionReinforcementsClose2Q, false);
    TriggerDebugOutput(1, StringExternal("Param/Value/3703D643"), true);
    TimerStart(gv_reinforcement_Timer, 3.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUG_SkipTimer_Init () {
    gt_DEBUG_SkipTimer = TriggerCreate("gt_DEBUG_SkipTimer_Func");
    TriggerAddEventChatMessage(gt_DEBUG_SkipTimer, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_inCombatIndicator == 0))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCombatIndicator = 4;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCombatIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Kerrigan Death
//--------------------------------------------------------------------------------------------------
bool gt_HandleKerriganDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleKerriganDeath_Init () {
    gt_HandleKerriganDeath = TriggerCreate("gt_HandleKerriganDeath_Func");
    TriggerAddEventUnitDied(gt_HandleKerriganDeath, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broodlings Spawn From Hut Death
//--------------------------------------------------------------------------------------------------
bool gt_BroodlingsSpawnFromHutDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Broodling"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), gv_pLAYER_02_RESCUEZERG, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodlingsSpawnFromHutDeath_Init () {
    gt_BroodlingsSpawnFromHutDeath = TriggerCreate("gt_BroodlingsSpawnFromHutDeath_Func");
    TriggerAddEventUnitRegion(gt_BroodlingsSpawnFromHutDeath, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Used
//--------------------------------------------------------------------------------------------------
bool gt_CreepTumorUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepTumorUsed_Init () {
    gt_CreepTumorUsed = TriggerCreate("gt_CreepTumorUsed_Func");
    TriggerAddEventUnitAbility(gt_CreepTumorUsed, null, AbilityCommand("CreepTumorUsed", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach Info Text (Player) Training
//--------------------------------------------------------------------------------------------------
bool gt_AttachInfoTextPlayerTraining_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Egg"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttachInfoTextPlayerTraining_Init () {
    gt_AttachInfoTextPlayerTraining = TriggerCreate("gt_AttachInfoTextPlayerTraining_Func");
    TriggerAddEventUnitTrainProgress(gt_AttachInfoTextPlayerTraining, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage01Q_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_structuresDestroyedS1Max = UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/94436C89"), null, CameraInfoGetTarget(CameraInfoFromId(572)));
    TriggerExecute(gt_StartHarvesting, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveHoldOutCreate, true, true);
    TriggerExecute(gt_CreateTimerWindowReinforcements, true, false);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionStage01OpeningQ, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    TriggerExecute(gt_SpawningPoolLesson, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage01Q_Init () {
    gt_StartGameStage01Q = TriggerCreate("gt_StartGameStage01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Harvesting
//--------------------------------------------------------------------------------------------------
bool gt_StartHarvesting_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(28), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartHarvesting_Init () {
    gt_StartHarvesting = TriggerCreate("gt_StartHarvesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Stage 01 Opening Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStage01OpeningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab03|Line00113", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStage01OpeningQ_Init () {
    gt_TransmissionStage01OpeningQ = TriggerCreate("gt_TransmissionStage01OpeningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 02
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_CreateNydusWorm3, true);
    TriggerEnable(gt_CreateNydusWorm4, true);
    TriggerEnable(gt_CreateNydusWormNaktul, true);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyPulseCannonCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_ShowArmyButtonQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage02_Init () {
    gt_StartGameStage02 = TriggerCreate("gt_StartGameStage02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Army Button Q
//--------------------------------------------------------------------------------------------------
bool gt_ShowArmyButtonQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00205", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(3.0, c_timeGame);
    libSwaC_gf_DisplayArmyButton(true);
    TriggerExecute(gt_ArmyButtonMusicStinger, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowArmyButtonQ_Init () {
    gt_ShowArmyButtonQ = TriggerCreate("gt_ShowArmyButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Army Button Music Stinger
//--------------------------------------------------------------------------------------------------
bool gt_ArmyButtonMusicStinger_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zlab03MusicStinger", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmyButtonMusicStinger_Init () {
    gt_ArmyButtonMusicStinger = TriggerCreate("gt_ArmyButtonMusicStinger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Unit Spawned
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitSpawned_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "Queen")) {
        if ((gv_tHE_ONE_QUEEN == null)) {
            gv_tHE_ONE_QUEEN = EventUnitCreatedUnit();
        }
        else {
        }
        UnitGroupAdd(gv_queenGroup, EventUnitCreatedUnit());
    }
    else {
    }
    if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
        gf_CreateInfoText(EventUnitCreatedUnit());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitSpawned_Init () {
    gt_PlayerUnitSpawned = TriggerCreate("gt_PlayerUnitSpawned_Func");
    TriggerAddEventUnitCreated(gt_PlayerUnitSpawned, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Unit Morphed
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitMorphed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitMorphed_Init () {
    gt_PlayerUnitMorphed = TriggerCreate("gt_PlayerUnitMorphed_Func");
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("SpineCrawlerRoot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("SpineCrawlerUproot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("SporeCrawlerRoot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("SporeCrawlerUproot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("BurrowDroneDown", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("BurrowDroneUp", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("BurrowQueenDown", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("BurrowQueenUp", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("BurrowZerglingDown", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_PlayerUnitMorphed, null, AbilityCommand("BurrowZerglingUp", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Sandbag Crushing
//--------------------------------------------------------------------------------------------------
bool gt_QueenSandbagCrushing_Func (bool testConds, bool runActions) {
    unitgroup auto8DE82930_g;
    int auto8DE82930_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization
    lv_indexUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8DE82930_g = gv_queenGroup;
    auto8DE82930_u = 1;
    while (auto8DE82930_u <= UnitGroupCount(auto8DE82930_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(auto8DE82930_g, auto8DE82930_u);
        UnitGroupLoopBegin(UnitGroup("DestructibleSandbags", c_playerAny, RegionCircle(UnitGetPosition(lv_indexUnit), 1.75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitKill(UnitGroupLoopCurrent());
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if (lv_indexUnit == UnitGroupUnit(auto8DE82930_g, auto8DE82930_u)) {
            auto8DE82930_u = auto8DE82930_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenSandbagCrushing_Init () {
    gt_QueenSandbagCrushing = TriggerCreate("gt_QueenSandbagCrushing_Func");
    TriggerAddEventTimePeriodic(gt_QueenSandbagCrushing, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool: Lesson
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolLesson_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartTutorial(1);
    if ((gv_spawningPoolBuildingStarted == true)) {
        gf_EndTutorial(1);
        return true;
    }
    else {
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), true);
    TriggerEnable(gt_SpawningPoolDroneIssuedOrder, true);
    if ((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == false)) {
        gf_CreateSpawningPoolDroneHelper(false);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2BE5D96F"), null, PointFromId(526));
    }
    else {
    }
    TriggerExecute(gt_SpawningPoolMutationUIUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolLesson_Init () {
    gt_SpawningPoolLesson = TriggerCreate("gt_SpawningPoolLesson_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool: Drone Issued Order
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolDroneIssuedOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_spawningPool_Drone = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolDroneIssuedOrder_Init () {
    gt_SpawningPoolDroneIssuedOrder = TriggerCreate("gt_SpawningPoolDroneIssuedOrder_Func");
    TriggerEnable(gt_SpawningPoolDroneIssuedOrder, false);
    TriggerAddEventUnitOrder(gt_SpawningPoolDroneIssuedOrder, null, AbilityCommand("ZergBuild", 3));
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawningPool: Started
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "SpawningPool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_spawningPool_ButtonPressed = true;
    gv_spawningPoolBuildingStarted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolStarted_Init () {
    gt_SpawningPoolStarted = TriggerCreate("gt_SpawningPoolStarted_Func");
    TriggerAddEventUnitConstructProgress(gt_SpawningPoolStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawningPool: Canceled
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolCanceled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SpawningPool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spawningPool_ButtonPressed = false;
    gv_spawningPoolBuildingStarted = false;
    TriggerEnable(gt_SpawningPoolStarted, true);
    TriggerEnable(gt_SpawningPoolDroneIssuedOrder, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolCanceled_Init () {
    gt_SpawningPoolCanceled = TriggerCreate("gt_SpawningPoolCanceled_Func");
    TriggerAddEventUnitOrder(gt_SpawningPoolCanceled, null, AbilityCommand("BuildInProgress", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawningPool: Completed
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "SpawningPool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_spawningPoolBuildingCompleted = true;
    TriggerEnable(gt_SpawningPoolCanceled, false);
    Wait(5.0, c_timeGame);
    gf_EndTutorial(1);
    TriggerExecute(gt_ZerglingLesson, true, true);
    TriggerExecute(gt_SpineCrawlerLesson, true, true);
    while (!((gv_queen_LessonTimer != null) && (TimerGetRemaining(gv_queen_LessonTimer) == 0.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_QueenLesson, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolCompleted_Init () {
    gt_SpawningPoolCompleted = TriggerCreate("gt_SpawningPoolCompleted_Func");
    TriggerAddEventUnitConstructProgress(gt_SpawningPoolCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawning Pool Mutation UI Update
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPoolMutationUIUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }
        else {
        }
        if ((gv_spawningPoolBuildingCompleted == true)) {
            gf_DestroySpawningPoolDroneHelper();
            gf_DestroySpawningPoolHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), false);
            return true;
        }
        else {
        }
        if ((gv_spawningPoolBuildingStarted == false)) {
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), true);
            if ((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == false)) {
                if (((gv_spawningPool_Drone == null) || (gf_UnitHasOrder(gv_spawningPool_Drone, AbilityCommand("ZergBuild", 3)) == false))) {
                    gf_CreateSpawningPoolDroneHelper(true);
                    gf_DestroySpawningPoolHelper();
                }
                else {
                }
            }
            else {
                gf_DestroySpawningPoolDroneHelper();
                gf_CreateSpawningPoolHelper();
            }
        }
        else {
            gf_DestroySpawningPoolDroneHelper();
            gf_DestroySpawningPoolHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 3), false);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPoolMutationUIUpdate_Init () {
    gt_SpawningPoolMutationUIUpdate = TriggerCreate("gt_SpawningPoolMutationUIUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling: Lesson
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingLesson_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hatcherySelected;
    bool lv_larvaSelected;

    // Variable Initialization
    lv_hatcherySelected = false;
    lv_larvaSelected = false;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_UnitGroupIsDead(gv_aI_FirstAttackWave) == true))) {
        Wait(1.0, c_timeGame);
    }
    gf_StartTutorial(2);
    if ((gv_zergling_ButtonPressed == true)) {
        gf_EndTutorial(2);
        return true;
    }
    else {
    }
    while (!((gv_spawningPoolBuildingCompleted == true))) {
        Wait(1.0, c_timeGame);
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_TransmissionZerglingReminderQ, true, true);
        Wait(15.0, c_timeReal);
        gf_EndTutorial(2);
        return true;
    }
    else {
        TriggerExecute(gt_TransmissionZerglingReminderQ, true, false);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 1), true);
    libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
    if ((gv_zergling_ButtonPressed == true)) {
        gf_EndTutorial(2);
        return true;
    }
    else {
    }
    TriggerExecute(gt_ZerglingMorphUIUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingLesson_Init () {
    gt_ZerglingLesson = TriggerCreate("gt_ZerglingLesson_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling: Started
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Zergling"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 1), false);
    libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
    gv_zergling_ButtonPressed = true;
    Wait(5.0, c_timeGame);
    gf_EndTutorial(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingStarted_Init () {
    gt_ZerglingStarted = TriggerCreate("gt_ZerglingStarted_Func");
    TriggerAddEventUnitTrainProgress(gt_ZerglingStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling: Completed
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Zergling"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    gf_EndTutorial(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingCompleted_Init () {
    gt_ZerglingCompleted = TriggerCreate("gt_ZerglingCompleted_Func");
    TriggerAddEventUnitTrainProgress(gt_ZerglingCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zergling Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZerglingReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab03|Line00181", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZerglingReminderQ_Init () {
    gt_TransmissionZerglingReminderQ = TriggerCreate("gt_TransmissionZerglingReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Morph UI Update
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingMorphUIUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }
        else {
        }
        if ((gv_zergling_ButtonPressed == true)) {
            gf_DestroyZerglingHatcheryHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 1), false);
            libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
            return true;
        }
        else {
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 1), true);
            if ((libNtve_gf_UnitTypeIsSelected("Larva", gv_pLAYER_01_USER) == false)) {
                libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
                if ((libNtve_gf_UnitTypeIsSelected("Hatchery", gv_pLAYER_01_USER) == false)) {
                    gf_CreateZerglingHatcheryHelper();
                }
                else {
                    gf_DestroyZerglingHatcheryHelper();
                }
            }
            else {
                libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
                gf_DestroyZerglingHatcheryHelper();
            }
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingMorphUIUpdate_Init () {
    gt_ZerglingMorphUIUpdate = TriggerCreate("gt_ZerglingMorphUIUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler: Lesson
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerLesson_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_anyDronesSelected;

    // Variable Initialization
    lv_anyDronesSelected = false;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartTutorial(3);
    if ((gv_spine_MorphStarted == true)) {
        gf_EndTutorial(3);
        return true;
    }
    else {
    }
    while (!((gv_spawningPoolBuildingCompleted == true))) {
        Wait(1.0, c_timeGame);
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_TransmissionSpineCrawlerQ, true, true);
        Wait(15.0, c_timeReal);
        gf_EndTutorial(3);
        return true;
    }
    else {
        TriggerExecute(gt_TransmissionSpineCrawlerQ, true, false);
    }
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        lv_anyDronesSelected = libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER);
        if ((lv_anyDronesSelected == false)) {
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/52032043"), null, PointFromId(526));
            gf_CreateSpineCrawlerDroneHelper(false);
        }
        else {
        }
        TriggerEnable(gt_SpineCrawlerButtonPressed, true);
        TriggerEnable(gt_SpineCrawlerDroneIssuedOrder, true);
    }
    else {
    }
    TriggerExecute(gt_SpineCrawlerMutationUIUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerLesson_Init () {
    gt_SpineCrawlerLesson = TriggerCreate("gt_SpineCrawlerLesson_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler: Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerButtonPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= UnitTypeGetCost("SpineCrawler", c_unitCostMinerals)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(730), 1.5, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerButtonPressed_Init () {
    gt_SpineCrawlerButtonPressed = TriggerCreate("gt_SpineCrawlerButtonPressed_Func");
    TriggerEnable(gt_SpineCrawlerButtonPressed, false);
    TriggerAddEventButtonPressed(gt_SpineCrawlerButtonPressed, gv_pLAYER_01_USER, "SpineCrawler");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler: Drone Issued Order
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerDroneIssuedOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_spine_Drone = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerDroneIssuedOrder_Init () {
    gt_SpineCrawlerDroneIssuedOrder = TriggerCreate("gt_SpineCrawlerDroneIssuedOrder_Func");
    TriggerEnable(gt_SpineCrawlerDroneIssuedOrder, false);
    TriggerAddEventUnitOrder(gt_SpineCrawlerDroneIssuedOrder, null, AbilityCommand("ZergBuild", 14));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler: Started
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "SpineCrawler"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_spine_MorphStarted = true;
    TriggerEnable(gt_SpineCrawlerButtonPressed, false);
    TriggerEnable(gt_SpineCrawlerDroneIssuedOrder, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerStarted_Init () {
    gt_SpineCrawlerStarted = TriggerCreate("gt_SpineCrawlerStarted_Func");
    TriggerAddEventUnitConstructProgress(gt_SpineCrawlerStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler: Canceled
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerCanceled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SpineCrawler"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spine_MorphStarted = false;
    TriggerEnable(gt_SpineCrawlerButtonPressed, true);
    TriggerEnable(gt_SpineCrawlerDroneIssuedOrder, true);
    TriggerEnable(gt_SpineCrawlerStarted, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerCanceled_Init () {
    gt_SpineCrawlerCanceled = TriggerCreate("gt_SpineCrawlerCanceled_Func");
    TriggerAddEventUnitOrder(gt_SpineCrawlerCanceled, null, AbilityCommand("BuildInProgress", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler: Complete
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "SpineCrawler"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SpineCrawlerCanceled, false);
    gv_spine_SpineCrawlerCompleted = true;
    Wait(5.0, c_timeGame);
    gf_EndTutorial(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerComplete_Init () {
    gt_SpineCrawlerComplete = TriggerCreate("gt_SpineCrawlerComplete_Func");
    TriggerAddEventUnitConstructProgress(gt_SpineCrawlerComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Spine CrawlerQ
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSpineCrawlerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab03|Line00188", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSpineCrawlerQ_Init () {
    gt_TransmissionSpineCrawlerQ = TriggerCreate("gt_TransmissionSpineCrawlerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Spine Crawlers West Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSpineCrawlersWestQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab03|Line00178", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSpineCrawlersWestQ_Init () {
    gt_TransmissionSpineCrawlersWestQ = TriggerCreate("gt_TransmissionSpineCrawlersWestQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler Mutation UI Update
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerMutationUIUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            return true;
        }
        else {
        }
        if ((gv_spine_SpineCrawlerCompleted == true)) {
            gf_DestroySpineCrawlerDroneHelper();
            gf_DestroySpineCrawlerHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 14), false);
            return true;
        }
        else {
        }
        if ((gv_spine_MorphStarted == false)) {
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 14), true);
            if ((libNtve_gf_UnitTypeIsSelected("Drone", gv_pLAYER_01_USER) == false)) {
                if (((gv_spine_Drone == null) || (gf_UnitHasOrder(gv_spine_Drone, AbilityCommand("ZergBuild", 14)) == false))) {
                    gf_CreateSpineCrawlerDroneHelper(true);
                    gf_DestroySpineCrawlerHelper();
                }
                else {
                }
            }
            else {
                gf_DestroySpineCrawlerDroneHelper();
                gf_CreateSpineCrawlerHelper();
            }
        }
        else {
            gf_DestroySpineCrawlerDroneHelper();
            gf_DestroySpineCrawlerHelper();
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 14), false);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerMutationUIUpdate_Init () {
    gt_SpineCrawlerMutationUIUpdate = TriggerCreate("gt_SpineCrawlerMutationUIUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen: Lesson
//--------------------------------------------------------------------------------------------------
bool gt_QueenLesson_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hatcherySelected;

    // Variable Initialization
    lv_hatcherySelected = false;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartTutorial(4);
    if ((gv_queen_ButtonPressed == true)) {
        gf_EndTutorial(4);
        return true;
    }
    else {
    }
    while (!((gv_spawningPoolBuildingCompleted == true) && (TechTreeUnitCount(gv_pLAYER_01_USER, "Larva", c_techCountCompleteOnly) > 0))) {
        Wait(1.0, c_timeGame);
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_TransmissionQueenLessonQ, true, true);
        Wait(15.0, c_timeReal);
        gf_EndTutorial(4);
        return true;
    }
    else {
        TriggerExecute(gt_TransmissionQueenLessonQ, true, false);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("TrainQueen", 0), true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CD73D9F5"), null, PointFromId(526));
    UnitGroupLoopBegin(UnitGroupSelected(gv_pLAYER_01_USER));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Hatchery")) {
            lv_hatcherySelected = true;
            TriggerExecute(gt_QueenHatcherySelected, false, false);
            break;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_hatcherySelected == false)) {
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 0, null, UnitFromId(1), "Origin");
        gv_queen_Actor = libNtve_gf_ActorLastCreated();
        TriggerEnable(gt_QueenHatcherySelected, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenLesson_Init () {
    gt_QueenLesson = TriggerCreate("gt_QueenLesson_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen: Hatchery Selected
//--------------------------------------------------------------------------------------------------
bool gt_QueenHatcherySelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Larva")))) {
            return false;
        }

        if (!((gv_queen_ButtonPressed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_queen_Actor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenHatcherySelected_Init () {
    gt_QueenHatcherySelected = TriggerCreate("gt_QueenHatcherySelected_Func");
    TriggerEnable(gt_QueenHatcherySelected, false);
    TriggerAddEventUnitSelected(gt_QueenHatcherySelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen: Started
//--------------------------------------------------------------------------------------------------
bool gt_QueenStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Queen"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_queen_ButtonPressed = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("TrainQueen", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenStarted_Init () {
    gt_QueenStarted = TriggerCreate("gt_QueenStarted_Func");
    TriggerAddEventUnitTrainProgress(gt_QueenStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen: Completed
//--------------------------------------------------------------------------------------------------
bool gt_QueenCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Queen"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_queen_Completed = true;
    TimerStart(gv_extractor_LessonTimer, 50.0, false, c_timeAI);
    Wait(5.0, c_timeGame);
    gf_EndTutorial(4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenCompleted_Init () {
    gt_QueenCompleted = TriggerCreate("gt_QueenCompleted_Func");
    TriggerAddEventUnitTrainProgress(gt_QueenCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Queen Lesson Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionQueenLessonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_queen_ButtonPressed == false)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00174", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionQueenLessonQ_Init () {
    gt_TransmissionQueenLessonQ = TriggerCreate("gt_TransmissionQueenLessonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extractor: Lesson
//--------------------------------------------------------------------------------------------------
bool gt_ExtractorLesson_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_anyDronesSelected;

    // Variable Initialization
    lv_anyDronesSelected = false;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StartTutorial(5);
    if ((gv_extractor_ButtonPressed == true)) {
        gf_EndTutorial(5);
        return true;
    }
    else {
    }
    TriggerExecute(gt_TransmissionBuildExtractorQ, true, false);
    Wait(5.0, c_timeGame);
    if ((gv_extractor_ButtonPressed == true)) {
        gf_EndTutorial(5);
        return true;
    }
    else {
    }
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 1, StringExternal("Param/Value/FFDEF228"), UnitFromId(545), "Origin");
    gv_extractor_Actor = libNtve_gf_ActorLastCreated();
    gv_extractorText = TextTagLastCreated();
    UnitGroupLoopBegin(UnitGroupSelected(gv_pLAYER_01_USER));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Drone")) {
            lv_anyDronesSelected = true;
            TriggerExecute(gt_ExtractorDroneSelected, false, false);
            break;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_anyDronesSelected == false)) {
        UnitGroupLoopBegin(UnitGroup("Drone", gv_pLAYER_01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0066D2EF"), "Assets\\Textures\\btn-unit-zerg-drone.dds", PointFromId(526));
            libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 2, null, UnitGroupLoopCurrent(), "Origin");
            gv_extractor_NumberOfDroneActors += 1;
            gv_extractor_DroneActors[gv_extractor_NumberOfDroneActors] = libNtve_gf_ActorLastCreated();
            if ((gv_extractor_NumberOfDroneActors >= 15)) {
                break;
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        TriggerEnable(gt_ExtractorDroneSelected, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtractorLesson_Init () {
    gt_ExtractorLesson = TriggerCreate("gt_ExtractorLesson_Func");
    TriggerAddEventTimer(gt_ExtractorLesson, gv_extractor_LessonTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Build Extractor Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBuildExtractorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00118", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBuildExtractorQ_Init () {
    gt_TransmissionBuildExtractorQ = TriggerCreate("gt_TransmissionBuildExtractorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extractor: Drone Selected
//--------------------------------------------------------------------------------------------------
bool gt_ExtractorDroneSelected_Func (bool testConds, bool runActions) {
    int auto3F4DE62F_ae;
    int auto3F4DE62F_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 2), true);
    auto3F4DE62F_ae = gv_extractor_NumberOfDroneActors;
    auto3F4DE62F_ai = 1;
    lv_i = 1;
    while ((auto3F4DE62F_ai >= 0 && lv_i <= auto3F4DE62F_ae) || (auto3F4DE62F_ai <= 0 && lv_i >= auto3F4DE62F_ae)) {
        libNtve_gf_KillModel(gv_extractor_DroneActors[lv_i]);
        if (lv_i == auto3F4DE62F_ae) {
            break;
        }
        lv_i = lv_i + auto3F4DE62F_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtractorDroneSelected_Init () {
    gt_ExtractorDroneSelected = TriggerCreate("gt_ExtractorDroneSelected_Func");
    TriggerEnable(gt_ExtractorDroneSelected, false);
    TriggerAddEventUnitSelected(gt_ExtractorDroneSelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extractor: Started
//--------------------------------------------------------------------------------------------------
bool gt_ExtractorStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Extractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_extractor_ButtonPressed = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ZergBuild", 2), false);
    libNtve_gf_KillModel(gv_extractor_Actor);
    TextTagDestroy(gv_extractorText);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtractorStarted_Init () {
    gt_ExtractorStarted = TriggerCreate("gt_ExtractorStarted_Func");
    TriggerAddEventUnitConstructProgress(gt_ExtractorStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extractor: Complete
//--------------------------------------------------------------------------------------------------
bool gt_ExtractorComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Extractor"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    gf_EndTutorial(5);
    Wait(3.0, c_timeGame);
    if ((gv_extractor_GasCollected == false)) {
        while (!((gf_PlayerIsInCombat() == false))) {
            Wait(1.0, c_timeGame);
        }
        TriggerExecute(gt_TransmissionDronesHarvestGasQ, true, true);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/0676462D"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtractorComplete_Init () {
    gt_ExtractorComplete = TriggerCreate("gt_ExtractorComplete_Func");
    TriggerAddEventUnitConstructProgress(gt_ExtractorComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collect Gas Order Issued
//--------------------------------------------------------------------------------------------------
bool gt_CollectGasOrderIssued_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "Extractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_extractor_GasCollected = true;
    UnitGroupLoopBegin(UnitGroup("Extractor", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libHots_gf_DifficultyValueSwarmBoolean(true, true, false) == true)) {
            gf_CreateInfoText(OrderGetTargetUnit(EventUnitOrder()));
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectGasOrderIssued_Init () {
    gt_CollectGasOrderIssued = TriggerCreate("gt_CollectGasOrderIssued_Func");
    TriggerAddEventUnitOrder(gt_CollectGasOrderIssued, null, AbilityCommand("DroneHarvest", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Drones Harvest Gas Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDronesHarvestGasQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00149", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDronesHarvestGasQ_Init () {
    gt_TransmissionDronesHarvestGasQ = TriggerCreate("gt_TransmissionDronesHarvestGasQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord: Lesson
//--------------------------------------------------------------------------------------------------
bool gt_OverlordLesson_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hatcherySelected;
    bool lv_larvaSelected;
    text lv_newTooltip;
    text lv_newSelectLarvaTooltip;

    // Variable Initialization
    lv_hatcherySelected = false;
    lv_larvaSelected = false;
    lv_newTooltip = StringExternal("Param/Value/5116873A");
    lv_newSelectLarvaTooltip = StringExternal("Param/Value/FE8FD575");

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) == PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesMade)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(8.0, c_timeGame);
    gf_StartTutorial(6);
    if ((gv_overlord_ButtonPressed == true)) {
        gf_EndTutorial(6);
        return true;
    }
    else {
    }
    TriggerExecute(gt_TransmissionOverlordLessonQ, true, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 2), true);
    libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
    gf_ChangeButtonTooltip("Overlord", "Param/Value/5116873A");
    gf_ChangeButtonTooltip("Larva", "Param/Value/FE8FD575");
    UnitGroupLoopBegin(UnitGroupSelected(gv_pLAYER_01_USER));
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Hatchery") || (UnitGetType(UnitGroupLoopCurrent()) == "Larva"))) {
            lv_hatcherySelected = true;
            TriggerExecute(gt_OverlordHatcherySelected, false, false);
            break;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_hatcherySelected == false)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/105800B0"), null, PointFromId(526));
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 0, null, UnitFromId(1), "Origin");
        gv_overlord_Actor = libNtve_gf_ActorLastCreated();
        TriggerEnable(gt_OverlordHatcherySelected, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordLesson_Init () {
    gt_OverlordLesson = TriggerCreate("gt_OverlordLesson_Func");
    TriggerAddEventPlayerPropChange(gt_OverlordLesson, gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord: Hatchery Selected
//--------------------------------------------------------------------------------------------------
bool gt_OverlordHatcherySelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Larva")))) {
            return false;
        }

        if (!((gv_overlord_ButtonPressed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_overlord_Actor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordHatcherySelected_Init () {
    gt_OverlordHatcherySelected = TriggerCreate("gt_OverlordHatcherySelected_Func");
    TriggerEnable(gt_OverlordHatcherySelected, false);
    TriggerAddEventUnitSelected(gt_OverlordHatcherySelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord: Started
//--------------------------------------------------------------------------------------------------
bool gt_OverlordStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Overlord"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_overlord_ButtonPressed = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 2), false);
    libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
    gf_RestoreButtonTooltip("Overlord");
    gf_RestoreButtonTooltip("Larva");
    Wait(5.0, c_timeGame);
    gf_EndTutorial(6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordStarted_Init () {
    gt_OverlordStarted = TriggerCreate("gt_OverlordStarted_Func");
    TriggerAddEventUnitTrainProgress(gt_OverlordStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord: Completed
//--------------------------------------------------------------------------------------------------
bool gt_OverlordCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Overlord"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    gf_EndTutorial(6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordCompleted_Init () {
    gt_OverlordCompleted = TriggerCreate("gt_OverlordCompleted_Func");
    TriggerAddEventUnitTrainProgress(gt_OverlordCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Overlord Lesson Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOverlordLessonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_overlord_ButtonPressed == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab03|Line00186", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOverlordLessonQ_Init () {
    gt_TransmissionOverlordLessonQ = TriggerCreate("gt_TransmissionOverlordLessonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drones: Lesson
//--------------------------------------------------------------------------------------------------
bool gt_DronesLesson_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hatcherySelected;
    bool lv_larvaSelected;
    text lv_newTooltip;
    text lv_newSelectLarvaTooltip;

    // Variable Initialization
    lv_hatcherySelected = false;
    lv_larvaSelected = false;
    lv_newTooltip = StringExternal("Param/Value/0ED01A62");
    lv_newSelectLarvaTooltip = StringExternal("Param/Value/7A394C3D");

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gf_PlayerIsInCombat() == false))) {
            return false;
        }

        if (!((GameGetMissionTime() > 300.0))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_pLAYER_01_USER, "Drone", c_techCountQueuedOrBetter) <= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartTutorial(7);
    TriggerExecute(gt_TransmissionDronesLessonQ, true, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 0), true);
    libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(true);
    gf_ChangeButtonTooltip("Drone", "Param/Value/0ED01A62");
    gf_ChangeButtonTooltip("Larva", "Param/Value/7A394C3D");
    UnitGroupLoopBegin(UnitGroupSelected(gv_pLAYER_01_USER));
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Hatchery") || (UnitGetType(UnitGroupLoopCurrent()) == "Larva"))) {
            lv_hatcherySelected = true;
            TriggerExecute(gt_DronesHatcherySelected, false, false);
            TriggerEnable(gt_DronesButtonPressed, true);
            break;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_hatcherySelected == false)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0FABB430"), null, PointFromId(526));
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(0, 0, null, UnitFromId(1), "Origin");
        gv_drone_Actor = libNtve_gf_ActorLastCreated();
        TriggerEnable(gt_DronesHatcherySelected, true);
        TriggerEnable(gt_DronesButtonPressed, true);
    }
    else {
    }
    Wait(120.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DronesLesson_Init () {
    gt_DronesLesson = TriggerCreate("gt_DronesLesson_Func");
    TriggerAddEventTimePeriodic(gt_DronesLesson, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drones: Hatchery Selected
//--------------------------------------------------------------------------------------------------
bool gt_DronesHatcherySelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Larva")))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_drone_Actor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DronesHatcherySelected_Init () {
    gt_DronesHatcherySelected = TriggerCreate("gt_DronesHatcherySelected_Func");
    TriggerEnable(gt_DronesHatcherySelected, false);
    TriggerAddEventUnitSelected(gt_DronesHatcherySelected, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drones: Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_DronesButtonPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Drone"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_droneBuildTransmission);
    libNtve_gf_KillModel(gv_drone_Actor);
    libSwaC_gf_TurnSelectLarvaButtonHighlightOnOff(false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("LarvaTrain", 0), false);
    gf_RestoreButtonTooltip("Drone");
    gf_RestoreButtonTooltip("Larva");
    Wait(5.0, c_timeGame);
    gf_EndTutorial(7);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DronesButtonPressed_Init () {
    gt_DronesButtonPressed = TriggerCreate("gt_DronesButtonPressed_Func");
    TriggerEnable(gt_DronesButtonPressed, false);
    TriggerAddEventUnitTrainProgress(gt_DronesButtonPressed, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Drones Lesson Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDronesLessonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00103", c_transmissionDurationAdd, 0.0, false, 1, 0);
    gv_droneBuildTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDronesLessonQ_Init () {
    gt_TransmissionDronesLessonQ = TriggerCreate("gt_TransmissionDronesLessonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue - Timer
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_rescue_StartTimer, 10.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueTimer_Init () {
    gt_QueenRescueTimer = TriggerCreate("gt_QueenRescueTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue - Intro
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueTrappedQueensCreate, true, false);
    TriggerExecute(gt_QueenRescueIntroRightQ, true, false);
    Wait(175.0, c_timeGame);
    TriggerExecute(gt_QueenRescueIntroLeft, true, false);
    Wait(270.0, c_timeGame);
    TriggerExecute(gt_QueenRescueIntroCenter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueIntro_Init () {
    gt_QueenRescueIntro = TriggerCreate("gt_QueenRescueIntro_Func");
    TriggerAddEventTimer(gt_QueenRescueIntro, gv_rescue_StartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue - Failsafe
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueFailsafe_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_rescue_RightActivated == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        gv_rescue_RightActivated = true;
        TriggerExecute(gt_TransmissionQueenRescueQ, true, false);
        TriggerExecute(gt_QueenRescuePingRight, true, false);
        TriggerExecute(gt_ObjectiveRescueTrappedQueensCreate, true, false);
    }
    else {
    }
    if ((gv_rescue_LeftActivated == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        gv_rescue_LeftActivated = true;
        TriggerExecute(gt_TransmissionQueenRescueQ, true, false);
        TriggerExecute(gt_QueenRescuePingLeft, true, false);
        TriggerExecute(gt_ObjectiveRescueTrappedQueensCreate, true, false);
    }
    else {
    }
    if ((gv_rescue_CenterActivated == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        gv_rescue_CenterActivated = true;
        TriggerExecute(gt_TransmissionQueenRescueQ, true, false);
        TriggerExecute(gt_QueenRescuePingCenter, true, false);
        TriggerExecute(gt_ObjectiveRescueTrappedQueensCreate, true, false);
    }
    else {
    }
    if ((gv_rescue_LeftActivated == true) && (gv_rescue_RightActivated == true) && (gv_rescue_CenterActivated == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueFailsafe_Init () {
    gt_QueenRescueFailsafe = TriggerCreate("gt_QueenRescueFailsafe_Func");
    TriggerAddEventTimePeriodic(gt_QueenRescueFailsafe, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Queen Rescue Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionQueenRescueQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_rescue_FirstTime == false)) {
        gv_rescue_FirstTime = true;
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00018", c_transmissionDurationAdd, 0.0, true, 0, 0);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00019", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00007", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionQueenRescueQ_Init () {
    gt_TransmissionQueenRescueQ = TriggerCreate("gt_TransmissionQueenRescueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue Intro - Right Q
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueIntroRightQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_rescue_RightActivated == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rescue_RightActivated = true;
    while (!((gf_PlayerIsInCombat() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionQueenRescueQ, true, false);
    if ((TriggerIsEnabled(gt_ObjectiveRescueTrappedQueensCreate) == false)) {
        TriggerQueueEnter();
        TriggerExecute(gt_ObjectiveRescueTrappedQueensCreate, true, true);
        TriggerQueueExit();
    }
    else {
    }
    TriggerExecute(gt_QueenRescuePingRight, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueIntroRightQ_Init () {
    gt_QueenRescueIntroRightQ = TriggerCreate("gt_QueenRescueIntroRightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue (Player Gets Close) - Right 
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescuePlayerGetsCloseRight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_QueenRescueRight, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescuePlayerGetsCloseRight_Init () {
    gt_QueenRescuePlayerGetsCloseRight = TriggerCreate("gt_QueenRescuePlayerGetsCloseRight_Func");
    TriggerAddEventUnitRegion(gt_QueenRescuePlayerGetsCloseRight, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue (Being Attacked) - Right 
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueBeingAttackedRight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_rescue_DominionRight, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_QueenRescueRight, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueBeingAttackedRight_Init () {
    gt_QueenRescueBeingAttackedRight = TriggerCreate("gt_QueenRescueBeingAttackedRight_Func");
    TriggerAddEventUnitAttacked(gt_QueenRescueBeingAttackedRight, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue - Right
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueRight_Func (bool testConds, bool runActions) {
    int auto9ECE7C23_n;
    int auto9ECE7C23_i;

    // Variable Declarations
    unitgroup lv_rescueGroup;

    // Variable Initialization
    lv_rescueGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_rescue_DominionRight);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!((libNtve_gf_UnitGroupIsDead(gv_rescue_DominionRight) == true))) {
        Wait(0.2, c_timeGame);
    }
    gv_rescue_QueensRescued += 1;
    if ((TimerGetRemaining(gv_reinforcement_Timer) > 0.0)) {
        gv_queensRescuedBeforeNaktul += 1;
    }
    else {
    }
    TriggerExecute(gt_ObjectiveRescueTrappedQueensUpdate, true, false);
    PingDestroy(gv_rescue_Pings[0]);
    VisRevealerDestroy(gv_rescue_RevealerRight);
    gv_rescue_RevealerRight = null;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab03_BonusObjective02", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_TransmissionQueenRescueUpdateQ, true, false);
    Wait(2.0, c_timeGame);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(146)), 2.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/059AB504"), null, UnitGetPosition(UnitFromId(146)));
    auto9ECE7C23_n = 5;
    auto9ECE7C23_i = 1;
    while (auto9ECE7C23_i <= auto9ECE7C23_n) {
        UnitCreate(2, "Zergling", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(582), libNtve_gf_RandomAngle());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(38))), c_orderQueueReplace);
        UnitGroupAddUnitGroup(lv_rescueGroup, UnitLastCreatedGroup());
        Wait(RandomFixed(0.3, 0.5), c_timeGame);
        auto9ECE7C23_i = auto9ECE7C23_i + 1;
    }
    UnitCreate(1, "Queen", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(582), libNtve_gf_RandomAngle());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(38))), c_orderQueueReplace);
    UnitGroupAdd(lv_rescueGroup, UnitLastCreated());
    Wait(0.5, c_timeGame);
    ActorSend(gv_rescue_SoundRight, "Destroy");
    UnitGroupLoopBegin(lv_rescueGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            gf_CreateInfoText(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueRight_Init () {
    gt_QueenRescueRight = TriggerCreate("gt_QueenRescueRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue Ping - Right
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescuePingRight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(16));
    gv_rescue_RevealerRight = VisRevealerLastCreated();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6143A6B6"), null, UnitFromId(146));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(146)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 2.0, 270.0);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(146)), StringExternal("Param/Value/2B491027"));
    gv_rescue_Pings[0] = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescuePingRight_Init () {
    gt_QueenRescuePingRight = TriggerCreate("gt_QueenRescuePingRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue Intro - Left
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueIntroLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_rescue_LeftActivated == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rescue_LeftActivated = true;
    while (!((gf_PlayerIsInCombat() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionQueenRescueQ, true, true);
    TriggerExecute(gt_QueenRescuePingLeft, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueIntroLeft_Init () {
    gt_QueenRescueIntroLeft = TriggerCreate("gt_QueenRescueIntroLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue (Player Gets Close) - Left
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescuePlayerGetsCloseLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_QueenRescueLeft, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescuePlayerGetsCloseLeft_Init () {
    gt_QueenRescuePlayerGetsCloseLeft = TriggerCreate("gt_QueenRescuePlayerGetsCloseLeft_Func");
    TriggerAddEventUnitRegion(gt_QueenRescuePlayerGetsCloseLeft, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue (Being Attacked) - Left
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueBeingAttackedLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_rescue_DominionLeft, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_QueenRescueLeft, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueBeingAttackedLeft_Init () {
    gt_QueenRescueBeingAttackedLeft = TriggerCreate("gt_QueenRescueBeingAttackedLeft_Func");
    TriggerAddEventUnitAttacked(gt_QueenRescueBeingAttackedLeft, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue - Left
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueLeft_Func (bool testConds, bool runActions) {
    int auto50C3E784_n;
    int auto50C3E784_i;

    // Variable Declarations
    unitgroup lv_rescueGroup;

    // Variable Initialization
    lv_rescueGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_rescue_DominionLeft);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!((libNtve_gf_UnitGroupIsDead(gv_rescue_DominionLeft) == true))) {
        Wait(0.2, c_timeGame);
    }
    gv_rescue_QueensRescued += 1;
    if ((TimerGetRemaining(gv_reinforcement_Timer) > 0.0)) {
        gv_queensRescuedBeforeNaktul += 1;
    }
    else {
    }
    TriggerExecute(gt_ObjectiveRescueTrappedQueensUpdate, true, false);
    PingDestroy(gv_rescue_Pings[1]);
    VisRevealerDestroy(gv_rescue_RevealerLeft);
    gv_rescue_RevealerLeft = null;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab03_BonusObjective02", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_TransmissionQueenRescueUpdateQ, true, false);
    Wait(2.0, c_timeGame);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(52)), 2.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/72D1F867"), null, UnitGetPosition(UnitFromId(52)));
    auto50C3E784_n = 6;
    auto50C3E784_i = 1;
    while (auto50C3E784_i <= auto50C3E784_n) {
        UnitCreate(2, "Zergling", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(584), libNtve_gf_RandomAngle());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(37))), c_orderQueueReplace);
        UnitGroupAddUnitGroup(lv_rescueGroup, UnitLastCreatedGroup());
        Wait(RandomFixed(0.3, 0.5), c_timeGame);
        auto50C3E784_i = auto50C3E784_i + 1;
    }
    UnitCreate(1, "Queen", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(584), libNtve_gf_RandomAngle());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(37))), c_orderQueueReplace);
    UnitGroupAdd(lv_rescueGroup, UnitLastCreated());
    Wait(0.5, c_timeGame);
    ActorSend(gv_rescue_SoundLeft, "Destroy");
    UnitGroupLoopBegin(lv_rescueGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            gf_CreateInfoText(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueLeft_Init () {
    gt_QueenRescueLeft = TriggerCreate("gt_QueenRescueLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue Ping -  Left
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescuePingLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(27));
    gv_rescue_RevealerLeft = VisRevealerLastCreated();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A523208F"), null, UnitFromId(52));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(52)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 2.0, 270.0);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(52)), StringExternal("Param/Value/C381C51E"));
    gv_rescue_Pings[1] = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescuePingLeft_Init () {
    gt_QueenRescuePingLeft = TriggerCreate("gt_QueenRescuePingLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue Intro - Center
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueIntroCenter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_rescue_CenterActivated == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_rescue_CenterActivated = true;
    while (!((gf_PlayerIsInCombat() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionQueenRescueQ, true, true);
    TriggerExecute(gt_QueenRescuePingCenter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueIntroCenter_Init () {
    gt_QueenRescueIntroCenter = TriggerCreate("gt_QueenRescueIntroCenter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue (Player Gets Close) - Center
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescuePlayerGetsCloseCenter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_QueenRescueCenter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescuePlayerGetsCloseCenter_Init () {
    gt_QueenRescuePlayerGetsCloseCenter = TriggerCreate("gt_QueenRescuePlayerGetsCloseCenter_Func");
    TriggerAddEventUnitRegion(gt_QueenRescuePlayerGetsCloseCenter, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue (Being Attacked) - Center
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueBeingAttackedCenter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_rescue_DominionCenter, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_QueenRescueCenter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueBeingAttackedCenter_Init () {
    gt_QueenRescueBeingAttackedCenter = TriggerCreate("gt_QueenRescueBeingAttackedCenter_Func");
    TriggerAddEventUnitAttacked(gt_QueenRescueBeingAttackedCenter, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue - Center
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescueCenter_Func (bool testConds, bool runActions) {
    int autoDB9117DE_n;
    int autoDB9117DE_i;

    // Variable Declarations
    unitgroup lv_rescueGroup;

    // Variable Initialization
    lv_rescueGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_rescue_DominionCenter);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!((libNtve_gf_UnitGroupIsDead(gv_rescue_DominionCenter) == true))) {
        Wait(0.2, c_timeGame);
    }
    gv_rescue_QueensRescued += 1;
    if ((TimerGetRemaining(gv_reinforcement_Timer) > 0.0)) {
        gv_queensRescuedBeforeNaktul += 1;
    }
    else {
    }
    TriggerExecute(gt_ObjectiveRescueTrappedQueensUpdate, true, false);
    PingDestroy(gv_rescue_Pings[2]);
    VisRevealerDestroy(gv_rescue_RevealerCenter);
    gv_rescue_RevealerCenter = null;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab03_BonusObjective03", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_TransmissionQueenRescueUpdateQ, true, false);
    Wait(2.0, c_timeGame);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(781)), 2.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/DEB3CBBE"), null, UnitGetPosition(UnitFromId(781)));
    autoDB9117DE_n = 7;
    autoDB9117DE_i = 1;
    while (autoDB9117DE_i <= autoDB9117DE_n) {
        UnitCreate(2, "Zergling", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(583), libNtve_gf_RandomAngle());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(39))), c_orderQueueReplace);
        UnitGroupAddUnitGroup(lv_rescueGroup, UnitLastCreatedGroup());
        Wait(RandomFixed(0.0, 0.2), c_timeGame);
        autoDB9117DE_i = autoDB9117DE_i + 1;
    }
    UnitCreate(1, "Queen", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(583), libNtve_gf_RandomAngle());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(39))), c_orderQueueReplace);
    UnitGroupAdd(lv_rescueGroup, UnitLastCreated());
    Wait(0.5, c_timeGame);
    ActorSend(gv_rescue_SoundCenter, "Destroy");
    UnitGroupLoopBegin(lv_rescueGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            gf_CreateInfoText(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescueCenter_Init () {
    gt_QueenRescueCenter = TriggerCreate("gt_QueenRescueCenter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Rescue Ping - Center
//--------------------------------------------------------------------------------------------------
bool gt_QueenRescuePingCenter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(5));
    gv_rescue_RevealerCenter = VisRevealerLastCreated();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8FE0D0C2"), null, UnitFromId(781));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(781)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 2.0, 270.0);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(781)), StringExternal("Param/Value/DA26C4CE"));
    gv_rescue_Pings[2] = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenRescuePingCenter_Init () {
    gt_QueenRescuePingCenter = TriggerCreate("gt_QueenRescuePingCenter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Queen Rescue Update Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionQueenRescueUpdateQ_Func (bool testConds, bool runActions) {
    int auto7CA3E628_val;

    // Variable Declarations
    int lv_queensRescuedLocal;

    // Variable Initialization
    lv_queensRescuedLocal = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_queensRescuedLocal = gv_rescue_QueensRescued;
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    auto7CA3E628_val = lv_queensRescuedLocal;
    if (auto7CA3E628_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00044", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto7CA3E628_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00043", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (auto7CA3E628_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00021", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionQueenRescueUpdateQ_Init () {
    gt_TransmissionQueenRescueUpdateQ = TriggerCreate("gt_TransmissionQueenRescueUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Base Warning Left
//--------------------------------------------------------------------------------------------------
bool gt_DominionBaseWarningLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentGroup;
    fixed lv_totalSupplyCost;

    // Variable Initialization
    lv_currentGroup = UnitGroupEmpty();
    lv_totalSupplyCost = 0.0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(43)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 5), c_unitCountAlive) < 5)) {
        return true;
    }
    else {
    }
    lv_currentGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_currentGroup, c_unitCountAlive) < 3)) {
        return true;
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(lv_currentGroup);
    while (!UnitGroupLoopDone()) {
        if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true)) {
            lv_totalSupplyCost += 6.0;
        }
        else {
            lv_totalSupplyCost += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropSuppliesUsed, c_unitPropCurrent);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_totalSupplyCost < 15.0)) {
        TriggerExecute(gt_DominionBaseWarningQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBaseWarningLeft_Init () {
    gt_DominionBaseWarningLeft = TriggerCreate("gt_DominionBaseWarningLeft_Func");
    TriggerAddEventUnitDied(gt_DominionBaseWarningLeft, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Base Warning Middle
//--------------------------------------------------------------------------------------------------
bool gt_DominionBaseWarningMiddle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentGroup;
    fixed lv_totalSupplyCost;

    // Variable Initialization
    lv_currentGroup = UnitGroupEmpty();
    lv_totalSupplyCost = 0.0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(44)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 5), c_unitCountAlive) < 5)) {
        return true;
    }
    else {
    }
    lv_currentGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_currentGroup, c_unitCountAlive) < 3)) {
        return true;
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(lv_currentGroup);
    while (!UnitGroupLoopDone()) {
        if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true)) {
            lv_totalSupplyCost += 6.0;
        }
        else {
            lv_totalSupplyCost += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropSuppliesUsed, c_unitPropCurrent);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_totalSupplyCost < 17.0)) {
        TriggerExecute(gt_DominionBaseWarningQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBaseWarningMiddle_Init () {
    gt_DominionBaseWarningMiddle = TriggerCreate("gt_DominionBaseWarningMiddle_Func");
    TriggerAddEventUnitDied(gt_DominionBaseWarningMiddle, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Base Warning Right
//--------------------------------------------------------------------------------------------------
bool gt_DominionBaseWarningRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentGroup;
    fixed lv_totalSupplyCost;

    // Variable Initialization
    lv_currentGroup = UnitGroupEmpty();
    lv_totalSupplyCost = 0.0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(45)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 5), c_unitCountAlive) < 5)) {
        return true;
    }
    else {
    }
    lv_currentGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_currentGroup, c_unitCountAlive) < 3)) {
        return true;
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(lv_currentGroup);
    while (!UnitGroupLoopDone()) {
        if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true)) {
            lv_totalSupplyCost += 6.0;
        }
        else {
            lv_totalSupplyCost += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropSuppliesUsed, c_unitPropCurrent);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((lv_totalSupplyCost < 15.0)) {
        TriggerExecute(gt_DominionBaseWarningQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBaseWarningRight_Init () {
    gt_DominionBaseWarningRight = TriggerCreate("gt_DominionBaseWarningRight_Func");
    TriggerAddEventUnitDied(gt_DominionBaseWarningRight, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Base Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionBaseWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DominionBaseWarningLeft, false);
    TriggerEnable(gt_DominionBaseWarningMiddle, false);
    TriggerEnable(gt_DominionBaseWarningRight, false);
    TriggerQueueEnter();
    Wait(3.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00207", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBaseWarningQ_Init () {
    gt_DominionBaseWarningQ = TriggerCreate("gt_DominionBaseWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDiesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00175", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDiesQ_Init () {
    gt_KerriganDiesQ = TriggerCreate("gt_KerriganDiesQ_Func");
    TriggerAddEventUnitDied(gt_KerriganDiesQ, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evolution Upgrade Purchased
//--------------------------------------------------------------------------------------------------
bool gt_EvolutionUpgradePurchased_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_evoUpgradePurchased = true;
    UnitGroupLoopBegin(UnitGroup("EvolutionChamber", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            gf_CreateInfoText(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvolutionUpgradePurchased_Init () {
    gt_EvolutionUpgradePurchased = TriggerCreate("gt_EvolutionUpgradePurchased_Func");
    TriggerAddEventUnitResearchProgress(gt_EvolutionUpgradePurchased, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Timer Window - Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimerWindowReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_c_ReinforcementWaitDuration = 900;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_reinforcement_Timer, lv_c_ReinforcementWaitDuration, false, c_timeAI);
    libSwaC_gf_TimerWindowCreate2(gv_reinforcement_Timer, StringExternal("Param/Value/5BBAB076"), true, false, 0);
    gv_holdOut_Window = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_holdOut_Window, StringToText("<min2/>:<sec2/>"));
    libNtve_gf_WaitForTimer(gv_reinforcement_Timer, 300.0, false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8722A7D4"));
    libNtve_gf_WaitForTimer(gv_reinforcement_Timer, 190.0, false);
    TriggerExecute(gt_TransmissionReinforcementsClose1Q, true, false);
    libNtve_gf_WaitForTimer(gv_reinforcement_Timer, 100.0, false);
    TriggerExecute(gt_SetLightingandSoundtrack, true, false);
    libNtve_gf_WaitForTimer(gv_reinforcement_Timer, 90.0, false);
    TriggerExecute(gt_TransmissionReinforcementsClose2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTimerWindowReinforcements_Init () {
    gt_CreateTimerWindowReinforcements = TriggerCreate("gt_CreateTimerWindowReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hold Out Timer Finished
//--------------------------------------------------------------------------------------------------
bool gt_HoldOutTimerFinished_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_HoldOutFinishedEarly, false);
    TimerWindowDestroy(gv_holdOut_Window);
    TriggerExecute(gt_ObjectiveHoldOutComplete, true, true);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/72C0D40D"));
    TriggerExecute(gt_MidQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldOutTimerFinished_Init () {
    gt_HoldOutTimerFinished = TriggerCreate("gt_HoldOutTimerFinished_Func");
    TriggerAddEventTimer(gt_HoldOutTimerFinished, gv_reinforcement_Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Nydus Worm 3
//--------------------------------------------------------------------------------------------------
bool gt_CreateNydusWorm3_Func (bool testConds, bool runActions) {
    fixed auto488D7212_at;

    // Variable Declarations
    point lv_location;
    unit lv_nydus;
    unitgroup lv_spawnedUnits;
    timer lv_periodTimer;

    // Variable Initialization
    lv_location = null;
    lv_nydus = null;
    lv_spawnedUnits = UnitGroupEmpty();
    lv_periodTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_reinforcementsHaveArrived == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) < (200 - (FixedToInt((gv_reinforcementCount * 0.5)) + 4))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_location = PointFromId(64);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWorm", 0, gv_pLAYER_02_RESCUEZERG, lv_location);
    lv_nydus = UnitLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_nydus), 4.0), 90.0, false);
    UnitCargoCreate(lv_nydus, "Zergling", gv_reinforcementCount);
    UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(lv_spawnedUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_nydus, "Queen", 2);
    UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(lv_spawnedUnits, UnitCargoLastCreatedGroup());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Birth 01", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusGreater_Birth1", -1), PlayerGroupAll(), lv_nydus, 0.0, 100.0, 0.0);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9D48A476"), null, UnitLastCreated());
    gf_PingNydusWorm(lv_location);
    if ((RegionContainsPoint(RegionCircle(lv_location, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(4.8, c_timeGame);
    UnitIssueOrder(lv_nydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueReplace);
    auto488D7212_at = 0;
    while (!((UnitGroupCount(UnitCargoGroup(lv_nydus), c_unitCountAlive) == 0)) && auto488D7212_at <= 10.0) {
        Wait(0.2, c_timeGame);
        auto488D7212_at = auto488D7212_at + 0.2;
    }
    UnitGroupLoopBegin(lv_spawnedUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNydusWorm3_Init () {
    gt_CreateNydusWorm3 = TriggerCreate("gt_CreateNydusWorm3_Func");
    TriggerEnable(gt_CreateNydusWorm3, false);
    TriggerAddEventTimePeriodic(gt_CreateNydusWorm3, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Nydus Worm 4
//--------------------------------------------------------------------------------------------------
bool gt_CreateNydusWorm4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_location;
    unit lv_nydus;
    unitgroup lv_spawnedUnits;
    timer lv_periodTimer;

    // Variable Initialization
    lv_location = null;
    lv_nydus = null;
    lv_spawnedUnits = UnitGroupEmpty();
    lv_periodTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_reinforcementsHaveArrived == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) < (200 - (FixedToInt((gv_reinforcementCount * 0.5)) + 4))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_location = PointFromId(89);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWorm", 0, gv_pLAYER_02_RESCUEZERG, lv_location);
    lv_nydus = UnitLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_nydus), 4.0), 90.0, false);
    UnitCargoCreate(lv_nydus, "Queen", 1);
    UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(lv_spawnedUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_nydus, "Zergling", gv_reinforcementCount);
    UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(lv_spawnedUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_nydus, "Queen", 1);
    UnitGroupLoopBegin(UnitCargoLastCreatedGroup());
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(lv_spawnedUnits, UnitCargoLastCreatedGroup());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusGreater_Birth2", -1), PlayerGroupAll(), lv_nydus, 0.0, 100.0, 0.0);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/257AE45A"), null, UnitLastCreated());
    gf_PingNydusWorm(lv_location);
    if ((RegionContainsPoint(RegionCircle(lv_location, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(3.7, c_timeGame);
    UnitIssueOrder(lv_nydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNydusWorm4_Init () {
    gt_CreateNydusWorm4 = TriggerCreate("gt_CreateNydusWorm4_Func");
    TriggerEnable(gt_CreateNydusWorm4, false);
    TriggerAddEventTimePeriodic(gt_CreateNydusWorm4, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Nydus Worm Naktul
//--------------------------------------------------------------------------------------------------
bool gt_CreateNydusWormNaktul_Func (bool testConds, bool runActions) {
    fixed auto63339C7D_at;

    // Variable Declarations
    point lv_location;
    unit lv_nydus;
    unitgroup lv_spawnedUnits;

    // Variable Initialization
    lv_location = null;
    lv_nydus = null;
    lv_spawnedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_reinforcementsHaveArrived == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_location = PointFromId(511);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWorm", 0, gv_pLAYER_02_RESCUEZERG, lv_location);
    lv_nydus = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_nydus), 4.0), 90.0, false);
    UnitCargoCreate(lv_nydus, "BroodMother", 1);
    gv_naktul = UnitCargoLastCreated();
    TriggerEnable(gt_NaktulDontDie, true);
    UnitBehaviorAdd(UnitCargoLastCreated(), "ZaGaraDontDie", UnitCargoLastCreated(), 1);
    UnitSetState(UnitCargoLastCreated(), c_unitStateTargetable, false);
    UnitGroupAddUnitGroup(lv_spawnedUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_nydus, "Zergling", 15);
    UnitGroupAddUnitGroup(lv_spawnedUnits, UnitCargoLastCreatedGroup());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusGreater_Birth", -1), PlayerGroupAll(), lv_nydus, 0.0, 100.0, 0.0);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/48C7C31F"), null, UnitLastCreated());
    gf_PingNydusWorm(lv_location);
    if ((RegionContainsPoint(RegionCircle(lv_location, 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    }
    else {
    }
    Wait(3.7, c_timeGame);
    UnitIssueOrder(lv_nydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueReplace);
    auto63339C7D_at = 0;
    while (!((UnitGroupCount(UnitCargoGroup(lv_nydus), c_unitCountAlive) == 0)) && auto63339C7D_at <= 10.0) {
        Wait(0.2, c_timeGame);
        auto63339C7D_at = auto63339C7D_at + 0.2;
    }
    TriggerExecute(gt_TransmissionNaktulArrivesQ, true, false);
    AISetGroupSuicide(lv_spawnedUnits, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNydusWormNaktul_Init () {
    gt_CreateNydusWormNaktul = TriggerCreate("gt_CreateNydusWormNaktul_Func");
    TriggerEnable(gt_CreateNydusWormNaktul, false);
    TriggerAddEventTimePeriodic(gt_CreateNydusWormNaktul, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Naktul Don't Die
//--------------------------------------------------------------------------------------------------
bool gt_NaktulDontDie_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_naktul, c_unitPropLife, c_unitPropCurrent) <= 25.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetState(gv_naktul, c_unitStateInvulnerable, true);
    UnitSetState(gv_naktul, c_unitStateTargetable, false);
    UnitIssueOrder(gv_naktul, Order(AbilityCommand("BurrowBroodMotherDown", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeReal);
    UnitRemove(gv_naktul);
    gv_naktul = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NaktulDontDie_Init () {
    gt_NaktulDontDie = TriggerCreate("gt_NaktulDontDie_Func");
    TriggerEnable(gt_NaktulDontDie, false);
    TriggerAddEventUnitDamaged(gt_NaktulDontDie, UnitRefFromVariable("gv_naktul"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hold Out Finished Early
//--------------------------------------------------------------------------------------------------
bool gt_HoldOutFinishedEarly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;
    const int lv_countThreashold = 12;

    // Variable Initialization
    lv_count = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_reinforcement_Timer) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DOMINION_RIGHT, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_07_DOMINION_LEFT, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_rescue_DominionCenter, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_rescue_DominionLeft, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_rescue_DominionRight, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv_aI_FinalAttackWave) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_count = (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DOMINION_RIGHT, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv_countThreashold), c_unitCountAlive) + UnitGroupCount(UnitGroup(null, gv_pLAYER_07_DOMINION_LEFT, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv_countThreashold), c_unitCountAlive) + UnitGroupCount(gv_rescue_DominionCenter, c_unitCountAlive) + UnitGroupCount(gv_rescue_DominionLeft, c_unitCountAlive) + UnitGroupCount(gv_aI_FinalAttackWave, c_unitCountAlive));
    if ((lv_count <= lv_countThreashold) && (gv_nightDropped == false)) {
        gv_nightDropped = true;
        GameSetLighting("DesertWorldNight", 18.0);
        Wait(16.0, c_timeGame);
        if ((gv_nightAmbiencePlayed == false)) {
            gv_nightAmbiencePlayed = true;
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab03_Night", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        }
        else {
        }
        return true;
    }
    else {
    }
    if ((lv_count > 0)) {
        return true;
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_CreateTimerWindowReinforcements);
    TriggerExecute(gt_SetLightingandSoundtrackEarlyFinish, true, false);
    TriggerExecute(gt_HoldOutTimerFinished, true, false);
    TimerStart(gv_reinforcement_Timer, 0.0, false, c_timeGame);
    cai_waves_stop("aiE0C99455");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldOutFinishedEarly_Init () {
    gt_HoldOutFinishedEarly = TriggerCreate("gt_HoldOutFinishedEarly_Func");
    TriggerAddEventTimePeriodic(gt_HoldOutFinishedEarly, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Lighting and Soundtrack
//--------------------------------------------------------------------------------------------------
bool gt_SetLightingandSoundtrack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_nightDropped == false)) {
        gv_nightDropped = true;
        GameSetLighting("DesertWorldNight", 90.0);
        Wait(80.0, c_timeGame);
        if ((gv_nightAmbiencePlayed == false)) {
            gv_nightAmbiencePlayed = true;
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab03_Night", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetLightingandSoundtrack_Init () {
    gt_SetLightingandSoundtrack = TriggerCreate("gt_SetLightingandSoundtrack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Lighting and Soundtrack (Early Finish)
//--------------------------------------------------------------------------------------------------
bool gt_SetLightingandSoundtrackEarlyFinish_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_nightAmbiencePlayed == false)) {
        gv_nightAmbiencePlayed = true;
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab03_Night", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetLightingandSoundtrackEarlyFinish_Init () {
    gt_SetLightingandSoundtrackEarlyFinish = TriggerCreate("gt_SetLightingandSoundtrackEarlyFinish_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Reinforcements Close 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionReinforcementsClose1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00162", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionReinforcementsClose1Q_Init () {
    gt_TransmissionReinforcementsClose1Q = TriggerCreate("gt_TransmissionReinforcementsClose1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Reinforcements Close 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionReinforcementsClose2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00165", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionReinforcementsClose2Q_Init () {
    gt_TransmissionReinforcementsClose2Q = TriggerCreate("gt_TransmissionReinforcementsClose2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Naktul Arrives Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNaktulArrivesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_naktul, "zMission_Lab03|Line00189", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNaktulArrivesQ_Init () {
    gt_TransmissionNaktulArrivesQ = TriggerCreate("gt_TransmissionNaktulArrivesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Left Base
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackLeftBase_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(12)) == true) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ZergAttackLeftBaseReactionQ, true, false);
    Wait(4.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
        SoundPlayAtPoint(SoundLink("Lab03_alarm", 0), PlayerGroupAll(), UnitGetPosition(UnitGroupLoopCurrent()), 1.0, 100.0, 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DOMINION_RIGHT, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_07_DOMINION_LEFT, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackLeftBase_Init () {
    gt_ZergAttackLeftBase = TriggerCreate("gt_ZergAttackLeftBase_Func");
    TriggerAddEventTimePeriodic(gt_ZergAttackLeftBase, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Left Base Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackLeftBaseReactionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(306)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(306), "zMission_Lab03|Line00039", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackLeftBaseReactionQ_Init () {
    gt_ZergAttackLeftBaseReactionQ = TriggerCreate("gt_ZergAttackLeftBaseReactionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Right Base
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackRightBase_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(gv_kerrigan, RegionFromId(9)) == true) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_DOMINION_LEFT, RegionFromId(8), true);
    TriggerExecute(gt_ZergAttackRightBaseReactionQ, true, false);
    UnitGroupLoopBegin(UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
        SoundPlayAtPoint(SoundLink("Lab03_alarm", 0), PlayerGroupAll(), UnitGetPosition(UnitGroupLoopCurrent()), 1.0, 100.0, 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DOMINION_RIGHT, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackRightBase_Init () {
    gt_ZergAttackRightBase = TriggerCreate("gt_ZergAttackRightBase_Func");
    TriggerAddEventTimePeriodic(gt_ZergAttackRightBase, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Right Base Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackRightBaseReactionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(88)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(88), "zMission_Lab03|Line00040", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackRightBaseReactionQ_Init () {
    gt_ZergAttackRightBaseReactionQ = TriggerCreate("gt_ZergAttackRightBaseReactionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bottom Marines: Reaction
//--------------------------------------------------------------------------------------------------
bool gt_BottomMarinesReaction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BottomMarinesFleeQ, true, false);
    Wait(2.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_07_DOMINION_LEFT, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(83)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(414), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(83)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(421), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(83)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(UnitFromId(422), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(83)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BottomMarinesReaction_Init () {
    gt_BottomMarinesReaction = TriggerCreate("gt_BottomMarinesReaction_Func");
    TriggerAddEventUnitStartedAttack(gt_BottomMarinesReaction, UnitRefFromVariable("gv_dominionFlavorMarine"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bottom Marines: Speaker Dies
//--------------------------------------------------------------------------------------------------
bool gt_BottomMarinesSpeakerDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_dominionTransmission01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BottomMarinesSpeakerDies_Init () {
    gt_BottomMarinesSpeakerDies = TriggerCreate("gt_BottomMarinesSpeakerDies_Func");
    TriggerAddEventUnitDied(gt_BottomMarinesSpeakerDies, UnitRefFromVariable("gv_dominionFlavorMarine"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bottom Marines: Flee Q
//--------------------------------------------------------------------------------------------------
bool gt_BottomMarinesFleeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(423)) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(gv_dominionFlavorMarine, "zMission_Lab03|Line00035", c_transmissionDurationAdd, 0.0, false, 1, 0);
        gv_dominionTransmission01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BottomMarinesFleeQ_Init () {
    gt_BottomMarinesFleeQ = TriggerCreate("gt_BottomMarinesFleeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Main Base Invasion Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMainBaseInvasionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(347), "zMission_Lab03|Line00204", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMainBaseInvasionQ_Init () {
    gt_TransmissionMainBaseInvasionQ = TriggerCreate("gt_TransmissionMainBaseInvasionQ_Func");
    TriggerAddEventUnitStartedAttack(gt_TransmissionMainBaseInvasionQ, UnitRefFromUnit(UnitFromId(347)));
    TriggerAddEventUnitStartedAttack(gt_TransmissionMainBaseInvasionQ, UnitRefFromUnit(UnitFromId(346)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cannon Explosion Scene
//--------------------------------------------------------------------------------------------------
bool gt_CannonExplosionScene_Func (bool testConds, bool runActions) {
    int auto0E321DED_n;
    int auto0E321DED_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_gunPathingBlockers);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(34)), 16.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.4, 2.0, 100.0, 2.0);
    }
    else {
    }
    auto0E321DED_n = 5;
    auto0E321DED_i = 1;
    while (auto0E321DED_i <= auto0E321DED_n) {
        libNtve_gf_CreateExplosionAtPoint(0, 0, RegionRandomPoint(RegionFromId(34)));
        Wait(0.2, c_timeGame);
        auto0E321DED_i = auto0E321DED_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CannonExplosionScene_Init () {
    gt_CannonExplosionScene = TriggerCreate("gt_CannonExplosionScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    cai_startall();
    cai_runall();
    AINearestTownLimitWaveGather(gv_pLAYER_03_DOMINION_MAIN, true);
    AINearestTownLimitWaveGather(gv_pLAYER_04_DOMINION_RIGHT, true);
    AINearestTownLimitWaveGather(gv_pLAYER_07_DOMINION_LEFT, true);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave - First Scripted Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveFirstScriptedWave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_aI_FirstAttackWave, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(66)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_aI_FirstAttackWave, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(386))), c_orderQueueAddToEnd);
    TriggerExecute(gt_TransmissionFirstAttackQ, true, false);
    while (!((libNtve_gf_UnitGroupIsDead(gv_aI_FirstAttackWave) == true))) {
        Wait(1.0, c_timeGame);
    }
    gv_aI_FirstAttackHappening = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveFirstScriptedWave_Init () {
    gt_AttackWaveFirstScriptedWave = TriggerCreate("gt_AttackWaveFirstScriptedWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave - Custom Target 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCustomTarget01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        AIAttackWaveSetTargetUnit(PlayerGroupLoopCurrent(), gf_AITargetNextHut(0));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCustomTarget01_Init () {
    gt_AttackWaveCustomTarget01 = TriggerCreate("gt_AttackWaveCustomTarget01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave - Custom Target 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCustomTarget02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_queen_LessonTimer = TimerCreate();
    TimerStart(gv_queen_LessonTimer, 25.0, false, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        AIAttackWaveSetTargetUnit(PlayerGroupLoopCurrent(), gf_AITargetNextHut(0));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCustomTarget02_Init () {
    gt_AttackWaveCustomTarget02 = TriggerCreate("gt_AttackWaveCustomTarget02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave - Target Next West
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveTargetNextWest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        AIAttackWaveSetTargetUnit(PlayerGroupLoopCurrent(), gf_AITargetNextHut(1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveTargetNextWest_Init () {
    gt_AttackWaveTargetNextWest = TriggerCreate("gt_AttackWaveTargetNextWest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave - Target Next East
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveTargetNextEast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        AIAttackWaveSetTargetUnit(PlayerGroupLoopCurrent(), gf_AITargetNextHut(0));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveTargetNextEast_Init () {
    gt_AttackWaveTargetNextEast = TriggerCreate("gt_AttackWaveTargetNextEast_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hold Out - Final 2 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_HoldOutFinal2Minutes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(249), UnitLastCreatedGroup(), false, gv_pLAYER_03_DOMINION_MAIN);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(251), UnitLastCreatedGroup(), false, gv_pLAYER_03_DOMINION_MAIN);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Medic", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(253), UnitLastCreatedGroup(), true, gv_pLAYER_03_DOMINION_MAIN);
    UnitGroupAddUnitGroup(gv_aI_FinalAttackWave, lv_attackGroup);
    Wait(3.0, c_timeAI);
    UnitGroupLoopBegin(lv_attackGroup);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_pLAYER_03_DOMINION_MAIN, UnitGroupLoopCurrent());
        UnitGroupRemove(lv_attackGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_MAIN, PointFromId(513), false);
    AIAttackWaveSend(gv_pLAYER_03_DOMINION_MAIN, 0, true);
    Wait(32.0, c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Goliath", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(256), UnitLastCreatedGroup(), false, gv_pLAYER_03_DOMINION_MAIN);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "HellionTank", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(255), UnitLastCreatedGroup(), false, gv_pLAYER_03_DOMINION_MAIN);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(3, 3, 5, 5), "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(569), UnitLastCreatedGroup(), true, gv_pLAYER_03_DOMINION_MAIN);
    UnitGroupAddUnitGroup(gv_aI_FinalAttackWave, lv_attackGroup);
    Wait(3.0, c_timeAI);
    UnitGroupLoopBegin(lv_attackGroup);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_pLAYER_03_DOMINION_MAIN, UnitGroupLoopCurrent());
        UnitGroupRemove(lv_attackGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_MAIN, PointFromId(512), false);
    AIAttackWaveSend(gv_pLAYER_03_DOMINION_MAIN, 0, true);
    Wait(27.0, c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(258), UnitLastCreatedGroup(), false, gv_pLAYER_03_DOMINION_MAIN);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(262), UnitLastCreatedGroup(), true, gv_pLAYER_03_DOMINION_MAIN);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "SiegeTank", c_unitCreateIgnorePlacement, gv_pLAYER_03_DOMINION_MAIN, PointFromId(269));
    UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    libSwaC_gf_CreateDropPod(0, PointFromId(285), UnitLastCreatedGroup(), true, gv_pLAYER_03_DOMINION_MAIN);
    UnitGroupAddUnitGroup(gv_aI_FinalAttackWave, lv_attackGroup);
    Wait(3.0, c_timeAI);
    UnitGroupLoopBegin(lv_attackGroup);
    while (!UnitGroupLoopDone()) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        AIAttackWaveUseUnit(gv_pLAYER_03_DOMINION_MAIN, UnitGroupLoopCurrent());
        UnitGroupRemove(lv_attackGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_MAIN, PointFromId(513), false);
    AIAttackWaveSend(gv_pLAYER_03_DOMINION_MAIN, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldOutFinal2Minutes_Init () {
    gt_HoldOutFinal2Minutes = TriggerCreate("gt_HoldOutFinal2Minutes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Hellion Wave
//--------------------------------------------------------------------------------------------------
bool gt_SetHellionWave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hellionWave = AIWaveGetUnits(cai_wave_createdWave(3, gv_pLAYER_07_DOMINION_LEFT));
    TriggerEnable(gt_HellionBattleModeEnabled, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetHellionWave_Init () {
    gt_SetHellionWave = TriggerCreate("gt_SetHellionWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellion Battle Mode Enabled
//--------------------------------------------------------------------------------------------------
bool gt_HellionBattleModeEnabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_hellionWave, EventUnitTarget()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(UnitFromId(180)) == false) || (UnitGroupCount(gv_hellionWave, c_unitCountAlive) == 0)))) {
        Wait(1.0, c_timeAI);
    }
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MorphToHellionTank", 0), true);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellionBattleModeEnabled_Init () {
    gt_HellionBattleModeEnabled = TriggerCreate("gt_HellionBattleModeEnabled_Func");
    TriggerEnable(gt_HellionBattleModeEnabled, false);
    TriggerAddEventUnitStartedAttack(gt_HellionBattleModeEnabled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Hut: Remove Harmless
//--------------------------------------------------------------------------------------------------
bool gt_InfestedHutRemoveHarmless_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Harmless") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(EventUnit(), "Harmless", gv_pLAYER_05_INFESTED, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedHutRemoveHarmless_Init () {
    gt_InfestedHutRemoveHarmless = TriggerCreate("gt_InfestedHutRemoveHarmless_Func");
    TriggerAddEventUnitAttacked(gt_InfestedHutRemoveHarmless, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_03_DOMINION_MAIN, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_04_DOMINION_RIGHT, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_07_DOMINION_LEFT, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_03_DOMINION_MAIN, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_04_DOMINION_RIGHT, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_07_DOMINION_LEFT, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_aI_FirstAttackHappening = true;
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab03MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/AC14B339"), null, UnitGroupUnit(gv_aI_FirstAttackWave, 1));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitGroupUnit(gv_aI_FirstAttackWave, 1)), 2.0, Color(100.00, 0.00, 0.00));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitGroupUnit(gv_aI_FirstAttackWave, 1), "zMission_Lab03|Line00122", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(UnitGroupUnit(gv_aI_FirstAttackWave, 2), "zMission_Lab03|Line00123", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab03|Line00194", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstAttackQ_Init () {
    gt_TransmissionFirstAttackQ = TriggerCreate("gt_TransmissionFirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First North Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstNorthAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_07_DOMINION_LEFT))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9DDFF7FC"), null, EventUnit());
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab03|Line00196", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstNorthAttackQ_Init () {
    gt_TransmissionFirstNorthAttackQ = TriggerCreate("gt_TransmissionFirstNorthAttackQ_Func");
    TriggerAddEventUnitRangePoint(gt_TransmissionFirstNorthAttackQ, null, PointFromId(512), 4.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Dominion Bunkers Q (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDominionBunkersQHard_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00038", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDominionBunkersQHard_Init () {
    gt_TransmissionDominionBunkersQHard = TriggerCreate("gt_TransmissionDominionBunkersQHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Large Wave Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLargeWaveIncomingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_largeWave;

    // Variable Initialization
    lv_largeWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_largeWave = AIWaveGetUnits(cai_wave_createdWave(10, gv_pLAYER_04_DOMINION_RIGHT));
    if ((libNtve_gf_UnitGroupIsDead(lv_largeWave) == false)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00150", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLargeWaveIncomingQ_Init () {
    gt_TransmissionLargeWaveIncomingQ = TriggerCreate("gt_TransmissionLargeWaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Enemy Structures pre-Naktul
//--------------------------------------------------------------------------------------------------
bool gt_AchievementEnemyStructurespreNaktul_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZLab03_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementEnemyStructurespreNaktul_Init () {
    gt_AchievementEnemyStructurespreNaktul = TriggerCreate("gt_AchievementEnemyStructurespreNaktul_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Queens Rescued pre-Naktul N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementQueensRescuedpreNaktulNH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_reinforcement_Timer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZLab03_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementQueensRescuedpreNaktulNH_Init () {
    gt_AchievementQueensRescuedpreNaktulNH = TriggerCreate("gt_AchievementQueensRescuedpreNaktulNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Enemy Structures All Destroyed H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementEnemyStructuresAllDestroyedH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Lab3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementEnemyStructuresAllDestroyedH_Init () {
    gt_AchievementEnemyStructuresAllDestroyedH = TriggerCreate("gt_AchievementEnemyStructuresAllDestroyedH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Structure Destroyed before Victory Lap
//--------------------------------------------------------------------------------------------------
bool gt_EnemyStructureDestroyedbeforeVictoryLap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_structuresLeft;

    // Variable Initialization
    lv_structuresLeft = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, 4) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_reinforcement_Timer) == 0.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    else {
    }
    lv_structuresLeft = UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    gv_structuresDestroyedS1Stat = (gv_structuresDestroyedS1Max - lv_structuresLeft);
    if ((gv_structuresDestroyedS1Stat >= 15)) {
        TriggerExecute(gt_AchievementEnemyStructurespreNaktul, true, false);
    }
    else {
    }
    if ((gv_structuresDestroyedS1Stat >= gv_structuresDestroyedS1Max)) {
        TriggerExecute(gt_AchievementEnemyStructuresAllDestroyedH, true, false);
    }
    else {
    }
    gv_structuresDestroyedS1Stat = MinI(gv_structuresDestroyedS1Stat, gv_structuresDestroyedS1Max);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyStructureDestroyedbeforeVictoryLap_Init () {
    gt_EnemyStructureDestroyedbeforeVictoryLap = TriggerCreate("gt_EnemyStructureDestroyedbeforeVictoryLap_Func");
    TriggerAddEventUnitDied(gt_EnemyStructureDestroyedbeforeVictoryLap, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Troops Killed by Crawlers
//--------------------------------------------------------------------------------------------------
bool gt_EnemyTroopsKilledbyCrawlers_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, 4) == true))) {
            return false;
        }

        if (!(((UnitGetType(libNtve_gf_KillingUnit()) == "SpineCrawler") || (UnitGetType(libNtve_gf_KillingUnit()) == "SporeCrawler")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemiesKilledByCrawlers += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyTroopsKilledbyCrawlers_Init () {
    gt_EnemyTroopsKilledbyCrawlers = TriggerCreate("gt_EnemyTroopsKilledbyCrawlers_Func");
    TriggerAddEventUnitDied(gt_EnemyTroopsKilledbyCrawlers, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    if ((ObjectiveGetState(gv_objectiveHoldOut) == c_objectiveStateActive)) {
        ObjectiveSetState(gv_objectiveHoldOut, c_objectiveStateFailed);
    }
    else {
    }
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/25D1EDA2"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cannon Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCannonDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraPan(gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(gv_pulseCannonUnit), 2.0, 225.0), 2.0, -1, 10.0, false);
    PingDestroy(gv_pulseCannonPing);
    TriggerExecute(gt_CannonExplosionScene, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCannonDestroyed_Init () {
    gt_VictoryCannonDestroyed = TriggerCreate("gt_VictoryCannonDestroyed_Func");
    TriggerAddEventUnitDied(gt_VictoryCannonDestroyed, UnitRefFromVariable("gv_pulseCannonUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(gv_kerrigan, c_unitStateInvulnerable, true);
    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyPulseCannonComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyPulseCannon) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZLab03_1", gv_pLAYER_01_USER);
    }
    else {
    }
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0BB46CF2"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent)));
    TextExpressionSetToken("Param/Expression/41CDD51B", "StructsDestroyed", IntToText(gv_structuresDestroyedS1Stat));
    TextExpressionSetToken("Param/Expression/41CDD51B", "StructsTotal", IntToText(gv_structuresDestroyedS1Max));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B5D59479"), TextExpressionAssemble("Param/Expression/41CDD51B"));
    TextExpressionSetToken("Param/Expression/BBAE1F5B", "QueensRescued", IntToText(gv_queensRescuedBeforeNaktul));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BC9AB3A2"), TextExpressionAssemble("Param/Expression/BBAE1F5B"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3D9385C5"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E0164B59"), IntToText(gv_enemiesKilledByCrawlers));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/40B01E93"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Hold Out Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab03Objective2");
    gv_objectiveHoldOut = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutCreate_Init () {
    gt_ObjectiveHoldOutCreate = TriggerCreate("gt_ObjectiveHoldOutCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Hold Out Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHoldOutCreate, true, false);
    Wait(1.0, c_timeReal);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab03Objective2", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutComplete_Init () {
    gt_ObjectiveHoldOutComplete = TriggerCreate("gt_ObjectiveHoldOutComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Hold Out Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHoldOutCreate, true, false);
    ObjectiveSetState(gv_objectiveHoldOut, c_objectiveStateFailed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutFailed_Init () {
    gt_ObjectiveHoldOutFailed = TriggerCreate("gt_ObjectiveHoldOutFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pulse Cannon Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPulseCannonCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pingme;

    // Variable Initialization
    lv_pingme = null;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab03Objective3");
    gv_objectiveDestroyPulseCannon = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_pulseCannonUnit), StringExternal("Param/Value/8121FADF"));
    gv_pulseCannonPing = PingLastCreated();
    libSwaC_gf_AddRemoveObjectiveRePing(PingLastCreated(), true, 300.0, 300.0);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_pulseCannonUnit), 10.0), 5.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(248)), 8.0), 0.25, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPulseCannonCreate_Init () {
    gt_ObjectiveDestroyPulseCannonCreate = TriggerCreate("gt_ObjectiveDestroyPulseCannonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pulse Cannon Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPulseCannonComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPulseCannonCreate, true, false);
    Wait(1.0, c_timeReal);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab03Objective3", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPulseCannonComplete_Init () {
    gt_ObjectiveDestroyPulseCannonComplete = TriggerCreate("gt_ObjectiveDestroyPulseCannonComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pulse Cannon Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPulseCannonFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPulseCannonCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyPulseCannon, c_objectiveStateFailed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPulseCannonFailed_Init () {
    gt_ObjectiveDestroyPulseCannonFailed = TriggerCreate("gt_ObjectiveDestroyPulseCannonFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rescue Trapped Queens Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueTrappedQueensCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZLab03Objective4");
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab03Objective4", 0, true, null, true);
    gv_objectiveRescueQueens = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueTrappedQueensCreate_Init () {
    gt_ObjectiveRescueTrappedQueensCreate = TriggerCreate("gt_ObjectiveRescueTrappedQueensCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rescue Trapped Queens Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueTrappedQueensUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRescueTrappedQueensCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZLab03Objective4", gv_rescue_QueensRescued, true, null, true);
    if ((gv_rescue_QueensRescued == 3)) {
        TriggerExecute(gt_ObjectiveRescueTrappedQueensComplete, true, false);
        TriggerExecute(gt_AchievementQueensRescuedpreNaktulNH, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueTrappedQueensUpdate_Init () {
    gt_ObjectiveRescueTrappedQueensUpdate = TriggerCreate("gt_ObjectiveRescueTrappedQueensUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rescue Trapped Queens Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueTrappedQueensComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueTrappedQueensCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZLab03Objective4", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueTrappedQueensComplete_Init () {
    gt_ObjectiveRescueTrappedQueensComplete = TriggerCreate("gt_ObjectiveRescueTrappedQueensComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rescue Trapped Queens Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueTrappedQueensFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueTrappedQueensCreate, true, false);
    ObjectiveSetState(gv_objectiveRescueQueens, c_objectiveStateFailed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueTrappedQueensFailed_Init () {
    gt_ObjectiveRescueTrappedQueensFailed = TriggerCreate("gt_ObjectiveRescueTrappedQueensFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CreepSetSpeed(c_creepSpeedDecay, 0.0);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_DOMINION_LEFT, 7);
    UnitSetTeamColorIndex(UnitFromId(254), 2);
    UnitPauseAll(true);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAdd(gv_cinematicHiddenUnits, gv_kerrigan);
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(786));
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    PlayerSetColorIndex(gv_pLAYER_01_USER, 4, true);
    UnitSetTeamColorIndex(gv_kerrigan, 6);
    UnitSetState(gv_kerrigan, c_unitStateFidget, false);
    gv_introMineralsTotal = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 15));
    while (!UnitGroupLoopDone()) {
        gv_introNumberOfMineralFields += 1;
        gv_introMineralFields[gv_introNumberOfMineralFields] = UnitGroupLoopCurrent();
        gv_introMineralCounts[gv_introNumberOfMineralFields] = libNtve_gf_UnitGetPropertyResources(UnitGroupLoopCurrent(), c_unitPropCurrent);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitCreate(1, "Drone", 0, gv_pLAYER_01_USER, PointFromId(405), 270.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCreate(1, "Drone", 0, gv_pLAYER_01_USER, PointFromId(411), 270.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCreate(1, "Drone", 0, gv_pLAYER_01_USER, PointFromId(428), 270.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCreate(1, "Drone", 0, gv_pLAYER_01_USER, PointFromId(429), 270.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    libNtve_gf_ShowHideUnit(UnitFromId(248), false);
    UnitCreate(1, "ExtendingBridgeDirtyNEWide10", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(248)), UnitGetFacing(UnitFromId(248)));
    gv_retractedBridge = UnitLastCreated();
    TriggerExecute(gt_IntroZerglings, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(381)), "Signal SoundDistant");
    ActorSend(ActorFromDoodad(DoodadFromId(521)), "Signal SoundDistant");
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetTeamColorIndex(UnitGroupLoopCurrent(), 7);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tempUnitGroup;

    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_IntroPilotCamera, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Lab02_Camera", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_IntroMusic, true, false);
    GameSetLighting("THorner05SSecurityCam", 0.0);
    CinematicOverlay(true, 1.0, "Assets\\Textures\\securitycam1.dds", 0.0, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Lab03|Line00008", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Lab03|Line00018", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Lab03|Line00050", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Lab03|Line00049", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Lab03|Line00051", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(99)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Lab03|Line00034", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Lab03|Line00035", c_transmissionDurationAdd, 0.0, true, 2, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    gv_cameraAmbienceFinished = true;
    CinematicOverlay(false, 2.0, "Assets\\Textures\\securitycam1.dds", 0.0, false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    GameSetLighting("DesertWorld", 0.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetTeamColorIndex(UnitGroupLoopCurrent(), 6);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetTeamColorIndex(UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetTeamColorIndex(UnitFromId(254), 2);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    libNtve_gf_PauseUnit(gv_introDropship, false);
    UnitSetPropertyFixed(gv_introDropship, c_unitPropHeight, 6.0);
    UnitSetHeight(gv_introDropship, 1.0, 6.0);
    libNtve_gf_SendActorMessageToUnit(gv_introDropship, "AnimPlay Default Stand,Work PlayForever 0.000000 0.500000");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(396), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(399), 6.0, -1, 10.0, true);
    SoundPlay(SoundLink("RaynorDropshipLand", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introSound = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 1.0, 1.0, 6.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.2, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_introDropship, "AnimPlay Default Stand,Morph,Start PlayForever 0.500000 0.500000");
    Wait(0.8, c_timeGame);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introDropship), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, 0.5);
    UnitSetPosition(gv_kerrigan, PointFromId(474), false);
    libNtve_gf_MakeUnitFacePoint(gv_kerrigan, PointFromId(460), 0.0);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    UnitBehaviorAdd(gv_kerrigan, "KerriganWalk", gv_kerrigan, 1);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(460)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(400), 0.0, 100, 10.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(102), 4.0, -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Lab03|Line00036", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TriggerExecute(gt_IntroZergSeparate, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    GameSetLighting("Aiur", 0.0);
    FogSetColor(Color(21.18, 53.73, 29.41));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(847), 0.0, 0.0, 0.0, true);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(908), "zBriefing_Lab03|Line00037", c_transmissionDurationAdd, 0.0, true, 1, 0);
    GameSetLighting("DesertWorld", 0.0);
    FogSetColor(Color(69.41, 59.22, 39.61));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(403), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Lab03|Line00038", c_transmissionDurationAdd, 0.0, true, 1, 0);
    GameSetLighting("Aiur", 0.0);
    FogSetColor(Color(21.18, 53.73, 29.41));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(847), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(908), "zBriefing_Lab03|Line00039", c_transmissionDurationAdd, 0.0, true, 1, 0);
    GameSetLighting("DesertWorld", 0.0);
    FogSetColor(Color(69.41, 59.22, 39.61));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(403), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Lab03|Line00046", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zBriefing_Lab03|Line00047", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    int autoF3C3E748_ae;
    int autoF3C3E748_ai;

    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Variable Initialization
    lv_fadeDuration = 0.0;
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == false) && (gv_introMusicFinished == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    if ((gv_cameraAmbienceFinished == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    }
    else {
    }
    SoundStop(gv_introSound, true);
    TriggerStop(gt_IntroZerglings);
    TriggerStop(gt_IntroPilotCamera);
    TriggerStop(gt_IntroZergSeparate);
    CameraShakeStop(gv_pLAYER_01_USER);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitRemove(UnitFromId(908));
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPosition(gv_kerrigan, PointFromId(574), false);
    UnitIssueOrder(gv_kerrigan, OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(1)), c_orderQueueReplace);
    PlayerSetColorIndex(gv_pLAYER_01_USER, 6, true);
    UnitSetTeamColorIndex(UnitFromId(254), 2);
    UnitBehaviorRemove(gv_kerrigan, "KerriganWalk", 1);
    UnitSetState(gv_kerrigan, c_unitStateFidget, true);
    UnitSetPropertyFixed(gv_introDropship, c_unitPropHeight, 1.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introDropship), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, 0.5);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(99)), c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CinematicOverlay(false, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, false);
    GameSetLighting("DesertWorld", 0.0);
    FogSetColor(Color(69.41, 59.22, 39.61));
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(15), null);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetTeamColorIndex(UnitGroupLoopCurrent(), 6);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetTeamColorIndex(UnitGroupLoopCurrent(), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetTeamColorIndex(UnitFromId(254), 2);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_DOMINION_LEFT, 5);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMineralsTotal);
    autoF3C3E748_ae = gv_introNumberOfMineralFields;
    autoF3C3E748_ai = 1;
    lv_i = 1;
    while ((autoF3C3E748_ai >= 0 && lv_i <= autoF3C3E748_ae) || (autoF3C3E748_ai <= 0 && lv_i >= autoF3C3E748_ae)) {
        UnitSetPropertyFixed(gv_introMineralFields[lv_i], c_unitPropResources, gv_introMineralCounts[lv_i]);
        if (lv_i == autoF3C3E748_ae) {
            break;
        }
        lv_i = lv_i + autoF3C3E748_ai;
    }
    RegionPlayableMapSet(RegionFromId(11));
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(41), true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    ActorSend(ActorFromDoodad(DoodadFromId(381)), "Signal SoundNormal");
    ActorSend(ActorFromDoodad(DoodadFromId(521)), "Signal SoundNormal");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_MarSara", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CreepSetSpeed(c_creepSpeedDecay, 100.0);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(572)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Pilot Camera
//--------------------------------------------------------------------------------------------------
bool gt_IntroPilotCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(910), 0.0, 100, 10.0, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 1.0, 1.0, 100.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(912), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00008", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00018", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00050", true), c_soundIndexAny))), 100, 10.0, true);
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00008", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00018", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00050", true), c_soundIndexAny)) + 1), c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(911), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00049", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00051", true), c_soundIndexAny)) - 1), 100, 10.0, true);
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00049", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00051", true), c_soundIndexAny))), c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(299), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00034", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00035", true), c_soundIndexAny)) - 1), 100, 10.0, true);
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00034", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Lab03|Line00035", true), c_soundIndexAny))), c_timeReal);
    Wait(2.0, c_timeGame);
    CameraShakeStop(gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroPilotCamera_Init () {
    gt_IntroPilotCamera = TriggerCreate("gt_IntroPilotCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerglings
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerglings_Func (bool testConds, bool runActions) {
    int auto5FD677B8_n;
    int auto5FD677B8_i;

    // Variable Declarations
    unitgroup lv_zerglings;

    // Variable Initialization
    lv_zerglings = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto5FD677B8_n = UnitGroupCount(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(29), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    auto5FD677B8_i = 1;
    while (auto5FD677B8_i <= auto5FD677B8_n) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(29)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_zerglings, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        auto5FD677B8_i = auto5FD677B8_i + 1;
    }
    while (true) {
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(lv_zerglings);
        while (!UnitGroupLoopDone()) {
            if ((RandomInt(1, 6) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerglings_Init () {
    gt_IntroZerglings = TriggerCreate("gt_IntroZerglings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg Separate
//--------------------------------------------------------------------------------------------------
bool gt_IntroZergSeparate_Func (bool testConds, bool runActions) {
    int init_i;

    int auto21D17BD2_ae;
    int auto21D17BD2_ai;
    int autoD0F364BF_ae;
    int autoD0F364BF_ai;

    // Variable Declarations
    unitgroup lv_tempUnitGroup;
    unit lv_currentUnit;
    point[9] lv_points;
    int lv_i;

    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();
    lv_currentUnit = null;
    init_i = 0;
    while (init_i <= 8) {
        lv_points[init_i] = null;
        init_i = init_i + 1;
    }
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    lv_points[1] = PointFromId(405);
    lv_points[2] = PointFromId(411);
    lv_points[3] = PointFromId(428);
    lv_points[4] = PointFromId(429);
    lv_tempUnitGroup = UnitGroup("Drone", gv_pLAYER_01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4);
    auto21D17BD2_ae = 4;
    auto21D17BD2_ai = 1;
    lv_i = 1;
    while ((auto21D17BD2_ai >= 0 && lv_i <= auto21D17BD2_ae) || (auto21D17BD2_ai <= 0 && lv_i >= auto21D17BD2_ae)) {
        lv_currentUnit = UnitGroupClosestToPoint(lv_tempUnitGroup, lv_points[lv_i]);
        UnitIssueOrder(lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_points[lv_i]), c_orderQueueReplace);
        UnitIssueOrder(lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(460)), c_orderQueueAddToEnd);
        UnitGroupRemove(lv_tempUnitGroup, lv_currentUnit);
        if (lv_i == auto21D17BD2_ae) {
            break;
        }
        lv_i = lv_i + auto21D17BD2_ai;
    }
    TriggerStop(gt_IntroZerglings);
    lv_points[1] = PointFromId(445);
    lv_points[2] = PointFromId(446);
    lv_points[3] = PointFromId(596);
    lv_points[4] = PointFromId(794);
    lv_tempUnitGroup = UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD0F364BF_ae = UnitGroupCount(UnitGroup("Zergling", gv_pLAYER_01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive);
    autoD0F364BF_ai = 1;
    lv_i = 1;
    while ((autoD0F364BF_ai >= 0 && lv_i <= autoD0F364BF_ae) || (autoD0F364BF_ai <= 0 && lv_i >= autoD0F364BF_ae)) {
        lv_currentUnit = UnitGroupClosestToPoint(lv_tempUnitGroup, lv_points[lv_i]);
        UnitIssueOrder(lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_points[lv_i]), c_orderQueueReplace);
        UnitIssueOrder(lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(460)), c_orderQueueAddToEnd);
        UnitGroupRemove(lv_tempUnitGroup, lv_currentUnit);
        if (lv_i == autoD0F364BF_ae) {
            break;
        }
        lv_i = lv_i + autoD0F364BF_ai;
    }
    Wait(3.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Drone", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(460)), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Zergling", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(460)), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZergSeparate_Init () {
    gt_IntroZergSeparate = TriggerCreate("gt_IntroZergSeparate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab03MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, 0);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameSetLighting("DesertWorldNight", 0.0);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_04_DOMINION_RIGHT, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_07_DOMINION_LEFT, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_07_DOMINION_LEFT, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), RegionGetCenter(RegionFromId(47))) < 2.0)) {
            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(RegionGetCenter(RegionFromId(47)), 5.0, AngleBetweenPoints(RegionGetCenter(RegionFromId(47)), UnitGetPosition(UnitGroupLoopCurrent()))), false);
        }
        else {
            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(RegionGetCenter(RegionFromId(47)), RandomFixed(2.5, 3.5), AngleBetweenPoints(RegionGetCenter(RegionFromId(47)), UnitGetPosition(UnitGroupLoopCurrent()))), false);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), RegionGetCenter(RegionFromId(48))) < 2.0)) {
            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(RegionGetCenter(RegionFromId(48)), 5.0, AngleBetweenPoints(RegionGetCenter(RegionFromId(48)), UnitGetPosition(UnitGroupLoopCurrent()))), false);
        }
        else {
            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(RegionGetCenter(RegionFromId(48)), RandomFixed(2.5, 3.5), AngleBetweenPoints(RegionGetCenter(RegionFromId(48)), UnitGetPosition(UnitGroupLoopCurrent()))), false);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionFromId(23), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(431), 0.0, -1, 10, true);
    TriggerExecute(gt_MidCreateNydusWorm1, true, false);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(432), 0.0, -1, 10, true);
    TriggerExecute(gt_MidCreateNydusWorm2, true, false);
    Wait(3.7, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(120), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(137), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab03|Line00152", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab03|Line00153", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00152", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(6.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(299), 0.0, -1, 10, true);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Lab03|Line00153", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    int auto98A4F203_n;
    int auto98A4F203_i;
    int auto65C1BADB_n;
    int auto65C1BADB_i;
    int auto265B5666_n;
    int auto265B5666_i;

    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidCreateNydusWorm1);
    TriggerStop(gt_MidCreateNydusWorm2);
    if ((gv_midCinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitIssueOrder(UnitFromId(248), Order(AbilityCommand("ExtendingBridgeDirtyNEWide10Out", 0)), c_orderQueueReplace);
    RegionPlayableMapSet(RegionFromId(1));
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    SoundStop(gv_midNydusSound1, true);
    SoundStop(gv_midNydusSound2, true);
    SoundStop(gv_midRockSound1, true);
    SoundStop(gv_midRockSound2, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/47613263"), null, PointFromId(139));
    gv_reinforcementsHaveArrived = true;
    if ((UnitIsAlive(gv_kerrigan) == false)) {
        libSwaC_gf_ReviveHeroInstantly(0, false);
    }
    else {
    }
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    while ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade) <= 200)) {
        UnitCreate(1, "Overlord", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(1187), 5.0)), libNtve_gf_RandomAngle());
    }
    libSwaC_gf_EnableDisableNeedOverlordInfo(false);
    if ((UnitIsAlive(gv_midNydus1) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWorm", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(46));
    }
    else {
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CAC79136"), null, PointFromId(46));
    gf_PingNydusWorm(PointFromId(46));
    if ((UnitIsAlive(gv_midNydus2) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWorm", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(49));
    }
    else {
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A1212FD8"), null, PointFromId(49));
    gf_PingNydusWorm(PointFromId(49));
    auto98A4F203_n = gv_reinforcementCount;
    auto98A4F203_i = 1;
    while (auto98A4F203_i <= auto98A4F203_n) {
        if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) >= 200)) {
            break;
        }
        else {
        }
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(46), 5.0)), libNtve_gf_RandomAngle());
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(49), 5.0)), libNtve_gf_RandomAngle());
        auto98A4F203_i = auto98A4F203_i + 1;
    }
    auto65C1BADB_n = 2;
    auto65C1BADB_i = 1;
    while (auto65C1BADB_i <= auto65C1BADB_n) {
        if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) >= 199)) {
            break;
        }
        else {
        }
        UnitCreate(1, "Queen", 0, gv_pLAYER_01_USER, PointFromId(46), 270.0);
        if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) >= 199)) {
            break;
        }
        else {
        }
        UnitCreate(1, "Queen", 0, gv_pLAYER_01_USER, PointFromId(49), 270.0);
        auto65C1BADB_i = auto65C1BADB_i + 1;
    }
    if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) < (200 - (FixedToInt((gv_reinforcementCount * 0.5)) + 4)))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWorm", 0, gv_pLAYER_02_RESCUEZERG, PointFromId(503));
        auto265B5666_n = gv_reinforcementCount;
        auto265B5666_i = 1;
        while (auto265B5666_i <= auto265B5666_n) {
            UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionCircle(PointFromId(503), 5.0)), libNtve_gf_RandomAngle());
            auto265B5666_i = auto265B5666_i + 1;
        }
        UnitCreate(2, "Queen", 0, gv_pLAYER_01_USER, PointFromId(503), 270.0);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/655423E6"), null, PointFromId(503));
        gf_PingNydusWorm(PointFromId(503));
    }
    else {
    }
    UnitRemove(gv_retractedBridge);
    libNtve_gf_ShowHideUnit(UnitFromId(248), true);
    Wait(0.1, c_timeGame);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Create Nydus Worm 1
//--------------------------------------------------------------------------------------------------
bool gt_MidCreateNydusWorm1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_location;
    unit lv_nydus;
    unitgroup lv_spawnedUnits;
    timer lv_periodTimer;

    // Variable Initialization
    lv_location = null;
    lv_nydus = null;
    lv_spawnedUnits = UnitGroupEmpty();
    lv_periodTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_location = PointFromId(46);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWorm", 0, gv_pLAYER_02_RESCUEZERG, lv_location);
    lv_nydus = UnitLastCreated();
    gv_midNydus1 = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_nydus, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Birth 01", 0, c_animTimeDefault);
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_nydus, true);
    SoundPlay(SoundLink("Event_Lab3_NydusGreater_Birth1", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midNydusSound1 = SoundLastPlayed();
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midRockSound1 = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 0.5, 2.0);
    UnitCargoCreate(lv_nydus, "Zergling", gv_reinforcementCount);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_nydus, "Queen", 2);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitCargoLastCreatedGroup());
    Wait(5.6, c_timeGame);
    UnitIssueOrder(lv_nydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCreateNydusWorm1_Init () {
    gt_MidCreateNydusWorm1 = TriggerCreate("gt_MidCreateNydusWorm1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Create Nydus Worm 2
//--------------------------------------------------------------------------------------------------
bool gt_MidCreateNydusWorm2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_location;
    unit lv_nydus;
    unitgroup lv_spawnedUnits;
    timer lv_periodTimer;

    // Variable Initialization
    lv_location = null;
    lv_nydus = null;
    lv_spawnedUnits = UnitGroupEmpty();
    lv_periodTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_location = PointFromId(49);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWorm", 0, gv_pLAYER_02_RESCUEZERG, lv_location);
    lv_nydus = UnitLastCreated();
    gv_midNydus2 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(lv_nydus, false);
    Wait(0.1, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_nydus, true);
    SoundPlay(SoundLink("Event_Lab3_NydusGreater_Birth2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midNydusSound2 = SoundLastPlayed();
    SoundPlay(SoundLink("Destructible_RockDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midRockSound2 = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.5, 0.5, 2.0);
    UnitCargoCreate(lv_nydus, "Zergling", gv_reinforcementCount);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitCargoLastCreatedGroup());
    UnitCargoCreate(lv_nydus, "Queen", 2);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitCargoLastCreatedGroup());
    Wait(3.6, c_timeGame);
    UnitIssueOrder(lv_nydus, Order(AbilityCommand("GreaterNydusWormTransport", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCreateNydusWorm2_Init () {
    gt_MidCreateNydusWorm2 = TriggerCreate("gt_MidCreateNydusWorm2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab03_MusicCutscene2";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab03MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    int autoBFB44561_ae;
    int autoBFB44561_ai;
    int auto4983CC75_ae;
    int auto4983CC75_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(1));
    UnitPauseAll(true);
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_03_DOMINION_MAIN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_04_DOMINION_RIGHT, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_07_DOMINION_LEFT, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(UnitGroup("Drone", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGroupCount(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        }
        else {
            UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGroupLoopCurrent() != gv_pulseCannonUnit) && (UnitGroupLoopCurrent() != gv_introDropship)) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    UnitCreate(1, "KerriganGhostLab", 0, gv_pLAYER_01_USER, PointFromId(479), 45.0);
    libSwaC_gf_RegisterCampaignKerrigan(UnitLastCreated());
    gv_victoryKerrigan = UnitLastCreated();
    UnitIssueOrder(gv_victoryKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetTeamColorIndex(gv_victoryKerrigan, 6);
    autoBFB44561_ae = gv_spawningPool_NumberOfDroneActors;
    autoBFB44561_ai = 1;
    lv_i = 1;
    while ((autoBFB44561_ai >= 0 && lv_i <= autoBFB44561_ae) || (autoBFB44561_ai <= 0 && lv_i >= autoBFB44561_ae)) {
        libNtve_gf_KillModel(gv_spawningPool_DroneActors[lv_i]);
        if (lv_i == autoBFB44561_ae) {
            break;
        }
        lv_i = lv_i + autoBFB44561_ai;
    }
    auto4983CC75_ae = gv_spine_NumberOfDroneActors;
    auto4983CC75_ai = 1;
    lv_i = 1;
    while ((auto4983CC75_ai >= 0 && lv_i <= auto4983CC75_ae) || (auto4983CC75_ai <= 0 && lv_i >= auto4983CC75_ae)) {
        libNtve_gf_KillModel(gv_spine_DroneActors[lv_i]);
        if (lv_i == auto4983CC75_ae) {
            break;
        }
        lv_i = lv_i + auto4983CC75_ai;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(540), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(543), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab03|Line00028", true), c_soundIndexAny))), -1, 10.0, true);
    libNtve_gf_PauseUnit(UnitFromId(248), false);
    UnitIssueOrder(UnitFromId(248), Order(AbilityCommand("ExtendingBridgeNEWide10Out", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("DrakkenPulseCannon_explode", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryExplodeSound = SoundLastPlayed();
    TriggerExecute(gt_VictoryBattle, true, false);
    SoundPlay(SoundLink("DrakkenPulseCannon_explode_metalDebris1", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryDebrisSound = SoundLastPlayed();
    SoundPlay(SoundLink("Lab03_CS_EndWin", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryZergSound = SoundLastPlayed();
    TriggerExecute(gt_VictoryMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(2.2, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 1.5);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00028", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(481), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(42), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab03|Line00132", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab03|Line00133", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Lab03|Line00132", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerStop(gt_VictoryBattle);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00133", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Lab03|Line00177", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(324), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Lab03|Line00177", true), c_soundIndexAny))), -1, 10.0, true);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(37)), c_orderQueueReplace);
    UnitIssueOrder(gv_victoryKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(546)), c_orderQueueReplace);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(12);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(547), 0.0, -1, 10.0, true);
    UnitIssueOrder(gv_victoryKerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_victoryKerrigan, PointFromId(544), false);
    libNtve_gf_MakeUnitFacePoint(gv_victoryKerrigan, PointFromId(546), 0.0);
    UnitBehaviorAdd(gv_victoryKerrigan, "KerriganWalk", gv_victoryKerrigan, 1);
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(549), 2.0, -1, 10.0, true);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(546)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    UnitRemove(gv_victoryKerrigan);
    SoundPlay(SoundLink("Scripted_Lab03_KerriganEntersSpaceship", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryLoadSound = SoundLastPlayed();
    Wait(3.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Lab03|Line00031", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryBattle);
    UnitPauseAll(true);
    SoundStop(gv_victoryExplodeSound, true);
    SoundStop(gv_victoryDebrisSound, true);
    SoundStop(gv_victoryZergSound, true);
    SoundStop(gv_victoryLoadSound, true);
    if ((gv_victoryMusicCompleted == false)) {
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Battle
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBattle_Func (bool testConds, bool runActions) {
    int auto2CFE1640_n;
    int auto2CFE1640_i;
    int autoA8153783_n;
    int autoA8153783_i;
    int auto25D96CA4_n;
    int auto25D96CA4_i;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(gv_pulseCannonUnit, true);
    libNtve_gf_PauseUnit(gv_pulseCannonUnit, false);
    UnitKill(gv_pulseCannonUnit);
    auto2CFE1640_n = 10;
    auto2CFE1640_i = 1;
    while (auto2CFE1640_i <= auto2CFE1640_n) {
        UnitCreate(1, "Marine", 0, gv_pLAYER_03_DOMINION_MAIN, RegionRandomPoint(RegionFromId(26)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(31))), c_orderQueueReplace);
        auto2CFE1640_i = auto2CFE1640_i + 1;
    }
    autoA8153783_n = 30;
    autoA8153783_i = 1;
    while (autoA8153783_i <= autoA8153783_n) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(32)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(33))), c_orderQueueReplace);
        autoA8153783_i = autoA8153783_i + 1;
    }
    Wait(1.0, c_timeGame);
    while (true) {
        auto25D96CA4_n = 3;
        auto25D96CA4_i = 1;
        while (auto25D96CA4_i <= auto25D96CA4_n) {
            UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(35)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(36))), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(33))), c_orderQueueAddToEnd);
            auto25D96CA4_i = auto25D96CA4_i + 1;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBattle_Init () {
    gt_VictoryBattle = TriggerCreate("gt_VictoryBattle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZLab03_MusicOutro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DEBUG_SkipTimer_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_HandleKerriganDeath_Init();
    gt_BroodlingsSpawnFromHutDeath_Init();
    gt_CreepTumorUsed_Init();
    gt_AttachInfoTextPlayerTraining_Init();
    gt_StartGameStage01Q_Init();
    gt_StartHarvesting_Init();
    gt_TransmissionStage01OpeningQ_Init();
    gt_StartGameStage02_Init();
    gt_ShowArmyButtonQ_Init();
    gt_ArmyButtonMusicStinger_Init();
    gt_PlayerUnitSpawned_Init();
    gt_PlayerUnitMorphed_Init();
    gt_QueenSandbagCrushing_Init();
    gt_SpawningPoolLesson_Init();
    gt_SpawningPoolDroneIssuedOrder_Init();
    gt_SpawningPoolStarted_Init();
    gt_SpawningPoolCanceled_Init();
    gt_SpawningPoolCompleted_Init();
    gt_SpawningPoolMutationUIUpdate_Init();
    gt_ZerglingLesson_Init();
    gt_ZerglingStarted_Init();
    gt_ZerglingCompleted_Init();
    gt_TransmissionZerglingReminderQ_Init();
    gt_ZerglingMorphUIUpdate_Init();
    gt_SpineCrawlerLesson_Init();
    gt_SpineCrawlerButtonPressed_Init();
    gt_SpineCrawlerDroneIssuedOrder_Init();
    gt_SpineCrawlerStarted_Init();
    gt_SpineCrawlerCanceled_Init();
    gt_SpineCrawlerComplete_Init();
    gt_TransmissionSpineCrawlerQ_Init();
    gt_TransmissionSpineCrawlersWestQ_Init();
    gt_SpineCrawlerMutationUIUpdate_Init();
    gt_QueenLesson_Init();
    gt_QueenHatcherySelected_Init();
    gt_QueenStarted_Init();
    gt_QueenCompleted_Init();
    gt_TransmissionQueenLessonQ_Init();
    gt_ExtractorLesson_Init();
    gt_TransmissionBuildExtractorQ_Init();
    gt_ExtractorDroneSelected_Init();
    gt_ExtractorStarted_Init();
    gt_ExtractorComplete_Init();
    gt_CollectGasOrderIssued_Init();
    gt_TransmissionDronesHarvestGasQ_Init();
    gt_OverlordLesson_Init();
    gt_OverlordHatcherySelected_Init();
    gt_OverlordStarted_Init();
    gt_OverlordCompleted_Init();
    gt_TransmissionOverlordLessonQ_Init();
    gt_DronesLesson_Init();
    gt_DronesHatcherySelected_Init();
    gt_DronesButtonPressed_Init();
    gt_TransmissionDronesLessonQ_Init();
    gt_QueenRescueTimer_Init();
    gt_QueenRescueIntro_Init();
    gt_QueenRescueFailsafe_Init();
    gt_TransmissionQueenRescueQ_Init();
    gt_QueenRescueIntroRightQ_Init();
    gt_QueenRescuePlayerGetsCloseRight_Init();
    gt_QueenRescueBeingAttackedRight_Init();
    gt_QueenRescueRight_Init();
    gt_QueenRescuePingRight_Init();
    gt_QueenRescueIntroLeft_Init();
    gt_QueenRescuePlayerGetsCloseLeft_Init();
    gt_QueenRescueBeingAttackedLeft_Init();
    gt_QueenRescueLeft_Init();
    gt_QueenRescuePingLeft_Init();
    gt_QueenRescueIntroCenter_Init();
    gt_QueenRescuePlayerGetsCloseCenter_Init();
    gt_QueenRescueBeingAttackedCenter_Init();
    gt_QueenRescueCenter_Init();
    gt_QueenRescuePingCenter_Init();
    gt_TransmissionQueenRescueUpdateQ_Init();
    gt_DominionBaseWarningLeft_Init();
    gt_DominionBaseWarningMiddle_Init();
    gt_DominionBaseWarningRight_Init();
    gt_DominionBaseWarningQ_Init();
    gt_KerriganDiesQ_Init();
    gt_EvolutionUpgradePurchased_Init();
    gt_CreateTimerWindowReinforcements_Init();
    gt_HoldOutTimerFinished_Init();
    gt_CreateNydusWorm3_Init();
    gt_CreateNydusWorm4_Init();
    gt_CreateNydusWormNaktul_Init();
    gt_NaktulDontDie_Init();
    gt_HoldOutFinishedEarly_Init();
    gt_SetLightingandSoundtrack_Init();
    gt_SetLightingandSoundtrackEarlyFinish_Init();
    gt_TransmissionReinforcementsClose1Q_Init();
    gt_TransmissionReinforcementsClose2Q_Init();
    gt_TransmissionNaktulArrivesQ_Init();
    gt_ZergAttackLeftBase_Init();
    gt_ZergAttackLeftBaseReactionQ_Init();
    gt_ZergAttackRightBase_Init();
    gt_ZergAttackRightBaseReactionQ_Init();
    gt_BottomMarinesReaction_Init();
    gt_BottomMarinesSpeakerDies_Init();
    gt_BottomMarinesFleeQ_Init();
    gt_TransmissionMainBaseInvasionQ_Init();
    gt_CannonExplosionScene_Init();
    gt_StartAI_Init();
    gt_AttackWaveFirstScriptedWave_Init();
    gt_AttackWaveCustomTarget01_Init();
    gt_AttackWaveCustomTarget02_Init();
    gt_AttackWaveTargetNextWest_Init();
    gt_AttackWaveTargetNextEast_Init();
    gt_HoldOutFinal2Minutes_Init();
    gt_SetHellionWave_Init();
    gt_HellionBattleModeEnabled_Init();
    gt_InfestedHutRemoveHarmless_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_AIUpgradesHard_Init();
    gt_TransmissionFirstAttackQ_Init();
    gt_TransmissionFirstNorthAttackQ_Init();
    gt_TransmissionDominionBunkersQHard_Init();
    gt_TransmissionLargeWaveIncomingQ_Init();
    gt_AchievementEnemyStructurespreNaktul_Init();
    gt_AchievementQueensRescuedpreNaktulNH_Init();
    gt_AchievementEnemyStructuresAllDestroyedH_Init();
    gt_EnemyStructureDestroyedbeforeVictoryLap_Init();
    gt_EnemyTroopsKilledbyCrawlers_Init();
    gt_DefeatBaseDead_Init();
    gt_VictoryCannonDestroyed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveHoldOutCreate_Init();
    gt_ObjectiveHoldOutComplete_Init();
    gt_ObjectiveHoldOutFailed_Init();
    gt_ObjectiveDestroyPulseCannonCreate_Init();
    gt_ObjectiveDestroyPulseCannonComplete_Init();
    gt_ObjectiveDestroyPulseCannonFailed_Init();
    gt_ObjectiveRescueTrappedQueensCreate_Init();
    gt_ObjectiveRescueTrappedQueensUpdate_Init();
    gt_ObjectiveRescueTrappedQueensComplete_Init();
    gt_ObjectiveRescueTrappedQueensFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroPilotCamera_Init();
    gt_IntroZerglings_Init();
    gt_IntroZergSeparate_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidCreateNydusWorm1_Init();
    gt_MidCreateNydusWorm2_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryBattle_Init();
    gt_VictoryMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
