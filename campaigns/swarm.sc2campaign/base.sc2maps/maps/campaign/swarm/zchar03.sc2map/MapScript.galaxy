//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Old Soldiers
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "aiCA5998BB"
include "ai754452A0"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_WARFIELDOutpost = 2;
const int gv_pLAYER_03_WARFIELDCourtyard = 3;
const int gv_pLAYER_04_WARFIELDExpansion = 4;
const int gv_pLAYER_05_WARFIELDCitadel = 5;
const int gv_pLAYER_06_WARFIELDBoneyard = 6;
const int gv_pLAYER_09_ZAGARA = 9;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
playergroup gv_dominionPlayerSlots;
unit gv_tHEONEKERRIGAN;
unit gv_tacOpsCenter;
unitgroup gv_leftExpansionVikings;
fixed gv_tacOpsLife;
int gv_currentTransmission;
sound gv_secondaryAmbienceSound;
revealer gv_timedAttackVision;
timer gv_timedAttackTimer;
int gv_timedAttackTimerWindow;
int[4] gv_timedAttackPing;
bool gv_timedAttackStarted;
bool gv_timedAttackActive;
int[3] gv_scienceFacilityPings;
unit gv_scienceFacilityRight;
unit gv_scienceFacilityLeft;
int gv_scienceFacilitiesDestroyed;
fixed gv_nukeDropInterval;
timer gv_nukeDropTimer;
int gv_nukeCounter;
actor gv_nukeActor;
int gv_failsafeLastNuked;
sound gv_nukeSeekSound;
timer gv_doubleNukeTimer;
int gv_tacOpsCenterPing;
bool gv_kerriganDieTauntedBefore;
timer gv_speedRunTimer;
int gv_sneakAttackStructuresDestroyed;
int gv_zergKilledByNukes;
unit gv_nukeUnit;
int gv_objective_Primary_DestroyStuff;
int gv_objective_Primary_TacOps;
int gv_objective_Bonus_DestroySciFac;
bool gv_introCinematicCompleted;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
actor gv_introActor;
bool gv_introBaseUnhidden;
sound gv_introZergSound;
sound gv_introBaseSound;
bool gv_introMusicFinished;
unitgroup gv_midCinePlayerUnits;
bool gv_midComplete;
sound gv_midNukeLaunch;
sound gv_midNukeSeek;
unit gv_midMainLair;
bool gv_midMusicFinished;
unitgroup gv_frontLineUnits;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;
sound gv_victorySound;

void InitGlobals () {
    int init_i;

    gv_gameOver = false;
    gv_inCinematic = false;
    gv_mapMusicTrack = null;
    gv_dominionPlayerSlots = PlayerGroupEmpty();
    gv_tHEONEKERRIGAN = null;
    gv_tacOpsCenter = UnitFromId(339);
    gv_leftExpansionVikings = UnitGroupEmpty();
    gv_tacOpsLife = 0.0;
    gv_currentTransmission = c_invalidTransmissionId;
    gv_secondaryAmbienceSound = null;
    gv_timedAttackVision = null;
    gv_timedAttackTimer = TimerCreate();
    gv_timedAttackTimerWindow = c_timerWindowNone;
    init_i = 0;
    while (init_i <= 3) {
        gv_timedAttackPing[init_i] = c_invalidPingId;
        init_i = init_i + 1;
    }
    gv_timedAttackStarted = false;
    gv_timedAttackActive = false;
    init_i = 0;
    while (init_i <= 2) {
        gv_scienceFacilityPings[init_i] = c_invalidPingId;
        init_i = init_i + 1;
    }
    gv_scienceFacilityRight = null;
    gv_scienceFacilityLeft = null;
    gv_scienceFacilitiesDestroyed = 0;
    gv_nukeDropInterval = 0.0;
    gv_nukeDropTimer = TimerCreate();
    gv_nukeCounter = 0;
    gv_nukeActor = null;
    gv_failsafeLastNuked = 0;
    gv_nukeSeekSound = null;
    gv_doubleNukeTimer = TimerCreate();
    gv_tacOpsCenterPing = c_invalidPingId;
    gv_kerriganDieTauntedBefore = false;
    gv_speedRunTimer = TimerCreate();
    gv_sneakAttackStructuresDestroyed = 0;
    gv_zergKilledByNukes = 0;
    gv_nukeUnit = UnitFromId(282);
    gv_objective_Primary_DestroyStuff = c_invalidObjectiveId;
    gv_objective_Primary_TacOps = c_invalidObjectiveId;
    gv_objective_Bonus_DestroySciFac = c_invalidObjectiveId;
    gv_introCinematicCompleted = false;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introActor = null;
    gv_introBaseUnhidden = false;
    gv_introZergSound = null;
    gv_introBaseSound = null;
    gv_introMusicFinished = false;
    gv_midCinePlayerUnits = UnitGroupEmpty();
    gv_midComplete = false;
    gv_midNukeLaunch = null;
    gv_midNukeSeek = null;
    gv_midMainLair = null;
    gv_midMusicFinished = false;
    gv_frontLineUnits = UnitGroupEmpty();
    gv_victoryCinematicCompleted = false;
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
    gv_victorySound = null;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AddRemoveReticule (unit lp_uNIT);
int gf_NumberofCombatUnitsInRegion (int lp_player, region lp_targetRegion);
void gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits);
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
bool gf_IsGoodNukeLocation (point lp_target);
point gf_CenterofArmy (unitgroup lp_army);
unitgroup gf_ArmyClusterFromUnit (unitgroup lp_army, unit lp_originUnit);
point gf_NextNukeLocationArmy ();
point gf_NextNukeLocationKerrigan ();
point gf_NextNukeLocationBase ();
void gf_DropNuke (point lp_cHOSEN_POINT);
void gf_MidDropNukeAtPoint1 (point lp_cHOSEN_POINT);
void gf_MidDropNukeAtPoint2 (point lp_cHOSEN_POINT);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_RemoveHarmless;
trigger gt_PrepareKerriganRevive;
trigger gt_DEBUGMidCine;
trigger gt_StartGameStage01;
trigger gt_StartingSequenceQ;
trigger gt_StartGameStage02Q;
trigger gt_StartTimedAttackTimer;
trigger gt_CreatePingTimedAttackSpots;
trigger gt_DominionDestroyedFrontLine;
trigger gt_DominionDestroyedBottomExpansion;
trigger gt_DominionDestroyedMissileTurret;
trigger gt_ZagaraBuildPlayerBase;
trigger gt_MakeZagaraStructureUntargetable;
trigger gt_TransmissionZagaraBuildBase;
trigger gt_TimedAttackTimerExpires;
trigger gt_AllUnitsDestroyedProgresstoStage2;
trigger gt_Reinforcements01;
trigger gt_TransmissionReinforcements01Q;
trigger gt_Reinforcements02;
trigger gt_TransmissionReinforcements02Q;
trigger gt_TransmissionNukeWarningQ;
trigger gt_KerriganDiesinTimedAttack;
trigger gt_TransmissionHoldTheLineQ;
trigger gt_TransmissionFrontGateDamagedQ;
trigger gt_TransmissionThorAggroQ;
trigger gt_CourtyardDropPodDefense;
trigger gt_ScientistsEvacRight;
trigger gt_TransmissionRightEvacuationQ;
trigger gt_ScientistEvacLeft;
trigger gt_TransmissionLeftEvacuationQ;
trigger gt_ExpansionDropPodDefense;
trigger gt_ExpansionClearedDropDrones;
trigger gt_TransmissionExpansionSecuredQ;
trigger gt_BottomExpansionDropPodDefense;
trigger gt_TransmissionBoneyardEnteredQ;
trigger gt_BoneyardReinforcements;
trigger gt_PlayerPressedAberrationButton;
trigger gt_Transmission1AberrationQ;
trigger gt_Transmission2AberrationsQ;
trigger gt_TransmissionBoneyardZergQ;
trigger gt_TerranBiomassReaction;
trigger gt_IntroScienceFacilitiesObjectiveQ;
trigger gt_TransmissionScienceFacilitiesIntro;
trigger gt_ScienceFacilityDestroyed;
trigger gt_TransmissionScienceFacilityDestroyedQ;
trigger gt_StartRepeatingNukeTimer;
trigger gt_TransmissionNukeLaunchedQ;
trigger gt_NukeReticleExplanation;
trigger gt_NukeTimerExpires;
trigger gt_NukeDropLogic;
trigger gt_CreatePingTacticalOpsCenter;
trigger gt_BridgeDropPodDefenses;
trigger gt_TransmissionTacOpsDropPodDefenseQ;
trigger gt_BossDamagedBossEvents;
trigger gt_BossWarfieldRetreats;
trigger gt_BossDropPodDefense;
trigger gt_TransmissionRepairTacOpsQ;
trigger gt_BossRepairTacOpsCenter;
trigger gt_TransmissionBridgeTauntQ;
trigger gt_TransmissionBossBanelings3Q;
trigger gt_TransmissionBossLastDitchNukeQ;
trigger gt_TipMissionHelpQ;
trigger gt_TransmissionKerriganDiesTauntQ;
trigger gt_TransmissionKerriganRevivesTauntQ;
trigger gt_TransmissionAtMainBridgeQ;
trigger gt_TransmissionBridgeGhostSquadsQ;
trigger gt_StartAIAttackWaves;
trigger gt_AIUpgradesHard;
trigger gt_AIUnlimitedResources;
trigger gt_DominionScannerSweepNW;
trigger gt_DominionScannerSweepSE;
trigger gt_TransmissionAIWaves1AssaultTeamsQ;
trigger gt_AchievementSneakAttackStructures;
trigger gt_AchievementTimedRunNH;
trigger gt_AchievementDestroyPFortH;
trigger gt_SneakAttackStructureDestroyed;
trigger gt_ZergKilledByNukes;
trigger gt_DefeatBaseDies;
trigger gt_VictoryDestroyTacOpsCenter;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDestroyStuffCreate;
trigger gt_ObjectiveDestroyStuffComplete;
trigger gt_ObjectiveDestroyTacOpsCreate;
trigger gt_ObjectiveDestroyTacOpsComplete;
trigger gt_ObjectiveDestroyScienceFacilitiesCreate;
trigger gt_ObjectiveDestroyScienceFacilitiesComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroMusic;
trigger gt_IntroMusicSkipped;
trigger gt_IntroFrontGate;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidMusic;
trigger gt_MidSpawnZergForces;
trigger gt_MidBaseZergForces;
trigger gt_MidDropNukeonZergForces;
trigger gt_MidDropNukeonZergBase;
trigger gt_MidAberrationIntro;
trigger gt_MidRecreateZergBase;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerg;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    init_i = 0;
    while (init_i <= 16) {
        cai_playerAI[init_i] = null;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiCA5998BB") { aiCA5998BB_start(p); }
    if (cai_playerAI[p] == "ai754452A0") { ai754452A0_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { aiCA5998BB_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai754452A0") { ai754452A0_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { return aiCA5998BB_getCustomData(p); }
    if (cai_playerAI[p] == "ai754452A0") { return ai754452A0_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { aiCA5998BB_waves_run(p, target); }
    if (cai_playerAI[p] == "ai754452A0") { ai754452A0_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { aiCA5998BB_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai754452A0") { ai754452A0_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiCA5998BB") { aiCA5998BB_waves_stop(); }
    if (ai == "ai754452A0") { ai754452A0_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { aiCA5998BB_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai754452A0") { ai754452A0_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { aiCA5998BB_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai754452A0") { ai754452A0_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { return aiCA5998BB_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai754452A0") { return ai754452A0_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { return aiCA5998BB_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai754452A0") { return ai754452A0_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCA5998BB") { return aiCA5998BB_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai754452A0") { return ai754452A0_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiCA5998BB", 5);
    cai_start("ai754452A0", 2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(6);
    AICampaignStart(9);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 9);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 9);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_AddRemoveReticule_Trigger = null;
unit auto_gf_AddRemoveReticule_lp_uNIT;

void gf_AddRemoveReticule (unit lp_uNIT) {
    auto_gf_AddRemoveReticule_lp_uNIT = lp_uNIT;

    if (auto_gf_AddRemoveReticule_Trigger == null) {
        auto_gf_AddRemoveReticule_Trigger = TriggerCreate("auto_gf_AddRemoveReticule_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddRemoveReticule_Trigger, false, false);
}

bool auto_gf_AddRemoveReticule_TriggerFunc (bool testConds, bool runActions) {
    unit lp_uNIT = auto_gf_AddRemoveReticule_lp_uNIT;

    // Variable Declarations
    actor lv_reticle;

    // Variable Initialization
    lv_reticle = null;

    // Implementation
    while (!((gv_inCinematic == false) && (libNtve_gf_UnitIsVisibleToPlayer(lp_uNIT, gv_pLAYER_01_USER) == true))) {
        Wait(0.3, c_timeGame);
    }
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(2, 0, null, lp_uNIT, "Center");
    lv_reticle = libNtve_gf_ActorLastCreated();
    while (!(((AILastAttacker(lp_uNIT) != null) || (UnitIsAlive(lp_uNIT) == false)))) {
        Wait(0.3, c_timeGame);
    }
    libNtve_gf_KillModel(lv_reticle);
    return true;
}

int gf_NumberofCombatUnitsInRegion (int lp_player, region lp_targetRegion) {
    // Variable Declarations
    int lv_count;

    // Variable Initialization
    lv_count = 0;

    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, lp_player, lp_targetRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "SpineCrawler") || (UnitGetType(UnitGroupLoopCurrent()) == "SpineCrawlerUprooted") || (UnitGetType(UnitGroupLoopCurrent()) == "SporeCrawler") || (UnitGetType(UnitGroupLoopCurrent()) == "SporeCrawlerUprooted"))) {
            lv_count += 1;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, lp_player, lp_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Drone") && (UnitGetType(UnitGroupLoopCurrent()) != "DroneBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "Overlord") && (UnitGetType(UnitGroupLoopCurrent()) != "Larva") && (UnitGetType(UnitGroupLoopCurrent()) != "Egg")) {
            lv_count += 1;
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return lv_count;
}

void gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits) {
    int autoD9320D5C_val;

    // Variable Declarations
    point lv_moveTo;
    point lv_moveToA;
    point lv_moveToB;
    unitgroup lv_enemies;

    // Variable Initialization
    lv_moveTo = null;
    lv_moveToA = null;
    lv_moveToB = null;
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = gf_EnemiesWithinRange(lp_diamondback, 4.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) >= 1)) {
        lv_moveTo = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)));
        if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveTo) >= 1000)) {
            lv_moveToA = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) + 45.0));
            lv_moveToB = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) - 45.0));
            if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000) && (PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                autoD9320D5C_val = RandomInt(1, 2);
                if (autoD9320D5C_val == 1) {
                    lv_moveTo = lv_moveToA;
                }
                else if (autoD9320D5C_val == 2) {
                    lv_moveTo = lv_moveToB;
                }
                else {
                }
            }
            else {
                if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) > 1000)) {
                    lv_moveTo = lv_moveToB;
                }
                else {
                }
                if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) > 1000)) {
                    lv_moveTo = lv_moveToA;
                }
                else {
                }
            }
        }
        else {
        }
        UnitIssueOrder(lp_diamondback, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveTo), c_orderQueueReplace);
        Wait(1.5, c_timeGame);
        AISetUnitScriptControlled(lp_diamondback, false);
    }
    else {
    }
}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

bool gf_IsGoodNukeLocation (point lp_target) {
    string auto1805233A_val;

    // Variable Declarations
    unitgroup lv_zergUnits;
    unitgroup lv_terranUnits;

    // Variable Initialization
    lv_zergUnits = UnitGroupEmpty();
    lv_terranUnits = UnitGroupEmpty();

    // Implementation
    if ((RegionContainsPoint(RegionFromId(48), lp_target) == false)) {
        return false;
    }
    else {
    }
    lv_zergUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lp_target, 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_zergUnits);
    while (!UnitGroupLoopDone()) {
        auto1805233A_val = UnitGetType(UnitGroupLoopCurrent());
        if (auto1805233A_val == "Larva") {
            UnitGroupRemove(lv_zergUnits, UnitGroupLoopCurrent());
        }
        else if (auto1805233A_val == "Egg") {
            UnitGroupRemove(lv_zergUnits, UnitGroupLoopCurrent());
        }
        else if (auto1805233A_val == "CreepTumor") {
            UnitGroupRemove(lv_zergUnits, UnitGroupLoopCurrent());
        }
        else if (auto1805233A_val == "CreepTumorBurrowed") {
            UnitGroupRemove(lv_zergUnits, UnitGroupLoopCurrent());
        }
        else if (auto1805233A_val == "CreepTumorUsed") {
            UnitGroupRemove(lv_zergUnits, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, PlayerGroupLoopCurrent(), RegionCircle(lp_target, 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_terranUnits);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    if ((UnitGroupCount(lv_zergUnits, c_unitCountAlive) > 0) && (UnitGroupCount(lv_terranUnits, c_unitCountAlive) <= (UnitGroupCount(lv_zergUnits, c_unitCountAlive) / 2))) {
        return true;
    }
    else {
    }
    return false;
}

point gf_CenterofArmy (unitgroup lp_army) {
    // Variable Declarations
    point lv_center;
    unit lv_startingUnit;
    unitgroup lv_armyLeftGroup;
    int lv_size;
    unitgroup lv_currentCluster;
    int lv_maxSize;
    unitgroup lv_maxCluster;

    // Variable Initialization
    lv_center = null;
    lv_startingUnit = null;
    lv_armyLeftGroup = UnitGroupEmpty();
    lv_size = 0;
    lv_currentCluster = UnitGroupEmpty();
    lv_maxSize = 0;
    lv_maxCluster = UnitGroupEmpty();

    // Implementation
    if ((libNtve_gf_UnitGroupIsDead(lp_army) == true)) {
        return null;
    }
    else {
    }
    lv_center = UnitGroupCenterOfGroup(lp_army);
    lv_armyLeftGroup = UnitGroupCopy(lp_army);
    while ((libNtve_gf_UnitGroupIsDead(lv_armyLeftGroup) == false)) {
        lv_startingUnit = UnitGroupUnit(lv_armyLeftGroup, 1);
        lv_currentCluster = gf_ArmyClusterFromUnit(lv_armyLeftGroup, lv_startingUnit);
        UnitGroupRemoveUnitGroup(lv_armyLeftGroup, lv_currentCluster);
        lv_size = UnitGroupCount(lv_currentCluster, c_unitCountAlive);
        if ((lv_size > lv_maxSize)) {
            lv_maxSize = lv_size;
            lv_maxCluster = lv_currentCluster;
        }
        else {
        }
    }
    return UnitGroupCenterOfGroup(lv_maxCluster);
}

unitgroup gf_ArmyClusterFromUnit (unitgroup lp_army, unit lp_originUnit) {
    unitgroup auto73F8972F_g;
    int auto73F8972F_u;

    // Variable Declarations
    unitgroup lv_clusterGroup;
    unitgroup lv_tempGroup;
    unitgroup lv_newGroup;
    unitgroup lv_newNewGroup;
    unitgroup lv_armyLeftGroup;
    unit lv_indexUnit;

    // Variable Initialization
    lv_clusterGroup = UnitGroupEmpty();
    lv_tempGroup = UnitGroupEmpty();
    lv_newGroup = UnitGroupEmpty();
    lv_newNewGroup = UnitGroupEmpty();
    lv_armyLeftGroup = UnitGroupEmpty();
    lv_indexUnit = null;

    // Implementation
    UnitGroupAdd(lv_clusterGroup, lp_originUnit);
    UnitGroupAdd(lv_newGroup, lp_originUnit);
    lv_armyLeftGroup = UnitGroupCopy(lp_army);
    UnitGroupRemove(lv_armyLeftGroup, lp_originUnit);
    while ((libNtve_gf_UnitGroupIsDead(lv_newGroup) == false)) {
        lv_newNewGroup = UnitGroupEmpty();
        auto73F8972F_g = lv_newGroup;
        auto73F8972F_u = 1;
        while (auto73F8972F_u <= UnitGroupCount(auto73F8972F_g, c_unitCountAll)) {
            lv_indexUnit = UnitGroupUnit(auto73F8972F_g, auto73F8972F_u);
            lv_tempGroup = UnitGroupFilterRegion(lv_armyLeftGroup, RegionCircle(UnitGetPosition(lv_indexUnit), 5.0), 0);
            UnitGroupAddUnitGroup(lv_clusterGroup, lv_tempGroup);
            UnitGroupAddUnitGroup(lv_newNewGroup, lv_tempGroup);
            UnitGroupRemoveUnitGroup(lv_armyLeftGroup, lv_tempGroup);
            if (lv_indexUnit == UnitGroupUnit(auto73F8972F_g, auto73F8972F_u)) {
                auto73F8972F_u = auto73F8972F_u + 1;
            }
        }
        lv_newGroup = lv_newNewGroup;
    }
    return lv_clusterGroup;
}

point gf_NextNukeLocationArmy () {
    // Variable Declarations
    unitgroup lv_army;
    point lv_pos;

    // Variable Initialization
    lv_army = UnitGroupEmpty();
    lv_pos = null;

    // Implementation
    lv_army = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_army);
    while (!UnitGroupLoopDone()) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Larva") || (UnitGetType(UnitGroupLoopCurrent()) == "Egg") || (UnitGetType(UnitGroupLoopCurrent()) == "Overlord"))) {
            UnitGroupRemove(lv_army, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_army, c_unitCountAlive) < 5)) {
        return null;
    }
    else {
    }
    lv_pos = gf_CenterofArmy(lv_army);
    if ((gf_IsGoodNukeLocation(lv_pos) == true)) {
        return lv_pos;
    }
    else {
    }
    return null;
}

point gf_NextNukeLocationKerrigan () {
    // Variable Declarations
    unitgroup lv_army;
    point lv_pos;

    // Variable Initialization
    lv_army = UnitGroupEmpty();
    lv_pos = null;

    // Implementation
    lv_pos = UnitGetPosition(gv_tHEONEKERRIGAN);
    if ((gf_IsGoodNukeLocation(lv_pos) == true)) {
        return lv_pos;
    }
    else {
    }
    return null;
}

point gf_NextNukeLocationBase () {
    int auto53D77CEE_val;
    int autoB40B4EB6_val;

    // Variable Declarations
    int lv_randomPoint;

    // Variable Initialization
    lv_randomPoint = 0;

    // Implementation
    lv_randomPoint = RandomInt(1, 5);
    if ((lv_randomPoint == gv_failsafeLastNuked)) {
        lv_randomPoint = 6;
    }
    else {
    }
    gv_failsafeLastNuked = lv_randomPoint;
    if ((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1)) {
        auto53D77CEE_val = lv_randomPoint;
        if (auto53D77CEE_val == 1) {
            return PointFromId(419);
        }
        else if (auto53D77CEE_val == 2) {
            return PointFromId(425);
        }
        else if (auto53D77CEE_val == 3) {
            return PointFromId(660);
        }
        else if (auto53D77CEE_val == 4) {
            return PointFromId(732);
        }
        else if (auto53D77CEE_val == 5) {
            return PointFromId(771);
        }
        else if (auto53D77CEE_val == 6) {
            return PointFromId(912);
        }
        else {
        }
    }
    else {
        autoB40B4EB6_val = lv_randomPoint;
        if (autoB40B4EB6_val == 1) {
            return PointFromId(1497);
        }
        else if (autoB40B4EB6_val == 2) {
            return PointFromId(1498);
        }
        else if (autoB40B4EB6_val == 3) {
            return PointFromId(1499);
        }
        else if (autoB40B4EB6_val == 4) {
            return PointFromId(41);
        }
        else if (autoB40B4EB6_val == 5) {
            return PointFromId(751);
        }
        else if (autoB40B4EB6_val == 6) {
            return PointFromId(1442);
        }
        else {
        }
    }
    return null;
}

trigger auto_gf_DropNuke_Trigger = null;
point auto_gf_DropNuke_lp_cHOSEN_POINT;

void gf_DropNuke (point lp_cHOSEN_POINT) {
    auto_gf_DropNuke_lp_cHOSEN_POINT = lp_cHOSEN_POINT;

    if (auto_gf_DropNuke_Trigger == null) {
        auto_gf_DropNuke_Trigger = TriggerCreate("auto_gf_DropNuke_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropNuke_Trigger, false, false);
}

bool auto_gf_DropNuke_TriggerFunc (bool testConds, bool runActions) {
    point lp_cHOSEN_POINT = auto_gf_DropNuke_lp_cHOSEN_POINT;

    // Variable Declarations
    actor lv_dropEffect;

    // Variable Initialization
    lv_dropEffect = null;

    // Implementation
    gv_nukeCounter += 1;
    libNtve_gf_CreateModelAtPoint("GhostNukeIndicator", lp_cHOSEN_POINT);
    gv_nukeActor = libNtve_gf_ActorLastCreated();
    lv_dropEffect = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", lp_cHOSEN_POINT, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7C56F9F7"));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/02766E26"), null, lp_cHOSEN_POINT);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 0.0);
    SoundPlay(SoundLink("Alert_ZergCalldownLaunch", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 0.0);
    TriggerExecute(gt_TransmissionNukeLaunchedQ, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lp_cHOSEN_POINT, 10.0), 16.0, true);
    SoundPlay(SoundLink("Ghost_NukeSeek", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_nukeSeekSound = SoundLastPlayed();
    Wait(12.5, c_timeAI);
    libNtve_gf_KillModel(lv_dropEffect);
    PingDestroy(PingLastCreated());
    Wait(0.5, c_timeAI);
    UnitCreateEffectPoint(gv_nukeUnit, "NukeDetonate", lp_cHOSEN_POINT);
    SoundStop(gv_nukeSeekSound, true);
    return true;
}

trigger auto_gf_MidDropNukeAtPoint1_Trigger = null;
point auto_gf_MidDropNukeAtPoint1_lp_cHOSEN_POINT;

void gf_MidDropNukeAtPoint1 (point lp_cHOSEN_POINT) {
    auto_gf_MidDropNukeAtPoint1_lp_cHOSEN_POINT = lp_cHOSEN_POINT;

    if (auto_gf_MidDropNukeAtPoint1_Trigger == null) {
        auto_gf_MidDropNukeAtPoint1_Trigger = TriggerCreate("auto_gf_MidDropNukeAtPoint1_TriggerFunc");
    }

    TriggerExecute(auto_gf_MidDropNukeAtPoint1_Trigger, false, false);
}

bool auto_gf_MidDropNukeAtPoint1_TriggerFunc (bool testConds, bool runActions) {
    point lp_cHOSEN_POINT = auto_gf_MidDropNukeAtPoint1_lp_cHOSEN_POINT;

    int auto602E049C_n;
    int auto602E049C_i;
    int auto101D7C05_n;
    int auto101D7C05_i;

    // Variable Declarations
    actor lv_localNukeActor;

    // Variable Initialization
    lv_localNukeActor = null;

    // Implementation
    libNtve_gf_CreateModelAtPoint("GhostNukeIndicator", lp_cHOSEN_POINT);
    lv_localNukeActor = libNtve_gf_ActorLastCreated();
    auto602E049C_n = 40;
    auto602E049C_i = 1;
    while (auto602E049C_i <= auto602E049C_n) {
        Wait(0.1, c_timeGame);
        if ((gv_midComplete == true)) {
            libNtve_gf_KillModel(lv_localNukeActor);
            return true;
        }
        else {
        }
        auto602E049C_i = auto602E049C_i + 1;
    }
    SoundStop(gv_midNukeSeek, true);
    PlayerCreateEffectPoint(gv_pLAYER_02_WARFIELDOutpost, "NukeDetonate", lp_cHOSEN_POINT);
    libNtve_gf_KillModel(lv_localNukeActor);
    auto101D7C05_n = 50;
    auto101D7C05_i = 1;
    while (auto101D7C05_i <= auto101D7C05_n) {
        Wait(0.1, c_timeGame);
        if ((gv_midComplete == true)) {
            GameDestroyEffects(lp_cHOSEN_POINT, 8.0, 0, "NukeDetonate");
            return true;
        }
        else {
        }
        auto101D7C05_i = auto101D7C05_i + 1;
    }
    return true;
}

trigger auto_gf_MidDropNukeAtPoint2_Trigger = null;
point auto_gf_MidDropNukeAtPoint2_lp_cHOSEN_POINT;

void gf_MidDropNukeAtPoint2 (point lp_cHOSEN_POINT) {
    auto_gf_MidDropNukeAtPoint2_lp_cHOSEN_POINT = lp_cHOSEN_POINT;

    if (auto_gf_MidDropNukeAtPoint2_Trigger == null) {
        auto_gf_MidDropNukeAtPoint2_Trigger = TriggerCreate("auto_gf_MidDropNukeAtPoint2_TriggerFunc");
    }

    TriggerExecute(auto_gf_MidDropNukeAtPoint2_Trigger, false, false);
}

bool auto_gf_MidDropNukeAtPoint2_TriggerFunc (bool testConds, bool runActions) {
    point lp_cHOSEN_POINT = auto_gf_MidDropNukeAtPoint2_lp_cHOSEN_POINT;

    int auto7A716537_n;
    int auto7A716537_i;
    int auto7DF9DFA4_n;
    int auto7DF9DFA4_i;

    // Variable Declarations
    actor lv_localNukeActor;

    // Variable Initialization
    lv_localNukeActor = null;

    // Implementation
    libNtve_gf_CreateModelAtPoint("GhostNukeIndicator", lp_cHOSEN_POINT);
    lv_localNukeActor = libNtve_gf_ActorLastCreated();
    auto7A716537_n = 50;
    auto7A716537_i = 1;
    while (auto7A716537_i <= auto7A716537_n) {
        Wait(0.1, c_timeGame);
        if ((gv_midComplete == true)) {
            libNtve_gf_KillModel(lv_localNukeActor);
            return true;
        }
        else {
        }
        auto7A716537_i = auto7A716537_i + 1;
    }
    SoundStop(gv_midNukeSeek, true);
    PlayerCreateEffectPoint(gv_pLAYER_02_WARFIELDOutpost, "NukeDetonate", lp_cHOSEN_POINT);
    libNtve_gf_KillModel(lv_localNukeActor);
    auto7DF9DFA4_n = 50;
    auto7DF9DFA4_i = 1;
    while (auto7DF9DFA4_i <= auto7DF9DFA4_n) {
        Wait(0.1, c_timeGame);
        if ((gv_midComplete == true)) {
            GameDestroyEffects(lp_cHOSEN_POINT, 8.0, 0, "NukeDetonate");
            return true;
        }
        else {
        }
        auto7DF9DFA4_i = auto7DF9DFA4_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZChar3");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libSwaC_gf_EnableCampaignTechUnit(true, "Aberration", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;
    playergroup lv_visionGroup02;

    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();
    lv_visionGroup02 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_09_ZAGARA, 1);
    PlayerGroupAdd(gv_dominionPlayerSlots, gv_pLAYER_02_WARFIELDOutpost);
    PlayerGroupAdd(gv_dominionPlayerSlots, gv_pLAYER_03_WARFIELDCourtyard);
    PlayerGroupAdd(gv_dominionPlayerSlots, gv_pLAYER_04_WARFIELDExpansion);
    PlayerGroupAdd(gv_dominionPlayerSlots, gv_pLAYER_05_WARFIELDCitadel);
    PlayerGroupAdd(gv_dominionPlayerSlots, gv_pLAYER_06_WARFIELDBoneyard);
    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_WARFIELDOutpost, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_03_WARFIELDCourtyard, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_04_WARFIELDExpansion, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_05_WARFIELDCitadel, 2);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_06_WARFIELDBoneyard, 2);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_pLAYER_09_ZAGARA, c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    PlayerModifyPropertyInt(gv_pLAYER_09_ZAGARA, c_playerPropVespene, c_playerPropOperSetTo, 2000);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_WARFIELDOutpost);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_03_WARFIELDCourtyard);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_04_WARFIELDExpansion);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_05_WARFIELDCitadel);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_06_WARFIELDBoneyard);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_visionGroup02, gv_pLAYER_09_ZAGARA);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 50000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 50000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 1, true);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFoodIgnored, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_tacOpsCenter, "SensorTowerRadar", 1);
    libSwaC_gf_CreateHero2(PointFromId(157), gv_pLAYER_01_USER, 0, PointGetFacing(PointFromId(157)), 0, 0);
    gv_tHEONEKERRIGAN = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    UnitSetState(gv_tHEONEKERRIGAN, c_unitStateFidget, false);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    gv_scienceFacilityLeft = UnitFromId(415);
    gv_scienceFacilityRight = UnitFromId(456);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(415), null, StringExternal("Param/Value/40ADC078"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(456), null, StringExternal("Param/Value/D741CD0B"), null);
    UnitSetState(UnitFromId(943), c_unitStateTargetable, false);
    UnitSetOwner(UnitFromId(943), gv_pLAYER_09_ZAGARA, true);
    UnitSetState(UnitFromId(512), c_unitStateTargetable, false);
    TextExpressionSetToken("Param/Expression/F00B41D4", "A", PlayerName(gv_pLAYER_09_ZAGARA));
    UnitSetInfoTip(UnitFromId(943), TextExpressionAssemble("Param/Expression/F00B41D4"));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_WARFIELDCitadel, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(108), true);
    UnitSetState(UnitFromId(108), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(108), c_unitStateSelectable, false);
    UnitIssueOrder(UnitFromId(108), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(96), "PermanentlyInvulnerable", UnitFromId(96), 1);
    UnitSetState(UnitFromId(96), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(96), c_unitStateSelectable, false);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(339), null, StringExternal("Param/Value/08B23688"), null);
    UnitBehaviorAdd(UnitFromId(795), "Harmless", UnitFromId(795), 1);
    UnitBehaviorAdd(UnitFromId(224), "Harmless", UnitFromId(115), 1);
    UnitSetState(UnitFromId(224), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(224), c_unitStateSelectable, false);
    gf_AddRemoveReticule(UnitFromId(115));
    UnitGroupLoopBegin(UnitGroup("Bulldozer", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VikingFighter", gv_pLAYER_04_WARFIELDExpansion, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_leftExpansionVikings, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MengskVikingFighter", gv_pLAYER_04_WARFIELDExpansion, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_leftExpansionVikings, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("GhostAcademy", gv_pLAYER_05_WARFIELDCitadel, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitMagazineArm(UnitGroupLoopCurrent(), AbilityCommand("ArmSiloWithNuke", 0), 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetState(UnitFromId(360), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(360), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(360), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(22), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(22), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(22), c_unitStateTargetable, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_09_ZAGARA, PointFromId(1447));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_09_ZAGARA, PointFromId(1448));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_09_ZAGARA, PointFromId(1449));
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(351), StringExternal("Param/Value/79527A66"), StringExternal("Param/Value/CCC6BFEB"), StringExternal("Param/Value/7B2AA8C7"));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(351), true);
    UnitSetState(UnitFromId(351), c_unitStateTargetable, false);
    UnitIssueOrder(UnitFromId(1290), Order(AbilityCommand("ExtendingBridgeNEShort8", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1362), Order(AbilityCommand("ExtendingBridgeNWShort8", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ambience_HeavyRockCrumbles", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_secondaryAmbienceSound = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(39), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Snipe", 0), true);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ShieldWall", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "PunisherGrenades", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "SiegeTech", 1);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
            TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("EMP", 0), true);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "FireSuppressionSystems", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "HailstormMissilePods", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "MicrofusionReactors", 1);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    gv_nukeDropInterval = libHots_gf_DifficultyValueFixed2(240.0, 210.0, 150.0);
    gv_tacOpsLife = libHots_gf_DifficultyValueFixed2(5000.0, 5000.0, 6000.0);
    UnitSetPropertyFixed(gv_tacOpsCenter, c_unitPropLifeMax, gv_tacOpsLife);
    UnitSetPropertyFixed(gv_tacOpsCenter, c_unitPropLifePercent, 100.0);
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", libHots_gf_DifficultyValueInt2(4, 4, 2));
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marauder", libHots_gf_DifficultyValueInt2(0, 0, 1));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        UnitIssueOrder(UnitFromId(409), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(269)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(406), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(406), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(273)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(648), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(648), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(938)), c_orderQueueReplace);
    }
    else {
    }
    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        libNtve_gf_SetTacticalAIThink(PlayerGroupLoopCurrent(), "Diamondback", "AIDiamondback", false);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Zerg Expansion");
    libSwaC_gf_AddMissionTipUserData("Aberration");
    libSwaC_gf_AddMissionTipUserData("Nuclear Strike");
    libSwaC_gf_AddMissionTipUserData("Tactical Operations");
    libSwaC_gf_AddMissionTipUserData("Quick Select");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("HellionTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("WarHound", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Wraith", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", false, gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Harmless
//--------------------------------------------------------------------------------------------------
bool gt_RemoveHarmless_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Harmless", 1);
    if ((UnitHasBehavior(UnitFromId(795), "Harmless") == false) && (UnitHasBehavior(UnitFromId(115), "Harmless") == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveHarmless_Init () {
    gt_RemoveHarmless = TriggerCreate("gt_RemoveHarmless_Func");
    TriggerAddEventUnitAttacked(gt_RemoveHarmless, UnitRefFromUnit(UnitFromId(795)));
    TriggerAddEventUnitAttacked(gt_RemoveHarmless, UnitRefFromUnit(UnitFromId(115)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Kerrigan Revive
//--------------------------------------------------------------------------------------------------
bool gt_PrepareKerriganRevive_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    Wait(3.5, c_timeReal);
    TriggerExecute(gt_TransmissionKerriganDiesTauntQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareKerriganRevive_Init () {
    gt_PrepareKerriganRevive = TriggerCreate("gt_PrepareKerriganRevive_Func");
    TriggerEnable(gt_PrepareKerriganRevive, false);
    TriggerAddEventUnitDied(gt_PrepareKerriganRevive, UnitRefFromVariable("gv_tHEONEKERRIGAN"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Mid Cine
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGMidCine_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_timedAttackTimer, true);
    TimerWindowDestroy(gv_timedAttackTimerWindow);
    TriggerEnable(gt_StartTimedAttackTimer, false);
    TriggerStop(gt_StartTimedAttackTimer);
    TriggerStop(gt_Reinforcements01);
    TriggerStop(gt_Reinforcements02);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGMidCine_Init () {
    gt_DEBUGMidCine = TriggerCreate("gt_DEBUGMidCine_Func");
    TriggerAddEventChatMessage(gt_DEBUGMidCine, c_playerAny, "s2", true);
    TriggerAddEventChatMessage(gt_DEBUGMidCine, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 01
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_speedRunTimer, 1200.0, false, c_timeAI);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(12));
    gv_timedAttackVision = VisRevealerLastCreated();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6B22C67E"), null, PointFromId(157));
    gv_timedAttackActive = true;
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_StartingSequenceQ, true, false);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    Wait(15.0, c_timeReal);
    while (true) {
        if ((gv_timedAttackStarted == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/0914F813"));
            Wait(3.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            Wait(1.0, c_timeReal);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage01_Init () {
    gt_StartGameStage01 = TriggerCreate("gt_StartGameStage01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starting Sequence Q
//--------------------------------------------------------------------------------------------------
bool gt_StartingSequenceQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyStuffCreate, true, true);
    TriggerExecute(gt_CreatePingTimedAttackSpots, true, false);
    TriggerExecute(gt_ZagaraBuildPlayerBase, true, false);
    Wait(0.5, c_timeReal);
    TriggerExecute(gt_TransmissionZagaraBuildBase, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartingSequenceQ_Init () {
    gt_StartingSequenceQ = TriggerCreate("gt_StartingSequenceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage02Q_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(120.0, 9);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitFromId(350), 165.0);
        libSwaC_gf_RemindPlayertoCreateAntiAirUnits();
    }
    else {
    }
    TriggerEnable(gt_MakeZagaraStructureUntargetable, false);
    gv_timedAttackActive = false;
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateFoodIgnored, false);
    VisRevealerDestroy(gv_timedAttackVision);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7DB41CD2"), null, PointFromId(62));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    TriggerEnable(gt_DefeatBaseDies, true);
    TriggerEnable(gt_KerriganDiesinTimedAttack, false);
    TriggerEnable(gt_PrepareKerriganRevive, true);
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_CreatePingTacticalOpsCenter, true, false);
    TriggerExecute(gt_ObjectiveDestroyTacOpsCreate, true, true);
    TriggerQueueExit();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Aberration", true);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_IntroScienceFacilitiesObjectiveQ, true, false);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_StartRepeatingNukeTimer, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage02Q_Init () {
    gt_StartGameStage02Q = TriggerCreate("gt_StartGameStage02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Timed Attack Timer
//--------------------------------------------------------------------------------------------------
bool gt_StartTimedAttackTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_timedAttackStarted = true;
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TimerStart(gv_timedAttackTimer, 160.0, false, c_timeAI);
    libSwaC_gf_TimerWindowCreate2(gv_timedAttackTimer, StringExternal("Param/Value/D20F854E"), true, false, 1);
    gv_timedAttackTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_timedAttackTimerWindow, StringToText("<min2/>:<sec2/>"));
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerEnable(gt_AchievementDestroyPFortH, true);
    }
    else {
    }
    TriggerEnable(gt_TimedAttackTimerExpires, true);
    libNtve_gf_WaitForTimer(gv_timedAttackTimer, 115.0, false);
    TriggerExecute(gt_Reinforcements01, true, false);
    libNtve_gf_WaitForTimer(gv_timedAttackTimer, 70.0, false);
    TriggerExecute(gt_Reinforcements02, true, false);
    libNtve_gf_WaitForTimer(gv_timedAttackTimer, 30.0, false);
    TriggerExecute(gt_TransmissionNukeWarningQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartTimedAttackTimer_Init () {
    gt_StartTimedAttackTimer = TriggerCreate("gt_StartTimedAttackTimer_Func");
    TriggerAddEventUnitStartedAttack(gt_StartTimedAttackTimer, null);
    TriggerAddEventUnitAbility(gt_StartTimedAttackTimer, UnitRefFromVariable("gv_tHEONEKERRIGAN"), null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping - Timed Attack Spots
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingTimedAttackSpots_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(1050), StringExternal("Param/Value/9216B69C"));
    gv_timedAttackPing[1] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(true, PointFromId(1059), StringExternal("Param/Value/616344F7"));
    gv_timedAttackPing[2] = PingLastCreated();
    libSwaC_gf_CreateObjectivePing(true, PointFromId(1064), StringExternal("Param/Value/61AAAB34"));
    gv_timedAttackPing[3] = PingLastCreated();
    TriggerEnable(gt_DominionDestroyedBottomExpansion, true);
    TriggerEnable(gt_DominionDestroyedFrontLine, true);
    TriggerEnable(gt_DominionDestroyedMissileTurret, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingTimedAttackSpots_Init () {
    gt_CreatePingTimedAttackSpots = TriggerCreate("gt_CreatePingTimedAttackSpots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Destroyed - Front Line
//--------------------------------------------------------------------------------------------------
bool gt_DominionDestroyedFrontLine_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_WARFIELDOutpost, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_timedAttackPing[1]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionDestroyedFrontLine_Init () {
    gt_DominionDestroyedFrontLine = TriggerCreate("gt_DominionDestroyedFrontLine_Func");
    TriggerEnable(gt_DominionDestroyedFrontLine, false);
    TriggerAddEventTimePeriodic(gt_DominionDestroyedFrontLine, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Destroyed - Bottom Expansion
//--------------------------------------------------------------------------------------------------
bool gt_DominionDestroyedBottomExpansion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_WARFIELDOutpost, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_timedAttackPing[2]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionDestroyedBottomExpansion_Init () {
    gt_DominionDestroyedBottomExpansion = TriggerCreate("gt_DominionDestroyedBottomExpansion_Func");
    TriggerEnable(gt_DominionDestroyedBottomExpansion, false);
    TriggerAddEventTimePeriodic(gt_DominionDestroyedBottomExpansion, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Destroyed - Missile Turret
//--------------------------------------------------------------------------------------------------
bool gt_DominionDestroyedMissileTurret_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_WARFIELDExpansion, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_timedAttackPing[3]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionDestroyedMissileTurret_Init () {
    gt_DominionDestroyedMissileTurret = TriggerCreate("gt_DominionDestroyedMissileTurret_Func");
    TriggerEnable(gt_DominionDestroyedMissileTurret, false);
    TriggerAddEventTimePeriodic(gt_DominionDestroyedMissileTurret, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Build Player Base
//--------------------------------------------------------------------------------------------------
bool gt_ZagaraBuildPlayerBase_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_09_ZAGARA, RegionFromId(52), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZagaraBuildPlayerBase_Init () {
    gt_ZagaraBuildPlayerBase = TriggerCreate("gt_ZagaraBuildPlayerBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Zagara Structure Untargetable
//--------------------------------------------------------------------------------------------------
bool gt_MakeZagaraStructureUntargetable_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_09_ZAGARA))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUnitType() == "EvolutionChamber") || (libNtve_gf_TriggeringProgressUnitType() == "Extractor") || (libNtve_gf_TriggeringProgressUnitType() == "SpawningPool")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitProgressUnit(), c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeZagaraStructureUntargetable_Init () {
    gt_MakeZagaraStructureUntargetable = TriggerCreate("gt_MakeZagaraStructureUntargetable_Func");
    TriggerAddEventUnitConstructProgress(gt_MakeZagaraStructureUntargetable, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Zagara Build Base
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZagaraBuildBase_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00142", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00148", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZagaraBuildBase_Init () {
    gt_TransmissionZagaraBuildBase = TriggerCreate("gt_TransmissionZagaraBuildBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timed Attack Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_TimedAttackTimerExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_AllUnitsDestroyedProgresstoStage2, false);
    PingDestroy(gv_timedAttackPing[1]);
    PingDestroy(gv_timedAttackPing[2]);
    PingDestroy(gv_timedAttackPing[3]);
    TimerPause(gv_timedAttackTimer, true);
    TimerWindowDestroy(gv_timedAttackTimerWindow);
    TriggerExecute(gt_ObjectiveDestroyStuffComplete, true, true);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimedAttackTimerExpires_Init () {
    gt_TimedAttackTimerExpires = TriggerCreate("gt_TimedAttackTimerExpires_Func");
    TriggerEnable(gt_TimedAttackTimerExpires, false);
    TriggerAddEventTimer(gt_TimedAttackTimerExpires, gv_timedAttackTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: All Units Destroyed -> Progress to Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_AllUnitsDestroyedProgresstoStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_timedAttackTimer, true);
    TimerWindowDestroy(gv_timedAttackTimerWindow);
    PingDestroy(gv_timedAttackPing[1]);
    PingDestroy(gv_timedAttackPing[2]);
    PingDestroy(gv_timedAttackPing[3]);
    TriggerEnable(gt_TimedAttackTimerExpires, false);
    TriggerExecute(gt_ObjectiveDestroyStuffComplete, true, true);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllUnitsDestroyedProgresstoStage2_Init () {
    gt_AllUnitsDestroyedProgresstoStage2 = TriggerCreate("gt_AllUnitsDestroyedProgresstoStage2_Func");
    TriggerAddEventTimePeriodic(gt_AllUnitsDestroyedProgresstoStage2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements 01
//--------------------------------------------------------------------------------------------------
bool gt_Reinforcements01_Func (bool testConds, bool runActions) {
    int auto58D2066D_n;
    int auto58D2066D_i;
    int auto8E03BC5E_n;
    int auto8E03BC5E_i;
    int auto7F8A5B0B_n;
    int auto7F8A5B0B_i;
    int auto15173B2A_n;
    int auto15173B2A_i;
    int auto6484F8C4_n;
    int auto6484F8C4_i;
    int autoCA2D64A7_n;
    int autoCA2D64A7_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionReinforcements01Q, true, false);
    auto58D2066D_n = 8;
    auto58D2066D_i = 1;
    while (auto58D2066D_i <= auto58D2066D_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto58D2066D_i = auto58D2066D_i + 1;
    }
    Wait(1.5, c_timeGame);
    auto8E03BC5E_n = 10;
    auto8E03BC5E_i = 1;
    while (auto8E03BC5E_i <= auto8E03BC5E_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto8E03BC5E_i = auto8E03BC5E_i + 1;
    }
    Wait(1.5, c_timeGame);
    auto7F8A5B0B_n = 10;
    auto7F8A5B0B_i = 1;
    while (auto7F8A5B0B_i <= auto7F8A5B0B_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto7F8A5B0B_i = auto7F8A5B0B_i + 1;
    }
    Wait(1.5, c_timeGame);
    auto15173B2A_n = 12;
    auto15173B2A_i = 1;
    while (auto15173B2A_i <= auto15173B2A_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto15173B2A_i = auto15173B2A_i + 1;
    }
    Wait(1.5, c_timeGame);
    auto6484F8C4_n = 11;
    auto6484F8C4_i = 1;
    while (auto6484F8C4_i <= auto6484F8C4_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto6484F8C4_i = auto6484F8C4_i + 1;
    }
    Wait(1.5, c_timeGame);
    autoCA2D64A7_n = 10;
    autoCA2D64A7_i = 1;
    while (autoCA2D64A7_i <= autoCA2D64A7_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        autoCA2D64A7_i = autoCA2D64A7_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reinforcements01_Init () {
    gt_Reinforcements01 = TriggerCreate("gt_Reinforcements01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Reinforcements 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionReinforcements01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F635473F"), null, RegionGetCenter(RegionFromId(15)));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), RegionGetCenter(RegionFromId(15)), 2.0, Color(0.00, 100.00, 0.00));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00143", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    SoundPlayAtPoint(SoundLink("Event_Char03_ZergUnitsDelivered", -1), PlayerGroupAll(), RegionGetCenter(RegionFromId(11)), 0.0, 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionReinforcements01Q_Init () {
    gt_TransmissionReinforcements01Q = TriggerCreate("gt_TransmissionReinforcements01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements 02
//--------------------------------------------------------------------------------------------------
bool gt_Reinforcements02_Func (bool testConds, bool runActions) {
    int auto0412C92D_n;
    int auto0412C92D_i;
    int auto070D11E8_n;
    int auto070D11E8_i;
    int auto9F1BC0F6_n;
    int auto9F1BC0F6_i;
    int autoC19D5221_n;
    int autoC19D5221_i;
    int auto3559F06B_n;
    int auto3559F06B_i;
    int auto9DEA6B36_n;
    int auto9DEA6B36_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionReinforcements02Q, true, false);
    auto0412C92D_n = 10;
    auto0412C92D_i = 1;
    while (auto0412C92D_i <= auto0412C92D_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto0412C92D_i = auto0412C92D_i + 1;
    }
    Wait(1.5, c_timeGame);
    auto070D11E8_n = 10;
    auto070D11E8_i = 1;
    while (auto070D11E8_i <= auto070D11E8_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto070D11E8_i = auto070D11E8_i + 1;
    }
    Wait(1.5, c_timeGame);
    auto9F1BC0F6_n = 10;
    auto9F1BC0F6_i = 1;
    while (auto9F1BC0F6_i <= auto9F1BC0F6_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto9F1BC0F6_i = auto9F1BC0F6_i + 1;
    }
    Wait(1.5, c_timeGame);
    autoC19D5221_n = 12;
    autoC19D5221_i = 1;
    while (autoC19D5221_i <= autoC19D5221_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        autoC19D5221_i = autoC19D5221_i + 1;
    }
    Wait(1.5, c_timeGame);
    auto3559F06B_n = 12;
    auto3559F06B_i = 1;
    while (auto3559F06B_i <= auto3559F06B_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto3559F06B_i = auto3559F06B_i + 1;
    }
    Wait(1.5, c_timeGame);
    auto9DEA6B36_n = 16;
    auto9DEA6B36_i = 1;
    while (auto9DEA6B36_i <= auto9DEA6B36_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        auto9DEA6B36_i = auto9DEA6B36_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reinforcements02_Init () {
    gt_Reinforcements02 = TriggerCreate("gt_Reinforcements02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Reinforcements 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionReinforcements02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1E0290D2"), null, RegionGetCenter(RegionFromId(15)));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), RegionGetCenter(RegionFromId(15)), 2.0, Color(0.00, 100.00, 0.00));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00144", c_transmissionDurationAdd, 0.0, false, 1, 0);
    TransmissionWait(TransmissionLastSent(), 2.0);
    SoundPlayAtPoint(SoundLink("Event_Char03_ZergUnitsDelivered", -1), PlayerGroupAll(), RegionGetCenter(RegionFromId(11)), 0.0, 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionReinforcements02Q_Init () {
    gt_TransmissionReinforcements02Q = TriggerCreate("gt_TransmissionReinforcements02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Nuke Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNukeWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00024", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00074", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNukeWarningQ_Init () {
    gt_TransmissionNukeWarningQ = TriggerCreate("gt_TransmissionNukeWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Dies in Timed Attack
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDiesinTimedAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeGame);
    SoundPlay(SoundLink("TUIWarning", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0E52710A"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganReviveCocoon", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(UnitFromId(943)), 1.0, 315.0));
    libSwaC_gv_zS_HeroReviverKerrigan = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDiesinTimedAttack_Init () {
    gt_KerriganDiesinTimedAttack = TriggerCreate("gt_KerriganDiesinTimedAttack_Func");
    TriggerAddEventUnitDied(gt_KerriganDiesinTimedAttack, UnitRefFromVariable("gv_tHEONEKERRIGAN"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Hold The Line Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHoldTheLineQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(96), "zMission_Char03|Line00005", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHoldTheLineQ_Init () {
    gt_TransmissionHoldTheLineQ = TriggerCreate("gt_TransmissionHoldTheLineQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionHoldTheLineQ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Front Gate Damaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFrontGateDamagedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(UnitFromId(115), c_unitPropLifePercent, c_unitPropCurrent) <= 30.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(667), "zMission_Char03|Line00045", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFrontGateDamagedQ_Init () {
    gt_TransmissionFrontGateDamagedQ = TriggerCreate("gt_TransmissionFrontGateDamagedQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionFrontGateDamagedQ, UnitRefFromUnit(UnitFromId(115)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Thor Aggro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionThorAggroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Thor"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(EventUnit()) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(EventUnit(), "zMission_Char03|Line00017", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionThorAggroQ_Init () {
    gt_TransmissionThorAggroQ = TriggerCreate("gt_TransmissionThorAggroQ_Func");
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionThorAggroQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Courtyard - Drop Pod Defense
//--------------------------------------------------------------------------------------------------
bool gt_CourtyardDropPodDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropgroup;

    // Variable Initialization
    lv_dropgroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, libHots_gf_DifficultyValueSwarmUnitType("Firebat", "Firebat", "MengskFirebat"), c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    libSwaC_gf_CreateDropPod(0, PointFromId(119), UnitLastCreatedGroup(), false, gv_pLAYER_05_WARFIELDCitadel);
    Wait(0.75, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, libHots_gf_DifficultyValueSwarmUnitType("Firebat", "Firebat", "MengskFirebat"), c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    libSwaC_gf_CreateDropPod(0, PointFromId(92), UnitLastCreatedGroup(), false, gv_pLAYER_05_WARFIELDCitadel);
    Wait(0.5, c_timeGame);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskFirebat", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
        libSwaC_gf_CreateDropPod(0, PointFromId(932), UnitLastCreatedGroup(), false, gv_pLAYER_05_WARFIELDCitadel);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CourtyardDropPodDefense_Init () {
    gt_CourtyardDropPodDefense = TriggerCreate("gt_CourtyardDropPodDefense_Func");
    TriggerAddEventUnitRegion(gt_CourtyardDropPodDefense, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists Evac - Right
//--------------------------------------------------------------------------------------------------
bool gt_ScientistsEvacRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_failsafeTimer;

    // Variable Initialization
    lv_failsafeTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionRightEvacuationQ, true, false);
    TimerStart(lv_failsafeTimer, 10.0, false, c_timeAI);
    libNtve_gf_ShareVisionofUnit(UnitFromId(22), true, gv_pLAYER_01_USER);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(UnitFromId(22)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1FC377E2"));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/EC6D6C54"), null, UnitFromId(360));
    UnitSetState(UnitFromId(22), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(22), c_unitStateTargetable, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_WARFIELDOutpost, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitIsAlive(UnitFromId(22)) == false)) {
            break;
        }
        else {
        }
        if (((UnitIsAlive(UnitGroupLoopCurrent()) == true) || (UnitGetType(UnitGroupLoopCurrent()) == "Scientist") || (UnitGetType(UnitGroupLoopCurrent()) == "SCV"))) {
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Run", gv_pLAYER_02_WARFIELDOutpost, 1);
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, UnitFromId(22)), c_orderQueueReplace);
            Wait(RandomFixed(0.5, 0.2), c_timeGame);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!(((UnitGroupCount(UnitGroup("Scientist", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) || (TimerGetRemaining(lv_failsafeTimer) <= 0.1) || (UnitGetPropertyFixed(UnitFromId(22), c_unitPropLifePercent, c_unitPropCurrent) <= 80.0)))) {
        Wait(0.25, c_timeGame);
    }
    if ((UnitIsAlive(UnitFromId(22)) == false)) {
        return true;
    }
    else {
    }
    UnitIssueOrder(UnitFromId(22), Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    UnitSetState(UnitFromId(22), c_unitStateInvulnerable, true);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(22), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(30))), c_orderQueueAddToEnd);
    while (!(((libNtve_gf_UnitInRegion(UnitFromId(22), RegionFromId(30)) == true) || (UnitIsAlive(UnitFromId(22)) == false)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(UnitFromId(22)) == false)) {
        return true;
    }
    else {
    }
    UnitRemove(UnitFromId(22));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistsEvacRight_Init () {
    gt_ScientistsEvacRight = TriggerCreate("gt_ScientistsEvacRight_Func");
    TriggerAddEventUnitRegion(gt_ScientistsEvacRight, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Right Evacuation Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRightEvacuationQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        if ((UnitIsAlive(UnitFromId(361)) == true)) {
            libSwaC_gf_SendTransmissionCampaign(UnitFromId(361), "zMission_Char03|Line00002", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else {
        }
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00003", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRightEvacuationQ_Init () {
    gt_TransmissionRightEvacuationQ = TriggerCreate("gt_TransmissionRightEvacuationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientist Evac - Left
//--------------------------------------------------------------------------------------------------
bool gt_ScientistEvacLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionLeftEvacuationQ, true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(4));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(UnitFromId(360)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DE2C3A1D"));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/AF36882F"), null, UnitFromId(360));
    UnitGroupLoopBegin(UnitGroup("Scientist", gv_pLAYER_02_WARFIELDOutpost, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Run", gv_pLAYER_02_WARFIELDOutpost, 1);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, UnitFromId(360)), c_orderQueueReplace);
        Wait(RandomFixed(0.5, 0.2), c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    while (!((UnitGroupCount(UnitGroup("Scientist", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
        Wait(0.25, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(360), Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    UnitSetState(UnitFromId(360), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(360), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(360), c_unitStateTargetable, false);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(360), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(4), 5.0, false);
    VisRevealerDestroy(VisRevealerLastCreated());
    while (!(((libNtve_gf_UnitInRegion(UnitFromId(360), RegionFromId(14)) == true) || (UnitIsAlive(UnitFromId(360)) == false)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(UnitFromId(360)) == false)) {
        return true;
    }
    else {
    }
    UnitRemove(UnitFromId(360));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistEvacLeft_Init () {
    gt_ScientistEvacLeft = TriggerCreate("gt_ScientistEvacLeft_Func");
    TriggerAddEventUnitRegion(gt_ScientistEvacLeft, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Left Evacuation Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLeftEvacuationQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(6)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(6), "zMission_Char03|Line00011", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLeftEvacuationQ_Init () {
    gt_TransmissionLeftEvacuationQ = TriggerCreate("gt_TransmissionLeftEvacuationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expansion - Drop Pod Defense
//--------------------------------------------------------------------------------------------------
bool gt_ExpansionDropPodDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropgroup;

    // Variable Initialization
    lv_dropgroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(3, 3, 5), "Marine", 0, gv_pLAYER_04_WARFIELDExpansion, PointFromId(472));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropgroup);
    libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(28)), lv_dropgroup, false, gv_pLAYER_04_WARFIELDExpansion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpansionDropPodDefense_Init () {
    gt_ExpansionDropPodDefense = TriggerCreate("gt_ExpansionDropPodDefense_Func");
    TriggerAddEventUnitRegion(gt_ExpansionDropPodDefense, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expansion Cleared - Drop Drones
//--------------------------------------------------------------------------------------------------
bool gt_ExpansionClearedDropDrones_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(19), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_timedAttackActive == false)) {
        TimerPause(gv_nukeDropTimer, true);
        TriggerExecute(gt_TransmissionExpansionSecuredQ, true, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(4, 4, 3), "Drone", 0, gv_pLAYER_01_USER, PointFromId(472));
        libSwaC_gf_CreateDropPod(1, PointFromId(357), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/4872B130"));
        Wait(10.0, c_timeGame);
        TimerPause(gv_nukeDropTimer, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpansionClearedDropDrones_Init () {
    gt_ExpansionClearedDropDrones = TriggerCreate("gt_ExpansionClearedDropDrones_Func");
    TriggerAddEventTimePeriodic(gt_ExpansionClearedDropDrones, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Expansion -  Secured Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionExpansionSecuredQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/83EAAB4C"), null, PointFromId(1436));
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1436), 2.0, Color(100.00, 100.00, 0.00));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00167", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionExpansionSecuredQ_Init () {
    gt_TransmissionExpansionSecuredQ = TriggerCreate("gt_TransmissionExpansionSecuredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bottom Expansion - Drop Pod Defense
//--------------------------------------------------------------------------------------------------
bool gt_BottomExpansionDropPodDefense_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(2, 2, 3), libHots_gf_DifficultyValueSwarmUnitType("Firebat", "Firebat", "MengskFirebat"), c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(29)), UnitLastCreatedGroup(), false, gv_pLAYER_05_WARFIELDCitadel);
    Wait(0.75, c_timeGame);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMedic", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(44)), UnitLastCreatedGroup(), false, gv_pLAYER_05_WARFIELDCitadel);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BottomExpansionDropPodDefense_Init () {
    gt_BottomExpansionDropPodDefense = TriggerCreate("gt_BottomExpansionDropPodDefense_Func");
    TriggerAddEventUnitRegion(gt_BottomExpansionDropPodDefense, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Boneyard Entered Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBoneyardEnteredQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnit(), "Fly") == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00055", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBoneyardEnteredQ_Init () {
    gt_TransmissionBoneyardEnteredQ = TriggerCreate("gt_TransmissionBoneyardEnteredQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionBoneyardEnteredQ, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boneyard Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_BoneyardReinforcements_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_nukeDropTimer, true);
    if ((gv_timedAttackActive == true)) {
        libNtve_gf_CreateUnitsAtPoint2(2, "ZerglingBurrowed", 0, gv_pLAYER_01_USER, PointFromId(784));
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsAtPoint2(2, "ZerglingBurrowed", 0, gv_pLAYER_01_USER, PointFromId(786));
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsAtPoint2(2, "ZerglingBurrowed", 0, gv_pLAYER_01_USER, PointFromId(787));
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsAtPoint2(2, "ZerglingBurrowed", 0, gv_pLAYER_01_USER, PointFromId(336));
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(0.5, c_timeGame);
        TriggerExecute(gt_TransmissionBoneyardZergQ, true, true);
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_01_USER, PointFromId(784));
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
            SoundPlayOnUnit(SoundLink("Aberration_What", -1), PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_01_USER, PointFromId(786));
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
            SoundPlayOnUnit(SoundLink("Aberration_What", -1), PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_01_USER, PointFromId(787));
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
            SoundPlayOnUnit(SoundLink("Aberration_What", -1), PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_01_USER, PointFromId(336));
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateUsingSupply, false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
            SoundPlayOnUnit(SoundLink("Aberration_What", -1), PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
        TriggerExecute(gt_Transmission2AberrationsQ, true, true);
    }
    Wait(5.0, c_timeGame);
    TimerPause(gv_nukeDropTimer, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneyardReinforcements_Init () {
    gt_BoneyardReinforcements = TriggerCreate("gt_BoneyardReinforcements_Func");
    TriggerAddEventTimePeriodic(gt_BoneyardReinforcements, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Pressed Aberration Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerPressedAberrationButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Aberration", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerPressedAberrationButton_Init () {
    gt_PlayerPressedAberrationButton = TriggerCreate("gt_PlayerPressedAberrationButton_Func");
    TriggerAddEventButtonPressed(gt_PlayerPressedAberrationButton, c_playerAny, "Aberration");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: 1 Aberration Q
//--------------------------------------------------------------------------------------------------
bool gt_Transmission1AberrationQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00121", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission1AberrationQ_Init () {
    gt_Transmission1AberrationQ = TriggerCreate("gt_Transmission1AberrationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: 2 Aberrations Q
//--------------------------------------------------------------------------------------------------
bool gt_Transmission2AberrationsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00049", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission2AberrationsQ_Init () {
    gt_Transmission2AberrationsQ = TriggerCreate("gt_Transmission2AberrationsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Boneyard Zerg Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBoneyardZergQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00032", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBoneyardZergQ_Init () {
    gt_TransmissionBoneyardZergQ = TriggerCreate("gt_TransmissionBoneyardZergQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Biomass Reaction
//--------------------------------------------------------------------------------------------------
bool gt_TerranBiomassReaction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Zerg_BuildingMorphStart", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranBiomassReaction_Init () {
    gt_TerranBiomassReaction = TriggerCreate("gt_TerranBiomassReaction_Func");
    TriggerAddEventUnitClick(gt_TerranBiomassReaction, UnitRefFromUnit(UnitFromId(351)), c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Science Facilities Objective Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroScienceFacilitiesObjectiveQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZChar03Objective4", 600.0);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyScienceFacilitiesCreate, true, true);
    if ((UnitIsAlive(gv_scienceFacilityLeft) == true)) {
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4C08AC0D"), null, gv_scienceFacilityLeft);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_scienceFacilityLeft), 4.0), 15.0, false);
        libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(gv_scienceFacilityLeft), StringExternal("Param/Value/EB256AD6"));
        gv_scienceFacilityPings[1] = PingLastCreated();
    }
    else {
    }
    if ((UnitIsAlive(gv_scienceFacilityRight) == true)) {
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B05A6809"), null, gv_scienceFacilityRight);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_scienceFacilityRight), 4.0), 15.0, false);
        libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(gv_scienceFacilityRight), StringExternal("Param/Value/5BB3840A"));
        gv_scienceFacilityPings[2] = PingLastCreated();
    }
    else {
    }
    TriggerExecute(gt_TransmissionScienceFacilitiesIntro, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroScienceFacilitiesObjectiveQ_Init () {
    gt_IntroScienceFacilitiesObjectiveQ = TriggerCreate("gt_IntroScienceFacilitiesObjectiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Science Facilities - Intro
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionScienceFacilitiesIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00151", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00152", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionScienceFacilitiesIntro_Init () {
    gt_TransmissionScienceFacilitiesIntro = TriggerCreate("gt_TransmissionScienceFacilitiesIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Science Facility Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ScienceFacilityDestroyed_Func (bool testConds, bool runActions) {
    int auto8206A665_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_scienceFacilitiesDestroyed += 1;
    TriggerExecute(gt_ObjectiveDestroyScienceFacilitiesCreate, true, false);
    if ((EventUnit() == gv_scienceFacilityLeft)) {
        PingDestroy(gv_scienceFacilityPings[1]);
    }
    else {
    }
    if ((EventUnit() == gv_scienceFacilityRight)) {
        PingDestroy(gv_scienceFacilityPings[2]);
    }
    else {
    }
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnit()), "ZChar03Objective4", gv_pLAYER_01_USER);
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar03Objective4", gv_scienceFacilitiesDestroyed, true, null, true);
    auto8206A665_val = gv_scienceFacilitiesDestroyed;
    if (auto8206A665_val == 1) {
        Wait(2.0, c_timeGame);
    }
    else if (auto8206A665_val == 2) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyScienceFacilitiesComplete, true, true);
    }
    else {
    }
    TriggerExecute(gt_TransmissionScienceFacilityDestroyedQ, true, false);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/15CDBFC2"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScienceFacilityDestroyed_Init () {
    gt_ScienceFacilityDestroyed = TriggerCreate("gt_ScienceFacilityDestroyed_Func");
    TriggerAddEventUnitDied(gt_ScienceFacilityDestroyed, UnitRefFromVariable("gv_scienceFacilityLeft"));
    TriggerAddEventUnitDied(gt_ScienceFacilityDestroyed, UnitRefFromVariable("gv_scienceFacilityRight"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Science Facility - Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionScienceFacilityDestroyedQ_Func (bool testConds, bool runActions) {
    int autoD19CC738_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    autoD19CC738_val = gv_scienceFacilitiesDestroyed;
    if (autoD19CC738_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00009", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else if (autoD19CC738_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00154", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00033", c_transmissionDurationAdd, 0.0, true, 1, 0);
        libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00037", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionScienceFacilityDestroyedQ_Init () {
    gt_TransmissionScienceFacilityDestroyedQ = TriggerCreate("gt_TransmissionScienceFacilityDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Repeating Nuke Timer
//--------------------------------------------------------------------------------------------------
bool gt_StartRepeatingNukeTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeAI);
    TimerStart(gv_nukeDropTimer, gv_nukeDropInterval, true, c_timeAI);
    TimerStart(gv_doubleNukeTimer, 300.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartRepeatingNukeTimer_Init () {
    gt_StartRepeatingNukeTimer = TriggerCreate("gt_StartRepeatingNukeTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Nuke Launched Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNukeLaunchedQ_Func (bool testConds, bool runActions) {
    int autoF8DFBB3C_val;
    int auto7EB028A2_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization
    lv_random = 0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((gv_nukeCounter < 5)) {
        autoF8DFBB3C_val = gv_nukeCounter;
        if (autoF8DFBB3C_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00107", c_transmissionDurationAdd, 0.0, true, 1, 0);
            TriggerExecute(gt_NukeReticleExplanation, true, false);
        }
        else if (autoF8DFBB3C_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00111", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (autoF8DFBB3C_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00109", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (autoF8DFBB3C_val == 4) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00114", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else {
        }
    }
    else {
        lv_random = RandomInt(1, 3);
        auto7EB028A2_val = lv_random;
        if (auto7EB028A2_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00113", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (auto7EB028A2_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00107", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else if (auto7EB028A2_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00110", c_transmissionDurationAdd, 0.0, true, 1, 0);
        }
        else {
        }
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNukeLaunchedQ_Init () {
    gt_TransmissionNukeLaunchedQ = TriggerCreate("gt_TransmissionNukeLaunchedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Reticle Explanation
//--------------------------------------------------------------------------------------------------
bool gt_NukeReticleExplanation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1)) {
        return true;
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00170", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeReticleExplanation_Init () {
    gt_NukeReticleExplanation = TriggerCreate("gt_NukeReticleExplanation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_NukeTimerExpires_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    point lv_pos;
    point[4] lv_posCandidates;
    bool lv_spotGood;
    int lv_randomPoint;
    int lv_randomIndex;
    point lv_posArmy;
    point lv_posKerrigan;
    point lv_posBase;

    // Variable Initialization
    lv_pos = null;
    init_i = 0;
    while (init_i <= 3) {
        lv_posCandidates[init_i] = null;
        init_i = init_i + 1;
    }
    lv_spotGood = false;
    lv_randomPoint = 0;
    lv_randomIndex = 0;
    lv_posArmy = null;
    lv_posKerrigan = null;
    lv_posBase = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_NukeDropLogic, true, false);
    if ((libHots_gf_DifficultyValueSwarmBoolean(false, false, true) == true) && (TimerGetRemaining(gv_doubleNukeTimer) == 0.0) && (RandomInt(1, 2) == 1)) {
        Wait(RandomInt(20, 25), c_timeGame);
        TriggerExecute(gt_NukeDropLogic, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeTimerExpires_Init () {
    gt_NukeTimerExpires = TriggerCreate("gt_NukeTimerExpires_Func");
    TriggerAddEventTimer(gt_NukeTimerExpires, gv_nukeDropTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Drop Logic
//--------------------------------------------------------------------------------------------------
bool gt_NukeDropLogic_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    point lv_pos;
    point[4] lv_posCandidates;
    bool lv_spotGood;
    int lv_randomPoint;
    int lv_randomIndex;
    point lv_posArmy;
    point lv_posKerrigan;
    point lv_posBase;

    // Variable Initialization
    lv_pos = null;
    init_i = 0;
    while (init_i <= 3) {
        lv_posCandidates[init_i] = null;
        init_i = init_i + 1;
    }
    lv_spotGood = false;
    lv_randomPoint = 0;
    lv_randomIndex = 0;
    lv_posArmy = null;
    lv_posKerrigan = null;
    lv_posBase = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_posArmy = gf_NextNukeLocationArmy();
    lv_posKerrigan = gf_NextNukeLocationKerrigan();
    lv_posBase = gf_NextNukeLocationBase();
    lv_randomIndex = RandomInt(1, 5);
    if ((lv_randomIndex <= 3)) {
        lv_posCandidates[1] = lv_posArmy;
        lv_posCandidates[2] = lv_posKerrigan;
        lv_posCandidates[3] = lv_posBase;
    }
    else if ((lv_randomIndex <= 4)) {
        lv_posCandidates[1] = lv_posKerrigan;
        lv_posCandidates[2] = lv_posArmy;
        lv_posCandidates[3] = lv_posBase;
    }
    else if ((lv_randomIndex <= 5)) {
        lv_posCandidates[1] = lv_posBase;
        lv_posCandidates[2] = lv_posArmy;
        lv_posCandidates[3] = lv_posKerrigan;
    }
    IntLoopBegin(1, 3);
    while (!IntLoopDone()) {
        if ((lv_posCandidates[IntLoopCurrent()] != null)) {
            gf_DropNuke(lv_posCandidates[IntLoopCurrent()]);
            return true;
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeDropLogic_Init () {
    gt_NukeDropLogic = TriggerCreate("gt_NukeDropLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping - Tactical Ops Center
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingTacticalOpsCenter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(339)), 8.0), 15.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(96)), 12.0), 15.0, false);
    UnitBehaviorAdd(gv_tacOpsCenter, "SensorTowerRadar", gv_tacOpsCenter, 1);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_tacOpsCenter), StringExternal("Param/Value/0FA570BF"));
    gv_tacOpsCenterPing = PingLastCreated();
    libSwaC_gf_AddRemoveObjectiveRePing(PingLastCreated(), true, 600.0, 300.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingTacticalOpsCenter_Init () {
    gt_CreatePingTacticalOpsCenter = TriggerCreate("gt_CreatePingTacticalOpsCenter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge - Drop Pod Defenses
//--------------------------------------------------------------------------------------------------
bool gt_BridgeDropPodDefenses_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionTacOpsDropPodDefenseQ, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(18), 0.0, false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        while (!((UnitGetPropertyFixed(UnitFromId(314), c_unitPropLifePercent, c_unitPropCurrent) <= 85.0))) {
            Wait(1.0, c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
        libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(32)), UnitLastCreatedGroup(), false, gv_pLAYER_05_WARFIELDCitadel);
        Wait(1.25, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
        libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(42)), UnitLastCreatedGroup(), false, gv_pLAYER_05_WARFIELDCitadel);
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
        libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(43)), UnitLastCreatedGroup(), false, gv_pLAYER_05_WARFIELDCitadel);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeDropPodDefenses_Init () {
    gt_BridgeDropPodDefenses = TriggerCreate("gt_BridgeDropPodDefenses_Func");
    TriggerAddEventUnitRegion(gt_BridgeDropPodDefenses, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: TacOps Drop Pod Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTacOpsDropPodDefenseQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00042", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTacOpsDropPodDefenseQ_Init () {
    gt_TransmissionTacOpsDropPodDefenseQ = TriggerCreate("gt_TransmissionTacOpsDropPodDefenseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss - Damaged / Boss Events
//--------------------------------------------------------------------------------------------------
bool gt_BossDamagedBossEvents_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_tacOpsCenter, c_unitPropLifePercent, c_unitPropCurrent) <= libHots_gf_DifficultyValueFixed2(80.0, 80.0, 85.0))) {
        TriggerExecute(gt_BossDropPodDefense, true, false);
        if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
            TriggerExecute(gt_TransmissionRepairTacOpsQ, true, false);
        }
        else {
        }
    }
    else {
    }
    if ((UnitGetPropertyFixed(gv_tacOpsCenter, c_unitPropLifePercent, c_unitPropCurrent) <= libHots_gf_DifficultyValueFixed2(45.0, 45.0, 55.0))) {
        TriggerExecute(gt_TransmissionBossLastDitchNukeQ, true, false);
    }
    else {
    }
    if ((UnitGetPropertyFixed(gv_tacOpsCenter, c_unitPropLifePercent, c_unitPropCurrent) <= 8.0)) {
        TriggerExecute(gt_BossWarfieldRetreats, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossDamagedBossEvents_Init () {
    gt_BossDamagedBossEvents = TriggerCreate("gt_BossDamagedBossEvents_Func");
    TriggerAddEventUnitProperty(gt_BossDamagedBossEvents, UnitRefFromVariable("gv_tacOpsCenter"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss - Warfield Retreats
//--------------------------------------------------------------------------------------------------
bool gt_BossWarfieldRetreats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(108), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(242)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("Medivac_Load", -1), PlayerGroupAll(), PointFromId(242), 0.0, 100.0, 0.0);
    UnitRemove(UnitFromId(108));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossWarfieldRetreats_Init () {
    gt_BossWarfieldRetreats = TriggerCreate("gt_BossWarfieldRetreats_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss - Drop Pod Defense
//--------------------------------------------------------------------------------------------------
bool gt_BossDropPodDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropGroup01;
    unitgroup lv_dropGroup02;
    unitgroup lv_dropGroup03;

    // Variable Initialization
    lv_dropGroup01 = UnitGroupEmpty();
    lv_dropGroup02 = UnitGroupEmpty();
    lv_dropGroup03 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup01);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup01);
    libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(33)), lv_dropGroup01, false, gv_pLAYER_05_WARFIELDCitadel);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup02);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup02);
    libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(34)), lv_dropGroup02, false, gv_pLAYER_05_WARFIELDCitadel);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        Wait(0.5, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup03);
        libSwaC_gf_CreateDropPod(0, RegionGetCenter(RegionFromId(46)), lv_dropGroup03, false, gv_pLAYER_05_WARFIELDCitadel);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossDropPodDefense_Init () {
    gt_BossDropPodDefense = TriggerCreate("gt_BossDropPodDefense_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Repair Tac Ops!! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRepairTacOpsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BossRepairTacOpsCenter, true, false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00046", c_transmissionDurationAdd, 0.0, false, 1, 0);
    gv_currentTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRepairTacOpsQ_Init () {
    gt_TransmissionRepairTacOpsQ = TriggerCreate("gt_TransmissionRepairTacOpsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss - Repair Tac Ops Center
//--------------------------------------------------------------------------------------------------
bool gt_BossRepairTacOpsCenter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_sCVGroup01;
    unitgroup lv_sCVGroup02;

    // Variable Initialization
    lv_sCVGroup01 = UnitGroupEmpty();
    lv_sCVGroup02 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(2, "SCV", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    UnitGroupAddUnitGroup(lv_sCVGroup01, UnitLastCreatedGroup());
    UnitGroupIssueOrder(lv_sCVGroup01, OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    libSwaC_gf_CreateDropPod(0, PointFromId(312), lv_sCVGroup01, false, gv_pLAYER_05_WARFIELDCitadel);
    Wait(0.75, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "SCV", c_unitCreateIgnorePlacement, gv_pLAYER_05_WARFIELDCitadel, PointFromId(472));
    UnitGroupAddUnitGroup(lv_sCVGroup02, UnitLastCreatedGroup());
    UnitGroupIssueOrder(lv_sCVGroup02, OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    libSwaC_gf_CreateDropPod(0, PointFromId(252), lv_sCVGroup02, false, gv_pLAYER_05_WARFIELDCitadel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossRepairTacOpsCenter_Init () {
    gt_BossRepairTacOpsCenter = TriggerCreate("gt_BossRepairTacOpsCenter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Bridge - Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBridgeTauntQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropgroup;

    // Variable Initialization
    lv_dropgroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00032", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBridgeTauntQ_Init () {
    gt_TransmissionBridgeTauntQ = TriggerCreate("gt_TransmissionBridgeTauntQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionBridgeTauntQ, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Boss - Banelings^3 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBossBanelings3Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup("Baneling", gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 10) || (UnitGroupCount(UnitGroup("HotSSplitterlingBig", gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 10) || (UnitGroupCount(UnitGroup("HotSSplitterlingMedium", gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 10) || (UnitGroupCount(UnitGroup("HotSSplitterlingSmall", gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 10) || (UnitGroupCount(UnitGroup("HotSHunter", gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 10)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if (((UnitGroupCount(UnitGroup("MengskMarine", c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Marine", c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00054", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00047", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBossBanelings3Q_Init () {
    gt_TransmissionBossBanelings3Q = TriggerCreate("gt_TransmissionBossBanelings3Q_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionBossBanelings3Q, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Boss - Last Ditch Nuke Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBossLastDitchNukeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((PlayerDifficulty(1) == 3) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_currentTransmission);
    gf_DropNuke(PointFromId(584));
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00052", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBossLastDitchNukeQ_Init () {
    gt_TransmissionBossLastDitchNukeQ = TriggerCreate("gt_TransmissionBossLastDitchNukeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/FFDEE948"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Kerrigan Dies Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganDiesTauntQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    if ((gv_kerriganDieTauntedBefore == false)) {
        gv_kerriganDieTauntedBefore = true;
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00020", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    else {
        libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00023", c_transmissionDurationAdd, 0.0, true, 1, 0);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    while (!((UnitIsAlive(gv_tHEONEKERRIGAN) == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_TransmissionKerriganRevivesTauntQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganDiesTauntQ_Init () {
    gt_TransmissionKerriganDiesTauntQ = TriggerCreate("gt_TransmissionKerriganDiesTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Kerrigan Revives Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganRevivesTauntQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00021", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00022", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganRevivesTauntQ_Init () {
    gt_TransmissionKerriganRevivesTauntQ = TriggerCreate("gt_TransmissionKerriganRevivesTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: At Main Bridge Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAtMainBridgeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00018", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAtMainBridgeQ_Init () {
    gt_TransmissionAtMainBridgeQ = TriggerCreate("gt_TransmissionAtMainBridgeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Bridge - Ghost Squads Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBridgeGhostSquadsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00030", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBridgeGhostSquadsQ_Init () {
    gt_TransmissionBridgeGhostSquadsQ = TriggerCreate("gt_TransmissionBridgeGhostSquadsQ_Func");
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionBridgeGhostSquadsQ, UnitRefFromUnit(UnitFromId(281)));
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionBridgeGhostSquadsQ, UnitRefFromUnit(UnitFromId(297)));
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionBridgeGhostSquadsQ, UnitRefFromUnit(UnitFromId(410)));
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionBridgeGhostSquadsQ, UnitRefFromUnit(UnitFromId(13)));
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionBridgeGhostSquadsQ, UnitRefFromUnit(UnitFromId(1109)));
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionBridgeGhostSquadsQ, UnitRefFromUnit(UnitFromId(995)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_StartAIAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_runall();
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIAttackWaves_Init () {
    gt_StartAIAttackWaves = TriggerCreate("gt_StartAIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipWeaponsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(240.0, c_timeAI);
    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "TerranShipArmorsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Unlimited Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIUnlimitedResources_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_dominionPlayerSlots);
    while (!PlayerGroupLoopDone()) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 50000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 50000);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUnlimitedResources_Init () {
    gt_AIUnlimitedResources = TriggerCreate("gt_AIUnlimitedResources_Func");
    TriggerAddEventTimePeriodic(gt_AIUnlimitedResources, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Scanner Sweep (NW)
//--------------------------------------------------------------------------------------------------
bool gt_DominionScannerSweepNW_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        if ((RegionContainsPoint(RegionFromId(52), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            PlayerCreateEffectPoint(gv_pLAYER_05_WARFIELDCitadel, "ScannerSweep", PointWithOffsetPolar(CameraGetTarget(gv_pLAYER_01_USER), RandomFixed(2.0, 13.0), libNtve_gf_RandomAngle()));
        }
        else {
            PlayerCreateEffectPoint(gv_pLAYER_05_WARFIELDCitadel, "ScannerSweep", RegionRandomPoint(RegionCircle(PointFromId(837), 6.0)));
        }
    }
    else {
        PlayerCreateEffectPoint(gv_pLAYER_05_WARFIELDCitadel, "ScannerSweep", RegionRandomPoint(RegionCircle(PointFromId(935), 6.0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionScannerSweepNW_Init () {
    gt_DominionScannerSweepNW = TriggerCreate("gt_DominionScannerSweepNW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Scanner Sweep (SE)
//--------------------------------------------------------------------------------------------------
bool gt_DominionScannerSweepSE_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        if ((RegionContainsPoint(RegionFromId(52), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            PlayerCreateEffectPoint(gv_pLAYER_05_WARFIELDCitadel, "ScannerSweep", PointWithOffsetPolar(CameraGetTarget(gv_pLAYER_01_USER), RandomFixed(2.0, 13.0), libNtve_gf_RandomAngle()));
        }
        else {
            PlayerCreateEffectPoint(gv_pLAYER_05_WARFIELDCitadel, "ScannerSweep", RegionRandomPoint(RegionCircle(PointFromId(837), 6.0)));
        }
    }
    else {
        PlayerCreateEffectPoint(gv_pLAYER_05_WARFIELDCitadel, "ScannerSweep", RegionRandomPoint(RegionCircle(PointFromId(936), 6.0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionScannerSweepSE_Init () {
    gt_DominionScannerSweepSE = TriggerCreate("gt_DominionScannerSweepSE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: AI Waves 1 - Assault Teams Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAIWaves1AssaultTeamsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(1);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(96), "zMission_Char03|Line00004", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAIWaves1AssaultTeamsQ_Init () {
    gt_TransmissionAIWaves1AssaultTeamsQ = TriggerCreate("gt_TransmissionAIWaves1AssaultTeamsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Sneak Attack Structures
//--------------------------------------------------------------------------------------------------
bool gt_AchievementSneakAttackStructures_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZChar03_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementSneakAttackStructures_Init () {
    gt_AchievementSneakAttackStructures = TriggerCreate("gt_AchievementSneakAttackStructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Timed Run N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimedRunNH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_speedRunTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZChar03_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimedRunNH_Init () {
    gt_AchievementTimedRunNH = TriggerCreate("gt_AchievementTimedRunNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy PFort H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyPFortH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_timedAttackTimer) > 0.0))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Char3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyPFortH_Init () {
    gt_AchievementDestroyPFortH = TriggerCreate("gt_AchievementDestroyPFortH_Func");
    TriggerEnable(gt_AchievementDestroyPFortH, false);
    TriggerAddEventUnitDied(gt_AchievementDestroyPFortH, UnitRefFromUnit(UnitFromId(314)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sneak Attack Structure Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SneakAttackStructureDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, 4) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(gt_ObjectiveDestroyStuffComplete) == true)) {
        gv_sneakAttackStructuresDestroyed += 1;
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    if ((gv_sneakAttackStructuresDestroyed >= 20)) {
        TriggerExecute(gt_AchievementSneakAttackStructures, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SneakAttackStructureDestroyed_Init () {
    gt_SneakAttackStructureDestroyed = TriggerCreate("gt_SneakAttackStructureDestroyed_Func");
    TriggerAddEventUnitDied(gt_SneakAttackStructureDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Killed By Nukes
//--------------------------------------------------------------------------------------------------
bool gt_ZergKilledByNukes_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Larva"))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == gv_nukeUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergKilledByNukes += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergKilledByNukes_Init () {
    gt_ZergKilledByNukes = TriggerCreate("gt_ZergKilledByNukes_Func");
    TriggerAddEventUnitDied(gt_ZergKilledByNukes, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/1721ABFA"), 0);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDies_Init () {
    gt_DefeatBaseDies = TriggerCreate("gt_DefeatBaseDies_Func");
    TriggerEnable(gt_DefeatBaseDies, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDies, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Tac Ops Center
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyTacOpsCenter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    Wait(2.0, c_timeGame);
    UnitKill(UnitFromId(224));
    Wait(8.0, c_timeGame);
    UnitKill(UnitFromId(96));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyTacOpsCenter_Init () {
    gt_VictoryDestroyTacOpsCenter = TriggerCreate("gt_VictoryDestroyTacOpsCenter_Func");
    TriggerAddEventUnitDied(gt_VictoryDestroyTacOpsCenter, UnitRefFromVariable("gv_tacOpsCenter"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TimerPause(gv_speedRunTimer, true);
    TriggerEnable(gt_BossRepairTacOpsCenter, false);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEKERRIGAN, true);
    TriggerExecute(gt_ObjectiveDestroyTacOpsComplete, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objective_Primary_TacOps) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZChar03_1", gv_pLAYER_01_USER);
    }
    else {
    }
    TriggerExecute(gt_AchievementTimedRunNH, true, false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B3CDD0B4"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_tHEONEKERRIGAN, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0BF6EE9D"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/50F5D1AD"), IntToText(gv_zergKilledByNukes));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F6A02474"), IntToText(gv_sneakAttackStructuresDestroyed));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Stuff Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyStuffCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar03Objective3");
    gv_objective_Primary_DestroyStuff = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyStuffCreate_Init () {
    gt_ObjectiveDestroyStuffCreate = TriggerCreate("gt_ObjectiveDestroyStuffCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Stuff Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyStuffComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyStuffCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar03Objective3", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyStuffComplete_Init () {
    gt_ObjectiveDestroyStuffComplete = TriggerCreate("gt_ObjectiveDestroyStuffComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Tac Ops Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTacOpsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar03Objective1");
    gv_objective_Primary_TacOps = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTacOpsCreate_Init () {
    gt_ObjectiveDestroyTacOpsCreate = TriggerCreate("gt_ObjectiveDestroyTacOpsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Tac Ops Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTacOpsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyTacOpsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar03Objective1", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTacOpsComplete_Init () {
    gt_ObjectiveDestroyTacOpsComplete = TriggerCreate("gt_ObjectiveDestroyTacOpsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Science Facilities Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyScienceFacilitiesCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZChar03Objective4");
    gv_objective_Bonus_DestroySciFac = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZChar03Objective4", gv_scienceFacilitiesDestroyed, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyScienceFacilitiesCreate_Init () {
    gt_ObjectiveDestroyScienceFacilitiesCreate = TriggerCreate("gt_ObjectiveDestroyScienceFacilitiesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Science Facilities Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyScienceFacilitiesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyScienceFacilitiesCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZChar03Objective4", 2);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyScienceFacilitiesComplete_Init () {
    gt_ObjectiveDestroyScienceFacilitiesComplete = TriggerCreate("gt_ObjectiveDestroyScienceFacilitiesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    UnitPauseAll(true);
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", gv_pLAYER_09_ZAGARA, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_09_ZAGARA, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(90));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(349));
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ChangeUnitDamage(UnitFromId(115), 0, 1);
    UnitGroupLoopBegin(UnitGroup("MissileTurret", gv_pLAYER_05_WARFIELDCitadel, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CreepModify(UnitGetPosition(UnitFromId(512)), 30.0, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone1;
    unit lv_drone2;
    point lv_tempPosition;

    // Variable Initialization
    lv_drone1 = null;
    lv_drone2 = null;
    lv_tempPosition = null;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1041), 0.0, -1, 10.0, true);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerExecute(gt_IntroFrontGate, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Char03_CS_Open_Part1", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introZergSound = SoundLastPlayed();
    Wait(1.0, c_timeGame);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 80.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zBriefing_Char03|Line00040", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1042), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char03|Line00042", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zBriefing_Char03|Line00042", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerStop(gt_IntroFrontGate);
    SoundPlay(SoundLink("Char03_CS_Open_Part2", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introBaseSound = SoundLastPlayed();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1347), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1348), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char03|Line00043", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(108)), c_animNameDefault, "Stand Listen", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zBriefing_Char03|Line00043", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(1443));
    lv_drone1 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, lv_drone1);
    UnitIssueOrder(lv_drone1, OrderTargetingPoint(AbilityCommand("ZergBuild", 0), PointFromId(62)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(1021));
    lv_drone2 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, lv_drone2);
    UnitIssueOrder(lv_drone2, OrderTargetingPoint(AbilityCommand("ZergBuild", 0), PointFromId(64)), c_orderQueueReplace);
    SoundStop(gv_introBaseSound, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(131), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(417), 5.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Char03|Line00044", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zBriefing_Char03|Line00045", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Char03|Line00045", true), c_soundIndexAny))/2), c_timeGame);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_introBaseUnhidden = true;
    UnitPauseAll(false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        lv_tempPosition = UnitGetPosition(UnitGroupLoopCurrent());
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(lv_tempPosition, 6.0, 225.0), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPosition), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1043)), c_orderQueueAddToEnd);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(gv_tHEONEKERRIGAN, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1446), 0.0, -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 1.5;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroFrontGate);
    if ((gv_introCinematicCompleted == false) && (gv_introMusicFinished == false)) {
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        TriggerExecute(gt_IntroMusicSkipped, true, false);
    }
    else {
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetPropertyFixed(UnitFromId(115), c_unitPropLifePercent, 100.0);
    libNtve_gf_ChangeUnitDamage(UnitFromId(115), 0, 0);
    UnitPauseAll(false);
    if ((gv_introBaseUnhidden == false)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_09_ZAGARA, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed")) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_cinematicHiddenUnits);
        while (!UnitGroupLoopDone()) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    CreepModify(UnitGetPosition(UnitFromId(512)), 8.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(943)), 8.0, true, false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    SoundStop(gv_introZergSound, true);
    SoundStop(gv_introBaseSound, true);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    cai_startall();
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        gv_inCinematic = false;
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1446)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    TriggerExecute(gt_StartGameStage01, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZChar03MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicFinished = true;
    lv_soundtrack = "ZChar03MusicAlt2";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar03MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music Skipped
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusicSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroMusic);
    lv_soundtrack = "ZChar03MusicAlt2";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar03MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusicSkipped_Init () {
    gt_IntroMusicSkipped = TriggerCreate("gt_IntroMusicSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Front Gate
//--------------------------------------------------------------------------------------------------
bool gt_IntroFrontGate_Func (bool testConds, bool runActions) {
    int autoC1373EA6_n;
    int autoC1373EA6_i;
    int auto97FA1FF4_n;
    int auto97FA1FF4_i;
    int auto25D2C32D_n;
    int auto25D2C32D_i;
    int autoBD3A88AA_n;
    int autoBD3A88AA_i;
    int auto4CD0F950_n;
    int auto4CD0F950_i;
    int auto91A6EB44_n;
    int auto91A6EB44_i;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_WARFIELDOutpost, PointFromId(1009));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_WARFIELDOutpost, PointFromId(1013));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_WARFIELDOutpost, PointFromId(1014));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_WARFIELDOutpost, PointFromId(1019));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Ghost", 0, gv_pLAYER_02_WARFIELDOutpost, PointFromId(1083));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "SiegeTankSieged", 0, gv_pLAYER_02_WARFIELDOutpost, PointFromId(1115));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "SiegeTankSieged", 0, gv_pLAYER_02_WARFIELDOutpost, PointFromId(1117));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    autoC1373EA6_n = 12;
    autoC1373EA6_i = 1;
    while (autoC1373EA6_i <= autoC1373EA6_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(47)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(115)), c_orderQueueReplace);
        autoC1373EA6_i = autoC1373EA6_i + 1;
    }
    Wait(1.0, c_timeGame);
    auto97FA1FF4_n = 3;
    auto97FA1FF4_i = 1;
    while (auto97FA1FF4_i <= auto97FA1FF4_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(8)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(115)), c_orderQueueReplace);
        auto97FA1FF4_i = auto97FA1FF4_i + 1;
    }
    auto25D2C32D_n = 4;
    auto25D2C32D_i = 1;
    while (auto25D2C32D_i <= auto25D2C32D_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(41)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(115)), c_orderQueueReplace);
        auto25D2C32D_i = auto25D2C32D_i + 1;
    }
    Wait(2.0, c_timeGame);
    autoBD3A88AA_n = 6;
    autoBD3A88AA_i = 1;
    while (autoBD3A88AA_i <= autoBD3A88AA_n) {
        auto4CD0F950_n = 5;
        auto4CD0F950_i = 1;
        while (auto4CD0F950_i <= auto4CD0F950_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(8)));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(115)), c_orderQueueReplace);
            auto4CD0F950_i = auto4CD0F950_i + 1;
        }
        auto91A6EB44_n = 4;
        auto91A6EB44_i = 1;
        while (auto91A6EB44_i <= auto91A6EB44_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(41)));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(115)), c_orderQueueReplace);
            auto91A6EB44_i = auto91A6EB44_i + 1;
        }
        Wait(2.0, c_timeGame);
        autoBD3A88AA_i = autoBD3A88AA_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroFrontGate_Init () {
    gt_IntroFrontGate = TriggerCreate("gt_IntroFrontGate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/63A31360"));
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, 0);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_timedAttackStarted = true;
    UnitPauseAll(true);
    AITimePause(true);
    libNtve_gf_ShowHideUnit(gv_tHEONEKERRIGAN, false);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_midCinePlayerUnits);
    UnitGroupRemove(gv_midCinePlayerUnits, gv_tHEONEKERRIGAN);
    UnitGroupLoopBegin(gv_midCinePlayerUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_WARFIELDCitadel, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_09_ZAGARA, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", gv_pLAYER_09_ZAGARA, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ChangeUnitDamage(UnitFromId(110), 0, 1);
    libNtve_gf_ChangeUnitDamage(UnitFromId(486), 0, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(57), 0.0, -1, 10, true);
    TriggerExecute(gt_MidSpawnZergForces, true, false);
    SoundPlay(SoundLink("Ghost_NukeLaunch", -1), PlayerGroupAll(), 75.0, 0.0);
    gv_midNukeLaunch = SoundLastPlayed();
    SoundPlay(SoundLink("Ghost_NukeSeek", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midNukeSeek = SoundLastPlayed();
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(113), 10.0, -1, 10, true);
    TriggerExecute(gt_MidDropNukeonZergForces, true, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(108)), c_animNameDefault, "Stand Victory", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    libSwaC_gf_SendTransmissionCampaign(UnitFromId(108), "zMission_Char03|Line00048", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_MidDropNukeonZergBase, true, false);
    Wait(7.0, c_timeGame);
    TriggerExecute(gt_MidBaseZergForces, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(394), 0.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 1.0, 1.0, 4.0);
    Wait(6.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1244), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char03|Line00145", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char03|Line00161", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.1);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00145", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00161", c_transmissionDurationAdd, 0.0, true, 1, 0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(39), 0.0, -1, 10, true);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00162", c_transmissionDurationAdd, 0.0, true, 1, 0);
    TriggerExecute(gt_MidRecreateZergBase, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(818), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1243), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char03|Line00166", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char03|Line00147", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    TriggerExecute(gt_MidAberrationIntro, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00166", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00147", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00165", c_transmissionDurationAdd, 0.0, false, 1, 0);
    Wait(4.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_09_ZAGARA, RegionFromId(52), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        Wait(0.1, c_timeGame);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_09_ZAGARA, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidSpawnZergForces);
    TriggerStop(gt_MidDropNukeonZergBase);
    TriggerStop(gt_MidDropNukeonZergForces);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidAberrationIntro);
    TriggerStop(gt_MidSpawnZergForces);
    TriggerStop(gt_MidDropNukeonZergBase);
    TriggerStop(gt_MidDropNukeonZergForces);
    SoundStop(gv_midNukeLaunch, true);
    SoundStop(gv_midNukeSeek, true);
    if ((gv_introCinematicCompleted == false) && (gv_midMusicFinished == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
    }
    CameraShakeStop(gv_pLAYER_01_USER);
    gv_midComplete = true;
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitKill(UnitFromId(115));
    UnitGroupLoopBegin(gv_frontLineUnits);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_MidRecreateZergBase, true, false);
    UnitPauseAll(false);
    UnitSetPosition(gv_tHEONEKERRIGAN, PointFromId(103), false);
    libNtve_gf_ShowHideUnit(gv_tHEONEKERRIGAN, true);
    UnitIssueOrder(gv_tHEONEKERRIGAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_09_ZAGARA, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbomination", 0, gv_pLAYER_01_USER, PointFromId(975));
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbomination", 0, gv_pLAYER_01_USER, PointFromId(982));
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbomination", 0, gv_pLAYER_01_USER, PointFromId(983));
    UnitIssueOrder(UnitFromId(1290), Order(AbilityCommand("ExtendingBridgeNEShort8Out", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1362), Order(AbilityCommand("ExtendingBridgeNWShort8Out", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(184), Order(AbilityCommand("DefensiveWall45GateLargeWestLowered", 0)), c_orderQueueReplace);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_02_WARFIELDOutpost, 5);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libSwaC_gf_ZerglingRespawnSetPrimaryHatchery(gv_midMainLair);
    if ((UnitIsAlive(gv_tHEONEKERRIGAN) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganReviveCocoon", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_midMainLair));
        libSwaC_gv_zS_HeroReviverKerrigan = UnitLastCreated();
        libSwaC_gf_ReviveHeroInstantly(0, false);
    }
    else {
    }
    libSwaC_gf_ResetHeroAbilityCooldowns(0);
    UnitSetPropertyFixed(gv_tHEONEKERRIGAN, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_tHEONEKERRIGAN, c_unitPropEnergyPercent, 100.0);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(60), RegionFromId(59));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_StartAIAttackWaves, true, false);
    Wait(0.5, c_timeGame);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1113)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Variable Initialization
    lv_soundtrack = null;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroMusic);
    TriggerStop(gt_IntroMusicSkipped);
    lv_soundtrack = "ZChar03MusicCutscene3_WarfieldGoesNuclear";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicFinished = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Spawn Zerg Forces
//--------------------------------------------------------------------------------------------------
bool gt_MidSpawnZergForces_Func (bool testConds, bool runActions) {
    int auto40E2626B_n;
    int auto40E2626B_i;
    int autoDA35D78E_n;
    int autoDA35D78E_i;
    int auto92D169BD_n;
    int auto92D169BD_i;
    int auto919BA470_n;
    int auto919BA470_i;
    int auto95E910B2_n;
    int auto95E910B2_i;
    int autoA78B3E63_n;
    int autoA78B3E63_i;
    int autoE150B94F_n;
    int autoE150B94F_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(115));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_WARFIELDOutpost, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_frontLineUnits, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    auto40E2626B_n = 50;
    auto40E2626B_i = 1;
    while (auto40E2626B_i <= auto40E2626B_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(38)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(461)), c_orderQueueReplace);
        auto40E2626B_i = auto40E2626B_i + 1;
    }
    autoDA35D78E_n = 15;
    autoDA35D78E_i = 1;
    while (autoDA35D78E_i <= autoDA35D78E_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(38)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(461)), c_orderQueueReplace);
        autoDA35D78E_i = autoDA35D78E_i + 1;
    }
    auto92D169BD_n = 16;
    auto92D169BD_i = 1;
    while (auto92D169BD_i <= auto92D169BD_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(461)), c_orderQueueReplace);
        auto92D169BD_i = auto92D169BD_i + 1;
    }
    auto919BA470_n = 15;
    auto919BA470_i = 1;
    while (auto919BA470_i <= auto919BA470_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(461)), c_orderQueueReplace);
        auto919BA470_i = auto919BA470_i + 1;
    }
    Wait(1.0, c_timeGame);
    auto95E910B2_n = 6;
    auto95E910B2_i = 1;
    while (auto95E910B2_i <= auto95E910B2_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(461)), c_orderQueueReplace);
        auto95E910B2_i = auto95E910B2_i + 1;
    }
    while (true) {
        autoA78B3E63_n = 8;
        autoA78B3E63_i = 1;
        while (autoA78B3E63_i <= autoA78B3E63_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(461)), c_orderQueueReplace);
            autoA78B3E63_i = autoA78B3E63_i + 1;
        }
        autoE150B94F_n = 4;
        autoE150B94F_i = 1;
        while (autoE150B94F_i <= autoE150B94F_n) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(11)));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(461)), c_orderQueueReplace);
            autoE150B94F_i = autoE150B94F_i + 1;
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSpawnZergForces_Init () {
    gt_MidSpawnZergForces = TriggerCreate("gt_MidSpawnZergForces_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Base Zerg Forces
//--------------------------------------------------------------------------------------------------
bool gt_MidBaseZergForces_Func (bool testConds, bool runActions) {
    int autoFEC043DF_n;
    int autoFEC043DF_i;
    int autoF4E786CF_n;
    int autoF4E786CF_i;

    // Variable Declarations
    unitgroup lv_zergGroup;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoFEC043DF_n = 20;
    autoFEC043DF_i = 1;
    while (autoFEC043DF_i <= autoFEC043DF_n) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_09_ZAGARA, RegionRandomPoint(RegionCircle(PointFromId(1176), 6.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        UnitCreate(1, "Zergling", 0, gv_pLAYER_09_ZAGARA, RegionRandomPoint(RegionCircle(PointFromId(1177), 6.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        UnitCreate(1, "Zergling", 0, gv_pLAYER_09_ZAGARA, RegionRandomPoint(RegionCircle(PointFromId(1178), 6.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        autoFEC043DF_i = autoFEC043DF_i + 1;
    }
    autoF4E786CF_n = 10;
    autoF4E786CF_i = 1;
    while (autoF4E786CF_i <= autoF4E786CF_n) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_09_ZAGARA, RegionRandomPoint(RegionCircle(PointFromId(1176), 6.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        UnitCreate(1, "Baneling", 0, gv_pLAYER_09_ZAGARA, RegionRandomPoint(RegionCircle(PointFromId(1177), 6.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        UnitCreate(1, "Baneling", 0, gv_pLAYER_09_ZAGARA, RegionRandomPoint(RegionCircle(PointFromId(1178), 6.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        autoF4E786CF_i = autoF4E786CF_i + 1;
    }
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(lv_zergGroup);
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1449)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBaseZergForces_Init () {
    gt_MidBaseZergForces = TriggerCreate("gt_MidBaseZergForces_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Drop Nuke on Zerg Forces
//--------------------------------------------------------------------------------------------------
bool gt_MidDropNukeonZergForces_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MidDropNukeAtPoint1(PointFromId(1055));
    Wait(0.5, c_timeGame);
    gf_MidDropNukeAtPoint1(PointFromId(1040));
    Wait(0.5, c_timeGame);
    gf_MidDropNukeAtPoint1(PointFromId(1056));
    Wait(0.5, c_timeGame);
    gf_MidDropNukeAtPoint1(PointFromId(1057));
    Wait(0.5, c_timeGame);
    gf_MidDropNukeAtPoint1(PointFromId(1058));
    Wait(2.0, c_timeGame);
    TriggerStop(gt_MidSpawnZergForces);
    Wait(4.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 1.0, 1.0, 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidDropNukeonZergForces_Init () {
    gt_MidDropNukeonZergForces = TriggerCreate("gt_MidDropNukeonZergForces_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Drop Nuke on Zerg Base
//--------------------------------------------------------------------------------------------------
bool gt_MidDropNukeonZergBase_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MidDropNukeAtPoint2(PointFromId(1176));
    Wait(0.5, c_timeGame);
    gf_MidDropNukeAtPoint2(PointFromId(1177));
    Wait(0.5, c_timeGame);
    gf_MidDropNukeAtPoint2(PointFromId(1178));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidDropNukeonZergBase_Init () {
    gt_MidDropNukeonZergBase = TriggerCreate("gt_MidDropNukeonZergBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Aberration Intro
//--------------------------------------------------------------------------------------------------
bool gt_MidAberrationIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aberration1;
    unit lv_aberration2;
    unit lv_aberration3;

    // Variable Initialization
    lv_aberration1 = null;
    lv_aberration2 = null;
    lv_aberration3 = null;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_09_ZAGARA, PointFromId(1065));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_aberration1 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_09_ZAGARA, PointFromId(1066));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_aberration2 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_09_ZAGARA, PointFromId(1072));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_aberration3 = UnitLastCreated();
    UnitIssueOrder(lv_aberration1, Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lv_aberration2, Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lv_aberration3, Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char03|Line00166", true), c_soundIndexAny))  + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char03|Line00147", true), c_soundIndexAny))), c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1061), 4.0, -1, 10.0, true);
    UnitIssueOrder(lv_aberration1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(975)), c_orderQueueReplace);
    UnitIssueOrder(lv_aberration1, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1177)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_aberration2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(982)), c_orderQueueReplace);
    UnitIssueOrder(lv_aberration2, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1177)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_aberration3, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(983)), c_orderQueueReplace);
    UnitIssueOrder(lv_aberration3, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1177)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAberrationIntro_Init () {
    gt_MidAberrationIntro = TriggerCreate("gt_MidAberrationIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Recreate Zerg Base
//--------------------------------------------------------------------------------------------------
bool gt_MidRecreateZergBase_Func (bool testConds, bool runActions) {
    int auto130E35B5_n;
    int auto130E35B5_i;
    int auto5F401B79_n;
    int auto5F401B79_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", gv_pLAYER_09_ZAGARA, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_09_ZAGARA, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Drone", gv_pLAYER_09_ZAGARA, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitRemove(UnitFromId(1114));
    libNtve_gf_CreateUnitsAtPoint2(1, "Lair", 0, gv_pLAYER_09_ZAGARA, RegionGetCenter(RegionFromId(1)));
    gv_midMainLair = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 83.0);
    libSwaC_gf_SpawnLarvaForHatchery(UnitLastCreated(), 3);
    libSwaC_gf_SetHatcheryRallyPoint(UnitLastCreated(), PointFromId(40));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hatchery", 0, gv_pLAYER_09_ZAGARA, RegionGetCenter(RegionFromId(16)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 84.0);
    libSwaC_gf_SpawnLarvaForHatchery(UnitLastCreated(), 3);
    libSwaC_gf_SetHatcheryRallyPoint(UnitLastCreated(), PointFromId(40));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpawningPool", 0, gv_pLAYER_09_ZAGARA, RegionGetCenter(RegionFromId(7)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 76.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Extractor", 0, gv_pLAYER_09_ZAGARA, RegionGetCenter(RegionFromId(45)));
    libNtve_gf_CreateUnitsAtPoint2(1, "EvolutionChamber", 0, gv_pLAYER_09_ZAGARA, RegionGetCenter(RegionFromId(26)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 77.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumor", 0, gv_pLAYER_09_ZAGARA, RegionGetCenter(RegionFromId(40)));
    CreepModify(UnitGetPosition(UnitLastCreated()), 10.0, true, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(467));
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(960));
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(990));
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(991));
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(1008));
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(911));
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(919));
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(1502));
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER_09_ZAGARA, PointFromId(1503));
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_pLAYER_09_ZAGARA, PointFromId(1094));
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_pLAYER_09_ZAGARA, PointFromId(1091));
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_pLAYER_09_ZAGARA, PointFromId(1017));
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_pLAYER_09_ZAGARA, PointFromId(1504));
    libNtve_gf_CreateUnitsAtPoint2(1, "Queen", 0, gv_pLAYER_09_ZAGARA, PointFromId(117));
    auto130E35B5_n = 5;
    auto130E35B5_i = 1;
    while (auto130E35B5_i <= auto130E35B5_n) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(36)), libNtve_gf_RandomAngle());
        UnitSetOwner(UnitLastCreated(), gv_pLAYER_09_ZAGARA, true);
        auto130E35B5_i = auto130E35B5_i + 1;
    }
    auto5F401B79_n = 5;
    auto5F401B79_i = 1;
    while (auto5F401B79_i <= auto5F401B79_n) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
        UnitSetOwner(UnitLastCreated(), gv_pLAYER_09_ZAGARA, true);
        auto5F401B79_i = auto5F401B79_i + 1;
    }
    if ((gv_midComplete == true)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_09_ZAGARA, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRecreateZergBase_Init () {
    gt_MidRecreateZergBase = TriggerCreate("gt_MidRecreateZergBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_timedAttackStarted = true;
    SoundStop(gv_secondaryAmbienceSound, true);
    libNtve_gf_KillModel(gv_nukeActor);
    GameDestroyEffects(PointFromId(584), 30.0, 0, "NukeDetonate");
    SoundStop(gv_nukeSeekSound, true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(gv_victoryHiddenUnitGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(108), false);
    libNtve_gf_PauseUnit(UnitFromId(108), true);
    UnitKill(UnitFromId(339));
    UnitKill(UnitFromId(224));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_WARFIELDCourtyard, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_WARFIELDCitadel, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PalletGas", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(79), 0.0, -1, 10.0, true);
    TriggerExecute(gt_VictoryZerg, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar03MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlay(SoundLink("Char03_CS_End_Win", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victorySound = gv_victorySound;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(0);
    if ((TriggerIsEnabled(gt_VictoryDestroyTacOpsCenter) == true)) {
        UnitKill(UnitFromId(96));
    }
    else {
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(38), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char03|Line00044", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Char03|Line00043", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Char03|Line00044", c_transmissionDurationAdd, 0.0, true, 1, 0);
    libSwaC_gf_SendTransmissionCampaign(gv_tHEONEKERRIGAN, "zMission_Char03|Line00043", c_transmissionDurationAdd, 0.0, true, 1, 0);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        lv_fadeDuration = 2.0;
    }
    else {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryZerg);
    SoundStop(gv_victorySound, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UnitPauseAll(true);
    UISetWorldVisible(PlayerGroupAll(), false);
    if ((libSwaC_gf_KerriganPhaseCheck(1) == true)) {
        libSwaC_gf_PlayCinematic("Zerg05 - Char Arc", true);
    }
    else {
        libSwaC_gf_PlayCinematic("Zerg06 - Char Arc Alt", true);
    }
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerg_Func (bool testConds, bool runActions) {
    int auto0652B265_n;
    int auto0652B265_i;
    int autoCB48E655_n;
    int autoCB48E655_i;
    int auto71964DFA_n;
    int auto71964DFA_i;
    int autoC22F326D_n;
    int autoC22F326D_i;

    // Variable Declarations
    unitgroup lv_middleAttackGroup;

    // Variable Initialization
    lv_middleAttackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0652B265_n = 2;
    auto0652B265_i = 1;
    while (auto0652B265_i <= auto0652B265_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(49)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1478)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(25)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1479)), c_orderQueueReplace);
        auto0652B265_i = auto0652B265_i + 1;
    }
    autoCB48E655_n = 5;
    autoCB48E655_i = 1;
    while (autoCB48E655_i <= autoCB48E655_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(49)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1478)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(25)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1479)), c_orderQueueReplace);
        autoCB48E655_i = autoCB48E655_i + 1;
    }
    auto71964DFA_n = 25;
    auto71964DFA_i = 1;
    while (auto71964DFA_i <= auto71964DFA_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(49)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1478)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(25)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1479)), c_orderQueueReplace);
        auto71964DFA_i = auto71964DFA_i + 1;
    }
    autoC22F326D_n = 50;
    autoC22F326D_i = 1;
    while (autoC22F326D_i <= autoC22F326D_n) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(24)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(37))), c_orderQueueReplace);
        UnitGroupAdd(lv_middleAttackGroup, UnitLastCreated());
        autoC22F326D_i = autoC22F326D_i + 1;
    }
    while (true) {
        libNtve_gf_CreateExplosionAtPoint(0, 0, RegionRandomPoint(RegionFromId(51)));
        if ((RandomInt(1, 2) == 1)) {
            CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.25, 0.25, 1.0);
        }
        else {
        }
        Wait(0.5, c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(0, 0, RegionRandomPoint(RegionFromId(51)));
        UnitGroupLoopBegin(lv_middleAttackGroup);
        while (!UnitGroupLoopDone()) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(37)) == true)) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(37))), c_orderQueueReplace);
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        Wait(0.5, c_timeGame);
        UnitGroupLoopBegin(lv_middleAttackGroup);
        while (!UnitGroupLoopDone()) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(37)) == true)) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(37))), c_orderQueueReplace);
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerg_Init () {
    gt_VictoryZerg = TriggerCreate("gt_VictoryZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_RemoveHarmless_Init();
    gt_PrepareKerriganRevive_Init();
    gt_DEBUGMidCine_Init();
    gt_StartGameStage01_Init();
    gt_StartingSequenceQ_Init();
    gt_StartGameStage02Q_Init();
    gt_StartTimedAttackTimer_Init();
    gt_CreatePingTimedAttackSpots_Init();
    gt_DominionDestroyedFrontLine_Init();
    gt_DominionDestroyedBottomExpansion_Init();
    gt_DominionDestroyedMissileTurret_Init();
    gt_ZagaraBuildPlayerBase_Init();
    gt_MakeZagaraStructureUntargetable_Init();
    gt_TransmissionZagaraBuildBase_Init();
    gt_TimedAttackTimerExpires_Init();
    gt_AllUnitsDestroyedProgresstoStage2_Init();
    gt_Reinforcements01_Init();
    gt_TransmissionReinforcements01Q_Init();
    gt_Reinforcements02_Init();
    gt_TransmissionReinforcements02Q_Init();
    gt_TransmissionNukeWarningQ_Init();
    gt_KerriganDiesinTimedAttack_Init();
    gt_TransmissionHoldTheLineQ_Init();
    gt_TransmissionFrontGateDamagedQ_Init();
    gt_TransmissionThorAggroQ_Init();
    gt_CourtyardDropPodDefense_Init();
    gt_ScientistsEvacRight_Init();
    gt_TransmissionRightEvacuationQ_Init();
    gt_ScientistEvacLeft_Init();
    gt_TransmissionLeftEvacuationQ_Init();
    gt_ExpansionDropPodDefense_Init();
    gt_ExpansionClearedDropDrones_Init();
    gt_TransmissionExpansionSecuredQ_Init();
    gt_BottomExpansionDropPodDefense_Init();
    gt_TransmissionBoneyardEnteredQ_Init();
    gt_BoneyardReinforcements_Init();
    gt_PlayerPressedAberrationButton_Init();
    gt_Transmission1AberrationQ_Init();
    gt_Transmission2AberrationsQ_Init();
    gt_TransmissionBoneyardZergQ_Init();
    gt_TerranBiomassReaction_Init();
    gt_IntroScienceFacilitiesObjectiveQ_Init();
    gt_TransmissionScienceFacilitiesIntro_Init();
    gt_ScienceFacilityDestroyed_Init();
    gt_TransmissionScienceFacilityDestroyedQ_Init();
    gt_StartRepeatingNukeTimer_Init();
    gt_TransmissionNukeLaunchedQ_Init();
    gt_NukeReticleExplanation_Init();
    gt_NukeTimerExpires_Init();
    gt_NukeDropLogic_Init();
    gt_CreatePingTacticalOpsCenter_Init();
    gt_BridgeDropPodDefenses_Init();
    gt_TransmissionTacOpsDropPodDefenseQ_Init();
    gt_BossDamagedBossEvents_Init();
    gt_BossWarfieldRetreats_Init();
    gt_BossDropPodDefense_Init();
    gt_TransmissionRepairTacOpsQ_Init();
    gt_BossRepairTacOpsCenter_Init();
    gt_TransmissionBridgeTauntQ_Init();
    gt_TransmissionBossBanelings3Q_Init();
    gt_TransmissionBossLastDitchNukeQ_Init();
    gt_TipMissionHelpQ_Init();
    gt_TransmissionKerriganDiesTauntQ_Init();
    gt_TransmissionKerriganRevivesTauntQ_Init();
    gt_TransmissionAtMainBridgeQ_Init();
    gt_TransmissionBridgeGhostSquadsQ_Init();
    gt_StartAIAttackWaves_Init();
    gt_AIUpgradesHard_Init();
    gt_AIUnlimitedResources_Init();
    gt_DominionScannerSweepNW_Init();
    gt_DominionScannerSweepSE_Init();
    gt_TransmissionAIWaves1AssaultTeamsQ_Init();
    gt_AchievementSneakAttackStructures_Init();
    gt_AchievementTimedRunNH_Init();
    gt_AchievementDestroyPFortH_Init();
    gt_SneakAttackStructureDestroyed_Init();
    gt_ZergKilledByNukes_Init();
    gt_DefeatBaseDies_Init();
    gt_VictoryDestroyTacOpsCenter_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDestroyStuffCreate_Init();
    gt_ObjectiveDestroyStuffComplete_Init();
    gt_ObjectiveDestroyTacOpsCreate_Init();
    gt_ObjectiveDestroyTacOpsComplete_Init();
    gt_ObjectiveDestroyScienceFacilitiesCreate_Init();
    gt_ObjectiveDestroyScienceFacilitiesComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroMusic_Init();
    gt_IntroMusicSkipped_Init();
    gt_IntroFrontGate_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidMusic_Init();
    gt_MidSpawnZergForces_Init();
    gt_MidBaseZergForces_Init();
    gt_MidDropNukeonZergForces_Init();
    gt_MidDropNukeonZergBase_Init();
    gt_MidAberrationIntro_Init();
    gt_MidRecreateZergBase_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerg_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
